// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyExecutionPoint policy execution point
//
// swagger:model PolicyExecutionPoint
type PolicyExecutionPoint struct {

	// Optional policy ID
	// Example: 1
	PolicyID string `json:"policy_id,omitempty"`

	// The ID of your authorization server (workspace)
	// Example: default
	ServerID string `json:"server_id,omitempty"`

	// String representation of the target's ID
	// Example: 1
	TargetFk string `json:"target_fk,omitempty"`

	// The ID of your tenant
	// Example: default
	TenantID string `json:"tenant_id,omitempty"`

	// String representation of the policy execution point type
	//
	// Policies can be assigned to different policy execution points. For example, you can create a
	// policy that you want to trigger while calls are made to your APIs. In this
	// case, the type of the policy execution point is `api`. While
	// choosing the policies that are applied for API calls, only those with the
	// `api` type are available.
	// Example: scope_client_assignment
	Type string `json:"type,omitempty"`
}

// Validate validates this policy execution point
func (m *PolicyExecutionPoint) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this policy execution point based on context it is used
func (m *PolicyExecutionPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyExecutionPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyExecutionPoint) UnmarshalBinary(b []byte) error {
	var res PolicyExecutionPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
