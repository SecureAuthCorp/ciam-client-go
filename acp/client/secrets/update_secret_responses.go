// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/acp/models"
)

// UpdateSecretReader is a Reader for the UpdateSecret structure.
type UpdateSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateSecretCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSecretUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateSecretUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateSecretTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSecretCreated creates a UpdateSecretCreated with default headers values
func NewUpdateSecretCreated() *UpdateSecretCreated {
	return &UpdateSecretCreated{}
}

/* UpdateSecretCreated describes a response with status code 201, with default header values.

Secret
*/
type UpdateSecretCreated struct {
	Payload *models.Secret
}

func (o *UpdateSecretCreated) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/secrets/{sid}][%d] updateSecretCreated  %+v", 201, o.Payload)
}
func (o *UpdateSecretCreated) GetPayload() *models.Secret {
	return o.Payload
}

func (o *UpdateSecretCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Secret)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretBadRequest creates a UpdateSecretBadRequest with default headers values
func NewUpdateSecretBadRequest() *UpdateSecretBadRequest {
	return &UpdateSecretBadRequest{}
}

/* UpdateSecretBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type UpdateSecretBadRequest struct {
	Payload *models.Error
}

func (o *UpdateSecretBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/secrets/{sid}][%d] updateSecretBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateSecretBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretUnauthorized creates a UpdateSecretUnauthorized with default headers values
func NewUpdateSecretUnauthorized() *UpdateSecretUnauthorized {
	return &UpdateSecretUnauthorized{}
}

/* UpdateSecretUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type UpdateSecretUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateSecretUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/secrets/{sid}][%d] updateSecretUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateSecretUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretForbidden creates a UpdateSecretForbidden with default headers values
func NewUpdateSecretForbidden() *UpdateSecretForbidden {
	return &UpdateSecretForbidden{}
}

/* UpdateSecretForbidden describes a response with status code 403, with default header values.

HttpError
*/
type UpdateSecretForbidden struct {
	Payload *models.Error
}

func (o *UpdateSecretForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/secrets/{sid}][%d] updateSecretForbidden  %+v", 403, o.Payload)
}
func (o *UpdateSecretForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretNotFound creates a UpdateSecretNotFound with default headers values
func NewUpdateSecretNotFound() *UpdateSecretNotFound {
	return &UpdateSecretNotFound{}
}

/* UpdateSecretNotFound describes a response with status code 404, with default header values.

HttpError
*/
type UpdateSecretNotFound struct {
	Payload *models.Error
}

func (o *UpdateSecretNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/secrets/{sid}][%d] updateSecretNotFound  %+v", 404, o.Payload)
}
func (o *UpdateSecretNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretUnprocessableEntity creates a UpdateSecretUnprocessableEntity with default headers values
func NewUpdateSecretUnprocessableEntity() *UpdateSecretUnprocessableEntity {
	return &UpdateSecretUnprocessableEntity{}
}

/* UpdateSecretUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type UpdateSecretUnprocessableEntity struct {
	Payload *models.Error
}

func (o *UpdateSecretUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/secrets/{sid}][%d] updateSecretUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *UpdateSecretUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretTooManyRequests creates a UpdateSecretTooManyRequests with default headers values
func NewUpdateSecretTooManyRequests() *UpdateSecretTooManyRequests {
	return &UpdateSecretTooManyRequests{}
}

/* UpdateSecretTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type UpdateSecretTooManyRequests struct {
	Payload *models.Error
}

func (o *UpdateSecretTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/secrets/{sid}][%d] updateSecretTooManyRequests  %+v", 429, o.Payload)
}
func (o *UpdateSecretTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
