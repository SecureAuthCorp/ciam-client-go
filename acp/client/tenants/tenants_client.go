// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tenants API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenants API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTenantCreated, error)

	DeleteRateLimit(params *DeleteRateLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRateLimitNoContent, error)

	DeleteTenant(params *DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTenantNoContent, error)

	ExportConfiguration(params *ExportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportConfigurationOK, error)

	ExportTenantConfiguration(params *ExportTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportTenantConfigurationOK, error)

	GetAdminTenant(params *GetAdminTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminTenantOK, error)

	GetTenant(params *GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantOK, error)

	GetTenantFeatures(params *GetTenantFeaturesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantFeaturesOK, error)

	ImportConfiguration(params *ImportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportConfigurationNoContent, error)

	ImportTenantConfiguration(params *ImportTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportTenantConfigurationNoContent, error)

	ListAdminTenants(params *ListAdminTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAdminTenantsOK, error)

	ListRateLimits(params *ListRateLimitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRateLimitsOK, error)

	ListTenants(params *ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTenantsOK, error)

	PatchConfiguration(params *PatchConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchConfigurationNoContent, error)

	PatchTenantConfiguration(params *PatchTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchTenantConfigurationNoContent, error)

	SetRateLimit(params *SetRateLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetRateLimitNoContent, error)

	SetTenantFeature(params *SetTenantFeatureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTenantFeatureNoContent, error)

	UpdateAdminTenant(params *UpdateAdminTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdminTenantOK, error)

	UpdateTenant(params *UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateTenant creates tenant

  Tenant must have unique id, if it's not provided will be generated.

Tenant name must be provided.

Tenant url is optional and if omitted, it is set to ACP deployment url with
appened id of a tenant, example: https://example.com/default.

When tenant is created, preconfigured authorization servers with default scopes,
services and oauth clients are automatically created underneath. See API response for more details.
*/
func (a *Client) CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTenant",
		Method:             "POST",
		PathPattern:        "/api/system/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRateLimit deletes rate limit

  Delete custom rate limit for a module per tenant.
*/
func (a *Client) DeleteRateLimit(params *DeleteRateLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRateLimitNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRateLimitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRateLimit",
		Method:             "DELETE",
		PathPattern:        "/api/admin/tenants/{tid}/rate-limits/{module}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRateLimitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRateLimitNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRateLimit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteTenant deletes tenant

  Deletes index in elasticsearch if exists as well.
*/
func (a *Client) DeleteTenant(params *DeleteTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTenantNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTenant",
		Method:             "DELETE",
		PathPattern:        "/api/system/tenants/{tid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTenantNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportConfiguration exports global tenants configuration

  Returns a JSON with all tenants and their configuration.

Customers that use the on-premise version of the ACP deployment can use the
global tenants' configuration export ACP REST API. The requirement to
have the on-premise deployment comes from the fact, that you need to be able to access the system
tenant of your deployment to be able to authenticate your client and get access token that allows
you to import the tenants configuration.

By default, a system tenant is created for you automatically and a client application with the
client credentials grant flow enabled is also provided. The ID of this client is `system` and the
client secret can be found in your ACP configuration file.

When requesting an access token, you should provide the `manage_configuration` scope as the one you
would like to request.
*/
func (a *Client) ExportConfiguration(params *ExportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportConfiguration",
		Method:             "GET",
		PathPattern:        "/api/system/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportTenantConfiguration exports tenant s configuration

  Returns a JSON with the configuration of the specified tenant.

With ACP system API, you can export a specified tenant's
configuration. You can, for example, move your tenant's configuration between different ACP deployments
using the export API and, then, import it to a different ACP deployment using the import API.
For example, a company that delivers its services to financial institutions and uses
ACP to protect their APIs, may want to export an Open Banking directive compliant
tenant's configuration from one of their deployments and import it the deployment of their customers.

To export your tenant configuration, your client application must have the `manage_configuration`
scope assigned. When requesting an access token, you should also provide this scope as the one you
would like to request.

Use the `tid` path parameter to specify which tenant is to have the configuration exported.
*/
func (a *Client) ExportTenantConfiguration(params *ExportTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportTenantConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportTenantConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportTenantConfiguration",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportTenantConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportTenantConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportTenantConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAdminTenant gets tenant

  Get tenant.
*/
func (a *Client) GetAdminTenant(params *GetAdminTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAdminTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAdminTenant",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdminTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdminTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAdminTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenant gets tenant

  Get tenant system api.
*/
func (a *Client) GetTenant(params *GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTenant",
		Method:             "GET",
		PathPattern:        "/api/system/tenants/{tid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTenantFeatures gets tenant features

  Returns a map of all feature flags and their values.
To be able to set a tenant feature flag, you need to use an access token issued for a system tenant and admin workspace.
*/
func (a *Client) GetTenantFeatures(params *GetTenantFeaturesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTenantFeatures",
		Method:             "GET",
		PathPattern:        "/api/admin/tenants/{tid}/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTenantFeaturesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportConfiguration imports global tenants configuration

  Allows to import a JSON file that contains all the tenants and their configuration.

Customers that use the on-premise version of the ACP deployment can use the
global tenants' configuration import ACP REST API. The requirement to
have the on-premise deployment comes from the fact, that you need to be able to access the system
tenant of your deployment to be able to authenticate your client and get access token that allows
you to import the tenants configuration.

By default, a system tenant is created for you automatically and a client application with the
client credentials grant flow enabled is also provided. The ID of this client is `system` and the
client secret can be found in your ACP configuration file.

When requesting an access token, you should provide the `manage_configuration` scope as the one you
would like to request.
*/
func (a *Client) ImportConfiguration(params *ImportConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importConfiguration",
		Method:             "PUT",
		PathPattern:        "/api/system/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportTenantConfiguration imports tenant configuration

  Allows to quickly import the specified tenant configuration.

With ACP system API, you can import a specific tenant's
configuration. You can, for example, move your tenant's configuration between different ACP deployments.
For example, a company that delivers its services to financial institutions and uses
ACP to protect their APIs, may want to import an Open Banking directive compliant
tenant's configuration from one of their deployments to the deployment of their customers.

To import your tenant configuration, your client application must have the `manage_configuration`
scope assigned. When requesting an access token, you should also provide this scope as the one you
would like to request.

Use the `tid` path parameter to specify which tenant is to have the configuration imported.
*/
func (a *Client) ImportTenantConfiguration(params *ImportTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportTenantConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportTenantConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "importTenantConfiguration",
		Method:             "PUT",
		PathPattern:        "/api/system/{tid}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportTenantConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportTenantConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importTenantConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAdminTenants lists tenants

  To be able to list tenants, you need to use an access token issued for a system tenant and admin workspace.
*/
func (a *Client) ListAdminTenants(params *ListAdminTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAdminTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAdminTenantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAdminTenants",
		Method:             "GET",
		PathPattern:        "/api/admin/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAdminTenantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAdminTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAdminTenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRateLimits lists rate limits

  List custom rate limits per tenant.
*/
func (a *Client) ListRateLimits(params *ListRateLimitsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRateLimitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRateLimitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRateLimits",
		Method:             "GET",
		PathPattern:        "/api/admin/tenants/{tid}/rate-limits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRateLimitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRateLimitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRateLimits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListTenants lists tenants

  List tenants.
*/
func (a *Client) ListTenants(params *ListTenantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTenantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTenantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTenants",
		Method:             "GET",
		PathPattern:        "/api/system/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTenantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTenantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTenants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchConfiguration patches configuration

  Patch tenant configuration using RFC 6902 JSON Patch.
*/
func (a *Client) PatchConfiguration(params *PatchConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchConfiguration",
		Method:             "PATCH",
		PathPattern:        "/api/system/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchTenantConfiguration patches tenant configuration

  Patch tenant configuration using RFC 6902 JSON Patch.
*/
func (a *Client) PatchTenantConfiguration(params *PatchTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchTenantConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchTenantConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchTenantConfiguration",
		Method:             "PATCH",
		PathPattern:        "/api/system/{tid}/configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchTenantConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchTenantConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchTenantConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetRateLimit sets rate limit

  Set custom rate limit for a module per tenant.
*/
func (a *Client) SetRateLimit(params *SetRateLimitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetRateLimitNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetRateLimitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setRateLimit",
		Method:             "PUT",
		PathPattern:        "/api/admin/tenants/{tid}/rate-limits/{module}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetRateLimitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetRateLimitNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setRateLimit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetTenantFeature sets tenant feature

  Enable or disable one of the tenant's features.
To be able to set a tenant feature flag, you need to use an access token issued for a system tenant and admin workspace.
*/
func (a *Client) SetTenantFeature(params *SetTenantFeatureParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetTenantFeatureNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTenantFeatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setTenantFeature",
		Method:             "POST",
		PathPattern:        "/api/admin/tenants/{tid}/feature",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetTenantFeatureReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetTenantFeatureNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setTenantFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAdminTenant updates tenant

  Update tenant.
*/
func (a *Client) UpdateAdminTenant(params *UpdateAdminTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAdminTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAdminTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAdminTenant",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/tenant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAdminTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAdminTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAdminTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateTenant updates tenant

  Update tenant system api.
*/
func (a *Client) UpdateTenant(params *UpdateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTenant",
		Method:             "PUT",
		PathPattern:        "/api/system/tenants/{tid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
