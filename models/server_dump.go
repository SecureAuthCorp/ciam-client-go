// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerDump server dump
//
// swagger:model ServerDump
type ServerDump struct {

	// Access token strategy
	// Example: jwt
	AccessTokenStrategy string `json:"access_token_strategy,omitempty"`

	// Access token time to live (default 1 hour)
	// Example: 1h10m30s
	// Format: duration
	AccessTokenTTL strfmt.Duration `json:"access_token_ttl,omitempty"`

	// Authorization code time to live (default 10 minutes)
	// Example: 10m0s
	// Format: duration
	AuthorizationCodeTTL strfmt.Duration `json:"authorization_code_ttl,omitempty"`

	// Client certificate header name containing certificate in pem format
	ClientCertificateHeader string `json:"client_certificate_header,omitempty"`

	// Color
	// Example: #007FFF
	Color string `json:"color,omitempty"`

	// Cookie max age (default 1 hour)
	// Example: 1h10m30s
	// Format: duration
	CookieMaxAge strfmt.Duration `json:"cookie_max_age,omitempty"`

	// dynamic client registration
	DynamicClientRegistration *DynamicClientRegistrationSettings `json:"dynamic_client_registration,omitempty"`

	// Enforce pkce (default false)
	// Example: false
	EnforcePkce bool `json:"enforce_pkce,omitempty"`

	// Enforce pkce for public clients (default false)
	// Example: false
	EnforcePkceForPublicClients bool `json:"enforce_pkce_for_public_clients,omitempty"`

	// Supported grant types
	// Example: ["authorization_code","implicit","refresh_token","client_credentials"]
	GrantTypes []string `json:"grant_types"`

	// Unique identifier. If not provided will be generated
	// Example: 935ab21c-b20a-11e9-a2a3-2a2ae2dbcce4
	ID string `json:"id,omitempty"`

	// ID token time to live (default 1 hour)
	// Example: 1h10m30s
	// Format: duration
	IDTokenTTL strfmt.Duration `json:"id_token_ttl,omitempty"`

	// flag to initialize server default configuration
	Initialize bool `json:"initialize,omitempty"`

	// Optional custom issuer url. If not provided the server url is used instead
	// Example: http://example.com/default/default
	IssuerURL string `json:"issuer_url,omitempty"`

	// jwks
	Jwks *ServerJWKs `json:"jwks,omitempty"`

	// Key type used to generate key which will be used to sign access and id tokens
	// Used only as input parameter in Create Authorization Server API
	// Currently `rsa` and `ecdsa` are supported
	// Example: rsa
	KeyType string `json:"key_type,omitempty"`

	// Logo URI
	LogoURI string `json:"logo_uri,omitempty"`

	// Name
	// Example: Sample authorization server
	Name string `json:"name,omitempty"`

	// Server profile
	// Example: default
	Profile string `json:"profile,omitempty"`

	// Flag indicating whether client certificate should be read from header.
	// If set to true, than the client certificate header is required.
	// This is useful for behind load balancer setup.
	ReadClientCertificateFromHeader bool `json:"read_client_certificate_from_header,omitempty"`

	// Refresh token time to live (default 30 days - 720 hours)
	// Example: 720h0m0s
	// Format: duration
	RefreshTokenTTL strfmt.Duration `json:"refresh_token_ttl,omitempty"`

	// PEM encoded root CA certificates used for client mtls token endpoint authentication.
	// If not set the system root CA certifiates are used instead.
	RootCas string `json:"root_cas,omitempty"`

	// Rotated secrets used for validating old tokens
	// Example: ["jFpwIvuKJP46J71WqszPv1SrzoUr-cSILP9EPdlClB4"]
	RotatedSecrets []string `json:"rotated_secrets"`

	// Secret used for hashing, must have at least 32 characters. If not provided will be generated.
	// Example: hW5WhKX_7w7BLwUQ6mn7Cp70_OoKI_F1y1hLS5U8lIU
	Secret string `json:"secret,omitempty"`

	// Salt used to hash subject when pairwise subject type is used
	SubjectIdentifierAlgorithmSalt string `json:"subject_identifier_algorithm_salt,omitempty"`

	// Supported subject identifier types
	// Example: ["public","pairwise"]
	SubjectIdentifierTypes []string `json:"subject_identifier_types"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty"`

	// Supported token endpoint authentication methods
	TokenEndpointAuthnMethods []string `json:"token_endpoint_authn_methods"`

	// Server type
	// Example: regular
	Type string `json:"type,omitempty"`
}

// Validate validates this server dump
func (m *ServerDump) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTokenTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationCodeTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCookieMaxAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDynamicClientRegistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshTokenTTL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerDump) validateAccessTokenTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessTokenTTL) { // not required
		return nil
	}

	if err := validate.FormatOf("access_token_ttl", "body", "duration", m.AccessTokenTTL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerDump) validateAuthorizationCodeTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationCodeTTL) { // not required
		return nil
	}

	if err := validate.FormatOf("authorization_code_ttl", "body", "duration", m.AuthorizationCodeTTL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerDump) validateCookieMaxAge(formats strfmt.Registry) error {
	if swag.IsZero(m.CookieMaxAge) { // not required
		return nil
	}

	if err := validate.FormatOf("cookie_max_age", "body", "duration", m.CookieMaxAge.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerDump) validateDynamicClientRegistration(formats strfmt.Registry) error {
	if swag.IsZero(m.DynamicClientRegistration) { // not required
		return nil
	}

	if m.DynamicClientRegistration != nil {
		if err := m.DynamicClientRegistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamic_client_registration")
			}
			return err
		}
	}

	return nil
}

func (m *ServerDump) validateIDTokenTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenTTL) { // not required
		return nil
	}

	if err := validate.FormatOf("id_token_ttl", "body", "duration", m.IDTokenTTL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServerDump) validateJwks(formats strfmt.Registry) error {
	if swag.IsZero(m.Jwks) { // not required
		return nil
	}

	if m.Jwks != nil {
		if err := m.Jwks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwks")
			}
			return err
		}
	}

	return nil
}

func (m *ServerDump) validateRefreshTokenTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.RefreshTokenTTL) { // not required
		return nil
	}

	if err := validate.FormatOf("refresh_token_ttl", "body", "duration", m.RefreshTokenTTL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this server dump based on the context it is used
func (m *ServerDump) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDynamicClientRegistration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJwks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerDump) contextValidateDynamicClientRegistration(ctx context.Context, formats strfmt.Registry) error {

	if m.DynamicClientRegistration != nil {
		if err := m.DynamicClientRegistration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamic_client_registration")
			}
			return err
		}
	}

	return nil
}

func (m *ServerDump) contextValidateJwks(ctx context.Context, formats strfmt.Registry) error {

	if m.Jwks != nil {
		if err := m.Jwks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwks")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerDump) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerDump) UnmarshalBinary(b []byte) error {
	var res ServerDump
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
