// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Styling styling
//
// swagger:model Styling
type Styling struct {

	// font URL
	FontURL string `json:"font_url,omitempty"`

	// logo size
	LogoSize string `json:"logo_size,omitempty"`

	// logo URL
	LogoURL string `json:"logo_url,omitempty"`

	// colors
	Colors *Colors `json:"colors,omitempty"`
}

// Validate validates this styling
func (m *Styling) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Styling) validateColors(formats strfmt.Registry) error {
	if swag.IsZero(m.Colors) { // not required
		return nil
	}

	if m.Colors != nil {
		if err := m.Colors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("colors")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this styling based on the context it is used
func (m *Styling) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateColors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Styling) contextValidateColors(ctx context.Context, formats strfmt.Registry) error {

	if m.Colors != nil {
		if err := m.Colors.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("colors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Styling) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Styling) UnmarshalBinary(b []byte) error {
	var res Styling
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Colors colors
//
// swagger:model Colors
type Colors struct {

	// background
	Background string `json:"background,omitempty"`

	// header
	Header string `json:"header,omitempty"`

	// primary
	Primary string `json:"primary,omitempty"`
}

// Validate validates this colors
func (m *Colors) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this colors based on context it is used
func (m *Colors) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Colors) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Colors) UnmarshalBinary(b []byte) error {
	var res Colors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
