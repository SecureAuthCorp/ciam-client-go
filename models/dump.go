// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Dump dump
//
// swagger:model Dump
type Dump struct {

	// apis
	Apis []*API `json:"apis"`

	// claims
	Claims []*Claim `json:"claims"`

	// clients
	Clients []*Client `json:"clients"`

	// consent actions
	ConsentActions []*ConsentActionWithConsents `json:"consent_actions"`

	// consent grants
	ConsentGrants []*ConsentGrant `json:"consent_grants"`

	// consents
	Consents []*Consent `json:"consents"`

	// cross tenant api policy bindings
	CrossTenantAPIPolicyBindings []*CrossTenantAPIPolicyBinding `json:"cross_tenant_api_policy_bindings"`

	// gateway api groups
	GatewayAPIGroups []*GatewayAPIGroup `json:"gateway_api_groups"`

	// gateways
	Gateways []*Gateway `json:"gateways"`

	// idps
	Idps IDPs `json:"idps,omitempty"`

	// openbanking consents
	OpenbankingConsents []*OBConsent `json:"openbanking_consents"`

	// openbanking file payment consent file resources
	OpenbankingFilePaymentConsentFileResources []*FilePaymentConsentFileResource `json:"openbanking_file_payment_consent_file_resources"`

	// policies
	Policies []*Policy `json:"policies"`

	// policy dependencies
	PolicyDependencies []*PolicyDependency `json:"policy_dependencies"`

	// policy execution points
	PolicyExecutionPoints []*PolicyExecutionPoint `json:"policy_execution_points"`

	// privacy ledger events
	PrivacyLedgerEvents []*PrivacyLedgerEvent `json:"privacy_ledger_events"`

	// recurring jobs
	RecurringJobs []*RecurringJob `json:"recurring_jobs"`

	// scope grants
	ScopeGrants []*ScopeGrant `json:"scope_grants"`

	// scopes without service
	ScopesWithoutService []*Scope `json:"scopes_without_service"`

	// server consents
	ServerConsents []*ServerConsent `json:"server_consents"`

	// servers
	Servers []*ServerDump `json:"servers"`

	// servers bindings
	ServersBindings []*ServerToServer `json:"servers_bindings"`

	// services
	Services []*ServiceWithScopes `json:"services"`

	// tenants
	Tenants []*Tenant `json:"tenants"`
}

// Validate validates this dump
func (m *Dump) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClaims(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentGrants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrossTenantAPIPolicyBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayAPIGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateways(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenbankingConsents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenbankingFilePaymentConsentFileResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyExecutionPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacyLedgerEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurringJobs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeGrants(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopesWithoutService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerConsents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServersBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dump) validateApis(formats strfmt.Registry) error {
	if swag.IsZero(m.Apis) { // not required
		return nil
	}

	for i := 0; i < len(m.Apis); i++ {
		if swag.IsZero(m.Apis[i]) { // not required
			continue
		}

		if m.Apis[i] != nil {
			if err := m.Apis[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateClaims(formats strfmt.Registry) error {
	if swag.IsZero(m.Claims) { // not required
		return nil
	}

	for i := 0; i < len(m.Claims); i++ {
		if swag.IsZero(m.Claims[i]) { // not required
			continue
		}

		if m.Claims[i] != nil {
			if err := m.Claims[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("claims" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateClients(formats strfmt.Registry) error {
	if swag.IsZero(m.Clients) { // not required
		return nil
	}

	for i := 0; i < len(m.Clients); i++ {
		if swag.IsZero(m.Clients[i]) { // not required
			continue
		}

		if m.Clients[i] != nil {
			if err := m.Clients[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateConsentActions(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentActions) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsentActions); i++ {
		if swag.IsZero(m.ConsentActions[i]) { // not required
			continue
		}

		if m.ConsentActions[i] != nil {
			if err := m.ConsentActions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consent_actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateConsentGrants(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentGrants) { // not required
		return nil
	}

	for i := 0; i < len(m.ConsentGrants); i++ {
		if swag.IsZero(m.ConsentGrants[i]) { // not required
			continue
		}

		if m.ConsentGrants[i] != nil {
			if err := m.ConsentGrants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consent_grants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateConsents(formats strfmt.Registry) error {
	if swag.IsZero(m.Consents) { // not required
		return nil
	}

	for i := 0; i < len(m.Consents); i++ {
		if swag.IsZero(m.Consents[i]) { // not required
			continue
		}

		if m.Consents[i] != nil {
			if err := m.Consents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateCrossTenantAPIPolicyBindings(formats strfmt.Registry) error {
	if swag.IsZero(m.CrossTenantAPIPolicyBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.CrossTenantAPIPolicyBindings); i++ {
		if swag.IsZero(m.CrossTenantAPIPolicyBindings[i]) { // not required
			continue
		}

		if m.CrossTenantAPIPolicyBindings[i] != nil {
			if err := m.CrossTenantAPIPolicyBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cross_tenant_api_policy_bindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateGatewayAPIGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayAPIGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.GatewayAPIGroups); i++ {
		if swag.IsZero(m.GatewayAPIGroups[i]) { // not required
			continue
		}

		if m.GatewayAPIGroups[i] != nil {
			if err := m.GatewayAPIGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gateway_api_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateGateways(formats strfmt.Registry) error {
	if swag.IsZero(m.Gateways) { // not required
		return nil
	}

	for i := 0; i < len(m.Gateways); i++ {
		if swag.IsZero(m.Gateways[i]) { // not required
			continue
		}

		if m.Gateways[i] != nil {
			if err := m.Gateways[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gateways" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateIdps(formats strfmt.Registry) error {
	if swag.IsZero(m.Idps) { // not required
		return nil
	}

	if err := m.Idps.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("idps")
		}
		return err
	}

	return nil
}

func (m *Dump) validateOpenbankingConsents(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenbankingConsents) { // not required
		return nil
	}

	for i := 0; i < len(m.OpenbankingConsents); i++ {
		if swag.IsZero(m.OpenbankingConsents[i]) { // not required
			continue
		}

		if m.OpenbankingConsents[i] != nil {
			if err := m.OpenbankingConsents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openbanking_consents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateOpenbankingFilePaymentConsentFileResources(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenbankingFilePaymentConsentFileResources) { // not required
		return nil
	}

	for i := 0; i < len(m.OpenbankingFilePaymentConsentFileResources); i++ {
		if swag.IsZero(m.OpenbankingFilePaymentConsentFileResources[i]) { // not required
			continue
		}

		if m.OpenbankingFilePaymentConsentFileResources[i] != nil {
			if err := m.OpenbankingFilePaymentConsentFileResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openbanking_file_payment_consent_file_resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validatePolicyDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyDependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyDependencies); i++ {
		if swag.IsZero(m.PolicyDependencies[i]) { // not required
			continue
		}

		if m.PolicyDependencies[i] != nil {
			if err := m.PolicyDependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy_dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validatePolicyExecutionPoints(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyExecutionPoints) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyExecutionPoints); i++ {
		if swag.IsZero(m.PolicyExecutionPoints[i]) { // not required
			continue
		}

		if m.PolicyExecutionPoints[i] != nil {
			if err := m.PolicyExecutionPoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy_execution_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validatePrivacyLedgerEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivacyLedgerEvents) { // not required
		return nil
	}

	for i := 0; i < len(m.PrivacyLedgerEvents); i++ {
		if swag.IsZero(m.PrivacyLedgerEvents[i]) { // not required
			continue
		}

		if m.PrivacyLedgerEvents[i] != nil {
			if err := m.PrivacyLedgerEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privacy_ledger_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateRecurringJobs(formats strfmt.Registry) error {
	if swag.IsZero(m.RecurringJobs) { // not required
		return nil
	}

	for i := 0; i < len(m.RecurringJobs); i++ {
		if swag.IsZero(m.RecurringJobs[i]) { // not required
			continue
		}

		if m.RecurringJobs[i] != nil {
			if err := m.RecurringJobs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recurring_jobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateScopeGrants(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopeGrants) { // not required
		return nil
	}

	for i := 0; i < len(m.ScopeGrants); i++ {
		if swag.IsZero(m.ScopeGrants[i]) { // not required
			continue
		}

		if m.ScopeGrants[i] != nil {
			if err := m.ScopeGrants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope_grants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateScopesWithoutService(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopesWithoutService) { // not required
		return nil
	}

	for i := 0; i < len(m.ScopesWithoutService); i++ {
		if swag.IsZero(m.ScopesWithoutService[i]) { // not required
			continue
		}

		if m.ScopesWithoutService[i] != nil {
			if err := m.ScopesWithoutService[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scopes_without_service" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateServerConsents(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerConsents) { // not required
		return nil
	}

	for i := 0; i < len(m.ServerConsents); i++ {
		if swag.IsZero(m.ServerConsents[i]) { // not required
			continue
		}

		if m.ServerConsents[i] != nil {
			if err := m.ServerConsents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("server_consents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateServers(formats strfmt.Registry) error {
	if swag.IsZero(m.Servers) { // not required
		return nil
	}

	for i := 0; i < len(m.Servers); i++ {
		if swag.IsZero(m.Servers[i]) { // not required
			continue
		}

		if m.Servers[i] != nil {
			if err := m.Servers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateServersBindings(formats strfmt.Registry) error {
	if swag.IsZero(m.ServersBindings) { // not required
		return nil
	}

	for i := 0; i < len(m.ServersBindings); i++ {
		if swag.IsZero(m.ServersBindings[i]) { // not required
			continue
		}

		if m.ServersBindings[i] != nil {
			if err := m.ServersBindings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers_bindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateTenants(formats strfmt.Registry) error {
	if swag.IsZero(m.Tenants) { // not required
		return nil
	}

	for i := 0; i < len(m.Tenants); i++ {
		if swag.IsZero(m.Tenants[i]) { // not required
			continue
		}

		if m.Tenants[i] != nil {
			if err := m.Tenants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dump based on the context it is used
func (m *Dump) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClaims(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClients(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentGrants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCrossTenantAPIPolicyBindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayAPIGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGateways(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenbankingConsents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenbankingFilePaymentConsentFileResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyExecutionPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivacyLedgerEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecurringJobs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopeGrants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopesWithoutService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerConsents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServersBindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenants(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dump) contextValidateApis(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Apis); i++ {

		if m.Apis[i] != nil {
			if err := m.Apis[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apis" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateClaims(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Claims); i++ {

		if m.Claims[i] != nil {
			if err := m.Claims[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("claims" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateClients(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Clients); i++ {

		if m.Clients[i] != nil {
			if err := m.Clients[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clients" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateConsentActions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConsentActions); i++ {

		if m.ConsentActions[i] != nil {
			if err := m.ConsentActions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consent_actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateConsentGrants(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConsentGrants); i++ {

		if m.ConsentGrants[i] != nil {
			if err := m.ConsentGrants[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consent_grants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateConsents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Consents); i++ {

		if m.Consents[i] != nil {
			if err := m.Consents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("consents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateCrossTenantAPIPolicyBindings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CrossTenantAPIPolicyBindings); i++ {

		if m.CrossTenantAPIPolicyBindings[i] != nil {
			if err := m.CrossTenantAPIPolicyBindings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cross_tenant_api_policy_bindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateGatewayAPIGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GatewayAPIGroups); i++ {

		if m.GatewayAPIGroups[i] != nil {
			if err := m.GatewayAPIGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gateway_api_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateGateways(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Gateways); i++ {

		if m.Gateways[i] != nil {
			if err := m.Gateways[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gateways" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateIdps(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Idps.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("idps")
		}
		return err
	}

	return nil
}

func (m *Dump) contextValidateOpenbankingConsents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OpenbankingConsents); i++ {

		if m.OpenbankingConsents[i] != nil {
			if err := m.OpenbankingConsents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openbanking_consents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateOpenbankingFilePaymentConsentFileResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OpenbankingFilePaymentConsentFileResources); i++ {

		if m.OpenbankingFilePaymentConsentFileResources[i] != nil {
			if err := m.OpenbankingFilePaymentConsentFileResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("openbanking_file_payment_consent_file_resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Policies); i++ {

		if m.Policies[i] != nil {
			if err := m.Policies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidatePolicyDependencies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyDependencies); i++ {

		if m.PolicyDependencies[i] != nil {
			if err := m.PolicyDependencies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy_dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidatePolicyExecutionPoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyExecutionPoints); i++ {

		if m.PolicyExecutionPoints[i] != nil {
			if err := m.PolicyExecutionPoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policy_execution_points" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidatePrivacyLedgerEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrivacyLedgerEvents); i++ {

		if m.PrivacyLedgerEvents[i] != nil {
			if err := m.PrivacyLedgerEvents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("privacy_ledger_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateRecurringJobs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecurringJobs); i++ {

		if m.RecurringJobs[i] != nil {
			if err := m.RecurringJobs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recurring_jobs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateScopeGrants(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScopeGrants); i++ {

		if m.ScopeGrants[i] != nil {
			if err := m.ScopeGrants[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope_grants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateScopesWithoutService(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScopesWithoutService); i++ {

		if m.ScopesWithoutService[i] != nil {
			if err := m.ScopesWithoutService[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scopes_without_service" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateServerConsents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServerConsents); i++ {

		if m.ServerConsents[i] != nil {
			if err := m.ServerConsents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("server_consents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateServers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Servers); i++ {

		if m.Servers[i] != nil {
			if err := m.Servers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateServersBindings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServersBindings); i++ {

		if m.ServersBindings[i] != nil {
			if err := m.ServersBindings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servers_bindings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Services); i++ {

		if m.Services[i] != nil {
			if err := m.Services[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateTenants(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tenants); i++ {

		if m.Tenants[i] != nil {
			if err := m.Tenants[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tenants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Dump) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dump) UnmarshalBinary(b []byte) error {
	var res Dump
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
