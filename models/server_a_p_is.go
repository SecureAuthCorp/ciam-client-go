// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerAPIs server a p is
//
// swagger:model ServerAPIs
type ServerAPIs struct {

	// apis by services
	ApisByServices map[string][]API `json:"apis_by_services,omitempty"`
}

// Validate validates this server a p is
func (m *ServerAPIs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApisByServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerAPIs) validateApisByServices(formats strfmt.Registry) error {
	if swag.IsZero(m.ApisByServices) { // not required
		return nil
	}

	for k := range m.ApisByServices {

		if err := validate.Required("apis_by_services"+"."+k, "body", m.ApisByServices[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.ApisByServices[k]); i++ {

			if err := m.ApisByServices[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apis_by_services" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// ContextValidate validate this server a p is based on the context it is used
func (m *ServerAPIs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApisByServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerAPIs) contextValidateApisByServices(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ApisByServices {

		for i := 0; i < len(m.ApisByServices[k]); i++ {

			if err := m.ApisByServices[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apis_by_services" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServerAPIs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerAPIs) UnmarshalBinary(b []byte) error {
	var res ServerAPIs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
