// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostalAddress PostalAddress Information that locates and identifies a specific address, as defined by postal services.
//
// swagger:model PostalAddress
type PostalAddress struct {

	// address line
	// Max Items: 7
	// Min Items: 0
	AddressLine []string `json:"AddressLine"`

	// address type
	AddressType string `json:"AddressType,omitempty"`

	// building number
	BuildingNumber string `json:"BuildingNumber,omitempty"`

	// country
	Country string `json:"Country,omitempty"`

	// country sub division
	CountrySubDivision string `json:"CountrySubDivision,omitempty"`

	// department
	Department string `json:"Department,omitempty"`

	// post code
	PostCode string `json:"PostCode,omitempty"`

	// street name
	StreetName string `json:"StreetName,omitempty"`

	// sub department
	SubDepartment string `json:"SubDepartment,omitempty"`

	// town name
	TownName string `json:"TownName,omitempty"`
}

// Validate validates this postal address
func (m *PostalAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostalAddress) validateAddressLine(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressLine) { // not required
		return nil
	}

	iAddressLineSize := int64(len(m.AddressLine))

	if err := validate.MinItems("AddressLine", "body", iAddressLineSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("AddressLine", "body", iAddressLineSize, 7); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this postal address based on context it is used
func (m *PostalAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PostalAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostalAddress) UnmarshalBinary(b []byte) error {
	var res PostalAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
