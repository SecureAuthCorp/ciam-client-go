// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Claim claim
//
// swagger:model Claim
type Claim struct {

	// DeprecatedMapping use SourceType and SourcePath instead
	// claim mapping - path to attribute in authentication context from where claim value should be picked
	// Example: email
	DeprecatedMapping string `json:"mapping,omitempty"`

	// unique claim id
	// Example: 1
	ID string `json:"id,omitempty"`

	// claim name in outgoing id / access token
	// Example: email
	Name string `json:"name,omitempty"`

	// list of scopes - when at least one of listed scopes has been granted to a client, then claim will be added to id / access token. In case of empty array claim is always added.
	// Example: ["email","email_verified"]
	Scopes []string `json:"scopes"`

	// authorization server id
	// Example: default
	ServerID string `json:"authorization_server_id,omitempty"`

	// path to the attribute in source type context where claim value should be picked from
	SourcePath string `json:"source_path,omitempty"`

	// tenant id
	// Example: default
	TenantID string `json:"tenant_id,omitempty"`

	// source type
	SourceType ClaimSourceType `json:"source_type,omitempty"`

	// type
	Type ClaimType `json:"type,omitempty"`
}

// Validate validates this claim
func (m *Claim) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Claim) validateSourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	if err := m.SourceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("source_type")
		}
		return err
	}

	return nil
}

func (m *Claim) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this claim based on the context it is used
func (m *Claim) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSourceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Claim) contextValidateSourceType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SourceType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("source_type")
		}
		return err
	}

	return nil
}

func (m *Claim) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Claim) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Claim) UnmarshalBinary(b []byte) error {
	var res Claim
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
