// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomesticPaymentConsentSCASupportData DomesticPaymentConsentSCASupportData Supporting Data provided by TPP, when requesting SCA Exemption.
//
// swagger:model DomesticPaymentConsentSCASupportData
type DomesticPaymentConsentSCASupportData struct {

	// Specifies a character string with a maximum length of 40 characters.
	// Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
	// Enum: [[CA SCA]]
	AppliedAuthenticationApproach string `json:"AppliedAuthenticationApproach,omitempty"`

	// Specifies a character string with a maximum length of 140 characters.
	// Usage: If the payment is recurring then the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence.
	// Max Length: 128
	// Min Length: 1
	ReferencePaymentOrderID string `json:"ReferencePaymentOrderId,omitempty"`

	// This field allows a PISP to request specific SCA Exemption for a Payment Initiation
	// Enum: [[BillPayment ContactlessTravel EcommerceGoods EcommerceServices Kiosk Parking PartyToParty]]
	RequestedSCAExemptionType string `json:"RequestedSCAExemptionType,omitempty"`
}

// Validate validates this domestic payment consent s c a support data
func (m *DomesticPaymentConsentSCASupportData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedAuthenticationApproach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferencePaymentOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedSCAExemptionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domesticPaymentConsentSCASupportDataTypeAppliedAuthenticationApproachPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["[CA SCA]"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domesticPaymentConsentSCASupportDataTypeAppliedAuthenticationApproachPropEnum = append(domesticPaymentConsentSCASupportDataTypeAppliedAuthenticationApproachPropEnum, v)
	}
}

const (

	// DomesticPaymentConsentSCASupportDataAppliedAuthenticationApproachCASCA captures enum value "[CA SCA]"
	DomesticPaymentConsentSCASupportDataAppliedAuthenticationApproachCASCA string = "[CA SCA]"
)

// prop value enum
func (m *DomesticPaymentConsentSCASupportData) validateAppliedAuthenticationApproachEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domesticPaymentConsentSCASupportDataTypeAppliedAuthenticationApproachPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomesticPaymentConsentSCASupportData) validateAppliedAuthenticationApproach(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedAuthenticationApproach) { // not required
		return nil
	}

	// value enum
	if err := m.validateAppliedAuthenticationApproachEnum("AppliedAuthenticationApproach", "body", m.AppliedAuthenticationApproach); err != nil {
		return err
	}

	return nil
}

func (m *DomesticPaymentConsentSCASupportData) validateReferencePaymentOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferencePaymentOrderID) { // not required
		return nil
	}

	if err := validate.MinLength("ReferencePaymentOrderId", "body", m.ReferencePaymentOrderID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ReferencePaymentOrderId", "body", m.ReferencePaymentOrderID, 128); err != nil {
		return err
	}

	return nil
}

var domesticPaymentConsentSCASupportDataTypeRequestedSCAExemptionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["[BillPayment ContactlessTravel EcommerceGoods EcommerceServices Kiosk Parking PartyToParty]"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domesticPaymentConsentSCASupportDataTypeRequestedSCAExemptionTypePropEnum = append(domesticPaymentConsentSCASupportDataTypeRequestedSCAExemptionTypePropEnum, v)
	}
}

const (

	// DomesticPaymentConsentSCASupportDataRequestedSCAExemptionTypeBillPaymentContactlessTravelEcommerceGoodsEcommerceServicesKioskParkingPartyToParty captures enum value "[BillPayment ContactlessTravel EcommerceGoods EcommerceServices Kiosk Parking PartyToParty]"
	DomesticPaymentConsentSCASupportDataRequestedSCAExemptionTypeBillPaymentContactlessTravelEcommerceGoodsEcommerceServicesKioskParkingPartyToParty string = "[BillPayment ContactlessTravel EcommerceGoods EcommerceServices Kiosk Parking PartyToParty]"
)

// prop value enum
func (m *DomesticPaymentConsentSCASupportData) validateRequestedSCAExemptionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domesticPaymentConsentSCASupportDataTypeRequestedSCAExemptionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomesticPaymentConsentSCASupportData) validateRequestedSCAExemptionType(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedSCAExemptionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestedSCAExemptionTypeEnum("RequestedSCAExemptionType", "body", m.RequestedSCAExemptionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domestic payment consent s c a support data based on context it is used
func (m *DomesticPaymentConsentSCASupportData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomesticPaymentConsentSCASupportData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomesticPaymentConsentSCASupportData) UnmarshalBinary(b []byte) error {
	var res DomesticPaymentConsentSCASupportData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
