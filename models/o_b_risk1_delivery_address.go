// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBRisk1DeliveryAddress OBRisk1DeliveryAddress Information that locates and identifies a specific address, as defined by postal services or in free format text.
//
// swagger:model OBRisk1DeliveryAddress
type OBRisk1DeliveryAddress struct {

	// address line
	// Max Items: 2
	AddressLine []string `json:"AddressLine"`

	// building number
	BuildingNumber BuildingNumber `json:"BuildingNumber,omitempty"`

	// Nation with its own government, occupying a particular territory.
	// Required: true
	// Pattern: ^[A-Z]{2,2}$
	Country string `json:"Country"`

	// country sub division
	CountrySubDivision CountrySubDivision `json:"CountrySubDivision,omitempty"`

	// post code
	PostCode PostCode `json:"PostCode,omitempty"`

	// street name
	StreetName StreetName `json:"StreetName,omitempty"`

	// town name
	// Required: true
	TownName *TownName `json:"TownName"`
}

// Validate validates this o b risk1 delivery address
func (m *OBRisk1DeliveryAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildingNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountrySubDivision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTownName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBRisk1DeliveryAddress) validateAddressLine(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressLine) { // not required
		return nil
	}

	iAddressLineSize := int64(len(m.AddressLine))

	if err := validate.MaxItems("AddressLine", "body", iAddressLineSize, 2); err != nil {
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) validateBuildingNumber(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildingNumber) { // not required
		return nil
	}

	if err := m.BuildingNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BuildingNumber")
		}
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) validateCountry(formats strfmt.Registry) error {

	if err := validate.RequiredString("Country", "body", m.Country); err != nil {
		return err
	}

	if err := validate.Pattern("Country", "body", m.Country, `^[A-Z]{2,2}$`); err != nil {
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) validateCountrySubDivision(formats strfmt.Registry) error {
	if swag.IsZero(m.CountrySubDivision) { // not required
		return nil
	}

	if err := m.CountrySubDivision.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CountrySubDivision")
		}
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) validatePostCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PostCode) { // not required
		return nil
	}

	if err := m.PostCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostCode")
		}
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) validateStreetName(formats strfmt.Registry) error {
	if swag.IsZero(m.StreetName) { // not required
		return nil
	}

	if err := m.StreetName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StreetName")
		}
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) validateTownName(formats strfmt.Registry) error {

	if err := validate.Required("TownName", "body", m.TownName); err != nil {
		return err
	}

	if err := validate.Required("TownName", "body", m.TownName); err != nil {
		return err
	}

	if m.TownName != nil {
		if err := m.TownName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TownName")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this o b risk1 delivery address based on the context it is used
func (m *OBRisk1DeliveryAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildingNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountrySubDivision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStreetName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTownName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBRisk1DeliveryAddress) contextValidateBuildingNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BuildingNumber.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BuildingNumber")
		}
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) contextValidateCountrySubDivision(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CountrySubDivision.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CountrySubDivision")
		}
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) contextValidatePostCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostCode")
		}
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) contextValidateStreetName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StreetName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StreetName")
		}
		return err
	}

	return nil
}

func (m *OBRisk1DeliveryAddress) contextValidateTownName(ctx context.Context, formats strfmt.Registry) error {

	if m.TownName != nil {
		if err := m.TownName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TownName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBRisk1DeliveryAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBRisk1DeliveryAddress) UnmarshalBinary(b []byte) error {
	var res OBRisk1DeliveryAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
