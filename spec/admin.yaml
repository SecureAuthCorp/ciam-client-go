basePath: /api/admin/default
consumes:
- application/json
definitions:
  API:
    properties:
      api_type:
        default: rest
        description: api type
        enum:
        - rest
        - graphql
        example: rest
        type: string
        x-nullable: false
      can_have_policy:
        description: if false it is not possible to assign a policy
        type: boolean
        x-nullable: false
      data_classifications:
        description: Data classifications
        items:
          type: string
        type: array
        x-nullable: false
      graphql_schema:
        description: graphql schema
        type: string
        x-nullable: false
      graphql_types:
        $ref: '#/definitions/GraphQLTypes'
      id:
        description: scope id
        example: "1"
        format: apiID
        type: string
        x-nullable: false
      method:
        description: HTTP request method
        example: GET
        type: string
        x-nullable: false
      path:
        description: HTTP request path
        example: /pets
        type: string
        x-nullable: false
      policy_id:
        description: optional id of a policy
        example: block
        format: policyID
        type: string
        x-nullable: false
      position:
        description: position of the api in the apis list
        example: 1
        format: int64
        type: integer
        x-nullable: false
      server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      service_id:
        description: service id
        example: "1"
        format: serviceID
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
    type: object
  APIGroupMetadata:
    properties:
      apigee:
        $ref: '#/definitions/ApigeeMetadata'
      aws:
        $ref: '#/definitions/AWSMetadata'
      azure:
        $ref: '#/definitions/AzureMetadata'
      type:
        description: Gateway type
        format: gatewayType
        type: string
        x-nullable: false
    type: object
  APIs:
    properties:
      apis:
        items:
          $ref: '#/definitions/API'
        type: array
        x-nullable: false
    type: object
  AWSMetadata:
    properties:
      api_id:
        type: string
        x-nullable: false
      api_name:
        type: string
        x-nullable: false
      stage:
        type: string
        x-nullable: false
    type: object
  AccessRequestData:
    properties:
      client_id:
        description: OAuth client application identifier.
        format: clientID
        type: string
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        type: string
        x-nullable: false
      created_by_developer:
        description: Stores information if the owner of the client application is
          a developer.
        type: boolean
        x-nullable: false
      grant_type:
        description: |-
          Stores the information which grant type was selected to perfom a given action.
          Matches one of allowed OAuth client grant types for a given client.
        type: string
        x-nullable: false
      public:
        description: Stores information if the client application is a public one.
        type: boolean
        x-nullable: false
      remote_addr:
        description: Requester IP address obtained from system network socket information.
        type: string
        x-nullable: false
      server_id:
        description: ID of the authorization server (workspace) to which an access
          request is tied.
        format: serverID
        type: string
        x-nullable: false
      session_id:
        description: |-
          Session id of a given subject. It's uniform across the authentication processes.
          It can be used as a correlation ID between a different audit events.
        format: loginID
        type: string
        x-nullable: false
      subject:
        description: |-
          Identification of the principal that is the subject of authorization.
          For the authorization grant, the subject typically identifies an authorized accessor for which the access token is being requested.
          For client authentication, the subject is the client_id of the OAuth client.
        format: subject
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application.
        type: boolean
        x-nullable: false
      token_endpoint_authn_method:
        description: Token endpoint authentication method configured for a client
          application.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        type: string
        x-nullable: false
      token_signature:
        description: Token signature
        type: string
        x-nullable: false
      user_agent:
        description: A characteristic string that lets servers and network peers identify
          the application, operating system, vendor, and/or version of the requesting
          user agent.
        type: string
        x-nullable: false
      workspace_id:
        description: ID of the authorization server (workspace) to which a resource
          is tied.
        format: serverID
        type: string
        x-nullable: false
      x_forwarded_for:
        description: Requester IP address obtained from X-Forwarded-For header.
        type: string
        x-nullable: false
      x_real_ip:
        description: Requester IP address obtained from X-Real-IP header.
        type: string
        x-nullable: false
    type: object
  Action:
    type: string
  ApigeeMetadata:
    properties:
      environment_name:
        description: Apigee environment name. It's a uniqe, immutable name of an environment
          for a given proxy name.
        example: my-default-proxy
        type: string
        x-nullable: false
      organization_name:
        description: Apigee organization name. It's a uniqe, immutable name of an
          Apigee organization.
        example: apigee-x-905913
        type: string
        x-nullable: false
      proxy_name:
        description: Apigee proxy name. It's a uniqe, immutable name of a proxy for
          a given organization id.
        example: my-default-proxy
        type: string
        x-nullable: false
    required:
    - organization_name
    - proxy_name
    - environment_name
    type: object
  Attribute:
    description: Authentication context attribute
    properties:
      description:
        description: String represented display name of an attribute
        type: string
        x-nullable: false
      labels:
        description: Array of Strings represents attribute labels
        items:
          format: label
          type: string
        type: array
        x-nullable: false
      name:
        description: String represented variable name of an attribute
        type: string
        x-nullable: false
      type:
        description: |-
          The data type of an attribute

          It stores information what kind of data is used as the value of the attribute.

          Available types: `number`, `string`, `bool`, `number_array`, `string_array`, `bool_array` or `any`.
        format: type
        type: string
        x-nullable: false
    type: object
  Attributes:
    items:
      $ref: '#/definitions/Attribute'
    type: array
  AuditConsentKind:
    type: string
  AuditEvent:
    properties:
      action:
        $ref: '#/definitions/Action'
      context:
        additionalProperties:
          type: string
        description: Additional audit event context.
        type: object
        x-nullable: false
      event_id:
        description: Event ID - unique audit event identifier.
        format: eventID
        type: string
        x-nullable: false
      event_subject:
        $ref: '#/definitions/AuditEventSubject'
      metadata:
        $ref: '#/definitions/AuditEventMetadata'
      payload:
        $ref: '#/definitions/AuditEventPayloads'
      server_id:
        description: Server ID.
        format: serverID
        type: string
        x-nullable: false
      tenant_id:
        description: Tenant ID.
        format: tenantID
        type: string
        x-nullable: false
      timestamp:
        description: Time when the event took place.
        format: date-time
        type: string
        x-nullable: false
    type: object
  AuditEventMetadata:
    properties:
      client_id:
        description: |-
          Access request client ID related to an audit event.

          May be empty when the access is incorrect or missing.
        format: clientID
        type: string
        x-nullable: false
      ip:
        description: |-
          Audit event IP address.

          It's first not empty value from: X-Forwaded-For, X-Real-IP or network socket IP address
        type: string
        x-nullable: false
      session_id:
        description: |-
          Session id

          Correlation ID in a login process. Returns events related to a particular login process.
          It's empty for audit events that have been created outside login process.
        format: loginID
        type: string
        x-nullable: false
      subject:
        description: |-
          Access request subject ID related to a given audit event.

          May be empty when the access is incorrect or missing.
        format: subject
        type: string
        x-nullable: false
      token_signature:
        description: |-
          Token signature

          Signature of a token that was used to perform an action that has published an audit event.
        type: string
        x-nullable: false
      trace_id:
        description: Trace ID
        type: string
        x-nullable: false
      user_agent:
        description: User-agent that describes a device name that generated the audit
          event.
        type: string
        x-nullable: false
    type: object
  AuditEventPayloads:
    properties:
      access_token_denied:
        $ref: '#/definitions/RequestUnauthorizedPayload'
      access_token_issued:
        $ref: '#/definitions/AccessRequestData'
      authorization_code_denied:
        $ref: '#/definitions/RequestUnauthorizedPayload'
      authorization_code_issued:
        $ref: '#/definitions/AccessRequestData'
      client_created:
        $ref: '#/definitions/ClientAuditPayload'
      client_deleted:
        $ref: '#/definitions/ClientAuditPayload'
      client_updated:
        $ref: '#/definitions/ClientAuditPayload'
      consent_accepted:
        $ref: '#/definitions/ConsentAuditEventPayload'
      consent_created:
        $ref: '#/definitions/ConsentAuditEventPayload'
      consent_rejected:
        $ref: '#/definitions/ConsentAuditEventPayload'
      consent_revoked:
        $ref: '#/definitions/ConsentAuditEventPayload'
      gateway_request_authorized:
        $ref: '#/definitions/RequestValidatedPayload'
      gateway_request_unauthorized:
        $ref: '#/definitions/RequestValidatedPayload'
      login_accepted:
        $ref: '#/definitions/LoginPayload'
      login_attempted:
        $ref: '#/definitions/LoginPayload'
      login_failed:
        $ref: '#/definitions/LoginFailedPayload'
      otp_not_sent:
        $ref: '#/definitions/RecoveryPayload'
      otp_sent:
        $ref: '#/definitions/RecoveryPayload'
      policy_authorized:
        $ref: '#/definitions/PolicyEvaluatedPayload'
      policy_unauthorized:
        $ref: '#/definitions/PolicyEvaluatedPayload'
      recovery_authorized:
        $ref: '#/definitions/RecoveryPayload'
      recovery_requested:
        $ref: '#/definitions/RecoveryPayload'
      recovery_unauthorized:
        $ref: '#/definitions/RecoveryPayload'
      request_authorized:
        $ref: '#/definitions/RequestAuthorizedPayload'
      request_unauthorized:
        $ref: '#/definitions/RequestUnauthorizedPayload'
      scopes_granted_payload:
        $ref: '#/definitions/ScopesGrantedPayload'
    type: object
  AuditEventSubject:
    type: string
  AuditEvents:
    properties:
      audit_events:
        items:
          $ref: '#/definitions/AuditEvent'
        type: array
        x-nullable: false
    type: object
  Auth0Credentials:
    description: Auth0 IDP specific credentials
    properties:
      client_secret:
        description: OAuth client application secret
        type: string
        x-nullable: false
    type: object
  Auth0IDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/Auth0Credentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/Auth0Settings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  Auth0Settings:
    description: Auth0 IDP specific settings
    properties:
      client_id:
        description: OAuth client application identifier
        example: client
        type: string
        x-nullable: false
      domain:
        description: String represented domain of the Auth0 for your organization
        example: dev-318ay013.us.auth0.com
        type: string
        x-nullable: false
      get_user_info:
        description: If enabled, users' data is collected by calling the `userinfo`
          endpoint.
        type: boolean
        x-nullable: false
      scopes:
        description: An array of additional scopes your client requests
        example:
        - email
        - profile
        - openid
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  AuthenticationContext:
    additionalProperties:
      type: object
    type: object
  AuthenticationContextSettings:
    properties:
      attributes:
        items:
          $ref: '#/definitions/Attribute'
        type: array
        x-nullable: false
    type: object
  AutomaticKeyRotation:
    properties:
      cron:
        type: string
        x-nullable: false
      enabled:
        type: boolean
        x-nullable: false
      scheduled_at:
        format: date-time
        readOnly: true
        type: string
        x-nullable: false
      starting_from:
        format: date-time
        type: string
        x-nullable: false
    required:
    - enabled
    - cron
    type: object
  AzureB2CCredentials:
    description: Azure IDP B2C specific credentials
    properties:
      client_secret:
        description: Application secret from your Microsoft Azure application settings
        type: string
        x-nullable: false
    type: object
  AzureB2CIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/AzureB2CCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/AzureB2CSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  AzureB2CSettings:
    description: Azure AD B2C authentication settings
    properties:
      client_id:
        description: Application ID from your Microsoft Azure B2C application settings
        example: client
        type: string
        x-nullable: false
      fetch_groups:
        description: |-
          If enabled, the groups a user belongs to are collected

          Groups are collections of users and other principals who share access to resources in
          Microsoft services or in your app. Microsoft Graph provides APIs that you can use to create
          and manage different types of groups and group functionality according to your scenario.

          You can only get groups data if you are entitled to call the Microsoft Graph API.
        example: true
        type: boolean
        x-nullable: false
      get_user:
        description: |-
          If enabled, users' data is collected from the Microsoft Graph API

          You can only get user's data if you are entitled to call the Microsoft Graph API.
        type: boolean
        x-nullable: false
      graph_user_attributes:
        description: An array of user attributes fetched from the Microsoft Graph
          API
        items:
          type: string
        type: array
        x-nullable: false
      group_name_format:
        description: |-
          String represented group name format used for fetching groups

          It's value can be either `id` or `name`.
        example: id
        type: string
        x-nullable: false
      only_security_groups:
        description: If enabled, only security groups a user belongs to are collected.
        example: true
        type: boolean
        x-nullable: false
      policy:
        description: |-
          The user flow to be run.
          Specify the name of a user flow you've created in your Azure AD B2C tenant.
        example: b2c_1_sign_in
        type: string
        x-nullable: false
      scopes:
        description: An array of additional scopes your client is going to request
        example:
        - email
        - profile
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      tenant:
        description: Directory ID from your Microsoft Azure B2C application settings
        example: 123-312-123
        type: string
        x-nullable: false
    type: object
  AzureCredentials:
    description: Azure IDP specific credentials
    properties:
      client_secret:
        description: Application secret from your Microsoft Azure application settings
        type: string
        x-nullable: false
    type: object
  AzureIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/AzureCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/AzureSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  AzureMetadata:
    properties:
      apim_id:
        type: string
        x-nullable: false
      apim_name:
        type: string
        x-nullable: false
    type: object
  AzureSettings:
    description: Azure IDP specific settings
    properties:
      client_id:
        description: Application ID from your Microsoft Azure application settings
        type: string
        x-nullable: false
      fetch_groups:
        description: |-
          If enabled, the groups a user belongs to are collected

          Groups are collections of users and other principals who share access to resources in
          Microsoft services or in your app. Microsoft Graph provides APIs that you can use to create
          and manage different types of groups and group functionality according to your scenario.

          You can only get groups data if you are entitled to call the Microsoft Graph API.
        type: boolean
        x-nullable: false
      get_user:
        description: |-
          If enabled, users' data is collected from the Microsoft Graph API

          You can only get user's data if you are entitled to call the Microsoft Graph API.
        type: boolean
        x-nullable: false
      graph_user_attributes:
        description: An array of user attributes fetched from the Microsoft Graph
          API
        items:
          type: string
        type: array
        x-nullable: false
      group_name_format:
        description: |-
          String represented group name format used for fetching groups

          It's value can be either `id` or `name`.
        type: string
        x-nullable: false
      only_security_groups:
        description: If enabled, only security groups a user belongs to are collected.
        type: boolean
        x-nullable: false
      scopes:
        description: An array of additional scopes your client requests
        items:
          type: string
        type: array
        x-nullable: false
      tenant:
        description: Directory ID from your Microsoft Azure application settings
        type: string
        x-nullable: false
    type: object
  BindGroupToServiceRequest:
    properties:
      service_id:
        format: serviceID
        type: string
        x-nullable: false
    type: object
  BindSystemAPIRequest:
    properties:
      api_id:
        format: apiID
        type: string
        x-nullable: false
      policy_id:
        format: policyID
        type: string
        x-nullable: false
      policy_server_id:
        format: serverID
        type: string
        x-nullable: false
    type: object
  CIBAAuthenticationService:
    properties:
      client_id:
        format: clientID
        type: string
        x-nullable: false
      external:
        $ref: '#/definitions/ExternalCIBAAuthenticationService'
      server_id:
        format: serverID
        type: string
        x-nullable: false
      tenant_id:
        format: tenantID
        type: string
        x-nullable: false
      type:
        format: cibaAuthenticationrServiceType
        type: string
        x-nullable: false
    type: object
  Claim:
    properties:
      authorization_server_id:
        description: authorization server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      id:
        description: unique claim id
        example: "1"
        format: claimID
        type: string
        x-nullable: false
      mapping:
        description: |-
          DeprecatedMapping use SourceType and SourcePath instead
          claim mapping - path to attribute in authentication context from where claim value should be picked
        example: email
        type: string
        x-nullable: false
      name:
        description: claim name in outgoing id / access token
        example: email
        type: string
        x-nullable: false
      scopes:
        description: list of scopes - when at least one of listed scopes has been
          granted to a client, then claim will be added to id / access token. In case
          of empty array claim is always added.
        example:
        - email
        - email_verified
        items:
          type: string
        type: array
        x-nullable: false
      source_path:
        description: path to the attribute in source type context where claim value
          should be picked from
        type: string
        x-nullable: false
      source_type:
        $ref: '#/definitions/ClaimSourceType'
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        $ref: '#/definitions/ClaimType'
    type: object
  ClaimSourceType:
    type: string
  ClaimType:
    description: |-
      claim type, one of: id_token, access_token
      example: id_token
    type: string
  Claims:
    properties:
      claims:
        description: list of claims
        items:
          $ref: '#/definitions/Claim'
        type: array
        x-nullable: false
    type: object
  Client:
    properties:
      application_type:
        default: web
        description: |-
          String represented type of a client application

          Client applications can be either of a `web` or `native` types.

          Web applications include clients like server web applications or service apps.

          Native applications include single-page applications (SPAs) and mobile or desktop
          applications.

          Depending on the type of your application remember to choose appropriate security measures.
        example: web
        type: string
        x-nullable: false
      application_types:
        default:
        - server_web
        description: An array of dynamically calculated application types that can
          be used for filtering
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        - dcr
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          - dcr
          type: string
        readOnly: true
        type: array
        x-nullable: false
      audience:
        default:
        - client_id
        description: |-
          Identity of the intended recipients (the audience)

          Typically, the audience may be a single resources server or a list of resource servers.
          It is considered a good practice to limit the audience of the token for security purposes.
        items:
          type: string
        type: array
        x-nullable: false
      authorization_server_id:
        description: ID of the authorization server (workspace) to which a client
          application is tied
        example: default
        format: serverID
        type: string
        x-nullable: false
      backchannel_authentication_request_signing_alg:
        description: |-
          OPTIONAL. The JWS algorithm alg value that the Client will use for signing authentication requests.
          When omitted, the Client will not send signed authentication requests.
        type: string
        x-nullable: false
      backchannel_client_notification_endpoint:
        description: |-
          REQUIRED if the token delivery mode is set to ping or push.
          This is the endpoint to which the OP will post a notification after a successful or failed end-user authentication.
          It MUST be an HTTPS URL.
        type: string
        x-nullable: false
      backchannel_token_delivery_mode:
        description: 'REQUIRED. One of the following values: poll, ping, or push.'
        type: string
        x-nullable: false
      backchannel_user_code_parameter:
        description: |-
          OPTIONAL. Boolean value specifying whether the Client supports the user_code parameter.
          If omitted, the default value is false.
          This parameter only applies when OP parameter backchannel_user_code_parameter_supported is true.
        type: boolean
        x-nullable: false
      client_id:
        description: |-
          OAuth client application identifier

          If not provided, a random client ID is generated.
        format: clientID
        type: string
        x-nullable: false
      client_id_issued_at:
        description: |-
          Time at which the client identifier was issued.

          The time is represented as the number of seconds from
          1970-01-01T00:00:00Z as measured in UTC until the date/time of issuance.
        format: int64
        type: integer
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        example: My app
        type: string
        x-nullable: false
      client_secret:
        description: |-
          OAuth client secret

          If not provided, a random client secret is generated.
        minLength: 32
        type: string
        x-nullable: false
      client_secret_expires_at:
        description: |-
          The `client_secret_expires_at` holds an integer that defines the time at which the client
          secret expires

          If the client secret does not expire, the value should be set to `0`.
        format: int64
        type: integer
        x-nullable: false
      client_uri:
        description: URI of a client application
        type: string
        x-nullable: false
      confirmation:
        $ref: '#/definitions/Confirmation'
      description:
        description: Description of a client application
        type: string
        x-nullable: false
      developer_id:
        description: Optional developer owner of the client application
        format: subject
        type: string
        x-nullable: false
      developer_metadata:
        $ref: '#/definitions/Metadata'
      dynamically_registered:
        type: boolean
        x-nullable: false
      grant_types:
        default:
        - authorization_code
        description: |-
          An array of allowed OAuth client grant types

          The `grantTypes` array stores OAuth flows that are allowed for a given client application.

          To know more about OAuth grant flows, see the
          [ACP grant flows documentation](https://docs.authorization.cloudentity.com/features/oauth/grant_flows/).
        example:
        - password
        - refresh_token
        - client_credentials
        - implicit
        - authorization_code
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          type: string
        type: array
        x-nullable: false
      hashed_rotated_secrets:
        description: An array of hashed rotated client secrets
        items:
          type: string
        type: array
        x-nullable: false
      hashed_secret:
        description: |-
          Hashed client secret

          Hashing client secrets provides additional security for your secrets storage as it hides
          plaintext secrets from being viewed both in the UI and the database.
        type: string
        x-nullable: false
      id_token_encrypted_response_alg:
        description: JWE alg algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        type: string
        x-nullable: false
      id_token_encrypted_response_enc:
        description: JWE enc algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - A256GCM
        - A128CBC-HS256
        type: string
        x-nullable: false
      id_token_signed_response_alg:
        description: |-
          Algorithm for signing ID tokens issued for a client application

          The default value depends on authorization server configuration.
        enum:
        - RS256
        - ES256
        - PS256
        example: ES256
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: |-
          URL of JSON Web Key Set containing the public keys used by a client application to authenticate itself
          with ACP
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI
        type: string
        x-nullable: false
      metadata:
        $ref: '#/definitions/Metadata'
      organisation_id:
        description: |-
          External organisation ID

          This field is used as an aud for message signing
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used
        type: string
        x-nullable: false
      privacy:
        $ref: '#/definitions/ClientPrivacy'
      redirect_uris:
        description: |-
          An array of OAuth allowed redirect URIs

          Redirect URIs are used after a user authorizes an application and ACP redirect them back to
          the application with an authorization code or an access token included in the URL.
        example:
        - https://example.com/callback
        items:
          type: string
        type: array
        x-nullable: false
      registration_token:
        $ref: '#/definitions/RegistrationToken'
      request_object_signing_alg:
        default: any
        description: |-
          Request object signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, and PS256 algorithms. If you do not want
          to use a signing algorithm, the value of the parameter should be set to `none`.
        enum:
        - any
        - none
        - RS256
        - ES256
        - PS256
        example: none
        type: string
        x-nullable: false
      request_uris:
        description: Array of absolute URIs that points to the Request Object that
          holds authorization request parameters.
        items:
          type: string
        type: array
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the only means of initiating
          an authorization request the client is allowed to use is PAR.
        type: boolean
        x-nullable: false
      response_types:
        default:
        - code
        description: |-
          An array of OAuth client response types configured for a client application

          The array may consist of the following arguments:

          `code` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code

          `code token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an authorization code

          `id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an ID token

          `code id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code, an ID token, an access token, and an access token
          type.

          `token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token and its type. This argument is used for the implicit grant
          flow, but is not recommended. Instead, you should use either the authorization code grant
          flow with PKCE or client authentication set to `none` and with the use of PKCE.
        example:
        - token
        - id_token
        - code
        items:
          enum:
          - token
          - id_token
          - code
          - code id_token
          - token id_token
          - token code
          - token id_token code
          type: string
        type: array
        x-nullable: false
      rotated_secrets:
        description: An array of rotated OAuth client secrets
        items:
          type: string
        minLength: 32
        type: array
        x-nullable: false
      scope:
        description: Space separated scopes for compatibility with OAuth specification
        example: email offline_access openid
        type: string
        x-nullable: false
      scopes:
        description: An array of string represented scopes assigned to a client application
        example:
        - email
        - offline_access
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      sector_identifier_uri:
        description: |-
          URL using the HTTPS scheme to be used in calculating Pseudonymous Identifiers by the OpenID Provider. The URL references a
          file with a single JSON array of redirect_uri values.
        example: https://api.jsonbin.io/b/5db6ef08688fed59d2841f1e
        type: string
        x-nullable: false
      software_id:
        description: |-
          A unique identifier string (e.g., a Universally Unique Identifier
          (UUID)) assigned by the client developer or software publisher
          The "software_id" SHOULD remain the same across
          multiple updates or versions of the same piece of software.  The
          value of this field is not intended to be human readable and is
          usually opaque to the client and authorization server.
        type: string
        x-nullable: false
      software_statement:
        description: |-
          A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
          asserts metadata values about the client software.  In some cases,
          a software statement is issued directly by the client
          developer.  In other cases, a software statement is issued by
          a third-party organization for use by the client developer.

          In both cases, the trust relationship the authorization server has
          with the issuer of the software statement is intended to be used
          as an input to the evaluation of whether the registration request
          is accepted.

          A software statement can be presented to an
          authorization server as part of the client registration request.
        type: string
        x-nullable: false
      software_version:
        description: |-
          A version identifier string for the client software identified by
          "software_id".  The value of the "software_version" SHOULD change
          on any update to the client software identified by the same
          "software_id".
        type: string
        x-nullable: false
      subject_type:
        default: public
        description: |-
          Subject identifier type

          Stores information if the subject identifier is of the `public` or the `pairwise` type.

          Subject identifiers are locally unique and never reassigned identifiers within the Issuer
          for the end-user and are inteded to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.

          For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
          Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        enum:
        - public
        - pairwise
        example: public
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application
        type: boolean
        x-nullable: false
      tenant_id:
        description: ID of a tenant where the client application is added
        example: default
        format: tenantID
        type: string
        x-nullable: false
      tls_client_auth_san_dns:
        description: A string containing the value of an expected dNSName SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_email:
        description: A string containing the value of an expected rfc822Name SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_ip:
        description: A string representation of an IP address in either dotted decimal
          notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined
          in [RFC5952]) that is expected to be present as an iPAddress SAN entry in
          the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_uri:
        description: A string containing the value of an expected uniformResourceIdentifier
          SAN entry in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_subject_dn:
        description: An [RFC4514] string representation of the expected subject distinguished
          name of the certificate.
        type: string
        x-nullable: false
      tls_client_certificate_bound_access_tokens:
        description: Boolean value indicating server support for mutual TLS client
          certificate-bound access tokens. If omitted, the default value is "false".
        type: boolean
        x-nullable: false
      token_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          Token endpoint authentication method configured for a client application

          ACP supports the following client authentication methods:
          client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt,
          self_signed_tls_client_auth, tls_client_auth, none.

          To learn more, see the [ACP client authentication documentation](https://docs.authorization.cloudentity.com/features/oauth/client_auth/)
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      token_endpoint_auth_signing_alg:
        default: none
        description: |-
          Signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, PS256, and HS256 algorithms.

          If your token endpoint authentication is set to the `private_key_jwt` method, the
          `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.

          If your token endpoint authentication is set to the `client_secret_jwt` method,
          the `token_endpoint_auth_signing_alg` parameter must be HS256.
        enum:
        - none
        - RS256
        - ES256
        - PS256
        - HS256
        example: none
        type: string
        x-nullable: false
      tos_uri:
        description: Terms of Service URL
        type: string
        x-nullable: false
      trusted:
        description: |-
          Defines whether the client application is trusted or not.

          For trusted clients, consent pages are skipped during the authorization process.
        type: boolean
        x-nullable: false
      userinfo_signed_response_alg:
        default: none
        description: |-
          JWS alg algorithm REQUIRED for signing UserInfo Responses.

          If specified, the response is JWT
          [JWT] serialized, and signed using JWS.

          If omitted, the default behavior is for the UserInfo Response to return the Claims
          as an UTF-8 encoded JSON object using the application/json content-type.
        enum:
        - none
        - RS256
        - ES256
        example: none
        type: string
        x-nullable: false
    required:
    - authorization_server_id
    - tenant_id
    title: Defines a client application and its properties.
    type: object
  ClientAdminResponse:
    properties:
      application_type:
        default: web
        description: |-
          String represented type of a client application

          Client applications can be either of a `web` or `native` types.

          Web applications include clients like server web applications or service apps.

          Native applications include single-page applications (SPAs) and mobile or desktop
          applications.

          Depending on the type of your application remember to choose appropriate security measures.
        example: web
        type: string
        x-nullable: false
      application_types:
        default:
        - server_web
        description: An array of dynamically calculated application types that can
          be used for filtering
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        - dcr
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          - dcr
          type: string
        readOnly: true
        type: array
        x-nullable: false
      audience:
        default:
        - client_id
        description: |-
          Identity of the intended recipients (the audience)

          Typically, the audience may be a single resources server or a list of resource servers.
          It is considered a good practice to limit the audience of the token for security purposes.
        items:
          type: string
        type: array
        x-nullable: false
      authorization_server_id:
        description: ID of the authorization server (workspace) to which a client
          application is tied
        example: default
        format: serverID
        type: string
        x-nullable: false
      backchannel_authentication_request_signing_alg:
        description: |-
          OPTIONAL. The JWS algorithm alg value that the Client will use for signing authentication requests.
          When omitted, the Client will not send signed authentication requests.
        type: string
        x-nullable: false
      backchannel_client_notification_endpoint:
        description: |-
          REQUIRED if the token delivery mode is set to ping or push.
          This is the endpoint to which the OP will post a notification after a successful or failed end-user authentication.
          It MUST be an HTTPS URL.
        type: string
        x-nullable: false
      backchannel_token_delivery_mode:
        description: 'REQUIRED. One of the following values: poll, ping, or push.'
        type: string
        x-nullable: false
      backchannel_user_code_parameter:
        description: |-
          OPTIONAL. Boolean value specifying whether the Client supports the user_code parameter.
          If omitted, the default value is false.
          This parameter only applies when OP parameter backchannel_user_code_parameter_supported is true.
        type: boolean
        x-nullable: false
      client_id:
        description: |-
          OAuth client application identifier

          If not provided, a random client ID is generated.
        format: clientID
        type: string
        x-nullable: false
      client_id_issued_at:
        description: |-
          Time at which the client identifier was issued.

          The time is represented as the number of seconds from
          1970-01-01T00:00:00Z as measured in UTC until the date/time of issuance.
        format: int64
        type: integer
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        example: My app
        type: string
        x-nullable: false
      client_secret:
        description: |-
          OAuth client secret

          If not provided, a random client secret is generated.
        minLength: 32
        type: string
        x-nullable: false
      client_secret_expires_at:
        description: |-
          The `client_secret_expires_at` holds an integer that defines the time at which the client
          secret expires

          If the client secret does not expire, the value should be set to `0`.
        format: int64
        type: integer
        x-nullable: false
      client_uri:
        description: URI of a client application
        type: string
        x-nullable: false
      description:
        description: Description of a client application
        type: string
        x-nullable: false
      developer_id:
        description: Optional developer owner of the client application
        format: subject
        type: string
        x-nullable: false
      developer_metadata:
        $ref: '#/definitions/Metadata'
      dynamically_registered:
        type: boolean
        x-nullable: false
      grant_types:
        default:
        - authorization_code
        description: |-
          An array of allowed OAuth client grant types

          The `grantTypes` array stores OAuth flows that are allowed for a given client application.

          To know more about OAuth grant flows, see the
          [ACP grant flows documentation](https://docs.authorization.cloudentity.com/features/oauth/grant_flows/).
        example:
        - password
        - refresh_token
        - client_credentials
        - implicit
        - authorization_code
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          type: string
        type: array
        x-nullable: false
      hashed_rotated_secrets:
        description: An array of hashed rotated client secrets
        items:
          type: string
        type: array
        x-nullable: false
      hashed_secret:
        description: |-
          Hashed client secret

          Hashing client secrets provides additional security for your secrets storage as it hides
          plaintext secrets from being viewed both in the UI and the database.
        type: string
        x-nullable: false
      id_token_encrypted_response_alg:
        description: JWE alg algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        type: string
        x-nullable: false
      id_token_encrypted_response_enc:
        description: JWE enc algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - A256GCM
        - A128CBC-HS256
        type: string
        x-nullable: false
      id_token_signed_response_alg:
        description: |-
          Algorithm for signing ID tokens issued for a client application

          The default value depends on authorization server configuration.
        enum:
        - RS256
        - ES256
        - PS256
        example: ES256
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: |-
          URL of JSON Web Key Set containing the public keys used by a client application to authenticate itself
          with ACP
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI
        type: string
        x-nullable: false
      metadata:
        $ref: '#/definitions/Metadata'
      organisation_id:
        description: |-
          External organisation ID

          This field is used as an aud for message signing
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used
        type: string
        x-nullable: false
      privacy:
        $ref: '#/definitions/ClientPrivacy'
      redirect_uris:
        description: |-
          An array of OAuth allowed redirect URIs

          Redirect URIs are used after a user authorizes an application and ACP redirect them back to
          the application with an authorization code or an access token included in the URL.
        example:
        - https://example.com/callback
        items:
          type: string
        type: array
        x-nullable: false
      request_object_signing_alg:
        default: any
        description: |-
          Request object signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, and PS256 algorithms. If you do not want
          to use a signing algorithm, the value of the parameter should be set to `none`.
        enum:
        - any
        - none
        - RS256
        - ES256
        - PS256
        example: none
        type: string
        x-nullable: false
      request_uris:
        description: Array of absolute URIs that points to the Request Object that
          holds authorization request parameters.
        items:
          type: string
        type: array
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the only means of initiating
          an authorization request the client is allowed to use is PAR.
        type: boolean
        x-nullable: false
      response_types:
        default:
        - code
        description: |-
          An array of OAuth client response types configured for a client application

          The array may consist of the following arguments:

          `code` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code

          `code token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an authorization code

          `id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an ID token

          `code id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code, an ID token, an access token, and an access token
          type.

          `token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token and its type. This argument is used for the implicit grant
          flow, but is not recommended. Instead, you should use either the authorization code grant
          flow with PKCE or client authentication set to `none` and with the use of PKCE.
        example:
        - token
        - id_token
        - code
        items:
          enum:
          - token
          - id_token
          - code
          - code id_token
          - token id_token
          - token code
          - token id_token code
          type: string
        type: array
        x-nullable: false
      rotated_secrets:
        description: An array of rotated OAuth client secrets
        items:
          type: string
        minLength: 32
        type: array
        x-nullable: false
      scope:
        description: Space separated scopes for compatibility with OAuth specification
        example: email offline_access openid
        type: string
        x-nullable: false
      scopes:
        description: An array of string represented scopes assigned to a client application
        example:
        - email
        - offline_access
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      sector_identifier_uri:
        description: |-
          URL using the HTTPS scheme to be used in calculating Pseudonymous Identifiers by the OpenID Provider. The URL references a
          file with a single JSON array of redirect_uri values.
        example: https://api.jsonbin.io/b/5db6ef08688fed59d2841f1e
        type: string
        x-nullable: false
      software_id:
        description: |-
          A unique identifier string (e.g., a Universally Unique Identifier
          (UUID)) assigned by the client developer or software publisher
          The "software_id" SHOULD remain the same across
          multiple updates or versions of the same piece of software.  The
          value of this field is not intended to be human readable and is
          usually opaque to the client and authorization server.
        type: string
        x-nullable: false
      software_statement:
        description: |-
          A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
          asserts metadata values about the client software.  In some cases,
          a software statement is issued directly by the client
          developer.  In other cases, a software statement is issued by
          a third-party organization for use by the client developer.

          In both cases, the trust relationship the authorization server has
          with the issuer of the software statement is intended to be used
          as an input to the evaluation of whether the registration request
          is accepted.

          A software statement can be presented to an
          authorization server as part of the client registration request.
        type: string
        x-nullable: false
      software_version:
        description: |-
          A version identifier string for the client software identified by
          "software_id".  The value of the "software_version" SHOULD change
          on any update to the client software identified by the same
          "software_id".
        type: string
        x-nullable: false
      subject_type:
        default: public
        description: |-
          Subject identifier type

          Stores information if the subject identifier is of the `public` or the `pairwise` type.

          Subject identifiers are locally unique and never reassigned identifiers within the Issuer
          for the end-user and are inteded to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.

          For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
          Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        enum:
        - public
        - pairwise
        example: public
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application
        type: boolean
        x-nullable: false
      tenant_id:
        format: tenantID
        type: string
        x-nullable: false
      tls_client_auth_san_dns:
        description: A string containing the value of an expected dNSName SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_email:
        description: A string containing the value of an expected rfc822Name SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_ip:
        description: A string representation of an IP address in either dotted decimal
          notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined
          in [RFC5952]) that is expected to be present as an iPAddress SAN entry in
          the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_uri:
        description: A string containing the value of an expected uniformResourceIdentifier
          SAN entry in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_subject_dn:
        description: An [RFC4514] string representation of the expected subject distinguished
          name of the certificate.
        type: string
        x-nullable: false
      tls_client_certificate_bound_access_tokens:
        description: Boolean value indicating server support for mutual TLS client
          certificate-bound access tokens. If omitted, the default value is "false".
        type: boolean
        x-nullable: false
      token_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          Token endpoint authentication method configured for a client application

          ACP supports the following client authentication methods:
          client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt,
          self_signed_tls_client_auth, tls_client_auth, none.

          To learn more, see the [ACP client authentication documentation](https://docs.authorization.cloudentity.com/features/oauth/client_auth/)
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      token_endpoint_auth_signing_alg:
        default: none
        description: |-
          Signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, PS256, and HS256 algorithms.

          If your token endpoint authentication is set to the `private_key_jwt` method, the
          `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.

          If your token endpoint authentication is set to the `client_secret_jwt` method,
          the `token_endpoint_auth_signing_alg` parameter must be HS256.
        enum:
        - none
        - RS256
        - ES256
        - PS256
        - HS256
        example: none
        type: string
        x-nullable: false
      tos_uri:
        description: Terms of Service URL
        type: string
        x-nullable: false
      trusted:
        description: |-
          Defines whether the client application is trusted or not.

          For trusted clients, consent pages are skipped during the authorization process.
        type: boolean
        x-nullable: false
      userinfo_signed_response_alg:
        default: none
        description: |-
          JWS alg algorithm REQUIRED for signing UserInfo Responses.

          If specified, the response is JWT
          [JWT] serialized, and signed using JWS.

          If omitted, the default behavior is for the UserInfo Response to return the Claims
          as an UTF-8 encoded JSON object using the application/json content-type.
        enum:
        - none
        - RS256
        - ES256
        example: none
        type: string
        x-nullable: false
    required:
    - authorization_server_id
    type: object
  ClientAuditPayload:
    properties:
      application_type:
        default: web
        description: |-
          String represented type of a client application

          Client applications can be either of a `web` or `native` types.

          Web applications include clients like server web applications or service apps.

          Native applications include single-page applications (SPAs) and mobile or desktop
          applications.

          Depending on the type of your application remember to choose appropriate security measures.
        example: web
        type: string
        x-nullable: false
      application_types:
        default:
        - server_web
        description: An array of dynamically calculated application types that can
          be used for filtering
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        - dcr
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          - dcr
          type: string
        readOnly: true
        type: array
        x-nullable: false
      audience:
        default:
        - client_id
        description: |-
          Identity of the intended recipients (the audience)

          Typically, the audience may be a single resources server or a list of resource servers.
          It is considered a good practice to limit the audience of the token for security purposes.
        items:
          type: string
        type: array
        x-nullable: false
      authorization_server_id:
        description: ID of the authorization server (workspace) to which a client
          application is tied
        example: default
        format: serverID
        type: string
        x-nullable: false
      backchannel_authentication_request_signing_alg:
        description: |-
          OPTIONAL. The JWS algorithm alg value that the Client will use for signing authentication requests.
          When omitted, the Client will not send signed authentication requests.
        type: string
        x-nullable: false
      backchannel_client_notification_endpoint:
        description: |-
          REQUIRED if the token delivery mode is set to ping or push.
          This is the endpoint to which the OP will post a notification after a successful or failed end-user authentication.
          It MUST be an HTTPS URL.
        type: string
        x-nullable: false
      backchannel_token_delivery_mode:
        description: 'REQUIRED. One of the following values: poll, ping, or push.'
        type: string
        x-nullable: false
      backchannel_user_code_parameter:
        description: |-
          OPTIONAL. Boolean value specifying whether the Client supports the user_code parameter.
          If omitted, the default value is false.
          This parameter only applies when OP parameter backchannel_user_code_parameter_supported is true.
        type: boolean
        x-nullable: false
      client_id:
        description: |-
          OAuth client application identifier

          If not provided, a random client ID is generated.
        format: clientID
        type: string
        x-nullable: false
      client_id_issued_at:
        description: |-
          Time at which the client identifier was issued.

          The time is represented as the number of seconds from
          1970-01-01T00:00:00Z as measured in UTC until the date/time of issuance.
        format: int64
        type: integer
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        example: My app
        type: string
        x-nullable: false
      client_secret_expires_at:
        description: |-
          The `client_secret_expires_at` holds an integer that defines the time at which the client
          secret expires

          If the client secret does not expire, the value should be set to `0`.
        format: int64
        type: integer
        x-nullable: false
      client_uri:
        description: URI of a client application
        type: string
        x-nullable: false
      description:
        description: Description of a client application
        type: string
        x-nullable: false
      developer_id:
        description: Optional developer owner of the client application
        format: subject
        type: string
        x-nullable: false
      developer_metadata:
        $ref: '#/definitions/Metadata'
      dynamically_registered:
        type: boolean
        x-nullable: false
      grant_types:
        default:
        - authorization_code
        description: |-
          An array of allowed OAuth client grant types

          The `grantTypes` array stores OAuth flows that are allowed for a given client application.

          To know more about OAuth grant flows, see the
          [ACP grant flows documentation](https://docs.authorization.cloudentity.com/features/oauth/grant_flows/).
        example:
        - password
        - refresh_token
        - client_credentials
        - implicit
        - authorization_code
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          type: string
        type: array
        x-nullable: false
      id_token_encrypted_response_alg:
        description: JWE alg algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        type: string
        x-nullable: false
      id_token_encrypted_response_enc:
        description: JWE enc algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - A256GCM
        - A128CBC-HS256
        type: string
        x-nullable: false
      id_token_signed_response_alg:
        description: |-
          Algorithm for signing ID tokens issued for a client application

          The default value depends on authorization server configuration.
        enum:
        - RS256
        - ES256
        - PS256
        example: ES256
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: |-
          URL of JSON Web Key Set containing the public keys used by a client application to authenticate itself
          with ACP
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI
        type: string
        x-nullable: false
      metadata:
        $ref: '#/definitions/Metadata'
      organisation_id:
        description: |-
          External organisation ID

          This field is used as an aud for message signing
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used
        type: string
        x-nullable: false
      privacy:
        $ref: '#/definitions/ClientPrivacy'
      redirect_uris:
        description: |-
          An array of OAuth allowed redirect URIs

          Redirect URIs are used after a user authorizes an application and ACP redirect them back to
          the application with an authorization code or an access token included in the URL.
        example:
        - https://example.com/callback
        items:
          type: string
        type: array
        x-nullable: false
      request_object_signing_alg:
        default: any
        description: |-
          Request object signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, and PS256 algorithms. If you do not want
          to use a signing algorithm, the value of the parameter should be set to `none`.
        enum:
        - any
        - none
        - RS256
        - ES256
        - PS256
        example: none
        type: string
        x-nullable: false
      request_uris:
        description: Array of absolute URIs that points to the Request Object that
          holds authorization request parameters.
        items:
          type: string
        type: array
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the only means of initiating
          an authorization request the client is allowed to use is PAR.
        type: boolean
        x-nullable: false
      response_types:
        default:
        - code
        description: |-
          An array of OAuth client response types configured for a client application

          The array may consist of the following arguments:

          `code` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code

          `code token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an authorization code

          `id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an ID token

          `code id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code, an ID token, an access token, and an access token
          type.

          `token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token and its type. This argument is used for the implicit grant
          flow, but is not recommended. Instead, you should use either the authorization code grant
          flow with PKCE or client authentication set to `none` and with the use of PKCE.
        example:
        - token
        - id_token
        - code
        items:
          enum:
          - token
          - id_token
          - code
          - code id_token
          - token id_token
          - token code
          - token id_token code
          type: string
        type: array
        x-nullable: false
      scope:
        description: Space separated scopes for compatibility with OAuth specification
        example: email offline_access openid
        type: string
        x-nullable: false
      scopes:
        description: An array of string represented scopes assigned to a client application
        example:
        - email
        - offline_access
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      sector_identifier_uri:
        description: |-
          URL using the HTTPS scheme to be used in calculating Pseudonymous Identifiers by the OpenID Provider. The URL references a
          file with a single JSON array of redirect_uri values.
        example: https://api.jsonbin.io/b/5db6ef08688fed59d2841f1e
        type: string
        x-nullable: false
      software_statement:
        description: |-
          A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
          asserts metadata values about the client software.  In some cases,
          a software statement is issued directly by the client
          developer.  In other cases, a software statement is issued by
          a third-party organization for use by the client developer.

          In both cases, the trust relationship the authorization server has
          with the issuer of the software statement is intended to be used
          as an input to the evaluation of whether the registration request
          is accepted.

          A software statement can be presented to an
          authorization server as part of the client registration request.
        type: string
        x-nullable: false
      subject_type:
        default: public
        description: |-
          Subject identifier type

          Stores information if the subject identifier is of the `public` or the `pairwise` type.

          Subject identifiers are locally unique and never reassigned identifiers within the Issuer
          for the end-user and are inteded to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.

          For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
          Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        enum:
        - public
        - pairwise
        example: public
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application
        type: boolean
        x-nullable: false
      tls_client_auth_san_dns:
        description: A string containing the value of an expected dNSName SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_email:
        description: A string containing the value of an expected rfc822Name SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_ip:
        description: A string representation of an IP address in either dotted decimal
          notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined
          in [RFC5952]) that is expected to be present as an iPAddress SAN entry in
          the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_uri:
        description: A string containing the value of an expected uniformResourceIdentifier
          SAN entry in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_subject_dn:
        description: An [RFC4514] string representation of the expected subject distinguished
          name of the certificate.
        type: string
        x-nullable: false
      tls_client_certificate_bound_access_tokens:
        description: Boolean value indicating server support for mutual TLS client
          certificate-bound access tokens. If omitted, the default value is "false".
        type: boolean
        x-nullable: false
      token_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          Token endpoint authentication method configured for a client application

          ACP supports the following client authentication methods:
          client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt,
          self_signed_tls_client_auth, tls_client_auth, none.

          To learn more, see the [ACP client authentication documentation](https://docs.authorization.cloudentity.com/features/oauth/client_auth/)
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      token_endpoint_auth_signing_alg:
        default: none
        description: |-
          Signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, PS256, and HS256 algorithms.

          If your token endpoint authentication is set to the `private_key_jwt` method, the
          `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.

          If your token endpoint authentication is set to the `client_secret_jwt` method,
          the `token_endpoint_auth_signing_alg` parameter must be HS256.
        enum:
        - none
        - RS256
        - ES256
        - PS256
        - HS256
        example: none
        type: string
        x-nullable: false
      tos_uri:
        description: Terms of Service URL
        type: string
        x-nullable: false
      trusted:
        description: |-
          Defines whether the client application is trusted or not.

          For trusted clients, consent pages are skipped during the authorization process.
        type: boolean
        x-nullable: false
      userinfo_signed_response_alg:
        default: none
        description: |-
          JWS alg algorithm REQUIRED for signing UserInfo Responses.

          If specified, the response is JWT
          [JWT] serialized, and signed using JWS.

          If omitted, the default behavior is for the UserInfo Response to return the Claims
          as an UTF-8 encoded JSON object using the application/json content-type.
        enum:
        - none
        - RS256
        - ES256
        example: none
        type: string
        x-nullable: false
    required:
    - authorization_server_id
    type: object
  ClientJWK:
    properties:
      alg:
        description: |-
          The "alg" (algorithm) parameter identifies the algorithm intended for
          use with the key.  The values used should either be registered in the
          IANA "JSON Web Signature and Encryption Algorithms" registry
          established by [JWA] or be a value that contains a Collision-
          Resistant Name.
        example: RS256
        type: string
        x-nullable: false
      crv:
        example: P-256
        type: string
        x-nullable: false
      d:
        example: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE
        type: string
        x-nullable: false
      dp:
        example: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0
        type: string
        x-nullable: false
      dq:
        example: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk
        type: string
        x-nullable: false
      e:
        example: AQAB
        type: string
        x-nullable: false
      k:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      kid:
        description: |-
          The "kid" (key ID) parameter is used to match a specific key.  This
          is used, for instance, to choose among a set of keys within a JWK Set
          during key rollover.  The structure of the "kid" value is
          unspecified.  When "kid" values are used within a JWK Set, different
          keys within the JWK Set SHOULD use distinct "kid" values.  (One
          example in which different keys might use the same "kid" value is if
          they have different "kty" (key type) values but are considered to be
          equivalent alternatives by the application using them.)  The "kid"
          value is a case-sensitive string.
        example: 1603dfe0af8f4596
        type: string
        x-nullable: false
      kty:
        description: |-
          The "kty" (key type) parameter identifies the cryptographic algorithm
          family used with the key, such as "RSA" or "EC". "kty" values should
          either be registered in the IANA "JSON Web Key Types" registry
          established by [JWA] or be a value that contains a Collision-
          Resistant Name.  The "kty" value is a case-sensitive string.
        example: RSA
        type: string
        x-nullable: false
      "n":
        example: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0
        type: string
        x-nullable: false
      p:
        example: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ
        type: string
        x-nullable: false
      q:
        example: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ
        type: string
        x-nullable: false
      qi:
        example: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU
        type: string
        x-nullable: false
      use:
        description: |-
          Use ("public key use") identifies the intended use of
          the public key. The "use" parameter is employed to indicate whether
          a public key is used for encrypting data or verifying the signature
          on data. Values are commonly "sig" (signature) or "enc" (encryption).
        example: sig
        type: string
        x-nullable: false
      x:
        example: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU
        type: string
        x-nullable: false
      x5c:
        description: |-
          The "x5c" (X.509 certificate chain) parameter contains a chain of one
          or more PKIX certificates [RFC5280].  The certificate chain is
          represented as a JSON array of certificate value strings.  Each
          string in the array is a base64-encoded (Section 4 of [RFC4648] --
          not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
          The PKIX certificate containing the key value MUST be the first
          certificate.
        items:
          type: string
        type: array
        x-nullable: false
      x5t:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      x5t#S256:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      "y":
        example: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0
        type: string
        x-nullable: false
    required:
    - kty
    type: object
  ClientJWKs:
    properties:
      keys:
        example: []
        items:
          $ref: '#/definitions/ClientJWK'
        type: array
        x-nullable: false
    type: object
  ClientPrivacy:
    properties:
      scopes:
        additionalProperties:
          $ref: '#/definitions/ScopePrivacyInformation'
        description: optional privacy information mapping for scopes
        type: object
        x-nullable: false
    type: object
  ClientsForAdmin:
    properties:
      clients:
        items:
          $ref: '#/definitions/ClientAdminResponse'
        type: array
        x-nullable: false
    type: object
  CognitoCredentials:
    description: Cognito IDP specific settings
    properties:
      client_secret:
        description: Cognito app client secret from your application settings
        type: string
        x-nullable: false
    type: object
  CognitoIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/CognitoCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/CognitoSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  CognitoSettings:
    description: Cognito IDP specific settings
    properties:
      client_id:
        description: Cognito app client ID from your application settings
        example: client
        type: string
        x-nullable: false
      get_user_info:
        description: If enabled, additional user data is collected from the `userinfo`
          Cognito API
        type: boolean
        x-nullable: false
      pool_id:
        description: |-
          Cognito pool ID

          A user pool is a user directory in Amazon Cognito. It enables your users to sign in to your
          application through Amazon Cognito. You can find your pool ID in your User Pools > Federated
          Identities settings.
        type: string
        x-nullable: false
      region:
        description: AWS Region where the user pool is hosted
        example: us-east-1
        type: string
        x-nullable: false
      scopes:
        description: |-
          An array of allowed OAuth scopes which the client requests

          The following scopes can be allowed for a Cognito application:
          `phone`, `email`, `openid`, `aws.cognito.signin.user.admin`, `profile`.
        example:
        - email
        - profile
        - openid
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  Confirmation:
    properties:
      x5t#S256:
        type: string
        x-nullable: false
    type: object
  Consent:
    properties:
      can_be_withdrawn:
        description: flag determining if can user withdrawn consent
        example: false
        type: boolean
        x-nullable: false
      description:
        description: consent description
        example: End User License Agreement
        type: string
        x-nullable: false
      id:
        description: consent unique identifier
        example: "1"
        format: consentID
        type: string
        x-nullable: false
      internal_services:
        description: internal services
        items:
          $ref: '#/definitions/ConsentService'
        type: array
        x-nullable: false
      name:
        description: consent name
        example: EULA
        type: string
        x-nullable: false
      pii_categories:
        description: PII Categories
        items:
          $ref: '#/definitions/PIICategory'
        type: array
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      third_party_services:
        description: third party services
        items:
          $ref: '#/definitions/ConsentService'
        type: array
        x-nullable: false
      update_existing_grants:
        description: 'strategy for upading existing grants, one of: explicitAll, implicitAll,
          keepCurrent'
        example: explicitAll
        type: string
        x-nullable: false
      valid_from:
        description: marks the time from which the consent is in use. Can't be set
          to a future time
        example: "2019-12-11T13:44:28.772101Z"
        format: date-time
        type: string
        x-nullable: false
      version:
        description: consent version. When a consent is updated, version is incremented.
        example: 1
        format: int64
        type: integer
        x-nullable: false
    type: object
  ConsentAction:
    properties:
      description:
        description: consent description
        example: Consents required by application X
        type: string
        x-nullable: false
      id:
        description: unique consent action id
        example: "1"
        format: consentActionID
        type: string
        x-nullable: false
      name:
        description: consent action name
        example: application_x
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
    type: object
  ConsentActionToConsent:
    properties:
      can_be_withdrawn:
        description: flag determining if can user withdrawn consent
        example: false
        type: boolean
        x-nullable: false
      description:
        description: consent description
        example: End User License Agreement
        type: string
        x-nullable: false
      id:
        description: consent unique identifier
        example: "1"
        format: consentID
        type: string
        x-nullable: false
      internal_services:
        description: internal services
        items:
          $ref: '#/definitions/ConsentService'
        type: array
        x-nullable: false
      name:
        description: consent name
        example: EULA
        type: string
        x-nullable: false
      pii_categories:
        description: PII Categories
        items:
          $ref: '#/definitions/PIICategory'
        type: array
        x-nullable: false
      required:
        description: is consent required
        example: false
        type: boolean
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      third_party_services:
        description: third party services
        items:
          $ref: '#/definitions/ConsentService'
        type: array
        x-nullable: false
      update_existing_grants:
        description: 'strategy for upading existing grants, one of: explicitAll, implicitAll,
          keepCurrent'
        example: explicitAll
        type: string
        x-nullable: false
      valid_from:
        description: marks the time from which the consent is in use. Can't be set
          to a future time
        example: "2019-12-11T13:44:28.772101Z"
        format: date-time
        type: string
        x-nullable: false
      version:
        description: consent version. When a consent is updated, version is incremented.
        example: 1
        format: int64
        type: integer
        x-nullable: false
    type: object
  ConsentActionWithConsents:
    properties:
      consents:
        items:
          $ref: '#/definitions/ConsentActionToConsent'
        type: array
        x-nullable: false
      description:
        description: consent description
        example: Consents required by application X
        type: string
        x-nullable: false
      id:
        description: unique consent action id
        example: "1"
        format: consentActionID
        type: string
        x-nullable: false
      name:
        description: consent action name
        example: application_x
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
    type: object
  ConsentActions:
    properties:
      consent_actions:
        items:
          $ref: '#/definitions/ConsentAction'
        type: array
        x-nullable: false
    type: object
  ConsentAuditEventPayload:
    properties:
      consent:
        $ref: '#/definitions/ConsentPayload'
    type: object
  ConsentGrantContext:
    properties:
      device:
        additionalProperties:
          type: object
        description: json object - device print of the End User's device
        type: object
        x-nullable: false
      ip:
        description: string in the form of a valid IP v 4 address, represents the
          current IP of the End User
        example: 52.14.142.76
        type: string
        x-nullable: false
      location:
        description: 2 element array of floats - current geolocation of the end-user,
          the format is [lat, long]
        example:
        - 25.2084
        - 55.2719
        items:
          format: double
          type: number
        type: array
        x-nullable: false
    type: object
  ConsentGrantedEvent:
    properties:
      collection_timestamp:
        description: time when the grant occurred
        example: 1257894000000000000
        format: int64
        type: integer
        x-nullable: false
      consent:
        $ref: '#/definitions/Consent'
      consent_grant_act_id:
        description: consent grant id
        example: 27fa83a8-d0a6-48da-8529-42105bfa0ede
        format: consentGrantActID
        type: string
        x-nullable: false
      consent_id:
        description: consent id
        example: "1"
        format: consentID
        type: string
        x-nullable: false
      context:
        $ref: '#/definitions/ConsentGrantContext'
      given_at:
        description: given at timestamp
        format: date-time
        type: string
        x-nullable: false
      grant_type:
        description: 'grant type, one of: implicit, explicit'
        example: implicit
        type: string
        x-nullable: false
      language:
        description: language in which the consent was obtained [ISO 639]
        example: en
        type: string
        x-nullable: false
      subject:
        description: subject
        example: peter
        format: subject
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      triggered_by_action:
        description: optional string with action_id - can be set if the consent grant/withdraw
          request was caused when an app asked the user for consent required for a
          specific action
        example: "1"
        type: string
        x-nullable: false
      version:
        description: version
        example: 1
        format: int64
        type: integer
        x-nullable: false
    type: object
  ConsentPayload:
    properties:
      id:
        description: consent id
        type: string
        x-nullable: false
      kind:
        $ref: '#/definitions/AuditConsentKind'
      type:
        description: 'Type of a consent, specifies the subject of consent, e.g.: domestic_payment'
        type: string
        x-nullable: false
    type: object
  ConsentRevokedEvent:
    properties:
      collection_timestamp:
        description: time when the grant occurred
        example: 1257894000000000000
        format: int64
        type: integer
        x-nullable: false
      consent:
        $ref: '#/definitions/Consent'
      consent_grant_act_id:
        description: consent grant id
        example: 27fa83a8-d0a6-48da-8529-42105bfa0ede
        format: consentGrantActID
        type: string
        x-nullable: false
      consent_id:
        description: consent id
        example: "1"
        format: consentID
        type: string
        x-nullable: false
      context:
        $ref: '#/definitions/ConsentGrantContext'
      given_at:
        description: given at timestamp
        format: date-time
        type: string
        x-nullable: false
      grant_type:
        description: 'grant type, one of: implicit, explicit'
        example: implicit
        type: string
        x-nullable: false
      language:
        description: language in which the consent was obtained [ISO 639]
        example: en
        type: string
        x-nullable: false
      subject:
        description: subject
        example: peter
        format: subject
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      triggered_by_action:
        description: optional string with action_id - can be set if the consent grant/withdraw
          request was caused when an app asked the user for consent required for a
          specific action
        example: "1"
        type: string
        x-nullable: false
      version:
        description: version
        example: 1
        format: int64
        type: integer
        x-nullable: false
    type: object
  ConsentService:
    properties:
      name:
        description: name
        type: string
        x-nullable: false
      purposes:
        description: purpose
        items:
          $ref: '#/definitions/Purpose'
        type: array
        x-nullable: false
    type: object
  Consents:
    properties:
      consents:
        description: list of consents
        items:
          $ref: '#/definitions/Consent'
        type: array
        x-nullable: false
    type: object
  CreateClientAdminRequest:
    properties:
      application_type:
        default: web
        description: |-
          String represented type of a client application

          Client applications can be either of a `web` or `native` types.

          Web applications include clients like server web applications or service apps.

          Native applications include single-page applications (SPAs) and mobile or desktop
          applications.

          Depending on the type of your application remember to choose appropriate security measures.
        example: web
        type: string
        x-nullable: false
      application_types:
        default:
        - server_web
        description: An array of dynamically calculated application types that can
          be used for filtering
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        - dcr
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          - dcr
          type: string
        readOnly: true
        type: array
        x-nullable: false
      audience:
        default:
        - client_id
        description: |-
          Identity of the intended recipients (the audience)

          Typically, the audience may be a single resources server or a list of resource servers.
          It is considered a good practice to limit the audience of the token for security purposes.
        items:
          type: string
        type: array
        x-nullable: false
      authorization_server_id:
        description: ID of the authorization server (workspace) to which a client
          application is tied
        example: default
        format: serverID
        type: string
        x-nullable: false
      backchannel_authentication_request_signing_alg:
        description: |-
          OPTIONAL. The JWS algorithm alg value that the Client will use for signing authentication requests.
          When omitted, the Client will not send signed authentication requests.
        type: string
        x-nullable: false
      backchannel_client_notification_endpoint:
        description: |-
          REQUIRED if the token delivery mode is set to ping or push.
          This is the endpoint to which the OP will post a notification after a successful or failed end-user authentication.
          It MUST be an HTTPS URL.
        type: string
        x-nullable: false
      backchannel_token_delivery_mode:
        description: 'REQUIRED. One of the following values: poll, ping, or push.'
        type: string
        x-nullable: false
      backchannel_user_code_parameter:
        description: |-
          OPTIONAL. Boolean value specifying whether the Client supports the user_code parameter.
          If omitted, the default value is false.
          This parameter only applies when OP parameter backchannel_user_code_parameter_supported is true.
        type: boolean
        x-nullable: false
      client_id:
        description: |-
          OAuth client application identifier

          If not provided, a random client ID is generated.
        format: clientID
        type: string
        x-nullable: false
      client_id_issued_at:
        description: |-
          Time at which the client identifier was issued.

          The time is represented as the number of seconds from
          1970-01-01T00:00:00Z as measured in UTC until the date/time of issuance.
        format: int64
        type: integer
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        example: My app
        type: string
        x-nullable: false
      client_secret:
        description: |-
          OAuth client secret

          If not provided, a random client secret is generated.
        minLength: 32
        type: string
        x-nullable: false
      client_secret_expires_at:
        description: |-
          The `client_secret_expires_at` holds an integer that defines the time at which the client
          secret expires

          If the client secret does not expire, the value should be set to `0`.
        format: int64
        type: integer
        x-nullable: false
      client_uri:
        description: URI of a client application
        type: string
        x-nullable: false
      description:
        description: Description of a client application
        type: string
        x-nullable: false
      developer_id:
        description: Optional developer owner of the client application
        format: subject
        type: string
        x-nullable: false
      developer_metadata:
        $ref: '#/definitions/Metadata'
      grant_types:
        default:
        - authorization_code
        description: |-
          An array of allowed OAuth client grant types

          The `grantTypes` array stores OAuth flows that are allowed for a given client application.

          To know more about OAuth grant flows, see the
          [ACP grant flows documentation](https://docs.authorization.cloudentity.com/features/oauth/grant_flows/).
        example:
        - password
        - refresh_token
        - client_credentials
        - implicit
        - authorization_code
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          type: string
        type: array
        x-nullable: false
      hashed_rotated_secrets:
        description: An array of hashed rotated client secrets
        items:
          type: string
        type: array
        x-nullable: false
      hashed_secret:
        description: |-
          Hashed client secret

          Hashing client secrets provides additional security for your secrets storage as it hides
          plaintext secrets from being viewed both in the UI and the database.
        type: string
        x-nullable: false
      id_token_encrypted_response_alg:
        description: JWE alg algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        type: string
        x-nullable: false
      id_token_encrypted_response_enc:
        description: JWE enc algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - A256GCM
        - A128CBC-HS256
        type: string
        x-nullable: false
      id_token_signed_response_alg:
        description: |-
          Algorithm for signing ID tokens issued for a client application

          The default value depends on authorization server configuration.
        enum:
        - RS256
        - ES256
        - PS256
        example: ES256
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: |-
          URL of JSON Web Key Set containing the public keys used by a client application to authenticate itself
          with ACP
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI
        type: string
        x-nullable: false
      metadata:
        $ref: '#/definitions/Metadata'
      organisation_id:
        description: |-
          External organisation ID

          This field is used as an aud for message signing
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used
        type: string
        x-nullable: false
      privacy:
        $ref: '#/definitions/ClientPrivacy'
      redirect_uris:
        description: |-
          An array of OAuth allowed redirect URIs

          Redirect URIs are used after a user authorizes an application and ACP redirect them back to
          the application with an authorization code or an access token included in the URL.
        example:
        - https://example.com/callback
        items:
          type: string
        type: array
        x-nullable: false
      request_object_signing_alg:
        default: any
        description: |-
          Request object signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, and PS256 algorithms. If you do not want
          to use a signing algorithm, the value of the parameter should be set to `none`.
        enum:
        - any
        - none
        - RS256
        - ES256
        - PS256
        example: none
        type: string
        x-nullable: false
      request_uris:
        description: Array of absolute URIs that points to the Request Object that
          holds authorization request parameters.
        items:
          type: string
        type: array
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the only means of initiating
          an authorization request the client is allowed to use is PAR.
        type: boolean
        x-nullable: false
      response_types:
        default:
        - code
        description: |-
          An array of OAuth client response types configured for a client application

          The array may consist of the following arguments:

          `code` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code

          `code token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an authorization code

          `id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an ID token

          `code id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code, an ID token, an access token, and an access token
          type.

          `token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token and its type. This argument is used for the implicit grant
          flow, but is not recommended. Instead, you should use either the authorization code grant
          flow with PKCE or client authentication set to `none` and with the use of PKCE.
        example:
        - token
        - id_token
        - code
        items:
          enum:
          - token
          - id_token
          - code
          - code id_token
          - token id_token
          - token code
          - token id_token code
          type: string
        type: array
        x-nullable: false
      rotated_secrets:
        description: An array of rotated OAuth client secrets
        items:
          type: string
        minLength: 32
        type: array
        x-nullable: false
      scope:
        description: Space separated scopes for compatibility with OAuth specification
        example: email offline_access openid
        type: string
        x-nullable: false
      scopes:
        description: An array of string represented scopes assigned to a client application
        example:
        - email
        - offline_access
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      sector_identifier_uri:
        description: |-
          URL using the HTTPS scheme to be used in calculating Pseudonymous Identifiers by the OpenID Provider. The URL references a
          file with a single JSON array of redirect_uri values.
        example: https://api.jsonbin.io/b/5db6ef08688fed59d2841f1e
        type: string
        x-nullable: false
      software_statement:
        description: |-
          A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
          asserts metadata values about the client software.  In some cases,
          a software statement is issued directly by the client
          developer.  In other cases, a software statement is issued by
          a third-party organization for use by the client developer.

          In both cases, the trust relationship the authorization server has
          with the issuer of the software statement is intended to be used
          as an input to the evaluation of whether the registration request
          is accepted.

          A software statement can be presented to an
          authorization server as part of the client registration request.
        type: string
        x-nullable: false
      subject_type:
        default: public
        description: |-
          Subject identifier type

          Stores information if the subject identifier is of the `public` or the `pairwise` type.

          Subject identifiers are locally unique and never reassigned identifiers within the Issuer
          for the end-user and are inteded to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.

          For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
          Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        enum:
        - public
        - pairwise
        example: public
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application
        type: boolean
        x-nullable: false
      tls_client_auth_san_dns:
        description: A string containing the value of an expected dNSName SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_email:
        description: A string containing the value of an expected rfc822Name SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_ip:
        description: A string representation of an IP address in either dotted decimal
          notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined
          in [RFC5952]) that is expected to be present as an iPAddress SAN entry in
          the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_uri:
        description: A string containing the value of an expected uniformResourceIdentifier
          SAN entry in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_subject_dn:
        description: An [RFC4514] string representation of the expected subject distinguished
          name of the certificate.
        type: string
        x-nullable: false
      tls_client_certificate_bound_access_tokens:
        description: Boolean value indicating server support for mutual TLS client
          certificate-bound access tokens. If omitted, the default value is "false".
        type: boolean
        x-nullable: false
      token_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          Token endpoint authentication method configured for a client application

          ACP supports the following client authentication methods:
          client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt,
          self_signed_tls_client_auth, tls_client_auth, none.

          To learn more, see the [ACP client authentication documentation](https://docs.authorization.cloudentity.com/features/oauth/client_auth/)
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      token_endpoint_auth_signing_alg:
        default: none
        description: |-
          Signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, PS256, and HS256 algorithms.

          If your token endpoint authentication is set to the `private_key_jwt` method, the
          `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.

          If your token endpoint authentication is set to the `client_secret_jwt` method,
          the `token_endpoint_auth_signing_alg` parameter must be HS256.
        enum:
        - none
        - RS256
        - ES256
        - PS256
        - HS256
        example: none
        type: string
        x-nullable: false
      tos_uri:
        description: Terms of Service URL
        type: string
        x-nullable: false
      trusted:
        description: |-
          Defines whether the client application is trusted or not.

          For trusted clients, consent pages are skipped during the authorization process.
        type: boolean
        x-nullable: false
      userinfo_signed_response_alg:
        default: none
        description: |-
          JWS alg algorithm REQUIRED for signing UserInfo Responses.

          If specified, the response is JWT
          [JWT] serialized, and signed using JWS.

          If omitted, the default behavior is for the UserInfo Response to return the Claims
          as an UTF-8 encoded JSON object using the application/json content-type.
        enum:
        - none
        - RS256
        - ES256
        example: none
        type: string
        x-nullable: false
    required:
    - authorization_server_id
    type: object
  CreateGatewayRequest:
    properties:
      create_and_bind_services_automatically:
        description: if true a services is created automatically for each new discovered
          api group
        type: boolean
        x-nullable: false
      description:
        description: description
        type: string
        x-nullable: false
      name:
        description: gateway name
        example: Cloudentity Pyron
        type: string
        x-nullable: false
      server_id:
        description: ServerID that this gateway should protect
        format: serverID
        type: string
        x-nullable: false
      type:
        description: 'gateway type, one of: pyron, aws, azure, istio, kong, apigeex,
          apigeeedge, standalone'
        example: pyron
        format: gatewayType
        type: string
        x-nullable: false
    type: object
  CrossTenantAPIPolicyBinding:
    properties:
      api_id:
        description: api id
        format: apiID
        type: string
        x-nullable: false
      api_tenant_id:
        description: api tenant id
        example: system
        format: tenantID
        type: string
        x-nullable: false
      policy_id:
        description: policy id
        format: policyID
        type: string
        x-nullable: false
      policy_server_id:
        description: policy server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      policy_tenant_id:
        description: policy tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
    type: object
  CustomCredentials:
    description: Custom IDP specific credentials
    type: object
  CustomIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/CustomCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/CustomSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  CustomServerConsent:
    properties:
      scope_grant_url:
        description: Deprecetad scope_grant_url. Use server_consent_url instead
        type: string
        x-nullable: false
      server_consent_url:
        type: string
        x-nullable: false
    type: object
  CustomSettings:
    description: Custom IDP specific settings
    properties:
      login_url:
        description: URL to your custom login page
        example: https://example.com/login
        type: string
        x-nullable: false
      type:
        description: |-
          Type metadata

          There are two type metadatas: `generic` and `cloudentity`. If you choose `cloudentity` and do
          not provide authentication context attributes, it defaults to using the attributes from
          Cloudentity Cloud Identity Plane (CIP).

          If not provided, the `generic` type is set.
        format: customIDPType
        type: string
        x-nullable: false
    type: object
  Dashboards:
    properties:
      enabled:
        description: are dashboards enabled
        type: boolean
        x-nullable: false
      sample_api_url:
        description: sample API dashboard
        type: string
        x-nullable: false
      sample_business_url:
        description: sample business dashboard url
        type: string
        x-nullable: false
      sample_threat_url:
        description: sample threat dashboard url
        type: string
        x-nullable: false
      tenant_api_url:
        description: current tenant API dashboard
        type: string
        x-nullable: false
      tenant_business_url:
        description: current tenant business dashboard url
        type: string
        x-nullable: false
      tenant_threat_url:
        description: current tenant threat dashboard url
        type: string
        x-nullable: false
    type: object
  DefaultEmailSettings:
    properties:
      from:
        type: string
        x-nullable: false
      message_subject:
        type: string
        x-nullable: false
      message_template:
        type: string
        x-nullable: false
    type: object
  DefaultSMSSettings:
    properties:
      message_template:
        type: string
        x-nullable: false
      source:
        type: string
        x-nullable: false
    type: object
  DynamicClientRegistrationSettings:
    properties:
      cert_bound_registration_token:
        description: This property binds registration token to the certificate used
          to register client
        type: boolean
        x-nullable: false
      default_scopes:
        description: |-
          An optional list of scopes to be granted to a client when no scopes are provided in the DCR registration request

          If not provided, the following default scopes are granted for the client application: openid, address, email, phone, profile.
        items:
          type: string
        type: array
        x-nullable: false
      disable_registration_token_rotation:
        description: This property disables registration_token rotation on each DCR
          management request
        type: boolean
        x-nullable: false
      enabled:
        type: boolean
        x-nullable: false
      initial_access_token:
        $ref: '#/definitions/InitialAccessTokenSettings'
      payload:
        $ref: '#/definitions/PayloadSettings'
    type: object
  EmailAuth:
    properties:
      auth:
        description: 'SMTP auth mechanism: crammd5 or plain'
        example: plain
        type: string
        x-nullable: false
      host:
        description: The host of the SMTP server.
        type: string
        x-nullable: false
      password:
        description: Password which is used to authenticate to the SMTP server.
        type: string
        x-nullable: false
      port:
        default: 25
        description: The port of the SMTP server.
        example: 25
        format: int64
        type: integer
        x-nullable: false
      username:
        description: Username which is used to authenticate to the SMTP server.
        type: string
        x-nullable: false
    required:
    - username
    - password
    - auth
    - host
    - port
    type: object
  EmailSettings:
    properties:
      custom_from:
        description: |-
          Custom email From address.

          If not set, the default is used.
        example: noreply@cloudentity.com
        type: string
        x-nullable: false
      custom_message_subject:
        description: |-
          Custom email subject.

          If not set, the default is used.
        type: string
        x-nullable: false
      custom_message_template:
        description: |-
          Custom email template.

          If not set, the default is used.
        type: string
        x-nullable: false
      otp:
        $ref: '#/definitions/OTPConfig'
      provider:
        description: Email provider.
        enum:
        - smtp
        - embedded
        example: embedded
        type: string
        x-nullable: false
    type: object
  Environment:
    properties:
      admin_workspace_access:
        description: enable admin workspace access (tenant)
        type: boolean
        x-nullable: false
      analytics:
        description: enable analytics (tenant)
        type: boolean
        x-nullable: false
      analytics_v2:
        description: enable analytics v2 (tenant)
        type: boolean
        x-nullable: false
      audit_events_duration:
        format: duration
        type: string
        x-nullable: false
      audit_events_ui:
        description: enable Audit Events UI (tenant)
        type: boolean
        x-nullable: false
      ciba:
        description: enable ciba (system)
        type: boolean
        x-nullable: false
      client_secrets_stored_as_one_way_hash:
        description: store client secrets as a one way hash (tenant)
        type: boolean
        x-nullable: false
      commit:
        type: string
        x-nullable: false
      demo_app:
        description: enable demo app endpoints (system)
        type: boolean
        x-nullable: false
      dev_mode:
        description: realod templates and adds local redirects urls to frontend apps
          (system)
        type: boolean
        x-nullable: false
      display_workspace_wizard:
        type: boolean
        x-nullable: false
      elasticsearch:
        description: enable pushing events to elasticsearch (system)
        type: boolean
        x-nullable: false
      extended_audit_events_retention:
        description: extended audit events retention
        type: boolean
        x-nullable: false
      external_datastore:
        description: enable external datastore idp (system)
        type: boolean
        x-nullable: false
      identity_pools:
        description: enable Identity Pools (tenant)
        type: boolean
        x-nullable: false
      initialize_demo_workspace:
        description: when enabled and the display_workspace_wizard feature flag is
          set to true, a demo workspace with a set of preconfigured IDPs is created
          and no welcome screen is displayed (tenant)
        type: boolean
        x-nullable: false
      integration_endpoints:
        description: enable global import and export configuration endpoints (system)
        type: boolean
        x-nullable: false
      login_with_select_account:
        description: enable login with select_account param (tenant)
        type: boolean
        x-nullable: false
      pyron_on_prem:
        description: enable when ACP is running on-prem and Pyron is used as a gateway
          (tenant)
        type: boolean
        x-nullable: false
      quick_access:
        description: enable quick access functionality on UI (system)
        type: boolean
        x-nullable: false
      scope_transient_otp:
        description: enable scope transient_otp (tenant)
        type: boolean
        x-nullable: false
      script_runtimes:
        items:
          $ref: '#/definitions/ScriptRuntime'
        type: array
        x-nullable: false
      script_transformer:
        description: enable the javascript transformer (tenant)
        type: boolean
        x-nullable: false
      scripts:
        description: enable custom scripts (tenant)
        type: boolean
        x-nullable: false
      swagger_ui:
        description: enable swagger ui (system)
        type: boolean
        x-nullable: false
      system_clients_management:
        description: enable system client management APIs (system)
        type: boolean
        x-nullable: false
      system_flags:
        items:
          type: string
        type: array
        x-nullable: false
      system_workspace_access:
        description: enable admin workspace access (tenant)
        type: boolean
        x-nullable: false
      tenant_flags:
        items:
          type: string
        type: array
        x-nullable: false
      token_exchange:
        description: enable Token Exchange (system)
        type: boolean
        x-nullable: false
      token_exchange_for_authorizers:
        description: enable Token Exchange for authorizers (tenant)
        type: boolean
        x-nullable: false
      trust_anchor_integration:
        description: enable trust anchor integration (system)
        type: boolean
        x-nullable: false
      version:
        type: string
        x-nullable: false
    type: object
  Error:
    description: HTTP error response
    properties:
      details:
        type: object
        x-nullable: false
      error:
        type: string
        x-nullable: false
      status_code:
        format: int64
        type: integer
        x-nullable: false
    type: object
  ExternalCIBAAuthenticationService:
    properties:
      credentials:
        $ref: '#/definitions/ExternalServiceCredentials'
      url:
        description: url to the ciba authenticator service
        type: string
        x-nullable: false
    type: object
  ExternalCredentials:
    description: External IDP specific credentials
    properties:
      api_key_in:
        description: query or header
        type: string
        x-nullable: false
      api_key_name:
        description: api key name
        type: string
        x-nullable: false
      api_key_value:
        description: api key value
        type: string
        x-nullable: false
      password:
        description: http basic auth password
        type: string
        x-nullable: false
      username:
        description: http basic auth username
        type: string
        x-nullable: false
    type: object
  ExternalIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/ExternalCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/ExternalSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  ExternalServiceCredentials:
    properties:
      api_key_in:
        description: query or header
        type: string
        x-nullable: false
      api_key_name:
        description: api key name
        type: string
        x-nullable: false
      api_key_value:
        description: api key value
        type: string
        x-nullable: false
      password:
        description: http basic auth password
        type: string
        x-nullable: false
      username:
        description: http basic auth username
        type: string
        x-nullable: false
    type: object
  ExternalSettings:
    description: External IDP specific settings
    properties:
      url:
        description: URL to your external datastore service
        example: https://example.com/
        type: string
        x-nullable: false
    type: object
  Gateway:
    properties:
      authorization_server_id:
        description: authorization server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: id of a client created for this gateway for authentication
        format: clientID
        type: string
        x-nullable: false
      create_and_bind_services_automatically:
        description: if true services are created automatically for each new discovered
          api group
        type: boolean
        x-nullable: false
      description:
        description: description
        type: string
        x-nullable: false
      id:
        description: unique gateway id
        example: "1"
        format: gatewayID
        type: string
        x-nullable: false
      last_active:
        description: last time a client fetched configuration
        format: date-time
        type: string
        x-nullable: false
      name:
        description: gateway name
        example: Cloudentity Pyron
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      token_exchange:
        $ref: '#/definitions/GatewayTokenExchangeSettings'
      token_exchange_client_id:
        description: Token exchange client id
        format: clientID
        type: string
        x-nullable: false
      type:
        description: 'gateway type, one of: pyron, aws'
        example: pyron
        format: gatewayType
        type: string
        x-nullable: false
    type: object
  GatewayAPI:
    properties:
      api_type:
        enum:
        - rest
        - graphql
        type: string
        x-nullable: false
      graphql_schema:
        type: string
        x-nullable: false
      method:
        type: string
        x-nullable: false
      path:
        type: string
        x-nullable: false
    type: object
  GatewayAPIGroup:
    properties:
      apis:
        description: List of APIs
        items:
          $ref: '#/definitions/GatewayAPI'
        type: array
        x-nullable: false
      gateway_id:
        format: gatewayID
        type: string
        x-nullable: false
      id:
        description: API group ID
        format: apiGroupID
        type: string
        x-nullable: false
      metadata:
        $ref: '#/definitions/APIGroupMetadata'
      name:
        description: API group name
        type: string
        x-nullable: false
      server_id:
        format: serverID
        type: string
        x-nullable: false
      service_id:
        format: serviceID
        type: string
        x-nullable: false
      tenant_id:
        format: tenantID
        type: string
        x-nullable: false
    type: object
  GatewayAPIGroups:
    properties:
      groups:
        items:
          $ref: '#/definitions/GatewayAPIGroup'
        type: array
        x-nullable: false
    type: object
  GatewayTokenExchangeSettings:
    properties:
      enabled:
        type: boolean
        x-nullable: false
      trusted_idp_ids:
        items:
          format: idpID
          type: string
        type: array
        x-nullable: false
    type: object
  GatewayWithClient:
    properties:
      authorization_server_id:
        description: authorization server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      client:
        $ref: '#/definitions/Client'
      client_id:
        description: id of a client created for this gateway for authentication
        format: clientID
        type: string
        x-nullable: false
      create_and_bind_services_automatically:
        description: if true services are created automatically for each new discovered
          api group
        type: boolean
        x-nullable: false
      description:
        description: description
        type: string
        x-nullable: false
      id:
        description: unique gateway id
        example: "1"
        format: gatewayID
        type: string
        x-nullable: false
      issuer_url:
        type: string
        x-nullable: false
      last_active:
        description: last time a client fetched configuration
        format: date-time
        type: string
        x-nullable: false
      name:
        description: gateway name
        example: Cloudentity Pyron
        type: string
        x-nullable: false
      server_url:
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      token_exchange:
        $ref: '#/definitions/GatewayTokenExchangeSettings'
      token_exchange_client_id:
        description: Token exchange client id
        format: clientID
        type: string
        x-nullable: false
      type:
        description: 'gateway type, one of: pyron, aws'
        example: pyron
        format: gatewayType
        type: string
        x-nullable: false
    type: object
  Gateways:
    properties:
      gateways:
        items:
          $ref: '#/definitions/Gateway'
        type: array
        x-nullable: false
    type: object
  GithubCredentials:
    description: GitHub IDP specific credentials
    properties:
      client_secret:
        description: OAuth client application secret from your GitHub Oauth application
          settings
        type: string
        x-nullable: false
    type: object
  GithubEmbeddedIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  GithubIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/GithubCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/GithubSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  GithubSettings:
    description: GitHub IDP specific settings
    properties:
      client_id:
        description: |-
          Client ID of your OAuth application registered in GitHub

          You can find your client ID in GitHub > Settings > Developer Settings > OAuth Apps > Your Application
        example: client
        type: string
        x-nullable: false
      fetch_groups:
        description: |-
          If enabled, the groups a user belongs to are collected

          If enabled, the `groups` attribute from the authentication context gets populated with the
          user's groups and takes from of `organization_id.group name`
        type: boolean
        x-nullable: false
      scopes:
        description: |-
          An array of allowed OAuth scopes which the client requests

          The following scopes can be configured for GitHub application:
          `phone`, `email`, `openid`, `profile`.
        example:
        - email
        - profile
        - openid
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  GoogleCredentials:
    description: Google IDP specific credentials
    properties:
      client_secret:
        description: OAuth client application secret
        type: string
        x-nullable: false
    type: object
  GoogleEmbeddedIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  GoogleIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/GoogleCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/GoogleSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  GoogleSettings:
    description: Google IDP specific settings
    properties:
      client_id:
        description: OAuth client application identifier
        example: client
        type: string
        x-nullable: false
      get_user_info:
        description: If enabled, users' data is collected by calling the `userinfo`
          endpoint.
        type: boolean
        x-nullable: false
      issuer_url:
        description: URL used to define the {baseURL} for any OpenID Connect endpoint
          when authorizing against ACP.
        type: string
        x-nullable: false
      scopes:
        description: An array of additional scopes your client requests
        example:
        - email
        - profile
        - openid
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  GraphQLField:
    properties:
      can_have_policy:
        description: if false it is not possible to assign a policy, set to false
          if policy is declaratively assigned
        type: boolean
        x-nullable: false
      name:
        description: name of graphQL field
        example: id
        type: string
        x-nullable: false
      policy_id:
        description: optional id of a policy
        example: block
        format: policyID
        type: string
        x-nullable: false
    type: object
  GraphQLType:
    properties:
      can_have_policy:
        description: if false it is not possible to assign a policy, set to false
          if policy is declaratively assigned
        type: boolean
        x-nullable: false
      fields:
        description: optional fields of graphql type
        items:
          $ref: '#/definitions/GraphQLField'
        type: array
        x-nullable: false
      name:
        description: name of graphQL type, currently supported types are Interfaces
          and Objects
        example: block
        type: string
        x-nullable: false
      policy_id:
        description: optional id of a policy
        example: block
        format: policyID
        type: string
        x-nullable: false
    type: object
  GraphQLTypes:
    items:
      $ref: '#/definitions/GraphQLType'
    type: array
  HTTPRequest:
    properties:
      body:
        description: request body
        type: string
        x-nullable: false
      method:
        description: http method
        example: GET
        type: string
        x-nullable: false
      path:
        description: url path
        type: string
        x-nullable: false
      query:
        description: url query params
        items:
          $ref: '#/definitions/HTTPRequestParam'
        type: array
        x-nullable: false
    required:
    - method
    - path
    type: object
  HTTPRequestParam:
    properties:
      name:
        description: name
        type: string
        x-nullable: false
      value:
        description: value
        type: string
        x-nullable: false
    required:
    - name
    type: object
  IDPBase:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  IDPConfiguration:
    properties:
      enable_stateful_ctx:
        description: |-
          If set to `true`, the stateful context is enabled for the IDP

          The stateful authorization feature allows to store the user’s authentication data, including
          the login status, locally in ACP. With this feature enabled, ACP can cache the user’s data
          and issue multiple tokens during one user’s session without re-authenticating the user.

          With the stateful authorization, the efficiency of issuing tokens in ACP is significantly
          improved by minimizing latency and performance degradation related to repetitious calls to
          IDPs.
        type: boolean
        x-nullable: false
      stateful_ctx_duration:
        description: |-
          The time that a user's authentication context is stored in the ACP's internal caching system
          before it's being deleted or refreshed.
        format: duration
        type: string
        x-nullable: false
    type: object
  IDPDiscoverySettings:
    properties:
      domains:
        description: |-
          An array of email domains configured for an IDP for the purposes of IDP discovery

          If a domain is connected to an IDP and this domain is used during the login process, the IDP
          is automatically discovered and the user is either presented with a suggested IDP or is
          instantly redirected to their IDP configured for the user's email domain.
        items:
          $ref: '#/definitions/IDPDomain'
        type: array
        x-nullable: false
      instant_redirect:
        description: |-
          If the intelligent IDP discovery is enabled and the instant redirect flag is on, the user is
          instantly redirected to a proper Identity Provider as soon as a match is hit based on the
          domain when a user is typing their email in the username field
        type: boolean
        x-nullable: false
    type: object
  IDPDomain:
    type: string
  IDPPayload:
    properties:
      id:
        description: Unique identifierof IDP.
        format: idpID
        type: string
        x-nullable: false
      method:
        description: Defines the type of an IDP, e.g. google, saml
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of IDP.
        type: string
        x-nullable: false
    type: object
  IDPTokenExchangeSettings:
    properties:
      enabled:
        description: If enabled token issued by this IDP can be used for token exchange
        type: boolean
        x-nullable: false
    type: object
  IDPsResponse:
    properties:
      idps:
        items:
          $ref: '#/definitions/IDPBase'
        type: array
        x-nullable: false
    type: object
  IdentityPoolIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  ImportServiceConfigurationResult:
    properties:
      authorization_server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      created_apis:
        items:
          $ref: '#/definitions/API'
        type: array
        x-nullable: false
      created_policies:
        items:
          $ref: '#/definitions/Policy'
        type: array
        x-nullable: false
      created_scopes:
        items:
          $ref: '#/definitions/Scope'
        type: array
        x-nullable: false
      custom_audience:
        description: custom service audience
        example: https://api.example.com
        type: string
        x-nullable: false
      description:
        description: service description
        example: Service description
        type: string
        x-nullable: false
      gateway_id:
        description: gateway id
        format: gatewayID
        type: string
        x-nullable: false
      id:
        description: unique service id
        example: "1"
        format: serviceID
        type: string
        x-nullable: false
      name:
        description: service name
        example: Sample service
        type: string
        x-nullable: false
      not_removed_policies:
        items:
          $ref: '#/definitions/Policy'
        type: array
        x-nullable: false
      removed_apis:
        items:
          $ref: '#/definitions/API'
        type: array
        x-nullable: false
      removed_policies:
        items:
          $ref: '#/definitions/Policy'
        type: array
        x-nullable: false
      system:
        description: Is service a system service
        example: false
        type: boolean
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      with_specification:
        description: true if service has openapi 3 specification
        type: boolean
        x-nullable: false
    type: object
  InitialAccessTokenSettings:
    properties:
      required:
        type: boolean
        x-nullable: false
    type: object
  IntelliTrustCredentials:
    description: IntelliTrust™ IDP specific credentials
    properties:
      client_secret:
        description: |-
          OAuth client application secret from your Entrust Datacard® IntelliTrust™ Authentication
          Service general settings
        type: string
        x-nullable: false
    type: object
  IntelliTrustIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/IntelliTrustCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/IntelliTrustSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  IntelliTrustSettings:
    description: IntelliTrust™ IDP specific settings
    properties:
      client_id:
        description: |-
          OAuth client application identifier from your Entrust Datacard® IntelliTrust™ Authentication
          Service general settings
        example: client
        type: string
        x-nullable: false
      domain:
        description: String represented domain of the Entrust Datacard® IntelliTrust™
          Authentication Service for your organization
        example: cloudentity-dev.us.trustedauth.com
        type: string
        x-nullable: false
      fetch_groups:
        description: |-
          If enabled, the groups a user belongs to are collected

          If you want to fetch groups from the IntelliTrust™ IDP, you need to add the `groups` claim
          for your application on the IDP side.
        type: boolean
        x-nullable: false
      get_user_info:
        description: If enabled, users' data is collected by calling the `userinfo`
          IntelliTrust™ endpoint.
        type: boolean
        x-nullable: false
      scopes:
        description: An array of additional scopes your client requests
        example:
        - email
        - profile
        - openid
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  JWSPayloadSettings:
    properties:
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: URI of the JWKs of the trusted party responsible for signing
          request body
        type: string
        x-nullable: false
      source:
        description: |-
          JWK source - defines where are the keys for validating dcr request signature
          Keys can be defined at server level or can be taken from jwks_uri claim from the software statement sent by the client
        format: jwkSource
        type: string
        x-nullable: false
    type: object
  JwtClaims:
    additionalProperties:
      type: object
    type: object
  KeysResponse:
    properties:
      current_key:
        $ref: '#/definitions/ServerJWK'
      next_key:
        $ref: '#/definitions/ServerJWK'
      revoked_keys:
        items:
          $ref: '#/definitions/ServerJWK'
        type: array
        x-nullable: false
      rotated_keys:
        items:
          $ref: '#/definitions/ServerJWK'
        type: array
        x-nullable: false
    type: object
  LoginFailedPayload:
    properties:
      cause:
        type: string
        x-nullable: false
      error:
        type: string
        x-nullable: false
      error_description:
        type: string
        x-nullable: false
      error_hint:
        type: string
        x-nullable: false
      idp:
        $ref: '#/definitions/IDPPayload'
      status_code:
        format: int64
        type: integer
        x-nullable: false
    type: object
  LoginPayload:
    properties:
      idp:
        $ref: '#/definitions/IDPPayload'
    type: object
  MFAAuth:
    properties:
      email:
        $ref: '#/definitions/EmailAuth'
      sms:
        $ref: '#/definitions/SMSAuth'
    type: object
  MFAMethod:
    properties:
      auth:
        $ref: '#/definitions/MFAAuth'
      enabled:
        type: boolean
        x-nullable: false
      id:
        format: mfaMethodID
        type: string
        x-nullable: false
      mechanism:
        enum:
        - sms
        - email
        example: email
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/MFASettings'
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - mechanism
    - enabled
    type: object
  MFAMethodResponse:
    properties:
      auth:
        $ref: '#/definitions/MFAAuth'
      default_email_settings:
        $ref: '#/definitions/DefaultEmailSettings'
      default_sms_settings:
        $ref: '#/definitions/DefaultSMSSettings'
      enabled:
        type: boolean
        x-nullable: false
      id:
        format: mfaMethodID
        type: string
        x-nullable: false
      mechanism:
        enum:
        - sms
        - email
        example: email
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/MFASettings'
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - mechanism
    - enabled
    type: object
  MFAMethods:
    properties:
      mfa_methods:
        items:
          $ref: '#/definitions/MFAMethod'
        type: array
        x-nullable: false
    type: object
  MFASettings:
    properties:
      email:
        $ref: '#/definitions/EmailSettings'
      sms:
        $ref: '#/definitions/SMSSettings'
    type: object
  Mapping:
    description: Source and target must be provided.
    properties:
      allow_weak_decoding:
        description: |-
          If enabled, the decoder makes the following "weak" conversions:

          Bools to string (true = "1", false = "0")

          numbers to string (base 10)

          bools to int/uint (true = 1, false = 0)

          strings to int/uint (base implied by prefix)

          int to bool (true if value != 0)

          string to bool (accepts only the following: 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False)

          empty array = empty map and vice versa

          negative numbers to overflowed uint values (base 10)

          slice of maps to a merged map

          single values are converted to slices if required. Each element is weakly decoded.
        example: false
        type: boolean
        x-nullable: false
      source:
        description: |-
          Source attribute.

          Source path to the attribute(s) which should be copied to the authentication context.
          Use '.' to copy everything.
        example: access_token
        type: string
        x-nullable: false
      target:
        description: |-
          Target attribute.

          Target path in the authentication context where source attribute(s) should be pasted.
          Use '.' to paste to the context top level object.
        example: .
        type: string
        x-nullable: false
      type:
        description: |-
          Type of the target attribute

          The `type` parameter accepts the following values:
          `number`, `string`, `bool`, `number_array`, `string_array`, `bool_array`, `any`.
        example: string
        format: type
        type: string
        x-nullable: false
    required:
    - source
    - target
    - type
    title: Attribute mapping.
    type: object
  Mappings:
    description: |-
      Mapping is used to unify attributes from external IDPs and propagate them to the authentication
      context to be used later on. By mapping your authentication context attributes, you unify attributes from
      all IDPs that your users authenticate with. It allows you to use a set of unified attributes
      throughout ACP for multiple purposes.
    items:
      $ref: '#/definitions/Mapping'
    title: An array of mappings
    type: array
  Metadata:
    additionalProperties:
      type: object
    type: object
  OIDCCredentials:
    description: OIDC IDP specific credentials
    properties:
      client_secret:
        description: OAuth client application secret
        type: string
        x-nullable: false
    type: object
  OIDCIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/OIDCCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/OIDCSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  OIDCServerConsent:
    type: object
  OIDCSettings:
    description: OIDC IDP specific settings
    properties:
      client_id:
        description: OAuth client application identifier
        example: client
        type: string
        x-nullable: false
      get_user_info:
        description: If enabled, users' data is collected by calling the `userinfo`
          endpoint.
        type: boolean
        x-nullable: false
      issuer_url:
        description: URL used to define the {baseURL} for any OpenID Connect endpoint
          when authorizing against ACP.
        type: string
        x-nullable: false
      scopes:
        description: An array of additional scopes your client requests
        example:
        - email
        - profile
        - openid
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  OTPConfig:
    properties:
      expiration:
        default: 5m
        description: The maximum time one-time code is valid.
        example: 5m
        format: duration
        type: string
        x-nullable: false
      length:
        default: 6
        description: The number of characters for one-time code.
        example: 6
        format: int64
        maximum: 10
        minimum: 4
        type: integer
        x-nullable: false
    required:
    - length
    - expiration
    type: object
  OktaCredentials:
    description: Okta IDP specific credentials
    properties:
      supervisor_client:
        $ref: '#/definitions/OktaSupervisorClient'
    type: object
  OktaIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/OktaCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/OktaSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  OktaSettings:
    description: Okta IDP specific settings
    properties:
      authorization_server_id:
        description: |-
          ID of a custom authorization server

          If the `use_org_authorization_server` parameter is set to `false`, use this field to specify
          the ID of a custom authorization server.

          If not provided, the `default` value is used.
        type: string
        x-nullable: false
      domain:
        description: String represented domain of the Okta Authentication Service
          for your organization
        example: dev-316761.okta.com
        type: string
        x-nullable: false
      get_user_info:
        description: If enabled, users' data is collected by calling the `userinfo`
          endpoint.
        type: boolean
        x-nullable: false
      scopes:
        description: An array of additional scopes your client requests
        items:
          type: string
        type: array
        x-nullable: false
      use_org_authorization_server:
        description: If set to `true`, the built-in authorization server is used
        type: boolean
        x-nullable: false
    type: object
  OktaSupervisorClient:
    description: |-
      The `supervisor_client` parameter holds credentials for Okta's OAuth client application that are
      used to authorize to Okta to be able to create new client applications.
    properties:
      client_id:
        description: client id
        type: string
        x-nullable: false
      private_key:
        description: client private key
        type: string
        x-nullable: false
    type: object
  OpenbankingServerConsent:
    properties:
      bank_url:
        description: If empty it defaults to demo bank embedded in acp
        type: string
        x-nullable: false
    type: object
  PIICategory:
    properties:
      name:
        description: name
        example: HIPAA
        type: string
        x-nullable: false
    type: object
  PayloadSettings:
    properties:
      format:
        default: json
        description: payload format
        enum:
        - json
        - jws
        format: payloadFormat
        type: string
        x-nullable: false
      jws_payload:
        $ref: '#/definitions/JWSPayloadSettings'
    type: object
  Policies:
    properties:
      policies:
        description: list of policies
        items:
          $ref: '#/definitions/Policy'
        type: array
        x-nullable: false
    type: object
  Policy:
    properties:
      definition:
        description: The definition of an Open Policy Agent (OPA) policy provided
          using the REGO language.
        type: string
        x-nullable: false
      id:
        description: Unique ID of your policy
        example: "1"
        format: policyID
        type: string
        x-nullable: false
      language:
        description: |-
          Language of a policy

          ACP supports creating Cloudentity policies (using a visual editor or defined using JSON or
          YAML) and policies defined using REGO (language used by Open Policy Agent (OPA)).
        example: cloudentity
        format: policyLanguage
        type: string
        x-nullable: false
      policy_name:
        description: Display name for your policy
        example: check_consent
        type: string
        x-nullable: false
      server_id:
        description: ID of your authorization server (workspace)
        example: default
        format: serverID
        type: string
        x-nullable: false
      tenant_id:
        description: ID of your tenant
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        description: |-
          Define a type of your policy

          ACP is provided with the following policy types: user, developer, machine, dcr, api.

          Depending on the policy type the policy can be assigned to different policy
          execution points.

          A policy of the `user` type can be assigned only to the following scopes: `scope_user_grant`,
          `server_user_token`, `client_user_token`.

          A `developer` policy can be assigned only to the `scope_client_assignment` and
          `server_client_assignment` scopes.

          A policy of the `machine` type can be assigned only to the following scopes:
          `scope_machine_grant`, `server_machine_token`, `client_machine_token`.

          A `dcr` policy can be assigned only to the `scope_dynamic_client_registration` and the
          `server_dynamic_client_registration` scopes.

          An `api` policy can be assigned to all of the policy execution points.

          Each of the policies type has its defined and provided out of the box policy validators.
        example: user
        format: policyType
        type: string
        x-nullable: false
      validators:
        description: An array of validators for a Cloudentity policy
        items:
          $ref: '#/definitions/ValidatorConfig'
        type: array
        x-nullable: false
    type: object
  PolicyEvaluatedPayload:
    properties:
      policy:
        $ref: '#/definitions/PolicyPayload'
      recovery:
        description: An array of recovery methods that take place when a policy validation
          fails.
        items: {}
        type: array
        x-nullable: false
      result:
        description: The result of policy validation.
        type: string
        x-nullable: false
    type: object
  PolicyExecutionPoint:
    properties:
      policy_id:
        description: Optional policy ID
        example: "1"
        format: policyID
        type: string
        x-nullable: false
      server_id:
        description: The ID of your authorization server (workspace)
        example: default
        format: serverID
        type: string
        x-nullable: false
      target_fk:
        description: String representation of the target's ID
        example: "1"
        type: string
        x-nullable: false
      tenant_id:
        description: The ID of your tenant
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        description: |-
          String representation of the policy execution point type

          Policies can be assigned to different policy execution points. For example, you can create a
          policy that you want to trigger while calls are made to your APIs. In this
          case, the type of the policy execution point is `api`. While
          choosing the policies that are applied for API calls, only those with the
          `api` type are available.
        example: scope_client_assignment
        format: policyExecutionPoint
        type: string
        x-nullable: false
    type: object
  PolicyExecutionPoints:
    properties:
      execution_points:
        description: list of policy executions
        items:
          $ref: '#/definitions/PolicyExecutionPoint'
        type: array
        x-nullable: false
    type: object
  PolicyPayload:
    properties:
      execution_point_type:
        description: String representation of the policy execution point type
        format: policyExecutionPoint
        type: string
        x-nullable: false
      key:
        description: |-
          Unique key, derived from execution point, of protected resource where the policy is assigned.

          Example key for policy in default tenant, default server protecting scope email for machine access.
          default/default/scope/email/machine
        format: policyKey
        type: string
        x-nullable: false
      type:
        description: |-
          Define a type of your policy

          ACP is provided with the following policy types: user, developer, machine, dcr, api.
        format: policyType
        type: string
        x-nullable: false
    type: object
  PolicyValidationFailure:
    description: Defines the failure that took place for a policy validation
    properties:
      details:
        description: Details on the failed validation for a policy
        type: string
        x-nullable: false
      message:
        description: Message displayed for failed validation
        type: string
        x-nullable: false
      validator:
        description: String representation of the validator for which the policy failed
          validation
        type: string
        x-nullable: false
    type: object
  PolicyValidationRecovery:
    properties:
      id:
        type: string
        x-nullable: false
      type:
        type: string
        x-nullable: false
    type: object
  PolicyValidationResult:
    description: Provides information on the results of a policy validation
    properties:
      failure:
        description: An array of failures that took place during the policy validation
          process
        items:
          $ref: '#/definitions/PolicyValidationFailure'
        type: array
        x-nullable: false
      recovery:
        description: An array of recovery methods that take place when a policy validation
          fails
        items:
          $ref: '#/definitions/PolicyValidationRecovery'
        type: array
        x-nullable: false
      result:
        description: String representation of the policy validation result
        type: string
        x-nullable: false
    type: object
  PrivacyLedgerEvent:
    properties:
      date:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: privacyLedgerEventID
        type: string
        x-nullable: false
      payload:
        $ref: '#/definitions/PrivacyLedgerPayload'
      payload_signature:
        type: string
        x-nullable: false
      subject:
        format: subject
        type: string
        x-nullable: false
      tenant_id:
        format: tenantID
        type: string
        x-nullable: false
    type: object
  PrivacyLedgerEventType:
    type: string
  PrivacyLedgerEvents:
    properties:
      events:
        items:
          $ref: '#/definitions/PrivacyLedgerEvent'
        type: array
        x-nullable: false
    type: object
  PrivacyLedgerPayload:
    properties:
      consent_granted:
        $ref: '#/definitions/ConsentGrantedEvent'
      consent_revoked:
        $ref: '#/definitions/ConsentRevokedEvent'
      event_type:
        $ref: '#/definitions/PrivacyLedgerEventType'
    type: object
  Purpose:
    properties:
      name:
        description: name
        example: Core Function
        format: purposeName
        type: string
        x-nullable: false
      primary:
        description: is the purpose primary. If there are multiple purposes defined,
          one of them must be marked as primary.
        example: true
        type: boolean
        x-nullable: false
    type: object
  RecentActivities:
    properties:
      activities:
        items:
          $ref: '#/definitions/RecentActivity'
        type: array
        x-nullable: false
    type: object
  RecentActivity:
    properties:
      date:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: recentActivityID
        type: string
        x-nullable: false
      payload:
        $ref: '#/definitions/RecentActivityPayload'
      server_id:
        format: serverID
        type: string
        x-nullable: false
      tenant_id:
        format: tenantID
        type: string
        x-nullable: false
    type: object
  RecentActivityPayload:
    properties:
      action:
        type: string
        x-nullable: false
      count:
        format: int64
        type: integer
        x-nullable: false
      primary_name:
        type: string
        x-nullable: false
      secondary_name:
        type: string
        x-nullable: false
      subject:
        type: string
        x-nullable: false
      subject_id:
        type: string
        x-nullable: false
    type: object
  RecoveryConfig:
    properties:
      type:
        type: string
        x-nullable: false
    type: object
  RecoveryPayload:
    description: recovery audit event
    properties:
      address:
        description: |-
          Recovery address for a given mechanism, the format depends on selected mechanism.
          For SMS mechanism, it's a telephone number, for email, it's an email address.
        type: string
        x-nullable: false
      mechanism:
        description: Selected recovery mechanism.
        enum:
        - sms
        - email
        type: string
        x-nullable: false
    type: object
  RegistrationToken:
    properties:
      client_uri:
        type: string
        x-nullable: false
      expires_in:
        format: int64
        type: integer
        x-nullable: false
      signature:
        type: string
        x-nullable: false
    type: object
  RemoveServiceConfigurationResult:
    properties:
      not_removed_policies:
        items:
          $ref: '#/definitions/Policy'
        type: array
        x-nullable: false
      removed_apis:
        items:
          $ref: '#/definitions/API'
        type: array
        x-nullable: false
      removed_policies:
        items:
          $ref: '#/definitions/Policy'
        type: array
        x-nullable: false
    type: object
  RequestAuthorizedPayload:
    properties:
      client_id:
        description: OAuth client application identifier.
        format: clientID
        type: string
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        type: string
        x-nullable: false
      created_by_developer:
        description: Stores information if the owner of the client application is
          a developer.
        type: boolean
        x-nullable: false
      grant_type:
        description: |-
          Stores the information which grant type was selected to perfom a given action.
          Matches one of allowed OAuth client grant types for a given client.
        type: string
        x-nullable: false
      public:
        description: Stores information if the client application is a public one.
        type: boolean
        x-nullable: false
      remote_addr:
        description: Requester IP address obtained from system network socket information.
        type: string
        x-nullable: false
      server_id:
        description: ID of the authorization server (workspace) to which an access
          request is tied.
        format: serverID
        type: string
        x-nullable: false
      session_id:
        description: |-
          Session id of a given subject. It's uniform across the authentication processes.
          It can be used as a correlation ID between a different audit events.
        format: loginID
        type: string
        x-nullable: false
      subject:
        description: |-
          Identification of the principal that is the subject of authorization.
          For the authorization grant, the subject typically identifies an authorized accessor for which the access token is being requested.
          For client authentication, the subject is the client_id of the OAuth client.
        format: subject
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application.
        type: boolean
        x-nullable: false
      token_endpoint_authn_method:
        description: Token endpoint authentication method configured for a client
          application.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        type: string
        x-nullable: false
      token_signature:
        description: Token signature
        type: string
        x-nullable: false
      user_agent:
        description: A characteristic string that lets servers and network peers identify
          the application, operating system, vendor, and/or version of the requesting
          user agent.
        type: string
        x-nullable: false
      workspace_id:
        description: ID of the authorization server (workspace) to which a resource
          is tied.
        format: serverID
        type: string
        x-nullable: false
      x_forwarded_for:
        description: Requester IP address obtained from X-Forwarded-For header.
        type: string
        x-nullable: false
      x_real_ip:
        description: Requester IP address obtained from X-Real-IP header.
        type: string
        x-nullable: false
    type: object
  RequestUnauthorizedPayload:
    properties:
      client_id:
        description: OAuth client application identifier.
        format: clientID
        type: string
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        type: string
        x-nullable: false
      created_by_developer:
        description: Stores information if the owner of the client application is
          a developer.
        type: boolean
        x-nullable: false
      error:
        description: High level error name (request_forbidden, access_denied, invalid_request).
        type: string
        x-nullable: false
      error_cause:
        description: Error root cause (invalid_pkce, invalid_state, user_policy_failed).
        type: string
        x-nullable: false
      error_description:
        description: Human readable error description
        type: string
        x-nullable: false
      error_hint:
        description: Error hint
        type: string
        x-nullable: false
      grant_type:
        description: |-
          Stores the information which grant type was selected to perfom a given action.
          Matches one of allowed OAuth client grant types for a given client.
        type: string
        x-nullable: false
      public:
        description: Stores information if the client application is a public one.
        type: boolean
        x-nullable: false
      remote_addr:
        description: Requester IP address obtained from system network socket information.
        type: string
        x-nullable: false
      server_id:
        description: ID of the authorization server (workspace) to which an access
          request is tied.
        format: serverID
        type: string
        x-nullable: false
      session_id:
        description: |-
          Session id of a given subject. It's uniform across the authentication processes.
          It can be used as a correlation ID between a different audit events.
        format: loginID
        type: string
        x-nullable: false
      subject:
        description: |-
          Identification of the principal that is the subject of authorization.
          For the authorization grant, the subject typically identifies an authorized accessor for which the access token is being requested.
          For client authentication, the subject is the client_id of the OAuth client.
        format: subject
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application.
        type: boolean
        x-nullable: false
      token_endpoint_authn_method:
        description: Token endpoint authentication method configured for a client
          application.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        type: string
        x-nullable: false
      token_signature:
        description: Token signature
        type: string
        x-nullable: false
      user_agent:
        description: A characteristic string that lets servers and network peers identify
          the application, operating system, vendor, and/or version of the requesting
          user agent.
        type: string
        x-nullable: false
      workspace_id:
        description: ID of the authorization server (workspace) to which a resource
          is tied.
        format: serverID
        type: string
        x-nullable: false
      x_forwarded_for:
        description: Requester IP address obtained from X-Forwarded-For header.
        type: string
        x-nullable: false
      x_real_ip:
        description: Requester IP address obtained from X-Real-IP header.
        type: string
        x-nullable: false
    type: object
  RequestValidatedPayload:
    properties:
      anonymous:
        type: boolean
        x-nullable: false
      api:
        $ref: '#/definitions/API'
      claims:
        $ref: '#/definitions/JwtClaims'
      client_id:
        description: OAuth client application identifier.
        format: clientID
        type: string
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        type: string
        x-nullable: false
      created_by_developer:
        description: Stores information if the owner of the client application is
          a developer.
        type: boolean
        x-nullable: false
      gateway:
        $ref: '#/definitions/Gateway'
      grant_type:
        description: |-
          Stores the information which grant type was selected to perfom a given action.
          Matches one of allowed OAuth client grant types for a given client.
        type: string
        x-nullable: false
      invalid_token:
        type: boolean
        x-nullable: false
      public:
        description: Stores information if the client application is a public one.
        type: boolean
        x-nullable: false
      remote_addr:
        description: Requester IP address obtained from system network socket information.
        type: string
        x-nullable: false
      result:
        $ref: '#/definitions/PolicyValidationResult'
      server_id:
        description: ID of the authorization server (workspace) to which an access
          request is tied.
        format: serverID
        type: string
        x-nullable: false
      service:
        $ref: '#/definitions/Service'
      session_id:
        description: |-
          Session id of a given subject. It's uniform across the authentication processes.
          It can be used as a correlation ID between a different audit events.
        format: loginID
        type: string
        x-nullable: false
      subject:
        description: |-
          Identification of the principal that is the subject of authorization.
          For the authorization grant, the subject typically identifies an authorized accessor for which the access token is being requested.
          For client authentication, the subject is the client_id of the OAuth client.
        format: subject
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application.
        type: boolean
        x-nullable: false
      token_endpoint_authn_method:
        description: Token endpoint authentication method configured for a client
          application.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        type: string
        x-nullable: false
      token_signature:
        description: Token signature
        type: string
        x-nullable: false
      user_agent:
        description: A characteristic string that lets servers and network peers identify
          the application, operating system, vendor, and/or version of the requesting
          user agent.
        type: string
        x-nullable: false
      workspace_id:
        description: ID of the authorization server (workspace) to which a resource
          is tied.
        format: serverID
        type: string
        x-nullable: false
      x_forwarded_for:
        description: Requester IP address obtained from X-Forwarded-For header.
        type: string
        x-nullable: false
      x_real_ip:
        description: Requester IP address obtained from X-Real-IP header.
        type: string
        x-nullable: false
    type: object
  RotateClientSecretResponse:
    properties:
      secret:
        type: string
        x-nullable: false
    type: object
  SAMLCredentials:
    description: SAML IDP specific credentials
    properties:
      idp_certificate:
        description: |-
          The certificate of your IDP

          The certificate must start with `-----BEGIN CERTIFICATE-----` and end with `-----END CERTIFICATE-----`.
        type: string
        x-nullable: false
    type: object
  SAMLIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/SAMLCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/SAMLSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  SAMLSettings:
    description: SAML IDP specific settings
    properties:
      entity_issuer:
        description: |-
          Unique id of a service provider

          If not provided, a random string is generated.
        example: https://localhost:8443/default/default/login
        type: string
        x-nullable: false
      identifier_attribute:
        description: |-
          The attribute name from the `AttributeStatement` SAML response which is used as an identifier in ACP

          Applies only when `identifierSource` parameter is set to `attribute`.
        type: string
        x-nullable: false
      identifier_source:
        description: |-
          The source for an identifier

          The `identifierSource` parameter can have either the `subject` or the `attribute` value.

          It is used to provide an unique user attribute that is used as an identifier in ACP.

          Depending on which identifier source you choose, you must define either the
          `identifierAttribute` or the `subjectNameIDFormat` parameter.
        type: string
        x-nullable: false
      skip_in_response_to_verification:
        description: |-
          If enabled, the verification, if the `InResponseTo` parameter matches the original ID attribute
          sent from ACP, is skipped.

          Enable the `skipInResponseToVerification` flag when the `InResponseTo` parameter is not
          returned by your IDP.
        type: boolean
        x-nullable: false
      sso_url:
        description: String represented SSO URL (endpoint) where the SAML request
          is sent
        example: https://test-dev-ed.my.salesforce.com/idp/endpoint/HttpPost
        type: string
        x-nullable: false
      subject_name_id_format:
        description: |-
          Name ID format of a SAML subject

          It applies only when the `identifierSource` parameter is set to `subject`.

          Allowed values:

          `urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress`

          `urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified`

          `urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName`

          `urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName`

          `urn:oasis:names:tc:SAML:2.0:nameid-format:encrypted`

          `urn:oasis:names:tc:SAML:2.0:nameid-format:entity`

          `urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos`

          `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent`

          `urn:oasis:names:tc:SAML:2.0:nameid-format:transient`

          default value:
          `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent`
        type: string
        x-nullable: false
    type: object
  SMSAuth:
    properties:
      auth_token:
        description: The Twilio Auth Token.
        type: string
        x-nullable: false
      sid:
        description: The Twilio Account SID.
        type: string
        x-nullable: false
    required:
    - sid
    - auth_token
    type: object
  SMSSettings:
    properties:
      custom_message_template:
        description: |-
          Custom message template.

          If not set, the default is used.
        type: string
        x-nullable: false
      custom_source:
        description: |-
          Custom SMS From phone number.

          If not set, the default is used.
        type: string
        x-nullable: false
      otp:
        $ref: '#/definitions/OTPConfig'
      provider:
        description: SMS provider.
        enum:
        - twilio
        - embedded
        example: embedded
        type: string
        x-nullable: false
    type: object
  Scope:
    properties:
      authorization_server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      description:
        description: scope description which will be displayed as a hint on a consent
          page
        example: This scope value requests offline access using refresh token
        type: string
        x-nullable: false
      display_name:
        description: scope display name which will be displayed on a consent page
        example: Offline Access
        type: string
        x-nullable: false
      id:
        description: scope id
        example: "1"
        format: scopeID
        type: string
        x-nullable: false
      name:
        description: scope name
        example: offline_access
        format: scopeName
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
    type: object
  ScopeGrant:
    properties:
      client_id:
        description: Client ID that the scope belongs to
        format: clientID
        type: string
        x-nullable: false
      given_at:
        description: Time when the scope was granted
        format: date-time
        type: string
        x-nullable: false
      granted_scope_name:
        description: Granted scope name
        format: scopeName
        type: string
        x-nullable: false
      language:
        description: Language
        format: language
        type: string
        x-nullable: false
      scope_name:
        description: Scope name
        format: scopeName
        type: string
        x-nullable: false
      server_id:
        description: Server ID
        format: serverID
        type: string
        x-nullable: false
      subject:
        description: Subject ID that has granted the scope.
        format: subject
        type: string
        x-nullable: false
      tenant_id:
        description: Tenant ID
        format: tenantID
        type: string
        x-nullable: false
    type: object
  ScopePrivacyInformation:
    properties:
      pii_categories:
        items:
          $ref: '#/definitions/PIICategory'
        type: array
        x-nullable: false
      purpose:
        format: purposeName
        type: string
        x-nullable: false
    type: object
  ScopeWithService:
    properties:
      authorization_server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      description:
        description: scope description which will be displayed as a hint on a consent
          page
        example: This scope value requests offline access using refresh token
        type: string
        x-nullable: false
      display_name:
        description: scope display name which will be displayed on a consent page
        example: Offline Access
        type: string
        x-nullable: false
      id:
        description: scope id
        example: "1"
        format: scopeID
        type: string
        x-nullable: false
      name:
        description: scope name
        example: offline_access
        format: scopeName
        type: string
        x-nullable: false
      service:
        $ref: '#/definitions/Service'
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      with_service:
        type: boolean
        x-nullable: false
    type: object
  ScopeWithServiceID:
    properties:
      authorization_server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      description:
        description: scope description which will be displayed as a hint on a consent
          page
        example: This scope value requests offline access using refresh token
        type: string
        x-nullable: false
      display_name:
        description: scope display name which will be displayed on a consent page
        example: Offline Access
        type: string
        x-nullable: false
      id:
        description: scope id
        example: "1"
        format: scopeID
        type: string
        x-nullable: false
      name:
        description: scope name
        example: offline_access
        format: scopeName
        type: string
        x-nullable: false
      service_id:
        description: optional service id
        example: "1"
        format: serviceID
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
    type: object
  ScopesGrantedPayload:
    properties:
      current_scope_grants:
        description: List of already granted scopes.
        items:
          $ref: '#/definitions/ScopeGrant'
        type: array
        x-nullable: false
      new_scope_grants:
        description: List of scopes to grant.
        items:
          $ref: '#/definitions/ScopeGrant'
        type: array
        x-nullable: false
    type: object
  ScopesWithServices:
    properties:
      scopes:
        items:
          $ref: '#/definitions/ScopeWithService'
        type: array
        x-nullable: false
    type: object
  Script:
    properties:
      authorization_server_id:
        description: ID of the authorization server (workspace) where the script is
          created
        format: serverID
        type: string
        x-nullable: false
      body:
        description: Script body
        format: scriptBody
        type: string
        x-nullable: false
      id:
        description: |-
          Unique ID of your script

          If not provided, a random ID is generated.
        format: scriptID
        type: string
        x-nullable: false
      name:
        description: Display name of your script
        type: string
        x-nullable: false
      tenant_id:
        description: ID of the tenant where the script is created
        format: tenantID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - authorization_server_id
    type: object
  ScriptExecutionPoint:
    properties:
      script_id:
        description: Optional script ID
        example: "1"
        format: scriptID
        type: string
        x-nullable: false
      server_id:
        description: The ID of your authorization server (workspace)
        example: default
        format: serverID
        type: string
        x-nullable: false
      target_fk:
        description: String representation of the target's ID
        example: "1"
        type: string
        x-nullable: false
      tenant_id:
        description: The ID of your tenant
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        description: String representation of the script execution point type
        example: post_authn_ctx
        x-nullable: false
    required:
    - tenant_id
    - server_id
    - type
    - target_fk
    type: object
  ScriptExecutionPoints:
    properties:
      execution_points:
        description: list of script executions
        items:
          $ref: '#/definitions/ScriptExecutionPoint'
        type: array
        x-nullable: false
    type: object
  ScriptExecutionResult:
    properties:
      caught_err:
        description: name of the error
        type: string
        x-nullable: false
      duration:
        description: script execution time
        format: duration
        type: string
        x-nullable: false
      id:
        description: script id
        format: scriptID
        type: string
        x-nullable: false
      input:
        additionalProperties:
          type: object
        description: script input
        type: object
        x-nullable: false
      output:
        additionalProperties:
          type: object
        description: script output
        type: object
        x-nullable: false
      stderr:
        description: script standard error, e.g. console.error()
        type: string
        x-nullable: false
      stdout:
        description: script standard output, e.g. console.log()
        type: string
        x-nullable: false
    type: object
  ScriptRuntime:
    properties:
      dependencies:
        additionalProperties:
          type: string
        type: object
        x-nullable: false
      version:
        type: string
        x-nullable: false
    type: object
  ScriptTransformer:
    description: script transformer ALPHA_FEATURE
    properties:
      enabled:
        type: boolean
        x-nullable: false
      script:
        format: scriptBody
        type: string
        x-nullable: false
    type: object
  Scripts:
    properties:
      scripts:
        description: list of scripts
        items:
          $ref: '#/definitions/Script'
        type: array
        x-nullable: false
    type: object
  Secret:
    properties:
      created_at:
        description: Time when the secret was created
        format: date-time
        type: string
        x-nullable: false
      id:
        description: Unique ID of your secret
        example: secret-pet
        format: secretID
        type: string
        x-nullable: false
      secret:
        description: Value of a secret
        example: cat
        type: string
        x-nullable: false
      server_id:
        description: ID of your authorization server (workspace)
        example: default
        format: serverID
        type: string
        x-nullable: false
      tenant_id:
        description: ID of your tenant
        example: default
        format: tenantID
        type: string
        x-nullable: false
      value:
        type: string
        x-nullable: false
    required:
    - tenant_id
    - server_id
    - id
    - secret
    type: object
  SecretsResponse:
    properties:
      secrets:
        items:
          $ref: '#/definitions/Secret'
        type: array
        x-nullable: false
    type: object
  Server:
    description: Multi Tenant authorization server
    properties:
      access_token_strategy:
        default: jwt
        description: |-
          Access token strategy

          You can choose to go either with `JWT` or `opaque` tokens.

          The content of JSON Web Tokens is readable and it is possible to be decoded by anyone that
          has a secret or a public key in their possession.

          Opaque tokens are in a proprietary form that contains an identifier to information stored on
          the athorization server. To validate an opaque token, the recipient must call the server that
          issued the token.
        enum:
        - jwt
        - opaque
        example: jwt
        type: string
        x-nullable: false
      access_token_ttl:
        default: 1h0m0s
        description: |-
          Access token time to live

          After an access token reaches its time to live, it expires and it cannot be used to
          authenticate the client application.
        example: 1h10m30s
        format: duration
        type: string
        x-nullable: false
      authorization_code_ttl:
        description: |-
          Authorization code time to live

          After an authorization code reaches its time to live, it expires and it cannot be used to
          authorize the request to the `/token` endpoint.
        example: 10m0s
        format: duration
        type: string
        x-nullable: false
      backchannel_token_delivery_modes_supported:
        default:
        - poll
        - ping
        items:
          type: string
        type: array
        x-nullable: false
      backchannel_user_code_parameter_supported:
        default: false
        type: boolean
        x-nullable: false
      color:
        default: '#007FFF'
        description: Your server's label color in a HEX format.
        example: '#007FFF'
        type: string
        x-nullable: false
      consent_id_namespace:
        description: |-
          Namespace used when creating Open Banking Brasil consent IDs

          Consent IDs will have the form of urn:<consent_id_namespace>:<uid> when this is set.
          If this is empty, the tenant id is used by default
        type: string
        x-nullable: false
      cookie_max_age:
        description: |-
          Cookie max age

          Defines how long a cookie can live until it expires.
        example: 1h10m30s
        format: duration
        type: string
        x-nullable: false
      custom_issuer_url:
        description: |-
          Defines a custom issuer URL that can be used as the value of the `iss` claim in an access
          token.

          If not provided, it is built dynamically based on the server's URL.
        example: http://example.com/default/default
        type: string
        x-nullable: false
      dynamic_client_registration:
        $ref: '#/definitions/DynamicClientRegistrationSettings'
      dynamic_scope_separator:
        default: .
        description: |-
          You can use this property to define a separator that is used for dynamic scopes.

          For example, the default separator is `.`, so the scope could look like the following:
          `users.*`.

          For Open Banking Brazil compliant servers, the `:` separator should be used.
        format: dynamicScopeSeparator
        type: string
        x-nullable: false
      enable_id_token_encryption:
        description: When enabled, the authorization server will encrypt any id tokens
          it issues
        type: boolean
        x-nullable: false
      enable_idp_discovery:
        description: |-
          If enabled, IDP discovery automatically redirects the user to their own IDP and does not
          display IDPs of other users while the users accesses the server/application.
        example: false
        type: boolean
        x-nullable: false
      enable_legacy_clients_with_no_software_statement:
        description: |-
          If enabled, it is possible to manually register clients withouth the use of software
          statements.

          This flag is enabled, when the `enable_trust_anchor` flag is set to `false`. You can disable
          it using API, but it cannot be manually enabled.
        type: boolean
        x-nullable: false
      enable_quick_access:
        description: If enabled, the server is visible on the Quick Access tab on
          the login page.
        type: boolean
        x-nullable: false
      enable_trust_anchor:
        default: false
        description: |-
          If enabled, it makes it obligatory to provide a software statement signed by a trusted certificate authority
          when registering a client application with the use of the Dynamic Client Registration (DCR).

          In public key infrastructure (PKI), trust anchors are certification authorities. They are
          represented by a certificate that is used to verify the signature of a certificate issued by
          a particular trust anchor.
        type: boolean
        x-nullable: false
      enforce_pkce:
        default: false
        description: |-
          Define whether you want to enforce using the Proof Key of Code Exchange (PKCE) for both
          private and public clients.

          PKCE is an OAuth security extension that prevents malicious applications or codes that
          intercepted authorization code from exchanging it for an access token.
        example: false
        type: boolean
        x-nullable: false
      enforce_pkce_for_public_clients:
        default: false
        description: |-
          Define whether you want to enforce using the Proof Key of Code Exchange (PKCE) for
          public clients.

          Public clients, like mobile applications or JavaScript-based applications, by their design,
          cannot store client secrets securely. For such clients, even encrypting the client secret
          inside the application’s code is not a reliable way of protecting secrets as the application
          can be decompiled and the client secret can be extracted while it is decrypted in the memory
          of the application.

          For those reasons, ACP supports the use of PKCE as an addition to the authorization code
          grant flow to provide a secure alternative to the implicit grant flow.
        example: false
        type: boolean
        x-nullable: false
      grant_types:
        default:
        - authorization_code
        - implicit
        - client_credentials
        - refresh_token
        description: An array that defines which of the OAuth 2.0 grant types are
          enabled for the authorization server.
        example:
        - authorization_code
        - implicit
        - refresh_token
        - client_credentials
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          type: string
        type: array
        x-nullable: false
      id:
        description: |-
          Unique identifier of an authorization server (workspace)

          If not provided, a random ID is generated.
        example: default
        format: serverID
        type: string
        x-nullable: false
      id_token_ttl:
        description: |-
          ID token time to live

          After an ID token reaches its time to live, it expires and it cannot be used to provide
          user profile information to a client application.
        example: 1h10m30s
        format: duration
        type: string
        x-nullable: false
      issuer_id:
        description: |-
          Issuer ID that will be used to set `iss` claim on signed messages

          If issuer_id is not set then default issuer_url will be used
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ServerJWKs'
      key_type:
        default: ecdsa
        description: |-
          Determines which type of asymmetric algorithms (RSA or ECDSA) is used to generate keys for signing access and
          ID tokens.

          It is used only as an input parameter for the Create Authorization Server API.
        enum:
        - rsa
        - ecdsa
        - ps
        example: rsa
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI
        type: string
        x-nullable: false
      name:
        description: Display name of your authorization server
        example: Sample authorization server
        type: string
        x-nullable: false
      profile:
        default: default
        description: |-
          The profile of a server

          ACP is delivered with preconfigured workspace templates that enable quick and easy setup for
          specific configuration patterns. For example, you can instantly create an Open Banking
          compliant workspace that has all of the required mechanisms and settings already in place.
        enum:
        - default
        - demo
        - workforce
        - consumer
        - partners
        - third_party
        - fapi_advanced
        - fapi_rw
        - fapi_ro
        - openbanking_uk_fapi_advanced
        - openbanking_uk
        - openbanking_br
        - cdr_australia
        - cdr_australia_fapi_rw
        example: default
        type: string
        x-nullable: false
      pushed_authorization_request_ttl:
        description: |-
          Custom pushed authentication request TTL
          If not provided, TTL is set to 60 seconds.
        format: duration
        type: string
        x-nullable: false
      refresh_token_ttl:
        default: 720h0m0s
        description: |-
          Refresh token time to live

          After a refresh token reaches its time to live, it expires and it cannot be used to obtain
          new access tokens for a client application.
        example: 720h0m0s
        format: duration
        type: string
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the authorization server
          accepts authorization request data only via PAR.
        type: boolean
        x-nullable: false
      root_cas:
        description: |-
          You can provide root Certificate Authority (CA) certificates encoded to the Privacy-Enhanced
          Mail (PEM) file format which are used for the `tls_client_auth` and the
          `self_signed_tls_client_auth` client authentication methods that use the Mutual
          Transport Layer Security (mTLS).

          If not set, the system root CA certifiates are used instead.
        type: string
        x-nullable: false
      rotated_secrets:
        description: An array of rotated secrets that are still used to validate tokens
        example:
        - jFpwIvuKJP46J71WqszPv1SrzoUr-cSILP9EPdlClB4
        items:
          type: string
        type: array
        x-nullable: false
      secret:
        description: |-
          Secret used for hashing

          It must have at least 32 characters. If not provided, it is generated.
        example: hW5WhKX_7w7BLwUQ6mn7Cp70_OoKI_F1y1hLS5U8lIU
        type: string
        x-nullable: false
      subject_identifier_algorithm_salt:
        description: |-
          Salt used to hash `subject` when the `pairwise` subject type is used.

          Salt is a random data which is used as an additional input to one-way functions that hashes
          data, passwords, and, in this case, subjects.

          It is recommended that your salt value is long for security reasons. Preferably, the salt
          value should be at least the same length as the output of the hash.

          If not provided, it is generated.
        type: string
        x-nullable: false
      subject_identifier_types:
        default:
        - public
        - pairwise
        description: |-
          An array that defines supported subject identifier types.

          Subject identifiers are locally unique and never reassigned identifiers within the Issuer
          for the end-user and are inteded to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          `public` identifiers provide the same `sub` claim value to all client applications.
          `pairwise` identifiers provide different `sub` claim values to each client application. With
          this approach, it makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        example:
        - public
        - pairwise
        items:
          enum:
          - public
          - pairwise
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of a tenant
        example: default
        format: tenantID
        type: string
        x-nullable: false
      token_endpoint_auth_methods:
        default:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        description: |-
          An array that lists all of the supported token endpoint authentication methods for the
          authorization server.
        items:
          enum:
          - client_secret_basic
          - client_secret_post
          - client_secret_jwt
          - private_key_jwt
          - self_signed_tls_client_auth
          - tls_client_auth
          - none
          type: string
        type: array
        x-nullable: false
      token_endpoint_authn_methods:
        description: 'Deprecated: Use TokenEndpointAuthMethods instead'
        items:
          enum:
          - client_secret_basic
          - client_secret_post
          - client_secret_jwt
          - private_key_jwt
          - self_signed_tls_client_auth
          - tls_client_auth
          - none
          type: string
        type: array
        x-nullable: false
      trust_anchor_configuration:
        $ref: '#/definitions/TrustAnchorConfiguration'
      type:
        default: regular
        description: |-
          Server type

          It is an internal property used to recognize if the server is created for an admin portal,
          a developer portal, or if it is a system or a regular workspace.
        enum:
        - admin
        - developer
        - system
        - regular
        example: regular
        type: string
        x-nullable: false
    required:
    - tenant_id
    type: object
  ServerAPIs:
    properties:
      apis_by_services:
        additionalProperties:
          items:
            $ref: '#/definitions/API'
          type: array
        type: object
        x-nullable: false
    type: object
  ServerConsent:
    properties:
      client_id:
        format: clientID
        type: string
        x-nullable: false
      custom:
        $ref: '#/definitions/CustomServerConsent'
      oidc:
        $ref: '#/definitions/OIDCServerConsent'
      openbanking:
        $ref: '#/definitions/OpenbankingServerConsent'
      server_id:
        format: serverID
        type: string
        x-nullable: false
      tenant_id:
        format: tenantID
        type: string
        x-nullable: false
      type:
        format: serverConsentType
        type: string
        x-nullable: false
    type: object
  ServerJWK:
    properties:
      alg:
        description: |-
          The "alg" (algorithm) parameter identifies the algorithm intended for
          use with the key.  The values used should either be registered in the
          IANA "JSON Web Signature and Encryption Algorithms" registry
          established by [JWA] or be a value that contains a Collision-
          Resistant Name.
        example: RS256
        type: string
        x-nullable: false
      created_at:
        description: Time when key was generated
        format: date-time
        type: string
        x-nullable: false
      crv:
        example: P-256
        type: string
        x-nullable: false
      d:
        example: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE
        type: string
        x-nullable: false
      dp:
        example: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0
        type: string
        x-nullable: false
      dq:
        example: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk
        type: string
        x-nullable: false
      e:
        example: AQAB
        type: string
        x-nullable: false
      k:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      kid:
        description: |-
          The "kid" (key ID) parameter is used to match a specific key.  This
          is used, for instance, to choose among a set of keys within a JWK Set
          during key rollover.  The structure of the "kid" value is
          unspecified.  When "kid" values are used within a JWK Set, different
          keys within the JWK Set SHOULD use distinct "kid" values.  (One
          example in which different keys might use the same "kid" value is if
          they have different "kty" (key type) values but are considered to be
          equivalent alternatives by the application using them.)  The "kid"
          value is a case-sensitive string.
        example: 1603dfe0af8f4596
        type: string
        x-nullable: false
      kty:
        description: |-
          The "kty" (key type) parameter identifies the cryptographic algorithm
          family used with the key, such as "RSA" or "EC". "kty" values should
          either be registered in the IANA "JSON Web Key Types" registry
          established by [JWA] or be a value that contains a Collision-
          Resistant Name.  The "kty" value is a case-sensitive string.
        example: RSA
        type: string
        x-nullable: false
      "n":
        example: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0
        type: string
        x-nullable: false
      p:
        example: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ
        type: string
        x-nullable: false
      promoted_at:
        description: Time when key was set as current key in use
        format: date-time
        type: string
        x-nullable: false
      q:
        example: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ
        type: string
        x-nullable: false
      qi:
        example: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU
        type: string
        x-nullable: false
      revoked_at:
        description: Time when key was revoked
        format: date-time
        type: string
        x-nullable: false
      rotated_at:
        description: Time when key was rotated
        format: date-time
        type: string
        x-nullable: false
      use:
        description: |-
          Use ("public key use") identifies the intended use of
          the public key. The "use" parameter is employed to indicate whether
          a public key is used for encrypting data or verifying the signature
          on data. Values are commonly "sig" (signature) or "enc" (encryption).
        example: sig
        type: string
        x-nullable: false
      x:
        example: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU
        type: string
        x-nullable: false
      x5c:
        description: |-
          The "x5c" (X.509 certificate chain) parameter contains a chain of one
          or more PKIX certificates [RFC5280].  The certificate chain is
          represented as a JSON array of certificate value strings.  Each
          string in the array is a base64-encoded (Section 4 of [RFC4648] --
          not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
          The PKIX certificate containing the key value MUST be the first
          certificate.
        items:
          type: string
        type: array
        x-nullable: false
      x5t:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      x5t#S256:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      "y":
        example: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0
        type: string
        x-nullable: false
    required:
    - kty
    type: object
  ServerJWKs:
    properties:
      keys:
        example: []
        items:
          $ref: '#/definitions/ServerJWK'
        type: array
        x-nullable: false
      next_encryption_key:
        $ref: '#/definitions/ServerJWK'
      next_signing_key:
        $ref: '#/definitions/ServerJWK'
      revoked_encryption_keys:
        description: |-
          An array of revoked encryption keys

          Revoked encryption keys cannot be used to encrypt payloads between servers and client applications
        items:
          $ref: '#/definitions/ServerJWK'
        type: array
        x-nullable: false
      revoked_keys_limit:
        description: The maximum number of revoked keys that ACP stores.
        format: int64
        type: integer
        x-nullable: false
      revoked_signing_keys:
        description: |-
          An array of revoked sigining keys

          Revoked signing keys cannot be used to sign any tokens.
          Any attempt to authenticate using a token signed with a revoked signing key results
          in failed authentication.
        items:
          $ref: '#/definitions/ServerJWK'
        type: array
        x-nullable: false
      rotated_keys_limit:
        description: The maximum number of rotated keys that ACP stores.
        format: int64
        type: integer
        x-nullable: false
    type: object
  ServerResponse:
    properties:
      access_token_strategy:
        default: jwt
        description: |-
          Access token strategy

          You can choose to go either with `JWT` or `opaque` tokens.

          The content of JSON Web Tokens is readable and it is possible to be decoded by anyone that
          has a secret or a public key in their possession.

          Opaque tokens are in a proprietary form that contains an identifier to information stored on
          the athorization server. To validate an opaque token, the recipient must call the server that
          issued the token.
        enum:
        - jwt
        - opaque
        example: jwt
        type: string
        x-nullable: false
      access_token_ttl:
        default: 1h0m0s
        description: |-
          Access token time to live

          After an access token reaches its time to live, it expires and it cannot be used to
          authenticate the client application.
        example: 1h10m30s
        format: duration
        type: string
        x-nullable: false
      authorization_code_ttl:
        description: |-
          Authorization code time to live

          After an authorization code reaches its time to live, it expires and it cannot be used to
          authorize the request to the `/token` endpoint.
        example: 10m0s
        format: duration
        type: string
        x-nullable: false
      backchannel_token_delivery_modes_supported:
        default:
        - poll
        - ping
        items:
          type: string
        type: array
        x-nullable: false
      backchannel_user_code_parameter_supported:
        default: false
        type: boolean
        x-nullable: false
      color:
        default: '#007FFF'
        description: Your server's label color in a HEX format.
        example: '#007FFF'
        type: string
        x-nullable: false
      consent_id_namespace:
        description: |-
          Namespace used when creating Open Banking Brasil consent IDs

          Consent IDs will have the form of urn:<consent_id_namespace>:<uid> when this is set.
          If this is empty, the tenant id is used by default
        type: string
        x-nullable: false
      cookie_max_age:
        description: |-
          Cookie max age

          Defines how long a cookie can live until it expires.
        example: 1h10m30s
        format: duration
        type: string
        x-nullable: false
      custom_issuer_url:
        description: |-
          Defines a custom issuer URL that can be used as the value of the `iss` claim in an access
          token.

          If not provided, it is built dynamically based on the server's URL.
        example: http://example.com/default/default
        type: string
        x-nullable: false
      dynamic_client_registration:
        $ref: '#/definitions/DynamicClientRegistrationSettings'
      dynamic_scope_separator:
        default: .
        description: |-
          You can use this property to define a separator that is used for dynamic scopes.

          For example, the default separator is `.`, so the scope could look like the following:
          `users.*`.

          For Open Banking Brazil compliant servers, the `:` separator should be used.
        format: dynamicScopeSeparator
        type: string
        x-nullable: false
      enable_id_token_encryption:
        description: When enabled, the authorization server will encrypt any id tokens
          it issues
        type: boolean
        x-nullable: false
      enable_idp_discovery:
        description: |-
          If enabled, IDP discovery automatically redirects the user to their own IDP and does not
          display IDPs of other users while the users accesses the server/application.
        example: false
        type: boolean
        x-nullable: false
      enable_legacy_clients_with_no_software_statement:
        description: |-
          If enabled, it is possible to manually register clients withouth the use of software
          statements.

          This flag is enabled, when the `enable_trust_anchor` flag is set to `false`. You can disable
          it using API, but it cannot be manually enabled.
        type: boolean
        x-nullable: false
      enable_quick_access:
        description: If enabled, the server is visible on the Quick Access tab on
          the login page.
        type: boolean
        x-nullable: false
      enable_trust_anchor:
        default: false
        description: |-
          If enabled, it makes it obligatory to provide a software statement signed by a trusted certificate authority
          when registering a client application with the use of the Dynamic Client Registration (DCR).

          In public key infrastructure (PKI), trust anchors are certification authorities. They are
          represented by a certificate that is used to verify the signature of a certificate issued by
          a particular trust anchor.
        type: boolean
        x-nullable: false
      enforce_pkce:
        default: false
        description: |-
          Define whether you want to enforce using the Proof Key of Code Exchange (PKCE) for both
          private and public clients.

          PKCE is an OAuth security extension that prevents malicious applications or codes that
          intercepted authorization code from exchanging it for an access token.
        example: false
        type: boolean
        x-nullable: false
      enforce_pkce_for_public_clients:
        default: false
        description: |-
          Define whether you want to enforce using the Proof Key of Code Exchange (PKCE) for
          public clients.

          Public clients, like mobile applications or JavaScript-based applications, by their design,
          cannot store client secrets securely. For such clients, even encrypting the client secret
          inside the application’s code is not a reliable way of protecting secrets as the application
          can be decompiled and the client secret can be extracted while it is decrypted in the memory
          of the application.

          For those reasons, ACP supports the use of PKCE as an addition to the authorization code
          grant flow to provide a secure alternative to the implicit grant flow.
        example: false
        type: boolean
        x-nullable: false
      grant_types:
        default:
        - authorization_code
        - implicit
        - client_credentials
        - refresh_token
        description: An array that defines which of the OAuth 2.0 grant types are
          enabled for the authorization server.
        example:
        - authorization_code
        - implicit
        - refresh_token
        - client_credentials
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          type: string
        type: array
        x-nullable: false
      id:
        description: |-
          Unique identifier of an authorization server (workspace)

          If not provided, a random ID is generated.
        example: default
        format: serverID
        type: string
        x-nullable: false
      id_token_ttl:
        description: |-
          ID token time to live

          After an ID token reaches its time to live, it expires and it cannot be used to provide
          user profile information to a client application.
        example: 1h10m30s
        format: duration
        type: string
        x-nullable: false
      issuer_id:
        description: |-
          Issuer ID that will be used to set `iss` claim on signed messages

          If issuer_id is not set then default issuer_url will be used
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      issuer_url:
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ServerJWKs'
      key_type:
        default: ecdsa
        description: |-
          Determines which type of asymmetric algorithms (RSA or ECDSA) is used to generate keys for signing access and
          ID tokens.

          It is used only as an input parameter for the Create Authorization Server API.
        enum:
        - rsa
        - ecdsa
        - ps
        example: rsa
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI
        type: string
        x-nullable: false
      mtls_issuer_url:
        type: string
        x-nullable: false
      name:
        description: Display name of your authorization server
        example: Sample authorization server
        type: string
        x-nullable: false
      profile:
        default: default
        description: |-
          The profile of a server

          ACP is delivered with preconfigured workspace templates that enable quick and easy setup for
          specific configuration patterns. For example, you can instantly create an Open Banking
          compliant workspace that has all of the required mechanisms and settings already in place.
        enum:
        - default
        - demo
        - workforce
        - consumer
        - partners
        - third_party
        - fapi_advanced
        - fapi_rw
        - fapi_ro
        - openbanking_uk_fapi_advanced
        - openbanking_uk
        - openbanking_br
        - cdr_australia
        - cdr_australia_fapi_rw
        example: default
        type: string
        x-nullable: false
      pushed_authorization_request_ttl:
        description: |-
          Custom pushed authentication request TTL
          If not provided, TTL is set to 60 seconds.
        format: duration
        type: string
        x-nullable: false
      refresh_token_ttl:
        default: 720h0m0s
        description: |-
          Refresh token time to live

          After a refresh token reaches its time to live, it expires and it cannot be used to obtain
          new access tokens for a client application.
        example: 720h0m0s
        format: duration
        type: string
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the authorization server
          accepts authorization request data only via PAR.
        type: boolean
        x-nullable: false
      root_cas:
        description: |-
          You can provide root Certificate Authority (CA) certificates encoded to the Privacy-Enhanced
          Mail (PEM) file format which are used for the `tls_client_auth` and the
          `self_signed_tls_client_auth` client authentication methods that use the Mutual
          Transport Layer Security (mTLS).

          If not set, the system root CA certifiates are used instead.
        type: string
        x-nullable: false
      rotated_secrets:
        description: An array of rotated secrets that are still used to validate tokens
        example:
        - jFpwIvuKJP46J71WqszPv1SrzoUr-cSILP9EPdlClB4
        items:
          type: string
        type: array
        x-nullable: false
      secret:
        description: |-
          Secret used for hashing

          It must have at least 32 characters. If not provided, it is generated.
        example: hW5WhKX_7w7BLwUQ6mn7Cp70_OoKI_F1y1hLS5U8lIU
        type: string
        x-nullable: false
      subject_identifier_algorithm_salt:
        description: |-
          Salt used to hash `subject` when the `pairwise` subject type is used.

          Salt is a random data which is used as an additional input to one-way functions that hashes
          data, passwords, and, in this case, subjects.

          It is recommended that your salt value is long for security reasons. Preferably, the salt
          value should be at least the same length as the output of the hash.

          If not provided, it is generated.
        type: string
        x-nullable: false
      subject_identifier_types:
        default:
        - public
        - pairwise
        description: |-
          An array that defines supported subject identifier types.

          Subject identifiers are locally unique and never reassigned identifiers within the Issuer
          for the end-user and are inteded to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          `public` identifiers provide the same `sub` claim value to all client applications.
          `pairwise` identifiers provide different `sub` claim values to each client application. With
          this approach, it makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        example:
        - public
        - pairwise
        items:
          enum:
          - public
          - pairwise
          type: string
        type: array
        x-nullable: false
      supported_application_purposes:
        description: supported application purposes
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of a tenant
        example: default
        format: tenantID
        type: string
        x-nullable: false
      token_endpoint_auth_methods:
        default:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        description: |-
          An array that lists all of the supported token endpoint authentication methods for the
          authorization server.
        items:
          enum:
          - client_secret_basic
          - client_secret_post
          - client_secret_jwt
          - private_key_jwt
          - self_signed_tls_client_auth
          - tls_client_auth
          - none
          type: string
        type: array
        x-nullable: false
      token_endpoint_authn_methods:
        description: 'Deprecated: Use TokenEndpointAuthMethods instead'
        items:
          enum:
          - client_secret_basic
          - client_secret_post
          - client_secret_jwt
          - private_key_jwt
          - self_signed_tls_client_auth
          - tls_client_auth
          - none
          type: string
        type: array
        x-nullable: false
      trust_anchor_configuration:
        $ref: '#/definitions/TrustAnchorConfiguration'
      type:
        default: regular
        description: |-
          Server type

          It is an internal property used to recognize if the server is created for an admin portal,
          a developer portal, or if it is a system or a regular workspace.
        enum:
        - admin
        - developer
        - system
        - regular
        example: regular
        type: string
        x-nullable: false
    required:
    - tenant_id
    type: object
  ServerToServer:
    properties:
      dependent:
        description: dependent server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      server_id:
        description: authorization server id
        example: developer
        format: serverID
        type: string
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
    type: object
  ServersBindings:
    properties:
      bindings:
        items:
          $ref: '#/definitions/ServerToServer'
        type: array
        x-nullable: false
    type: object
  ServersResponse:
    properties:
      servers:
        items:
          $ref: '#/definitions/ServerResponse'
        type: array
        x-nullable: false
    type: object
  Service:
    properties:
      authorization_server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      custom_audience:
        description: custom service audience
        example: https://api.example.com
        type: string
        x-nullable: false
      description:
        description: service description
        example: Service description
        type: string
        x-nullable: false
      gateway_id:
        description: gateway id
        format: gatewayID
        type: string
        x-nullable: false
      id:
        description: unique service id
        example: "1"
        format: serviceID
        type: string
        x-nullable: false
      name:
        description: service name
        example: Sample service
        type: string
        x-nullable: false
      system:
        description: Is service a system service
        example: false
        type: boolean
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      with_specification:
        description: true if service has openapi 3 specification
        type: boolean
        x-nullable: false
    type: object
  ServiceResponse:
    properties:
      audience:
        type: string
        x-nullable: false
      authorization_server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      custom_audience:
        description: custom service audience
        example: https://api.example.com
        type: string
        x-nullable: false
      description:
        description: service description
        example: Service description
        type: string
        x-nullable: false
      gateway_id:
        description: gateway id
        format: gatewayID
        type: string
        x-nullable: false
      id:
        description: unique service id
        example: "1"
        format: serviceID
        type: string
        x-nullable: false
      name:
        description: service name
        example: Sample service
        type: string
        x-nullable: false
      number_of_scopes:
        format: int64
        type: integer
        x-nullable: false
      system:
        description: Is service a system service
        example: false
        type: boolean
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      with_specification:
        description: true if service has openapi 3 specification
        type: boolean
        x-nullable: false
    type: object
  ServiceWithAudience:
    properties:
      audience:
        type: string
        x-nullable: false
      authorization_server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      custom_audience:
        description: custom service audience
        example: https://api.example.com
        type: string
        x-nullable: false
      description:
        description: service description
        example: Service description
        type: string
        x-nullable: false
      gateway_id:
        description: gateway id
        format: gatewayID
        type: string
        x-nullable: false
      id:
        description: unique service id
        example: "1"
        format: serviceID
        type: string
        x-nullable: false
      name:
        description: service name
        example: Sample service
        type: string
        x-nullable: false
      system:
        description: Is service a system service
        example: false
        type: boolean
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      with_specification:
        description: true if service has openapi 3 specification
        type: boolean
        x-nullable: false
    type: object
  ServiceWithScopesResponse:
    properties:
      audience:
        type: string
        x-nullable: false
      authorization_server_id:
        description: server id
        example: default
        format: serverID
        type: string
        x-nullable: false
      custom_audience:
        description: custom service audience
        example: https://api.example.com
        type: string
        x-nullable: false
      description:
        description: service description
        example: Service description
        type: string
        x-nullable: false
      gateway_id:
        description: gateway id
        format: gatewayID
        type: string
        x-nullable: false
      id:
        description: unique service id
        example: "1"
        format: serviceID
        type: string
        x-nullable: false
      name:
        description: service name
        example: Sample service
        type: string
        x-nullable: false
      scopes:
        description: list of scopes
        items:
          $ref: '#/definitions/Scope'
        type: array
        x-nullable: false
      system:
        description: Is service a system service
        example: false
        type: boolean
        x-nullable: false
      tenant_id:
        description: tenant id
        example: default
        format: tenantID
        type: string
        x-nullable: false
      with_specification:
        description: true if service has openapi 3 specification
        type: boolean
        x-nullable: false
    type: object
  ServicesResponse:
    properties:
      services:
        items:
          $ref: '#/definitions/ServiceResponse'
        type: array
        x-nullable: false
    type: object
  StaticCredentials:
    description: Static IDP specific credentials
    properties:
      users:
        description: |-
          An array of users, their credentials and authentication context.

          The `users` parameter accepts a JSON of user data. You can add multiple users, define their
          usernames and passwords. You can also enrich their authentication context.
        items:
          $ref: '#/definitions/StaticUser'
        type: array
        x-nullable: false
    type: object
  StaticIDP:
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
      authorization_server_id:
        description: ID of the authorization server (workspace) to which the IDP is
          connected
        format: serverID
        type: string
        x-nullable: false
      client_id:
        description: |-
          Client application ID

          It serves as a reference to a client application that is created in the System authorization
          server (workspace), when a custom login page is created.
        format: clientID
        type: string
        x-nullable: false
      config:
        $ref: '#/definitions/IDPConfiguration'
      credentials:
        $ref: '#/definitions/StaticCredentials'
      disabled:
        description: |-
          If set to `true`, the IDP is disabled

          When an IDP is disabled, it is not available for the users to be used. It is also not
          displayed on the login page.
        type: boolean
        x-nullable: false
      discovery_settings:
        $ref: '#/definitions/IDPDiscoverySettings'
      id:
        description: |-
          Unique ID of your identity provider

          If not provided, a random ID is generated.
        format: idpID
        type: string
        x-nullable: false
      identity_pool_id:
        description: ID of the Identity Pool to which the IDP is connected
        format: poolID
        type: string
        x-nullable: false
      mappings:
        $ref: '#/definitions/Mappings'
      method:
        description: |-
          Defines the type of an IDP

          ACP is designed to make it possible for you to bring any of your own IDPs and integrate it
          with ACP as it delivers enterprise connectors for major Cloud IDPs and a possibility for
          custom integration DKS for home-built solutions. You can also use built-in Sandbox IDP, which
          is a static IDP, to create an IDP for testing purposes.
        format: idpMethod
        type: string
        x-nullable: false
      name:
        description: Display name of your IDP
        type: string
        x-nullable: false
      settings:
        $ref: '#/definitions/StaticSettings'
      static_amr:
        description: |-
          Authentication method reference

          An array of case sensitive strings for authentication methods that are used in the user
          authentication.

          For example, an IDP may require the user to provide a biometric authentication using facial
          recognition. For that, the value of the authentication method reference is `face`.
        items:
          format: amr
          type: string
        type: array
        x-nullable: false
      tenant_id:
        description: ID of the tenant where an IDP is connected
        format: tenantID
        type: string
        x-nullable: false
      token_exchange_settings:
        $ref: '#/definitions/IDPTokenExchangeSettings'
      transformer:
        $ref: '#/definitions/ScriptTransformer'
    type: object
  StaticSettings:
    description: Static IDP specific settings
    properties:
      hint:
        description: If enabled, a hint message is displayed
        type: boolean
        x-nullable: false
    type: object
  StaticUser:
    properties:
      additional_attributes:
        $ref: '#/definitions/AuthenticationContext'
      authentication_context:
        $ref: '#/definitions/AuthenticationContext'
      email:
        description: User's preferred email.
        type: string
        x-nullable: false
      email_verified:
        description: If set to true, indicates that the user's email was verified.
        type: boolean
        x-nullable: false
      password:
        description: User password.
        example: secret
        type: string
        x-nullable: false
      phone_number:
        description: User's preferred phone number
        type: string
        x-nullable: false
      phone_number_verified:
        description: If set to true, indicates that the user's phone number was verified.
        type: boolean
        x-nullable: false
      username:
        description: User login.
        example: peter
        type: string
        x-nullable: false
    type: object
  Stats:
    properties:
      all_access_tokens:
        format: int64
        type: integer
        x-nullable: false
      apis:
        format: int64
        type: integer
        x-nullable: false
      applications:
        format: int64
        type: integer
        x-nullable: false
      machine_access_tokens:
        format: int64
        type: integer
        x-nullable: false
      scopes:
        format: int64
        type: integer
        x-nullable: false
      services:
        format: int64
        type: integer
        x-nullable: false
      user_access_tokens:
        format: int64
        type: integer
        x-nullable: false
    type: object
  Styling:
    properties:
      colors:
        properties:
          background:
            type: string
            x-nullable: false
          header:
            type: string
            x-nullable: false
          primary:
            type: string
            x-nullable: false
        type: object
        x-nullable: false
      font_url:
        type: string
        x-nullable: false
      logo_size:
        type: string
        x-nullable: false
      logo_url:
        type: string
        x-nullable: false
    type: object
  SystemAPIBindings:
    properties:
      bindings:
        items:
          $ref: '#/definitions/CrossTenantAPIPolicyBinding'
        type: array
        x-nullable: false
    type: object
  SystemServicesResponse:
    properties:
      services:
        items:
          $ref: '#/definitions/Service'
        type: array
        x-nullable: false
    type: object
  Tenant:
    properties:
      authentication_context_settings:
        $ref: '#/definitions/AuthenticationContextSettings'
      id:
        description: |-
          tenant unique identifier
          exampe: default
        format: tenantID
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ServerJWKs'
      name:
        description: tenant name
        example: Default
        type: string
        x-nullable: false
      styling:
        $ref: '#/definitions/Styling'
      url:
        description: optional custom tenant url. If not provided the server url is
          used instead
        example: https://example.com/default
        type: string
        x-nullable: false
    type: object
  TestAPIResult:
    properties:
      graphql_types:
        $ref: '#/definitions/GraphQLTypes'
      match:
        type: boolean
        x-nullable: false
      policy_id:
        format: policyID
        type: string
        x-nullable: false
    type: object
  TestMFAMethodRequest:
    properties:
      address:
        type: string
        x-nullable: false
    required:
    - address
    type: object
  TestPolicyDefinition:
    description: Definition of a policy that you wish to test
    properties:
      definition:
        description: The definition of an Open Policy Agent (OPA) policy provided
          using the REGO language.
        type: string
        x-nullable: false
      language:
        description: |-
          Language of a policy

          ACP supports creating Cloudentity policies (using a visual editor or defined using JSON or
          YAML) and Open Policy Agent (OPA) policies (defined using REGO).

          OPA is a policy engine that unifies policy enforcement and provides a high-level declarative
          language (REGO) that lets you specify policies as code. REGO supports referencing nested
          documents and ensures that your queries are correct and unambiguous.
        example: cloudentity
        format: policyLanguage
        type: string
        x-nullable: false
      validators:
        description: An array of validators for a Cloudentity policy
        items:
          $ref: '#/definitions/ValidatorConfig'
        type: array
        x-nullable: false
    type: object
  TestPolicyInput:
    properties:
      authn_ctx:
        $ref: '#/definitions/AuthenticationContext'
      contexts:
        additionalProperties:
          type: object
        description: Contexts for your policy validation
        type: object
        x-nullable: false
      request:
        $ref: '#/definitions/TestPolicyInputRequest'
    title: Contains the input for the request that is used to test the policy.
    type: object
  TestPolicyInputRequest:
    properties:
      body:
        description: Body that is used in your request that you use to test your policy
        type: string
        x-nullable: false
      headers:
        additionalProperties:
          items:
            type: string
          type: array
        description: Headers that are used in your request that you use to test your
          policy
        type: object
        x-nullable: false
      method:
        description: Method that is used in your request that you use to test your
          policy
        type: string
        x-nullable: false
      path:
        description: Path that is used in your request that you use to test your policy
        type: string
        x-nullable: false
      path_params:
        additionalProperties:
          type: string
        description: Path parameters that are used in your request that you use to
          test your policy
        type: object
        x-nullable: false
      query_params:
        additionalProperties:
          items:
            type: string
          type: array
        description: Query parameters that are used in your request that you use to
          test your policy
        type: object
        x-nullable: false
    type: object
  TestPolicyRequest:
    properties:
      input:
        $ref: '#/definitions/TestPolicyInput'
      policy:
        $ref: '#/definitions/TestPolicyDefinition'
      server_id:
        description: Authorization server (workspace) ID
        format: serverID
        type: string
        x-nullable: false
    type: object
  TestPolicyResponse:
    properties:
      failures:
        items:
          $ref: '#/definitions/ValidateResponse_ValidatorFailure'
        type: array
        x-nullable: false
      output:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      recovery:
        items: {}
        type: array
        x-nullable: false
      result:
        type: string
        x-nullable: false
      status:
        type: boolean
        x-nullable: false
    type: object
  TestRequest:
    properties:
      api:
        $ref: '#/definitions/API'
      test_request:
        $ref: '#/definitions/HTTPRequest'
    required:
    - api
    - test_request
    type: object
  TestScriptRequest:
    properties:
      body:
        description: Contains the script source for testing
        format: scriptBody
        type: string
        x-nullable: false
      input:
        additionalProperties:
          type: object
        description: Contains the input for the script
        type: object
        x-nullable: false
    type: object
  TrustAnchorConfiguration:
    properties:
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: URI of the JWKs of the trusted party responsible for signing
          the Software Statement
        type: string
        x-nullable: false
    type: object
  UnbindSystemAPIRequest:
    properties:
      api_id:
        format: apiID
        type: string
        x-nullable: false
      policy_id:
        format: policyID
        type: string
        x-nullable: false
      policy_server_id:
        format: serverID
        type: string
        x-nullable: false
    type: object
  UpdateAPIRequest:
    properties:
      data_classifications:
        description: Data classifications
        items:
          type: string
        type: array
        x-nullable: false
      graphql_schema:
        description: optional graphql schema
        type: string
        x-nullable: false
      graphql_types:
        $ref: '#/definitions/GraphQLTypes'
      policy_id:
        description: optional id of a policy
        example: block
        format: policyID
        type: string
        x-nullable: false
    type: object
  UpdateClientAdminRequest:
    properties:
      application_type:
        default: web
        description: |-
          String represented type of a client application

          Client applications can be either of a `web` or `native` types.

          Web applications include clients like server web applications or service apps.

          Native applications include single-page applications (SPAs) and mobile or desktop
          applications.

          Depending on the type of your application remember to choose appropriate security measures.
        example: web
        type: string
        x-nullable: false
      application_types:
        default:
        - server_web
        description: An array of dynamically calculated application types that can
          be used for filtering
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        - dcr
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          - dcr
          type: string
        readOnly: true
        type: array
        x-nullable: false
      audience:
        default:
        - client_id
        description: |-
          Identity of the intended recipients (the audience)

          Typically, the audience may be a single resources server or a list of resource servers.
          It is considered a good practice to limit the audience of the token for security purposes.
        items:
          type: string
        type: array
        x-nullable: false
      authorization_server_id:
        description: ID of the authorization server (workspace) to which a client
          application is tied
        example: default
        format: serverID
        type: string
        x-nullable: false
      backchannel_authentication_request_signing_alg:
        description: |-
          OPTIONAL. The JWS algorithm alg value that the Client will use for signing authentication requests.
          When omitted, the Client will not send signed authentication requests.
        type: string
        x-nullable: false
      backchannel_client_notification_endpoint:
        description: |-
          REQUIRED if the token delivery mode is set to ping or push.
          This is the endpoint to which the OP will post a notification after a successful or failed end-user authentication.
          It MUST be an HTTPS URL.
        type: string
        x-nullable: false
      backchannel_token_delivery_mode:
        description: 'REQUIRED. One of the following values: poll, ping, or push.'
        type: string
        x-nullable: false
      backchannel_user_code_parameter:
        description: |-
          OPTIONAL. Boolean value specifying whether the Client supports the user_code parameter.
          If omitted, the default value is false.
          This parameter only applies when OP parameter backchannel_user_code_parameter_supported is true.
        type: boolean
        x-nullable: false
      client_id:
        description: |-
          OAuth client application identifier

          If not provided, a random client ID is generated.
        format: clientID
        type: string
        x-nullable: false
      client_id_issued_at:
        description: |-
          Time at which the client identifier was issued.

          The time is represented as the number of seconds from
          1970-01-01T00:00:00Z as measured in UTC until the date/time of issuance.
        format: int64
        type: integer
        x-nullable: false
      client_name:
        description: Human readable name of a client application
        example: My app
        type: string
        x-nullable: false
      client_secret:
        description: |-
          OAuth client secret

          If not provided, a random client secret is generated.
        minLength: 32
        type: string
        x-nullable: false
      client_secret_expires_at:
        description: |-
          The `client_secret_expires_at` holds an integer that defines the time at which the client
          secret expires

          If the client secret does not expire, the value should be set to `0`.
        format: int64
        type: integer
        x-nullable: false
      client_uri:
        description: URI of a client application
        type: string
        x-nullable: false
      description:
        description: Description of a client application
        type: string
        x-nullable: false
      developer_id:
        description: Optional developer owner of the client application
        format: subject
        type: string
        x-nullable: false
      developer_metadata:
        $ref: '#/definitions/Metadata'
      grant_types:
        default:
        - authorization_code
        description: |-
          An array of allowed OAuth client grant types

          The `grantTypes` array stores OAuth flows that are allowed for a given client application.

          To know more about OAuth grant flows, see the
          [ACP grant flows documentation](https://docs.authorization.cloudentity.com/features/oauth/grant_flows/).
        example:
        - password
        - refresh_token
        - client_credentials
        - implicit
        - authorization_code
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          type: string
        type: array
        x-nullable: false
      hashed_rotated_secrets:
        description: An array of hashed rotated client secrets
        items:
          type: string
        type: array
        x-nullable: false
      hashed_secret:
        description: |-
          Hashed client secret

          Hashing client secrets provides additional security for your secrets storage as it hides
          plaintext secrets from being viewed both in the UI and the database.
        type: string
        x-nullable: false
      id_token_encrypted_response_alg:
        description: JWE alg algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        type: string
        x-nullable: false
      id_token_encrypted_response_enc:
        description: JWE enc algorithm for encrypting the ID Token issued to this
          Client
        enum:
        - A256GCM
        - A128CBC-HS256
        type: string
        x-nullable: false
      id_token_signed_response_alg:
        description: |-
          Algorithm for signing ID tokens issued for a client application

          The default value depends on authorization server configuration.
        enum:
        - RS256
        - ES256
        - PS256
        example: ES256
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: |-
          URL of JSON Web Key Set containing the public keys used by a client application to authenticate itself
          with ACP
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI
        type: string
        x-nullable: false
      metadata:
        $ref: '#/definitions/Metadata'
      organisation_id:
        description: |-
          External organisation ID

          This field is used as an aud for message signing
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used
        type: string
        x-nullable: false
      privacy:
        $ref: '#/definitions/ClientPrivacy'
      redirect_uris:
        description: |-
          An array of OAuth allowed redirect URIs

          Redirect URIs are used after a user authorizes an application and ACP redirect them back to
          the application with an authorization code or an access token included in the URL.
        example:
        - https://example.com/callback
        items:
          type: string
        type: array
        x-nullable: false
      request_object_signing_alg:
        default: any
        description: |-
          Request object signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, and PS256 algorithms. If you do not want
          to use a signing algorithm, the value of the parameter should be set to `none`.
        enum:
        - any
        - none
        - RS256
        - ES256
        - PS256
        example: none
        type: string
        x-nullable: false
      request_uris:
        description: Array of absolute URIs that points to the Request Object that
          holds authorization request parameters.
        items:
          type: string
        type: array
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the only means of initiating
          an authorization request the client is allowed to use is PAR.
        type: boolean
        x-nullable: false
      response_types:
        default:
        - code
        description: |-
          An array of OAuth client response types configured for a client application

          The array may consist of the following arguments:

          `code` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code

          `code token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an authorization code

          `id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token, an access token type, and an ID token

          `code id_token token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an authorization code, an ID token, an access token, and an access token
          type.

          `token` - when supplied as the value for the `response_type` parameter, a successful
          response includes an access token and its type. This argument is used for the implicit grant
          flow, but is not recommended. Instead, you should use either the authorization code grant
          flow with PKCE or client authentication set to `none` and with the use of PKCE.
        example:
        - token
        - id_token
        - code
        items:
          enum:
          - token
          - id_token
          - code
          - code id_token
          - token id_token
          - token code
          - token id_token code
          type: string
        type: array
        x-nullable: false
      rotated_secrets:
        description: An array of rotated OAuth client secrets
        items:
          type: string
        minLength: 32
        type: array
        x-nullable: false
      scope:
        description: Space separated scopes for compatibility with OAuth specification
        example: email offline_access openid
        type: string
        x-nullable: false
      scopes:
        description: An array of string represented scopes assigned to a client application
        example:
        - email
        - offline_access
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      sector_identifier_uri:
        description: |-
          URL using the HTTPS scheme to be used in calculating Pseudonymous Identifiers by the OpenID Provider. The URL references a
          file with a single JSON array of redirect_uri values.
        example: https://api.jsonbin.io/b/5db6ef08688fed59d2841f1e
        type: string
        x-nullable: false
      software_statement:
        description: |-
          A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
          asserts metadata values about the client software.  In some cases,
          a software statement is issued directly by the client
          developer.  In other cases, a software statement is issued by
          a third-party organization for use by the client developer.

          In both cases, the trust relationship the authorization server has
          with the issuer of the software statement is intended to be used
          as an input to the evaluation of whether the registration request
          is accepted.

          A software statement can be presented to an
          authorization server as part of the client registration request.
        type: string
        x-nullable: false
      subject_type:
        default: public
        description: |-
          Subject identifier type

          Stores information if the subject identifier is of the `public` or the `pairwise` type.

          Subject identifiers are locally unique and never reassigned identifiers within the Issuer
          for the end-user and are inteded to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.

          For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
          Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        enum:
        - public
        - pairwise
        example: public
        type: string
        x-nullable: false
      system:
        description: Stores information if the client application is a system tenant's
          application
        type: boolean
        x-nullable: false
      tls_client_auth_san_dns:
        description: A string containing the value of an expected dNSName SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_email:
        description: A string containing the value of an expected rfc822Name SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_ip:
        description: A string representation of an IP address in either dotted decimal
          notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined
          in [RFC5952]) that is expected to be present as an iPAddress SAN entry in
          the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_uri:
        description: A string containing the value of an expected uniformResourceIdentifier
          SAN entry in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_subject_dn:
        description: An [RFC4514] string representation of the expected subject distinguished
          name of the certificate.
        type: string
        x-nullable: false
      tls_client_certificate_bound_access_tokens:
        description: Boolean value indicating server support for mutual TLS client
          certificate-bound access tokens. If omitted, the default value is "false".
        type: boolean
        x-nullable: false
      token_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          Token endpoint authentication method configured for a client application

          ACP supports the following client authentication methods:
          client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt,
          self_signed_tls_client_auth, tls_client_auth, none.

          To learn more, see the [ACP client authentication documentation](https://docs.authorization.cloudentity.com/features/oauth/client_auth/)
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      token_endpoint_auth_signing_alg:
        default: none
        description: |-
          Signing algorithm for the token endpoint

          ACP supports signing tokens using the RS256, ES256, PS256, and HS256 algorithms.

          If your token endpoint authentication is set to the `private_key_jwt` method, the
          `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.

          If your token endpoint authentication is set to the `client_secret_jwt` method,
          the `token_endpoint_auth_signing_alg` parameter must be HS256.
        enum:
        - none
        - RS256
        - ES256
        - PS256
        - HS256
        example: none
        type: string
        x-nullable: false
      tos_uri:
        description: Terms of Service URL
        type: string
        x-nullable: false
      trusted:
        description: |-
          Defines whether the client application is trusted or not.

          For trusted clients, consent pages are skipped during the authorization process.
        type: boolean
        x-nullable: false
      userinfo_signed_response_alg:
        default: none
        description: |-
          JWS alg algorithm REQUIRED for signing UserInfo Responses.

          If specified, the response is JWT
          [JWT] serialized, and signed using JWS.

          If omitted, the default behavior is for the UserInfo Response to return the Claims
          as an UTF-8 encoded JSON object using the application/json content-type.
        enum:
        - none
        - RS256
        - ES256
        example: none
        type: string
        x-nullable: false
    required:
    - authorization_server_id
    type: object
  UpdateGatewayRequest:
    properties:
      description:
        description: description
        type: string
        x-nullable: false
      name:
        description: gateway name
        example: Cloudentity Pyron
        type: string
        x-nullable: false
      token_exchange:
        $ref: '#/definitions/GatewayTokenExchangeSettings'
    type: object
  ValidateResponse_ValidatorFailure:
    properties:
      details:
        type: string
        x-nullable: false
      message:
        type: string
        x-nullable: false
      validator:
        type: string
        x-nullable: false
    type: object
  ValidatorConfig:
    description: Depending on the type of a policy different validators are available.
    properties:
      conf:
        additionalProperties:
          type: object
        description: |-
          Configuration of the validator provided in the JSON format

          Validators configuration is an array of fields where each node consists of a comparator used,
          validated field, and a value for comparison. Configuration can be also branched, which means
          that it is possible to create conditional validators. It allows to define complex
          authorization scenarios based on the results from other policy validators.
        type: object
        x-nullable: false
      name:
        description: The name of your validator
        example: identity-context
        type: string
        x-nullable: false
      recovery:
        items:
          $ref: '#/definitions/RecoveryConfig'
        type: array
        x-nullable: false
    title: Configuration of a policy validator
    type: object
  VanityDomain:
    properties:
      api_key:
        description: api key
        type: string
        x-nullable: false
      base_path:
        description: base path to use with a configured vanity domain
        example: /prefix
        type: string
        x-nullable: false
      cert:
        description: domain cerificate
        type: string
        x-nullable: false
      domain:
        description: vanity domain
        example: example.com
        type: string
        x-nullable: false
      id:
        description: ID
        format: vanityDomainID
        type: string
        x-nullable: false
      key:
        description: domain private key
        type: string
        x-nullable: false
      server_id:
        description: Unique identifier of an authorization server (workspace)
        example: default
        format: serverID
        type: string
        x-nullable: false
      tenant_id:
        description: ID of a tenant
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        $ref: '#/definitions/VanityDomainType'
    required:
    - domain
    type: object
  VanityDomainType:
    type: string
host: localhost:8443
info:
  description: Cloudentity Authorization Control Plane Admin API
  title: Cloudentity Authorization Control Plane API
  version: latest
paths:
  /actions:
    get:
      description: List consent actions.
      operationId: listConsentActions
      responses:
        "200":
          $ref: '#/responses/ConsentActionsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List consent actions
      tags:
      - consents
    post:
      description: |-
        Consent action allows to group list of consents. A Tenant Application asking for the consent it can
        ask for +by the action name+ instead of asking for a list of consents directly. It allows for cleaner
        abstraction and adds the ability to dynamically configure the consents required for particular applications.

        ID and Name are required fields.

        For each consent provide id and specify if it is required.
      operationId: createConsentAction
      parameters:
      - in: body
        name: ConsentAction
        required: true
        schema:
          $ref: '#/definitions/ConsentActionWithConsents'
      responses:
        "201":
          $ref: '#/responses/ConsentActionWithConsentsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create consent action
      tags:
      - consents
  /actions/{action}:
    delete:
      description: Delete consent action.
      operationId: deleteConsentAction
      parameters:
      - in: path
        name: action
        required: true
        type: string
      responses:
        "204":
          description: ' ConsentAction has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete consent action
      tags:
      - consents
    get:
      description: Get consent action with consents.
      operationId: getConsentAction
      parameters:
      - in: path
        name: action
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ConsentActionWithConsentsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get consent action with consents
      tags:
      - consents
    put:
      description: Update consent action.
      operationId: updateConsentAction
      parameters:
      - in: path
        name: action
        required: true
        type: string
      - in: body
        name: ConsentAction
        schema:
          $ref: '#/definitions/ConsentActionWithConsents'
      responses:
        "201":
          $ref: '#/responses/ConsentActionWithConsentsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update consent action
      tags:
      - consents
  /apis:
    post:
      description: It is not possible to create APIs for a service with imported specification.
      operationId: createAPI
      parameters:
      - description: APIBody
        in: body
        name: APIBody
        schema:
          $ref: '#/definitions/API'
      responses:
        "201":
          $ref: '#/responses/APIResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create API
      tags:
      - apis
  /apis/{api}:
    delete:
      description: |-
        If this API was created by import specification operation then
        it is not possible to delete it.
      operationId: deleteAPI
      parameters:
      - in: path
        name: api
        required: true
        type: string
      responses:
        "204":
          description: ' API has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete API
      tags:
      - apis
    get:
      description: Get API.
      operationId: getAPI
      parameters:
      - in: path
        name: api
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/APIResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get API
      tags:
      - apis
    put:
      description: Update API.
      operationId: updateAPI
      parameters:
      - description: API ID
        in: path
        name: api
        required: true
        type: string
      - description: APIBody
        in: body
        name: APIBody
        schema:
          $ref: '#/definitions/UpdateAPIRequest'
      responses:
        "200":
          $ref: '#/responses/APIResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update API
      tags:
      - apis
  /apis/test:
    post:
      description: Check if an example request matches given API, if so, return policy
        list to evaluate.
      operationId: testAPI
      parameters:
      - description: APIBody
        in: body
        name: APIBody
        schema:
          $ref: '#/definitions/TestRequest'
      responses:
        "200":
          $ref: '#/responses/TestAPIResponseModel'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Test API
      tags:
      - apis
  /claims:
    post:
      description: |-
        Claim allows to add custom attribute to outgoing id / access token.

        Authorization Server, Name, Mapping and Type are required fields.

        ID if not provided will be generated.
      operationId: createClaim
      parameters:
      - in: body
        name: Claim
        schema:
          $ref: '#/definitions/Claim'
      responses:
        "201":
          $ref: '#/responses/ClaimResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create claim
      tags:
      - claims
  /claims/{claim}:
    delete:
      description: Delete claim.
      operationId: deleteClaim
      parameters:
      - in: path
        name: claim
        required: true
        type: string
      responses:
        "204":
          description: ' Claim has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete claim
      tags:
      - claims
    put:
      description: Update claim.
      operationId: updateClaim
      parameters:
      - in: path
        name: claim
        required: true
        type: string
      - in: body
        name: UpdateClaimBody
        schema:
          $ref: '#/definitions/Claim'
      responses:
        "200":
          $ref: '#/responses/ClaimResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update claim
      tags:
      - claims
  /clients:
    post:
      description: |-
        Client must be created under existing tenant and authorization server.

        Authorization server id must be provided in the request body.

        Client id and secret can be provided, otherwise are generated.

        If grant type is not set, client will get authorization code grant type assigned with code as response type.

        Default token authentication method is client_secret_basic.
      operationId: createClient
      parameters:
      - in: body
        name: Client
        schema:
          $ref: '#/definitions/CreateClientAdminRequest'
      - in: query
        name: application_purpose
        type: string
      responses:
        "201":
          $ref: '#/responses/ClientAdminResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create new OAuth client
      tags:
      - clients
  /clients/{cid}:
    delete:
      description: Delete client.
      operationId: deleteClient
      parameters:
      - default: default
        description: Client id
        in: path
        name: cid
        required: true
        type: string
      responses:
        "204":
          description: ' Client has been deleted'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete client
      tags:
      - clients
    get:
      description: If client has been created by a developer, client's secret will
        be empty.
      operationId: getClient
      parameters:
      - default: default
        description: Client id
        in: path
        name: cid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ClientAdminResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get client.
      tags:
      - clients
    put:
      description: |-
        Update client.

        For clients created by developers only metadata, system and trusted attributes
        can be updated.
      operationId: updateClient
      parameters:
      - default: default
        description: Client id
        in: path
        name: cid
        required: true
        type: string
      - in: body
        name: Client
        schema:
          $ref: '#/definitions/UpdateClientAdminRequest'
      responses:
        "200":
          $ref: '#/responses/ClientAdminResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update client
      tags:
      - clients
  /clients/{cid}/revokeRotatedSecrets:
    post:
      description: Revoke all rotated client's secrets.
      operationId: revokeRotatedClientSecrets
      parameters:
      - default: default
        description: Client id
        in: path
        name: cid
        required: true
        type: string
      responses:
        "204":
          description: ' all client''s rotated secrets has been revoked'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Revoke rotated secrets.
      tags:
      - clients
  /clients/{cid}/rotateSecret:
    post:
      description: |-
        Generate a new client secret, move old secret to rotated secrets list and return
        new client secret as a response. The max number of client rotated secrets is 2.
        The rotated secrets over the limit are dropped.

        It is possible to set expiration time for rotated secrets. When the `AutoRevokeAfter` parameter
        is set to a value greater than zero, rotated secrets that reach their expiry time are revoked.
        The `AutoRevokeAfter` parameter accepts values in the go-openapi duration format, for example,
        `1s`, `5m`, `2h`.
      operationId: rotateClientSecret
      parameters:
      - default: default
        description: Client id
        in: path
        name: cid
        required: true
        type: string
      - default: "0"
        description: Auto revoke after
        in: query
        name: auto_revoke_after
        type: string
      responses:
        "200":
          $ref: '#/responses/RotateClientSecretResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Rotate client's secret.
      tags:
      - clients
  /consents:
    get:
      description: List consents.
      operationId: listConsents
      responses:
        "200":
          $ref: '#/responses/ConsentsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List consents
      tags:
      - consents
    post:
      description: |-
        Consents are created per tenant.

        ID, Name and UpdateExistingGrants strategy are required fields when creating a new consent.

        UpdateExistingGrants has the following options:

        explicitAll - all the existing grants should not be updated. It is required that the user grants the consent explicitly.

        implicitAll - all previously existing consent grants should be updated, to the new version of the consent, but
        all of those grants should be implicit from the moment on.

        keepCurrent - if a previously existing consent grant was set implicitly, it is automatically updated and a new
        consent grant is produced, which is also implicit. if a previously existing consent grant was set
        explicitly, it should not be updated. It is required that the user grants the consent explicitly.
      operationId: createConsent
      parameters:
      - in: body
        name: Consent
        required: true
        schema:
          $ref: '#/definitions/Consent'
      responses:
        "201":
          $ref: '#/responses/ConsentResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create consent
      tags:
      - consents
  /consents/{consent}:
    delete:
      description: Delete consent.
      operationId: deleteConsent
      parameters:
      - in: path
        name: consent
        required: true
        type: string
      responses:
        "204":
          description: ' Consent has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete consent
      tags:
      - consents
    get:
      description: Get consent details.
      operationId: getConsent
      parameters:
      - in: path
        name: consent
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ConsentResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get consent details
      tags:
      - consents
    put:
      description: |-
        Every time consent is updated, its version is incremented.

        If ValidFrom attribute is not provided it will be set to current time.
      operationId: updateConsent
      parameters:
      - in: path
        name: consent
        required: true
        type: string
      - in: body
        name: ConsentBody
        schema:
          $ref: '#/definitions/Consent'
      responses:
        "201":
          $ref: '#/responses/ConsentResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update consent
      tags:
      - consents
  /environment:
    get:
      description: Get environment settings.
      operationId: getEnvironment
      responses:
        "200":
          $ref: '#/responses/Environment'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get environment
      tags:
      - environment
  /events:
    get:
      description: List privacy ledger events.
      operationId: listPrivacyLedgerEventsBySubject
      parameters:
      - description: Subject
        format: subject
        in: query
        name: sub
        type: string
      - description: Query events from timestamp (default 0)
        format: int64
        in: query
        name: from
        type: integer
      - description: Query events to timestamp (default current time)
        format: int64
        in: query
        name: to
        type: integer
      responses:
        "200":
          $ref: '#/responses/PrivacyLedgerEventsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List privacy ledger events
      tags:
      - consents
  /gateways:
    post:
      description: Create gateway.
      operationId: createGateway
      parameters:
      - in: body
        name: Gateway
        schema:
          $ref: '#/definitions/CreateGatewayRequest'
      responses:
        "201":
          $ref: '#/responses/GatewayWithClient'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create gateway
      tags:
      - gateways
  /gateways/{gw}:
    delete:
      description: This removes configuration for all services connected to this gateway.
      operationId: deleteGateway
      parameters:
      - in: path
        name: gw
        required: true
        type: string
      responses:
        "204":
          description: ' Gateway has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete gateway
      tags:
      - gateways
    get:
      description: Get gateway.
      operationId: getGateway
      parameters:
      - default: default
        description: Gateway id
        in: path
        name: gw
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/GatewayWithClient'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get gateway
      tags:
      - gateways
    put:
      description: Update gateway.
      operationId: updateGateway
      parameters:
      - in: path
        name: gw
        required: true
        type: string
      - in: body
        name: UpdateGatewayBody
        schema:
          $ref: '#/definitions/UpdateGatewayRequest'
      responses:
        "200":
          $ref: '#/responses/Gateway'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update gateway
      tags:
      - gateways
  /gateways/{gw}/groups:
    get:
      description: List gateway api groups.
      operationId: listGatewayAPIGroups
      parameters:
      - description: Gateway id
        in: path
        name: gw
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/GatewayAPIGroups'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List gateway api groups
      tags:
      - gateways
  /gateways/{gw}/groups/{apiGroup}/bind:
    post:
      description: |-
        It unbinds service first, if it is already connected to an api group.

        It removes specification from a service, if it has specification imported already.

        It removes any APIs added manually to a service, if it contains any.
      operationId: bindGroupToService
      parameters:
      - in: path
        name: gw
        required: true
        type: string
      - in: path
        name: apiGroup
        required: true
        type: string
      - in: body
        name: BindGroupToServiceRequest
        schema:
          $ref: '#/definitions/BindGroupToServiceRequest'
      responses:
        "200":
          $ref: '#/responses/BindGroupToServiceResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Bind a group to a service
      tags:
      - gateways
  /gateways/{gw}/groups/{apiGroup}/unbind:
    delete:
      description: |-
        Remove all apis and policies.

        If policy is used by another service it will not be removed.

        If service is connected to a gateway, it will be disconnected.

        If a gateway api group is connected to this service, it will be disconnected.
      operationId: unbindGroupFromService
      parameters:
      - in: path
        name: gw
        required: true
        type: string
      - in: path
        name: apiGroup
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/UnbindGroupFromServiceResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Unbind a group from a service
      tags:
      - gateways
  /gateways/{gw}/package:
    get:
      description: Get package for a gateway.
      operationId: getGatewayPackage
      parameters:
      - default: default
        description: Gateway id
        in: path
        name: gw
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        "200":
          $ref: '#/responses/gatewayPackage'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get package for a gateway
      tags:
      - gateways
  /mfa-methods:
    get:
      description: List MFA methods.
      operationId: listMFAMethods
      responses:
        "200":
          $ref: '#/responses/MFAMethods'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List MFA methods
      tags:
      - mfaMethods
    post:
      description: Create MFA method.
      operationId: createMFAMethod
      parameters:
      - in: body
        name: MFAMethod
        schema:
          $ref: '#/definitions/MFAMethod'
      responses:
        "201":
          description: MFAMethod
          schema:
            $ref: '#/definitions/MFAMethod'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create MFA method
      tags:
      - mfaMethods
  /mfa-methods/{mfaID}:
    delete:
      description: Delete MFA method.
      operationId: deleteMFAMethod
      parameters:
      - in: path
        name: mfaID
        required: true
        type: string
      responses:
        "204":
          description: ' MFA method has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete MFA method
      tags:
      - mfaMethods
    get:
      description: Get MFA method.
      operationId: getMFAMethod
      parameters:
      - in: path
        name: mfaID
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/MFAMethodResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get MFA method
      tags:
      - mfaMethods
    put:
      description: Update mfaMethod.
      operationId: updateMFAMethod
      parameters:
      - in: path
        name: mfaID
        required: true
        type: string
      - in: body
        name: MFAMethod
        schema:
          $ref: '#/definitions/MFAMethod'
      responses:
        "200":
          description: MFAMethod
          schema:
            $ref: '#/definitions/MFAMethod'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update mfaMethod
      tags:
      - mfaMethods
  /mfa-methods/{mfaID}/test:
    post:
      description: Send test OTP message.
      operationId: testMFAMethod
      parameters:
      - description: MFA id
        in: path
        name: mfaID
        required: true
        type: string
      - in: body
        name: MFAMethodTest
        schema:
          $ref: '#/definitions/TestMFAMethodRequest'
      responses:
        "200":
          description: ' MFA OTP message sent'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Send test OTP message
      tags:
      - mfaMethods
  /policies:
    post:
      description: |-
        ACP supports creating Cloudentity policies (using a visual editor or defined using JSON or
        YAML) and policies defined using REGO (language used by Open Policy Agent (OPA)).

        In ACP, policies are created per tenant. It means that is not possible to create policies with
        the same ID in two different workspaces within the same tenant. Additionally, when a policy is
        created, a workspace prefix is added to your policy name on the UI side. It is not possible to
        reuse policies between different authorization servers.


        Sample validators which can be used to build policies: identity-context, consent, header, true, false.
      operationId: createPolicy
      parameters:
      - in: body
        name: Policy
        schema:
          $ref: '#/definitions/Policy'
      responses:
        "201":
          $ref: '#/responses/Policy'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create policy
      tags:
      - policies
  /policies/{pid}:
    delete:
      description: It is not possible to delete policies that are currently in use.
      operationId: deletePolicy
      parameters:
      - in: path
        name: pid
        required: true
        type: string
      responses:
        "204":
          description: ' Policy has been deleted'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete policy
      tags:
      - policies
    get:
      description: Returns a policy and it's definition.
      operationId: getPolicy
      parameters:
      - description: ID of your policy
        in: path
        name: pid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Policy'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get policy
      tags:
      - policies
    put:
      description: Update existing authorization policies.
      operationId: updatePolicy
      parameters:
      - description: ID of the policy to be updated
        in: path
        name: pid
        required: true
        type: string
      - in: body
        name: PolicyBody
        schema:
          $ref: '#/definitions/Policy'
      responses:
        "201":
          $ref: '#/responses/Policy'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update policy
      tags:
      - policies
  /policies/test:
    post:
      description: |-
        You can test a policy and check if it works correctly using this endpoint. Provide your mock input and
        pass it as the value of the `input` parameter. Define your policy. Then, fire a request to the
        test policy endpoint. By doing so, you can test if a policy would fail or pass for a given request.
      operationId: testPolicy
      parameters:
      - in: body
        name: TestPolicyRequest
        schema:
          $ref: '#/definitions/TestPolicyRequest'
      responses:
        "200":
          $ref: '#/responses/TestPolicyResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Test policy
      tags:
      - policies
  /scopes:
    post:
      description: |-
        Scope name is required. If scope id is not provided, will be generated.
        If you want to assign scope to a service, provide service id.
      operationId: createScope
      parameters:
      - in: body
        name: ScopeWithService
        schema:
          $ref: '#/definitions/ScopeWithServiceID'
      responses:
        "201":
          $ref: '#/responses/Scope'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create scope
      tags:
      - scopes
  /scopes/{scp}:
    delete:
      description: Delete scope.
      operationId: deleteScope
      parameters:
      - in: path
        name: scp
        required: true
        type: string
      responses:
        "204":
          description: ' Scope has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete scope
      tags:
      - scopes
    get:
      description: Get scope.
      operationId: getScope
      parameters:
      - in: path
        name: scp
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ScopeWithService'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get scope
      tags:
      - scopes
    put:
      description: Update scope.
      operationId: updateScope
      parameters:
      - in: path
        name: scp
        required: true
        type: string
      - in: body
        name: Scope
        schema:
          $ref: '#/definitions/Scope'
      responses:
        "200":
          $ref: '#/responses/Scope'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update scope
      tags:
      - scopes
  /servers:
    get:
      description: List authorization servers.
      operationId: listAuthorizationServers
      responses:
        "200":
          $ref: '#/responses/Servers'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List authorization servers
      tags:
      - servers
    post:
      description: |-
        Multiple authorization servers with unique id can be created within a tenant.
        If id and secret are not provided, will be generated.
        Secret if provided must have at least 32 characters.

        You can set what grant types will be supported by authorization server. The defaults are:
        `{"grant_types": ["authorization_code", "implicit", "client_credentials", "refresh_token"]}`

        If jwks keys are not provided explicitly, will be generated based on provided `key_type` algorithm (rsa by default).

        TTLs for tokens and authorization code can be customized. The defaults are:

        `authorization_code_ttl` - 10 minutes
        `access_token_ttl` - 1 hour
        `id_token_ttl` - 1 hour
        `refresh_token_ttl` - 30 days

        If you want to enable dynamic client registration set `{"enable_dynamic_client_registration": true}`.

        If you want to create FAPI read write compliant server set: `{"profiles"": ["fapi_rw"]}`.

        If you want to enforce PKCE set `{"enforce_pkce": true}`.
      operationId: createAuthorizationServer
      parameters:
      - in: body
        name: Server
        schema:
          $ref: '#/definitions/Server'
      - description: With demo client
        in: query
        name: with_demo_client
        type: boolean
      responses:
        "201":
          $ref: '#/responses/Server'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create authorization server
      tags:
      - servers
  /servers-bindings:
    get:
      description: List servers bindings.
      operationId: listServersBindings
      responses:
        "200":
          $ref: '#/responses/ServersBindings'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List servers bindings
      tags:
      - servers
  /servers/{wid}:
    delete:
      description: Delete authorization server.
      operationId: deleteAuthorizationServer
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "204":
          description: ' Authorization server has been deleted'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete authorization server
      tags:
      - servers
    get:
      description: Get authorization server.
      operationId: getAuthorizationServer
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Server'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get authorization server
      tags:
      - servers
    put:
      description: Update authorization server.
      operationId: updateAuthorizationServer
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - in: body
        name: Server
        schema:
          $ref: '#/definitions/Server'
      responses:
        "200":
          $ref: '#/responses/Server'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update authorization server
      tags:
      - servers
  /servers/{wid}/apis:
    get:
      description: List APIs.
      operationId: listAPIsByServer
      parameters:
      - default: default
        description: Server id
        in: path
        name: wid
        required: true
        type: string
      - description: List apis that have no data classifications
        in: query
        name: without_data_classifications
        type: boolean
      - description: List apis that have given data classifications
        in: query
        items:
          type: string
        name: data_classification
        type: array
      responses:
        "200":
          $ref: '#/responses/ServerAPIsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List APIs
      tags:
      - apis
  /servers/{wid}/audit-events:
    get:
      description: Returns list of autit events.
      operationId: listAuditEvents
      parameters:
      - default: admin
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: |-
          optional list audit events with a given client id
          ClientID
        in: query
        name: client_id
        type: string
      - description: |-
          optional list audit events with a given subject
          Subject
        in: query
        name: subject
        type: string
      - description: |-
          optional list audit events with a given ip address
          IP
        in: query
        name: ip
        type: string
      - description: |-
          optional list audit events with a given session id

          it can be used as a correlation id for listing all login related audit events
          SessionID
        in: query
        name: session_id
        type: string
      - description: |-
          Optional event subject, one of: request client gateway_request policy consent authorization_code recovery login access_token scopes otp
          EventType
        in: query
        name: event_subject
        type: string
      - description: |-
          Optional event type, one of: authorized unauthorized created updated deleted requested accepted rejected issued denied granted attempted failed sent not_sent revoked
          EventType
        in: query
        name: event_action
        type: string
      - description: |-
          list all events after a given time
          TimestampFrom
        format: date-time
        in: query
        name: timestamp_from
        type: string
      - description: |-
          list all events before a given time
          TimestampTo
        format: date-time
        in: query
        name: timestamp_to
        type: string
      - description: |-
          optional list events before a given event id
          BeforeEventID
        in: query
        name: before_event_id
        type: string
      - description: |-
          optional list audit events after a given event id
          AfterEventID
        in: query
        name: after_event_id
        type: string
      - description: |-
          optional sort audit events by a given field
          Sort
        in: query
        name: sort
        type: string
      - description: |-
          optional order audit events by given direction
          Order
        in: query
        name: order
        type: string
      - default: 20
        description: |-
          optional limit results, min 1, max 100
          Limit
        format: int64
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      responses:
        "200":
          $ref: '#/responses/AuditEventsResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List audit events
      tags:
      - auditEvents
  /servers/{wid}/bind/{rid}:
    post:
      description: Bind server.
      operationId: bindServer
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: Dependent server id
        in: path
        name: rid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ServerToServer'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Bind server
      tags:
      - servers
  /servers/{wid}/ciba-authentication-service:
    get:
      description: This API returns details of CIBA authentication service.
      operationId: getCIBAAuthenticationService
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/CIBAAuthenticationServiceResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get CIBA authentication service
      tags:
      - servers
    put:
      description: |-
        If you want to enable CIBA for the workspace, you need to provide url to external service that implements
        rest api specified by ACP.
      operationId: setCIBAAuthenticationService
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: CIBA authentication service
        in: body
        name: CIBAAuthenticationService
        schema:
          $ref: '#/definitions/CIBAAuthenticationService'
      responses:
        "200":
          $ref: '#/responses/CIBAAuthenticationServiceResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Set CIBA authentication service.
      tags:
      - servers
  /servers/{wid}/claims:
    get:
      description: List claims.
      operationId: listClaims
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ClaimsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List claims
      tags:
      - claims
  /servers/{wid}/clients:
    get:
      description: Returns clients created by admins and developers. If client has
        been created by a developer, client secret will be empty.
      operationId: listClients
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: |-
          Optional search phrase: client id OR client name substring
          SearchPhrase
        in: query
        name: search_phrase
        type: string
      - description: |-
          Optional type, one of: internal, third_party
          Type
        in: query
        name: type
        type: string
      - description: |-
          Optional application types
          ApplicationTypes
        in: query
        name: application_types
        type: string
      - description: |-
          optional list clients after given id
          AfterClientID
        in: query
        name: after_client_id
        type: string
      - description: |-
          optional list clients before given id
          BeforeClientID
        in: query
        name: before_client_id
        type: string
      - description: |-
          optional sort clients by given field
          Sort
        in: query
        name: sort
        type: string
      - description: |-
          optional order clients by given direction
          Order
        in: query
        name: order
        type: string
      - default: 20
        description: |-
          optional limit results
          Limit
        format: int64
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      responses:
        "200":
          $ref: '#/responses/ClientsForAdminResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List clients
      tags:
      - clients
  /servers/{wid}/dashboards:
    get:
      description: List links to dashboards.
      operationId: listDashboards
      parameters:
      - default: default
        description: Server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/DashboardsResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List links to dashboards
      tags:
      - servers
  /servers/{wid}/gateways:
    get:
      description: List gateways.
      operationId: listGateways
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Gateways'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List gateways
      tags:
      - gateways
  /servers/{wid}/idps:
    get:
      description: Returns a list of IDPs connected to a given authorization server
        (workspace)
      operationId: listIDPs
      parameters:
      - default: default
        description: ID of your authorization server (workspace)
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/IDPsResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      tags:
      - idps
  /servers/{wid}/idps/{iid}:
    delete:
      description: |-
        Deletes an IDP of your choice

        Deleting an IDP is permament. Deleted IDPs cannot be restored.

        It is impossible to delete an IDP with which you are currently logged in.
      operationId: deleteIDP
      parameters:
      - default: default
        description: ID of your authorization server (workspace)
        in: path
        name: wid
        required: true
        type: string
      - description: ID of the IDP you wish to delete
        in: path
        name: iid
        required: true
        type: string
      responses:
        "204":
          description: ' IDP has been deleted'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete IDP
      tags:
      - idps
  /servers/{wid}/idps/auth0:
    post:
      description: Create Auth0 IDP.
      operationId: createAuth0IDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: Auth0IDP
        in: body
        name: Auth0IDP
        schema:
          $ref: '#/definitions/Auth0IDP'
      responses:
        "201":
          description: Auth0IDP
          schema:
            $ref: '#/definitions/Auth0IDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Auth0 IDP
      tags:
      - idps
  /servers/{wid}/idps/auth0/{iid}:
    get:
      description: Get Auth0 IDP.
      operationId: getAuth0IDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: Auth0IDP
          schema:
            $ref: '#/definitions/Auth0IDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Auth0 IDP
      tags:
      - idps
    put:
      description: Update Auth0 IDP.
      operationId: updateAuth0IDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: Auth0IDP
        in: body
        name: Auth0IDP
        schema:
          $ref: '#/definitions/Auth0IDP'
      responses:
        "200":
          description: Auth0IDP
          schema:
            $ref: '#/definitions/Auth0IDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Auth0 IDP
      tags:
      - idps
  /servers/{wid}/idps/azure:
    post:
      description: Create Azure IDP.
      operationId: createAzureIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: AzureIDP
        in: body
        name: AzureIDP
        schema:
          $ref: '#/definitions/AzureIDP'
      responses:
        "201":
          description: AzureIDP
          schema:
            $ref: '#/definitions/AzureIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Azure IDP
      tags:
      - idps
  /servers/{wid}/idps/azure/{iid}:
    get:
      description: Get Azure IDP.
      operationId: getAzureIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: AzureIDP
          schema:
            $ref: '#/definitions/AzureIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Azure IDP
      tags:
      - idps
    put:
      description: Update Azure IDP.
      operationId: updateAzureIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: AzureIDP
        in: body
        name: AzureIDP
        schema:
          $ref: '#/definitions/AzureIDP'
      responses:
        "200":
          description: AzureIDP
          schema:
            $ref: '#/definitions/AzureIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Azure IDP
      tags:
      - idps
  /servers/{wid}/idps/azureb2c:
    post:
      description: Create AzureB2C IDP.
      operationId: createAzureB2CIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: AzureB2CIDP
        in: body
        name: AzureB2CIDP
        schema:
          $ref: '#/definitions/AzureB2CIDP'
      responses:
        "201":
          description: AzureB2CIDP
          schema:
            $ref: '#/definitions/AzureB2CIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create AzureB2C IDP
      tags:
      - idps
  /servers/{wid}/idps/azureb2c/{iid}:
    get:
      description: Get AzureB2C IDP.
      operationId: getAzureB2CIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: AzureB2CIDP
          schema:
            $ref: '#/definitions/AzureB2CIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get AzureB2C IDP
      tags:
      - idps
    put:
      description: Update AzureB2C IDP.
      operationId: updateAzureB2CIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: AzureB2CIDP
        in: body
        name: AzureB2CIDP
        schema:
          $ref: '#/definitions/AzureB2CIDP'
      responses:
        "200":
          description: AzureB2CIDP
          schema:
            $ref: '#/definitions/AzureB2CIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update AzureB2C IDP
      tags:
      - idps
  /servers/{wid}/idps/cognito:
    post:
      description: Create Cognito IDP.
      operationId: createCognitoIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: CognitoIDP
        in: body
        name: CognitoIDP
        schema:
          $ref: '#/definitions/CognitoIDP'
      responses:
        "201":
          description: CognitoIDP
          schema:
            $ref: '#/definitions/CognitoIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Cognito IDP
      tags:
      - idps
  /servers/{wid}/idps/cognito/{iid}:
    get:
      description: Get Cognito IDP.
      operationId: getCognitoIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: CognitoIDP
          schema:
            $ref: '#/definitions/CognitoIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Cognito IDP
      tags:
      - idps
    put:
      description: Update Cognito IDP.
      operationId: updateCognitoIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: CognitoIDP
        in: body
        name: CognitoIDP
        schema:
          $ref: '#/definitions/CognitoIDP'
      responses:
        "200":
          description: CognitoIDP
          schema:
            $ref: '#/definitions/CognitoIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Cognito IDP
      tags:
      - idps
  /servers/{wid}/idps/custom:
    post:
      description: Create Custom IDP.
      operationId: createCustomIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: CustomIDP
        in: body
        name: CustomIDP
        schema:
          $ref: '#/definitions/CustomIDP'
      responses:
        "201":
          description: CustomIDP
          schema:
            $ref: '#/definitions/CustomIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Custom IDP
      tags:
      - idps
  /servers/{wid}/idps/custom/{iid}:
    get:
      description: Get Custom IDP.
      operationId: getCustomIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: CustomIDP
          schema:
            $ref: '#/definitions/CustomIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Custom IDP
      tags:
      - idps
    put:
      description: Update Custom IDP.
      operationId: updateCustomIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: CustomIDP
        in: body
        name: CustomIDP
        schema:
          $ref: '#/definitions/CustomIDP'
      responses:
        "200":
          description: CustomIDP
          schema:
            $ref: '#/definitions/CustomIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Custom IDP
      tags:
      - idps
  /servers/{wid}/idps/external:
    post:
      description: Create External IDP.
      operationId: createExternalIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: ExternalIDP
        in: body
        name: ExternalIDP
        schema:
          $ref: '#/definitions/ExternalIDP'
      responses:
        "201":
          description: ExternalIDP
          schema:
            $ref: '#/definitions/ExternalIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create External IDP
      tags:
      - idps
  /servers/{wid}/idps/external/{iid}:
    get:
      description: Get External IDP.
      operationId: getExternalIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: ExternalIDP
          schema:
            $ref: '#/definitions/ExternalIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get External IDP
      tags:
      - idps
    put:
      description: Update External IDP.
      operationId: updateExternalIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: ExternalIDP
        in: body
        name: ExternalIDP
        schema:
          $ref: '#/definitions/ExternalIDP'
      responses:
        "200":
          description: ExternalIDP
          schema:
            $ref: '#/definitions/ExternalIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update External IDP
      tags:
      - idps
  /servers/{wid}/idps/github:
    post:
      description: Create Github IDP.
      operationId: createGithubIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: GithubIDP
        in: body
        name: GithubIDP
        schema:
          $ref: '#/definitions/GithubIDP'
      responses:
        "201":
          description: GithubIDP
          schema:
            $ref: '#/definitions/GithubIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Github IDP
      tags:
      - idps
  /servers/{wid}/idps/github/{iid}:
    get:
      description: Get Github IDP.
      operationId: getGithubIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: GithubIDP
          schema:
            $ref: '#/definitions/GithubIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Github IDP
      tags:
      - idps
    put:
      description: Update Github IDP.
      operationId: updateGithubIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: GithubIDP
        in: body
        name: GithubIDP
        schema:
          $ref: '#/definitions/GithubIDP'
      responses:
        "200":
          description: GithubIDP
          schema:
            $ref: '#/definitions/GithubIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Github IDP
      tags:
      - idps
  /servers/{wid}/idps/github_embedded/{iid}:
    get:
      description: Get GithubEmbedded IDP.
      operationId: getGithubEmbeddedIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: GithubEmbeddedIDP
          schema:
            $ref: '#/definitions/GithubEmbeddedIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get GithubEmbedded IDP
      tags:
      - idps
    put:
      description: Update GithubEmbedded IDP.
      operationId: updateGithubEmbeddedIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: GithubEmbeddedIDP
        in: body
        name: GithubEmbeddedIDP
        schema:
          $ref: '#/definitions/GithubEmbeddedIDP'
      responses:
        "200":
          description: GithubEmbeddedIDP
          schema:
            $ref: '#/definitions/GithubEmbeddedIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update GithubEmbedded IDP
      tags:
      - idps
  /servers/{wid}/idps/google:
    post:
      description: Create Google IDP.
      operationId: createGoogleIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: GoogleIDP
        in: body
        name: GoogleIDP
        schema:
          $ref: '#/definitions/GoogleIDP'
      responses:
        "201":
          description: GoogleIDP
          schema:
            $ref: '#/definitions/GoogleIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Google IDP
      tags:
      - idps
  /servers/{wid}/idps/google/{iid}:
    get:
      description: Get Google IDP.
      operationId: getGoogleIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: GoogleIDP
          schema:
            $ref: '#/definitions/GoogleIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Google IDP
      tags:
      - idps
    put:
      description: Update Google IDP.
      operationId: updateGoogleIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: GoogleIDP
        in: body
        name: GoogleIDP
        schema:
          $ref: '#/definitions/GoogleIDP'
      responses:
        "200":
          description: GoogleIDP
          schema:
            $ref: '#/definitions/GoogleIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Google IDP
      tags:
      - idps
  /servers/{wid}/idps/google_embedded/{iid}:
    get:
      description: Get GoogleEmbedded IDP.
      operationId: getGoogleEmbeddedIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: GoogleEmbeddedIDP
          schema:
            $ref: '#/definitions/GoogleEmbeddedIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get GoogleEmbedded IDP
      tags:
      - idps
    put:
      description: Update GoogleEmbedded IDP.
      operationId: updateGoogleEmbeddedIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: GoogleEmbeddedIDP
        in: body
        name: GoogleEmbeddedIDP
        schema:
          $ref: '#/definitions/GoogleEmbeddedIDP'
      responses:
        "200":
          description: GoogleEmbeddedIDP
          schema:
            $ref: '#/definitions/GoogleEmbeddedIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update GoogleEmbedded IDP
      tags:
      - idps
  /servers/{wid}/idps/identity_pool:
    post:
      description: Create IdentityPool IDP.
      operationId: createIdentityPoolIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IdentityPoolIDP
        in: body
        name: IdentityPoolIDP
        schema:
          $ref: '#/definitions/IdentityPoolIDP'
      responses:
        "201":
          description: IdentityPoolIDP
          schema:
            $ref: '#/definitions/IdentityPoolIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create IdentityPool IDP
      tags:
      - idps
  /servers/{wid}/idps/identity_pool/{iid}:
    get:
      description: Get IdentityPool IDP.
      operationId: getIdentityPoolIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: IdentityPoolIDP
          schema:
            $ref: '#/definitions/IdentityPoolIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get IdentityPool IDP
      tags:
      - idps
    put:
      description: Update IdentityPool IDP.
      operationId: updateIdentityPoolIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: IdentityPoolIDP
        in: body
        name: IdentityPoolIDP
        schema:
          $ref: '#/definitions/IdentityPoolIDP'
      responses:
        "200":
          description: IdentityPoolIDP
          schema:
            $ref: '#/definitions/IdentityPoolIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update IdentityPool IDP
      tags:
      - idps
  /servers/{wid}/idps/intelli_trust:
    post:
      description: Create IntelliTrust IDP.
      operationId: createIntelliTrustIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IntelliTrustIDP
        in: body
        name: IntelliTrustIDP
        schema:
          $ref: '#/definitions/IntelliTrustIDP'
      responses:
        "201":
          description: IntelliTrustIDP
          schema:
            $ref: '#/definitions/IntelliTrustIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create IntelliTrust IDP
      tags:
      - idps
  /servers/{wid}/idps/intelli_trust/{iid}:
    get:
      description: Get IntelliTrust IDP.
      operationId: getIntelliTrustIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: IntelliTrustIDP
          schema:
            $ref: '#/definitions/IntelliTrustIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get IntelliTrust IDP
      tags:
      - idps
    put:
      description: Update IntelliTrust IDP.
      operationId: updateIntelliTrustIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: IntelliTrustIDP
        in: body
        name: IntelliTrustIDP
        schema:
          $ref: '#/definitions/IntelliTrustIDP'
      responses:
        "200":
          description: IntelliTrustIDP
          schema:
            $ref: '#/definitions/IntelliTrustIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update IntelliTrust IDP
      tags:
      - idps
  /servers/{wid}/idps/oidc:
    post:
      description: Create OIDC IDP.
      operationId: createOIDCIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: OIDCIDP
        in: body
        name: OIDCIDP
        schema:
          $ref: '#/definitions/OIDCIDP'
      responses:
        "201":
          description: OIDCIDP
          schema:
            $ref: '#/definitions/OIDCIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create OIDC IDP
      tags:
      - idps
  /servers/{wid}/idps/oidc/{iid}:
    get:
      description: Get OIDC IDP.
      operationId: getOIDCIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: OIDCIDP
          schema:
            $ref: '#/definitions/OIDCIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get OIDC IDP
      tags:
      - idps
    put:
      description: Update OIDC IDP.
      operationId: updateOIDCIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: OIDCIDP
        in: body
        name: OIDCIDP
        schema:
          $ref: '#/definitions/OIDCIDP'
      responses:
        "200":
          description: OIDCIDP
          schema:
            $ref: '#/definitions/OIDCIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update OIDC IDP
      tags:
      - idps
  /servers/{wid}/idps/okta:
    post:
      description: Create Okta IDP.
      operationId: createOktaIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: OktaIDP
        in: body
        name: OktaIDP
        schema:
          $ref: '#/definitions/OktaIDP'
      responses:
        "201":
          description: OktaIDP
          schema:
            $ref: '#/definitions/OktaIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Okta IDP
      tags:
      - idps
  /servers/{wid}/idps/okta/{iid}:
    get:
      description: Get Okta IDP.
      operationId: getOktaIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: OktaIDP
          schema:
            $ref: '#/definitions/OktaIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Okta IDP
      tags:
      - idps
    put:
      description: Update Okta IDP.
      operationId: updateOktaIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: OktaIDP
        in: body
        name: OktaIDP
        schema:
          $ref: '#/definitions/OktaIDP'
      responses:
        "200":
          description: OktaIDP
          schema:
            $ref: '#/definitions/OktaIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Okta IDP
      tags:
      - idps
  /servers/{wid}/idps/saml:
    post:
      description: Create SAML IDP.
      operationId: createSAMLIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: SAMLIDP
        in: body
        name: SAMLIDP
        schema:
          $ref: '#/definitions/SAMLIDP'
      responses:
        "201":
          description: SAMLIDP
          schema:
            $ref: '#/definitions/SAMLIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create SAML IDP
      tags:
      - idps
  /servers/{wid}/idps/saml/{iid}:
    get:
      description: Get SAML IDP.
      operationId: getSAMLIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: SAMLIDP
          schema:
            $ref: '#/definitions/SAMLIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get SAML IDP
      tags:
      - idps
    put:
      description: Update SAML IDP.
      operationId: updateSAMLIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: SAMLIDP
        in: body
        name: SAMLIDP
        schema:
          $ref: '#/definitions/SAMLIDP'
      responses:
        "200":
          description: SAMLIDP
          schema:
            $ref: '#/definitions/SAMLIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update SAML IDP
      tags:
      - idps
  /servers/{wid}/idps/static:
    post:
      description: Create Static IDP.
      operationId: createStaticIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: StaticIDP
        in: body
        name: StaticIDP
        schema:
          $ref: '#/definitions/StaticIDP'
      responses:
        "201":
          description: StaticIDP
          schema:
            $ref: '#/definitions/StaticIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Static IDP
      tags:
      - idps
  /servers/{wid}/idps/static/{iid}:
    get:
      description: Get Static IDP.
      operationId: getStaticIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: IDP id
        in: path
        name: iid
        required: true
        type: string
      responses:
        "200":
          description: StaticIDP
          schema:
            $ref: '#/definitions/StaticIDP'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Static IDP
      tags:
      - idps
    put:
      description: Update Static IDP.
      operationId: updateStaticIDP
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: IDP id
        in: path
        name: iid
        required: true
        type: string
      - description: StaticIDP
        in: body
        name: StaticIDP
        schema:
          $ref: '#/definitions/StaticIDP'
      responses:
        "200":
          description: StaticIDP
          schema:
            $ref: '#/definitions/StaticIDP'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Static IDP
      tags:
      - idps
  /servers/{wid}/keys:
    get:
      description: Get server encryption or signing keys.
      operationId: getKeys
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: sig
        description: Key use (sig or enc)
        in: query
        name: use
        type: string
      responses:
        "200":
          $ref: '#/responses/KeysResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get server keys
      tags:
      - keys
  /servers/{wid}/keys/{kid}/raw:
    get:
      description: Get next, current or rotated server key by kid and return as raw
        jwk without metadata.
      operationId: getKey
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: Key identifier
        in: path
        name: kid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ClientJWK'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get server key by kid
      tags:
      - keys
  /servers/{wid}/keys/automatic-key-rotation:
    get:
      description: Get automatic key rotation configuration.
      operationId: getAutomaticKeyRotation
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: sig
        description: Key use (sig or enc)
        in: query
        name: use
        type: string
      responses:
        "200":
          $ref: '#/responses/AutomaticKeyRotation'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get automatic key rotation
      tags:
      - keys
    put:
      description: Set automatic key rotation configuration.
      operationId: setAutomaticKeyRotation
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: sig
        description: Key use (sig or enc)
        in: query
        name: use
        type: string
      - description: Automatic key rotation configuration
        in: body
        name: AutomaticKeyRotation
        schema:
          $ref: '#/definitions/AutomaticKeyRotation'
      responses:
        "200":
          $ref: '#/responses/AutomaticKeyRotation'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Set automatic key rotation
      tags:
      - keys
  /servers/{wid}/keys/revoke/{kid}:
    post:
      description: Revoke rotated key
      operationId: revokeKey
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: Key id
        in: path
        name: kid
        required: true
        type: string
      - default: sig
        description: Key use (sig or enc)
        in: query
        name: use
        type: string
      responses:
        "200":
          $ref: '#/responses/ServerJWK'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Revoke key
      tags:
      - keys
  /servers/{wid}/keys/rotate:
    post:
      description: Rotate encryption or signing key.
      operationId: rotateKey
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: sig
        description: Key use (sig or enc)
        in: query
        name: use
        type: string
      - default: rsa
        description: Key type
        enum:
        - rsa
        - ecdsa
        - ps
        in: query
        name: key_type
        type: string
      responses:
        "200":
          $ref: '#/responses/ServerJWK'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Rotate key
      tags:
      - keys
  /servers/{wid}/policies:
    get:
      description: Lists authorization servers' (workspace) policies by type.
      operationId: listPolicies
      parameters:
      - default: default
        description: Id of your authorization server (workspace)
        in: path
        name: wid
        required: true
        type: string
      - default: api
        description: An array of policy types that are to be filtered out
        in: query
        name: policy_types
        type: string
      - description: |-
          An optional and case insensitive search phrase that contains either a policy ID or a policy
          name substring
          SearchPhrase
        in: query
        name: search_phrase
        type: string
      - description: |-
          String represented policy ID

          The `AfterPolicyID` parameter defines the ID of the last displayed policy on a page.
          For example, if there are 20 policies and only 10 are displayed per page, in
          order to jump to the next page, you need to provide the ID of the last policy on that page as
          the value of the `AfterPolicyID` parameter.
          AfterPolicyID
        in: query
        name: after_policy_id
        type: string
      - description: |-
          String represented policy ID

          The `BeforePolicyID` parameter defines the ID of the last displayed policy on a page.
          For example, if there are 20 policies and only 10 are displayed per page, in
          order to jump to the previous page, you need to provide the ID of the first policy on that page as
          the value of the `Before PolicyID` parameter.
          BeforePolicyID
        in: query
        name: before_policy_id
        type: string
      - description: |-
          Defines the method of sorting the results by a given field
          Sort
        in: query
        name: sort
        type: string
      - description: |-
          An ascending or descending order of sorting the policies
          Order
        in: query
        name: order
        type: string
      - default: 20
        description: |-
          A limit of displayed results per page for listed policies
          Limit
        format: int64
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      responses:
        "200":
          $ref: '#/responses/Policies'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List policies
      tags:
      - policies
  /servers/{wid}/policy-execution-points:
    get:
      description: Returns a list of policy execution points for a given workspace.
      operationId: listPolicyExecutionPoints
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/PolicyExecutionPoints'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List policy execution points
      tags:
      - policies
    put:
      description: |-
        Available execution points: `scope_client_assignment`, `scope_user_grant`,
        `server_client_assignment`, `server_user_token`, `client_user_token`, `api`
      operationId: setPolicyExecutionPoints
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - in: body
        name: Executions
        schema:
          $ref: '#/definitions/PolicyExecutionPoints'
      responses:
        "200":
          $ref: '#/responses/PolicyExecutionPoints'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Set policy execution points
      tags:
      - policies
  /servers/{wid}/scopes:
    get:
      description: List scopes.
      operationId: listScopes
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ScopesWithServices'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List scopes
      tags:
      - scopes
  /servers/{wid}/script-execution-points:
    get:
      description: Returns a list of script execution points for a given workspace.
      operationId: listScriptExecutionPoints
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ScriptExecutionPoints'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List script execution points
      tags:
      - scripts
    put:
      description: 'Available execution points: `post_authn_ctx`'
      operationId: setScriptExecutionPoints
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - in: body
        name: Executions
        schema:
          $ref: '#/definitions/ScriptExecutionPoints'
      responses:
        "200":
          $ref: '#/responses/ScriptExecutionPoints'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Set script execution points
      tags:
      - scripts
  /servers/{wid}/scripts:
    get:
      description: Lists tenant's scripts.
      operationId: listScripts
      parameters:
      - default: default
        description: ID of your authorization server (workspace)
        in: path
        name: wid
        required: true
        type: string
      - description: |-
          Optional search phrase: script id OR script name substring (case insensitive)
          SearchPhrase
        in: query
        name: search_phrase
        type: string
      - description: |-
          optional list scripts after given id
          AfterScriptID
        in: query
        name: after_script_id
        type: string
      - description: |-
          optional list scripts before given id
          BeforeScriptID
        in: query
        name: before_script_id
        type: string
      - description: |-
          optional sort scripts by given field
          Sort
        in: query
        name: sort
        type: string
      - description: |-
          optional order scripts by given direction
          Order
        in: query
        name: order
        type: string
      - default: 20
        description: |-
          optional limit results
          Limit
        format: int64
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      responses:
        "200":
          $ref: '#/responses/Scripts'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List scripts
      tags:
      - scripts
    post:
      description: |-
        Creates a script that is used for enriching authentication context.
        You can, for example, define additional authentication context attributes for mock
        users defined for a static identity provider. Your script should be written in JavaScript.
      operationId: createScript
      parameters:
      - default: default
        description: ID of your authorization server (workspace)
        in: path
        name: wid
        required: true
        type: string
      - in: body
        name: Script
        schema:
          $ref: '#/definitions/Script'
      responses:
        "201":
          $ref: '#/responses/Script'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create script
      tags:
      - scripts
  /servers/{wid}/scripts/{script}:
    delete:
      description: Deleting a script is permanent and it cannot be undone.
      operationId: deleteScript
      parameters:
      - default: default
        description: ID of your authorization server (workspace)
        in: path
        name: wid
        required: true
        type: string
      - description: ID of the script to be deleted
        in: path
        name: script
        required: true
        type: string
      responses:
        "204":
          description: ' Script has been deleted'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Deletes given script.
      tags:
      - scripts
    get:
      description: Returns a script and it's content.
      operationId: getScript
      parameters:
      - default: default
        description: ID of your authorization server (workspace)
        in: path
        name: wid
        required: true
        type: string
      - description: ID of your script
        in: path
        name: script
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Script'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get script
      tags:
      - scripts
    put:
      description: Update existing script.
      operationId: updateScript
      parameters:
      - default: default
        description: ID of your authorization server (workspace)
        in: path
        name: wid
        required: true
        type: string
      - description: ID of the script to be updated
        in: path
        name: script
        required: true
        type: string
      - in: body
        name: ScriptBody
        schema:
          $ref: '#/definitions/Script'
      responses:
        "200":
          $ref: '#/responses/Script'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update script
      tags:
      - scripts
  /servers/{wid}/scripts/test:
    post:
      description: |-
        You can test a script and check if it works correctly using this endpoint. Provide your mock input and
        pass it as the value of the `input` parameter. Define your script. Then, fire a request to the
        test script endpoint. By doing so, you can test if a script would fail or pass for a given request.
      operationId: testScript
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - in: body
        name: TestScriptRequest
        schema:
          $ref: '#/definitions/TestScriptRequest'
      responses:
        "200":
          $ref: '#/responses/ScriptExecutionResult'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Test script
      tags:
      - scripts
  /servers/{wid}/secrets:
    get:
      description: |-
        List previously created secrets for a given tenant id and autorization server (workspace).
        The secret value is ciphered when it's created, it's not possible to retrieve it in any way.
      operationId: listSecrets
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/SecretsResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List secrets
      tags:
      - secrets
    post:
      description: |-
        Creates a secret for a given tenant id and authorization server (workspace).
        Secrets API is storage for keeping encrypted sensitive variables that may be used within rego policies or scripts.
      operationId: createSecret
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - in: body
        name: Secret
        schema:
          $ref: '#/definitions/Secret'
      responses:
        "201":
          $ref: '#/responses/Secret'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create secret
      tags:
      - secrets
  /servers/{wid}/secrets/{sid}:
    delete:
      description: Delete previously created secrets for a given tenant id and autorization
        server (workspace).
      operationId: deleteSecret
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        in: path
        name: sid
        required: true
        type: string
      responses:
        "204":
          description: ' Secret has been deleted'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete secret
      tags:
      - secrets
    put:
      description: Updates a secret for a given tenant id and authorization server
        (workspace).
      operationId: updateSecret
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        in: path
        name: sid
        required: true
        type: string
      - in: body
        name: Secret
        schema:
          $ref: '#/definitions/Secret'
      responses:
        "201":
          $ref: '#/responses/Secret'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update secret
      tags:
      - secrets
  /servers/{wid}/server-consent:
    get:
      description: Get server consent.
      operationId: getServerConsent
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          description: ServerConsent
          schema:
            $ref: '#/definitions/ServerConsent'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get server consent
      tags:
      - servers
    put:
      description: Set server consent. For custom server consent a client in system
        server is created automatically.
      operationId: setServerConsent
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: Server consent
        in: body
        name: ServerConsent
        schema:
          $ref: '#/definitions/ServerConsent'
      responses:
        "200":
          description: ServerConsent
          schema:
            $ref: '#/definitions/ServerConsent'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Set server consent
      tags:
      - servers
  /servers/{wid}/services:
    get:
      description: List services.
      operationId: listServices
      parameters:
      - default: default
        description: Authorization server id
        in: path
        name: wid
        required: true
        type: string
      - description: |-
          Optional search phrase: service id OR service name substring (case insensitive)
          SearchPhrase
        in: query
        name: search_phrase
        type: string
      - description: |-
          optional list services after given id
          AfterServiceID
        in: query
        name: after_service_id
        type: string
      - description: |-
          optional list services before given id
          BeforeServiceID
        in: query
        name: before_service_id
        type: string
      - description: |-
          optional sort services by given field
          Sort
        in: query
        name: sort
        type: string
      - description: |-
          optional order services by given direction
          Order
        in: query
        name: order
        type: string
      - default: 20
        description: |-
          optional limit results
          Limit
        format: int64
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      responses:
        "200":
          $ref: '#/responses/ServicesResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List services
      tags:
      - services
  /servers/{wid}/unbind/{rid}:
    delete:
      description: Unbind server.
      operationId: unbindServer
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - default: default
        description: Dependent server id
        in: path
        name: rid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ServerToServer'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Unbind server
      tags:
      - servers
  /services:
    post:
      description: Service name is required. Service id will be generated if not provided.
      operationId: createService
      parameters:
      - in: body
        name: Service
        schema:
          $ref: '#/definitions/Service'
      responses:
        "201":
          $ref: '#/responses/CreateServiceResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create service
      tags:
      - services
  /services/{sid}:
    delete:
      description: Delete service.
      operationId: deleteService
      parameters:
      - in: path
        name: sid
        required: true
        type: string
      responses:
        "204":
          description: ' Service has been deleted'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete service
      tags:
      - services
    get:
      description: Get service.
      operationId: getService
      parameters:
      - in: path
        name: sid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/ServiceWithScopesResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get service
      tags:
      - services
    put:
      description: Update service.
      operationId: updateService
      parameters:
      - in: path
        name: sid
        required: true
        type: string
      - in: body
        name: Service
        schema:
          $ref: '#/definitions/Service'
      responses:
        "200":
          $ref: '#/responses/UpdateServiceResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update service
      tags:
      - services
  /services/{sid}/apis:
    delete:
      description: |-
        Remove all apis and policies created during import for a service.

        If policy is used by another service it will not be removed.

        If service is connected to a gateway, it will be disconnected.

        If a gateway api group is connected to this service, it will be disconnected.
      operationId: removeSpecification
      parameters:
      - in: path
        name: sid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/RemoveServiceConfigurationResult'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Remove imported apis and policies
      tags:
      - services
    get:
      description: List APIs.
      operationId: listAPIsByService
      parameters:
      - default: default
        description: Service id
        in: path
        name: sid
        required: true
        type: string
      - description: List apis that have no data classifications
        in: query
        name: without_data_classifications
        type: boolean
      - description: List apis that have given data classifications
        in: query
        items:
          type: string
        name: data_classification
        type: array
      responses:
        "200":
          $ref: '#/responses/APIsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List APIs
      tags:
      - apis
  /services/{sid}/apis/import/file:
    post:
      consumes:
      - multipart/form-data
      description: It removes all apis before import.
      operationId: importSpecificationFromFile
      parameters:
      - in: path
        name: sid
        required: true
        type: string
      - in: query
        name: gateway_type
        type: string
      - in: formData
        name: file
        type: file
      responses:
        "200":
          $ref: '#/responses/ImportServiceConfigurationResult'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Import OpenAPI specification from file
      tags:
      - services
  /services/{sid}/apis/import/text:
    post:
      consumes:
      - text/plain
      description: It removes all apis and policies (created by previous import) before
        import.
      operationId: importSpecificationFromText
      parameters:
      - in: path
        name: sid
        required: true
        type: string
      - in: body
        name: text
        schema:
          type: string
      responses:
        "200":
          $ref: '#/responses/ImportServiceConfigurationResult'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Import OpenAPI specification from text
      tags:
      - services
  /services/{sid}/apis/import/url:
    post:
      consumes:
      - multipart/form-data
      description: It removes all apis before import.
      operationId: importSpecificationFromURL
      parameters:
      - in: path
        name: sid
        required: true
        type: string
      - in: query
        name: gateway_type
        type: string
      - in: formData
        name: url
        type: string
      responses:
        "200":
          $ref: '#/responses/ImportServiceConfigurationResult'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Import OpenAPI specification from url
      tags:
      - services
  /stats/{wid}/overview:
    get:
      description: Get stats
      operationId: getStats
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Stats'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get stats
      tags:
      - stats
  /stats/{wid}/recent-activities:
    get:
      description: Get recent activities
      operationId: getRecentActivities
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - default: 10
        description: Limit
        format: int64
        in: query
        name: limit
        type: integer
      responses:
        "200":
          $ref: '#/responses/RecentActivities'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get recent activities
      tags:
      - recentActivities
  /system/apis:
    get:
      description: List APIs of the system tenant and system authorization server.
      operationId: listSystemAPIs
      parameters:
      - description: List apis that have no data classifications
        in: query
        name: without_data_classifications
        type: boolean
      - description: List apis that have given data classifications
        in: query
        items:
          type: string
        name: data_classification
        type: array
      responses:
        "200":
          $ref: '#/responses/ServerAPIsResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List system APIs
      tags:
      - system
  /system/apis/{wid}/bindings:
    get:
      description: List policy to system api bindings.
      operationId: listSystemAPIBindings
      parameters:
      - default: default
        description: Server id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/SystemAPIBindings'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List system api bindings
      tags:
      - system
  /system/apis/bind:
    post:
      description: Bind policy to a system api.
      operationId: bindSystemAPI
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/BindSystemAPIRequest'
      responses:
        "204":
          description: ' success'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Bind system api
      tags:
      - system
  /system/apis/unbind:
    delete:
      description: Unbind policy from a system api.
      operationId: unbindSystemAPI
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/UnbindSystemAPIRequest'
      responses:
        "204":
          description: ' success'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Unbind system api
      tags:
      - system
  /system/services:
    get:
      description: List services of the system tenant and system authorization server.
      operationId: listSystemServices
      responses:
        "200":
          $ref: '#/responses/SystemServicesResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List system services
      tags:
      - system
  /tenant:
    get:
      description: Get tenant.
      operationId: getAdminTenant
      responses:
        "200":
          description: Tenant
          schema:
            $ref: '#/definitions/Tenant'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get tenant
      tags:
      - tenants
    put:
      description: Update tenant.
      operationId: updateAdminTenant
      parameters:
      - in: body
        name: Tenant
        schema:
          $ref: '#/definitions/Tenant'
      responses:
        "200":
          description: Tenant
          schema:
            $ref: '#/definitions/Tenant'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update tenant
      tags:
      - tenants
  /vanity-domains:
    delete:
      description: Delete vanity domain.
      operationId: deleteVanityDomain
      parameters:
      - in: body
        name: VanityDomain
        schema:
          $ref: '#/definitions/VanityDomain'
      responses:
        "204":
          description: ' Vanity domain has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete vanity domain
      tags:
      - vanityDomains
    get:
      description: Get vanity domain.
      operationId: getVanityDomain
      parameters:
      - description: Get vanity doman for a given server
        in: query
        name: server_id
        type: string
      responses:
        "200":
          $ref: '#/responses/VanityDomain'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get vanity domain
      tags:
      - vanityDomains
    post:
      description: Create vanity domain.
      operationId: createVanityDomain
      parameters:
      - in: body
        name: VanityDomain
        schema:
          $ref: '#/definitions/VanityDomain'
      responses:
        "200":
          $ref: '#/responses/VanityDomain'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create vanity domain
      tags:
      - vanityDomains
    put:
      description: Update vanity domain.
      operationId: updateVanityDomain
      parameters:
      - in: body
        name: VanityDomain
        schema:
          $ref: '#/definitions/VanityDomain'
      responses:
        "200":
          $ref: '#/responses/VanityDomain'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update vanity domain
      tags:
      - vanityDomains
produces:
- application/json
responses:
  APIResponse:
    description: API
    schema:
      $ref: '#/definitions/API'
  APIsResponse:
    description: APIs
    schema:
      $ref: '#/definitions/APIs'
  AuditEventsResponse:
    description: AuditEvents
    schema:
      $ref: '#/definitions/AuditEvents'
  AutomaticKeyRotation:
    description: Automation key rotation
    schema:
      $ref: '#/definitions/AutomaticKeyRotation'
  BindGroupToServiceResponse:
    description: Bind group to service response
    schema:
      $ref: '#/definitions/RemoveServiceConfigurationResult'
  CIBAAuthenticationServiceResponse:
    description: CIBA authentication service
    schema:
      $ref: '#/definitions/CIBAAuthenticationService'
  ClaimResponse:
    description: Claim
    schema:
      $ref: '#/definitions/Claim'
  ClaimsResponse:
    description: Claims
    schema:
      $ref: '#/definitions/Claims'
  ClientAdminResponse:
    description: Client
    schema:
      $ref: '#/definitions/ClientAdminResponse'
  ClientJWK:
    description: JWK
    schema:
      $ref: '#/definitions/ClientJWK'
  ClientsForAdminResponse:
    description: Clients
    schema:
      $ref: '#/definitions/ClientsForAdmin'
  ConsentActionWithConsentsResponse:
    description: Consent action with consents
    schema:
      $ref: '#/definitions/ConsentActionWithConsents'
  ConsentActionsResponse:
    description: Consent actions
    schema:
      $ref: '#/definitions/ConsentActions'
  ConsentResponse:
    description: Consent
    schema:
      $ref: '#/definitions/Consent'
  ConsentsResponse:
    description: Consents
    schema:
      $ref: '#/definitions/Consents'
  CreateServiceResponse:
    description: Service
    schema:
      $ref: '#/definitions/ServiceWithAudience'
  DashboardsResponse:
    description: Dashboards
    schema:
      $ref: '#/definitions/Dashboards'
  Environment:
    description: Environment
    schema:
      $ref: '#/definitions/Environment'
  Gateway:
    description: Gateway
    schema:
      $ref: '#/definitions/Gateway'
  GatewayAPIGroups:
    description: Gateway API groups
    schema:
      $ref: '#/definitions/GatewayAPIGroups'
  GatewayWithClient:
    description: Gateway with client
    schema:
      $ref: '#/definitions/GatewayWithClient'
  Gateways:
    description: Gateways
    schema:
      $ref: '#/definitions/Gateways'
  IDPsResponse:
    description: IDP
    schema:
      $ref: '#/definitions/IDPsResponse'
  ImportServiceConfigurationResult:
    description: Import service configuration result
    schema:
      $ref: '#/definitions/ImportServiceConfigurationResult'
  KeysResponse:
    description: Keys
    schema:
      $ref: '#/definitions/KeysResponse'
  MFAMethodResponse:
    description: MFA method
    schema:
      $ref: '#/definitions/MFAMethodResponse'
  MFAMethods:
    description: MFA methods
    schema:
      $ref: '#/definitions/MFAMethods'
  Policies:
    description: Policies
    schema:
      $ref: '#/definitions/Policies'
  Policy:
    description: Policy
    schema:
      $ref: '#/definitions/Policy'
  PolicyExecutionPoints:
    description: Policy execution points
    schema:
      $ref: '#/definitions/PolicyExecutionPoints'
  PrivacyLedgerEventsResponse:
    description: Privacy ledger events
    schema:
      $ref: '#/definitions/PrivacyLedgerEvents'
  RecentActivities:
    description: Recent activities
    schema:
      $ref: '#/definitions/RecentActivities'
  RemoveServiceConfigurationResult:
    description: Remove service configuration result
    schema:
      $ref: '#/definitions/RemoveServiceConfigurationResult'
  RotateClientSecretResponse:
    description: Rotate client secret response
    schema:
      $ref: '#/definitions/RotateClientSecretResponse'
  Scope:
    description: Scope
    schema:
      $ref: '#/definitions/ScopeWithServiceID'
  ScopeWithService:
    description: Scope with service
    schema:
      $ref: '#/definitions/ScopeWithService'
  ScopesWithServices:
    description: Scopes with services
    schema:
      $ref: '#/definitions/ScopesWithServices'
  Script:
    description: Script
    schema:
      $ref: '#/definitions/Script'
  ScriptExecutionPoints:
    description: Script execution points
    schema:
      $ref: '#/definitions/ScriptExecutionPoints'
  ScriptExecutionResult:
    description: Script execution result
    schema:
      $ref: '#/definitions/ScriptExecutionResult'
  Scripts:
    description: Scripts
    schema:
      $ref: '#/definitions/Scripts'
  Secret:
    description: Secret
    schema:
      $ref: '#/definitions/Secret'
  SecretsResponse:
    description: Secrets
    schema:
      $ref: '#/definitions/SecretsResponse'
  Server:
    description: Server
    schema:
      $ref: '#/definitions/ServerResponse'
  ServerAPIsResponse:
    description: APIs grouped by service ids
    schema:
      $ref: '#/definitions/ServerAPIs'
  ServerJWK:
    description: JWK
    schema:
      $ref: '#/definitions/ServerJWK'
  ServerToServer:
    description: Server to server binding
    schema:
      $ref: '#/definitions/ServerToServer'
  Servers:
    description: Servers
    schema:
      $ref: '#/definitions/ServersResponse'
  ServersBindings:
    description: Server bindings
    schema:
      $ref: '#/definitions/ServersBindings'
  ServiceResponse:
    description: Service
    schema:
      $ref: '#/definitions/ServiceResponse'
  ServiceWithScopesResponse:
    description: Service with scopes
    schema:
      $ref: '#/definitions/ServiceWithScopesResponse'
  ServicesResponse:
    description: Services
    schema:
      $ref: '#/definitions/ServicesResponse'
  Stats:
    description: Stats
    schema:
      $ref: '#/definitions/Stats'
  SystemAPIBindings:
    description: System API bindings
    schema:
      $ref: '#/definitions/SystemAPIBindings'
  SystemServicesResponse:
    description: System services
    schema:
      $ref: '#/definitions/SystemServicesResponse'
  TestAPIResponseModel:
    description: API test result
    schema:
      $ref: '#/definitions/TestAPIResult'
  TestPolicyResponse:
    description: Test policy result
    schema:
      $ref: '#/definitions/TestPolicyResponse'
  UnbindGroupFromServiceResponse:
    description: Unbind group from service response
    schema:
      $ref: '#/definitions/RemoveServiceConfigurationResult'
  UpdateServiceResponse:
    description: Service
    schema:
      $ref: '#/definitions/ServiceWithAudience'
  VanityDomain:
    description: Vanity domain
    schema:
      $ref: '#/definitions/VanityDomain'
  gatewayPackage:
    description: Gateway package
    schema:
      type: file
  httpError:
    description: HttpError
    schema:
      $ref: '#/definitions/Error'
schemes:
- https
securityDefinitions:
  admin:
    authorizationUrl: /default/admin/oauth2/authorize
    flow: accessCode
    tokenUrl: /default/admin/oauth2/token
    type: oauth2
swagger: "2.0"
