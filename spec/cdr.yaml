basePath: /default/default
consumes:
- application/json
definitions:
  AcceptCDRConsentRequest:
    properties:
      account_ids:
        description: |-
          List of account identifiers. For example, it can refer to user bank accounts. User grants
          access to these accounts on the consent page.
          Pass account identifiers to Cloudentity in the encrypted form.
        items:
          type: string
        type: array
        x-nullable: false
      customer_id:
        description: |-
          The customer identifier of a user.
          `customer_id` can be provided by the login page and optionally overridden by the consent page.
        example: joe-1
        type: string
        x-nullable: false
      granted_scopes:
        $ref: '#/definitions/GrantedScopes'
      login_state:
        description: |-
          A string of characters randomly generated by Cloudentity to mitigate cross-site request forgery (CSRF) attacks.
          Cloudentity passes this value with the `login_state` query parameter when redirecting a user to the consent page.
        example: cauq8fonbud6q8806bf0
        format: loginState
        type: string
        x-nullable: false
    type: object
  AffiliationDescriptor:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.5
    properties:
      AffiliateMembers:
        items:
          type: string
        type: array
        x-nullable: false
      AffiliationOwnerID:
        type: string
        x-nullable: false
      CacheDuration:
        $ref: '#/definitions/Duration'
      ID:
        type: string
        x-nullable: false
      KeyDescriptors:
        items:
          $ref: '#/definitions/KeyDescriptor'
        type: array
        x-nullable: false
      Signature:
        $ref: '#/definitions/Element'
      ValidUntil:
        format: date-time
        type: string
        x-nullable: false
    title: AffiliationDescriptor represents the SAML AffiliationDescriptor object.
    type: object
  Attr:
    properties:
      Space:
        type: string
        x-nullable: false
      Value:
        type: string
        x-nullable: false
    title: An Attr represents a key-value attribute within an XML element.
    type: object
  Attribute:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf
      §2.7.3.1
    properties:
      FriendlyName:
        type: string
        x-nullable: false
      Name:
        type: string
        x-nullable: false
      NameFormat:
        type: string
        x-nullable: false
      Values:
        items:
          $ref: '#/definitions/AttributeValue'
        type: array
        x-nullable: false
    title: Attribute represents the SAML element Attribute.
    type: object
  AttributeAuthorityDescriptor:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.4.7
    properties:
      AssertionIDRequestServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      AttributeProfiles:
        items:
          type: string
        type: array
        x-nullable: false
      AttributeServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      Attributes:
        items:
          $ref: '#/definitions/Attribute'
        type: array
        x-nullable: false
      CacheDuration:
        $ref: '#/definitions/Duration'
      ContactPeople:
        items:
          $ref: '#/definitions/ContactPerson'
        type: array
        x-nullable: false
      ErrorURL:
        type: string
        x-nullable: false
      ID:
        type: string
        x-nullable: false
      KeyDescriptors:
        items:
          $ref: '#/definitions/KeyDescriptor'
        type: array
        x-nullable: false
      NameIDFormats:
        items:
          $ref: '#/definitions/NameIDFormat'
        type: array
        x-nullable: false
      Organization:
        $ref: '#/definitions/Organization'
      ProtocolSupportEnumeration:
        type: string
        x-nullable: false
      Signature:
        $ref: '#/definitions/Element'
      ValidUntil:
        format: date-time
        type: string
        x-nullable: false
    title: AttributeAuthorityDescriptor represents the SAML AttributeAuthorityDescriptor
      object.
    type: object
  AttributeConsumingService:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.4.4.1
    properties:
      Index:
        format: int64
        type: integer
        x-nullable: false
      IsDefault:
        type: boolean
        x-nullable: false
      RequestedAttributes:
        items:
          $ref: '#/definitions/RequestedAttribute'
        type: array
        x-nullable: false
      ServiceDescriptions:
        items:
          $ref: '#/definitions/LocalizedName'
        type: array
        x-nullable: false
      ServiceNames:
        items:
          $ref: '#/definitions/LocalizedName'
        type: array
        x-nullable: false
    title: AttributeConsumingService represents the SAML AttributeConsumingService
      object.
    type: object
  AttributeValue:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf
      §2.7.3.1.1
    properties:
      NameID:
        $ref: '#/definitions/NameID'
      Type:
        type: string
        x-nullable: false
      Value:
        type: string
        x-nullable: false
    title: AttributeValue represents the SAML element AttributeValue.
    type: object
  AuthenticationContext:
    additionalProperties:
      type: object
    type: object
  AuthnAuthorityDescriptor:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.4.5
    properties:
      AssertionIDRequestServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      AuthnQueryServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      CacheDuration:
        $ref: '#/definitions/Duration'
      ContactPeople:
        items:
          $ref: '#/definitions/ContactPerson'
        type: array
        x-nullable: false
      ErrorURL:
        type: string
        x-nullable: false
      ID:
        type: string
        x-nullable: false
      KeyDescriptors:
        items:
          $ref: '#/definitions/KeyDescriptor'
        type: array
        x-nullable: false
      NameIDFormats:
        items:
          $ref: '#/definitions/NameIDFormat'
        type: array
        x-nullable: false
      Organization:
        $ref: '#/definitions/Organization'
      ProtocolSupportEnumeration:
        type: string
        x-nullable: false
      Signature:
        $ref: '#/definitions/Element'
      ValidUntil:
        format: date-time
        type: string
        x-nullable: false
    title: AuthnAuthorityDescriptor represents the SAML AuthnAuthorityDescriptor object.
    type: object
  AuthorizationDetailType:
    type: string
  CDRAdminRequestMetaDataUpdate:
    description: CDRAdminRequestMetaDataUpdate RequestMetaDataUpdate
    properties:
      data:
        $ref: '#/definitions/CDRAdminRequestMetaDataUpdate_data'
      meta:
        description: meta
        type: object
        x-nullable: false
    required:
    - data
    type: object
  CDRAdminRequestMetaDataUpdate_data:
    description: |-
      CDRAdminRequestMetaDataUpdateData RequestMetaDataUpdate_data
      Example: {"action":"REFRESH"}
    properties:
      action:
        description: The action to take for the meta data. At the moment the only
          option is REFRESH which requires the data holder to call the ACCC to refresh
          meta data as soon as practicable
        example: REFRESH
        type: string
        x-nullable: false
    required:
    - action
    type: object
  CDRArrangement:
    properties:
      account_ids:
        description: |-
          List of accounts.

          It can refer to user's bank accounts that can be accessed by your client application in order to provide consumer
          services.
        items:
          type: string
        type: array
        x-nullable: false
      amending_arrangement_id:
        $ref: '#/definitions/CDRArrangementID'
      authorization_server_id:
        description: Workspace identifier
        example: server
        format: serverID
        type: string
        x-nullable: false
      cdr_arrangement_id:
        $ref: '#/definitions/CDRArrangementID'
      cdr_arrangement_metadata:
        $ref: '#/definitions/CDRArrangementMetadata'
      client_id:
        description: Client application identifier
        example: bugkgm23g9kregtu051g
        format: clientID
        type: string
        x-nullable: false
      created_at:
        description: Arrangement creation date
        example: "2022-07-01T08:52:27.127932Z"
        format: date-time
        type: string
        x-nullable: false
      customer_id:
        $ref: '#/definitions/CDRCustomerID'
      expiry:
        description: Arrangement expiration date
        example: "2023-03-01T09:02:27.127932Z"
        format: date-time
        type: string
        x-nullable: false
      scope_grants:
        description: The detailed list of scopes voluntarily granted by the user for
          the client application to access user data.
        items:
          $ref: '#/definitions/ScopeGrant'
        type: array
        x-nullable: false
      sharing_type:
        description: 'The rule on how a user shares their data: reuse with a token
          or without it, or the user allows one-time access.'
        enum:
        - one_time
        - one_time_with_refresh_token
        - reusable
        example: one_time
        type: string
        x-nullable: false
      spec_version:
        default: v1
        description: |-
          Arrangement version.
          Currently, the version parameter is not used.
        enum:
        - v1
        example: v1
        type: string
        x-nullable: false
      status:
        $ref: '#/definitions/ConsentStatus'
      subject:
        description: |-
          Subject identifies an authenticated user.
          Depending on the workspace configuration, the value can be hashed.
        example: 377eb000a87a471291b5a9869930a2422c670b7b6a06f74143eb74a01ed2fbe1
        format: subject
        type: string
        x-nullable: false
      tenant_id:
        description: Tenant identifier
        example: my-company
        format: tenantID
        type: string
        x-nullable: false
      updated_at:
        description: Arrangement last update date
        example: "2022-10-01T08:52:27.127932Z"
        format: date-time
        type: string
        x-nullable: false
    type: object
  CDRArrangementID:
    type: string
  CDRArrangementMetadata:
    properties:
      personal_details:
        $ref: '#/definitions/PersonalDetails'
      revocation_channel:
        $ref: '#/definitions/RevocationChannel'
      revocation_reason:
        $ref: '#/definitions/RevocationReason'
    type: object
  CDRArrangements:
    properties:
      arrangements:
        items:
          $ref: '#/definitions/CDRArrangement'
        type: array
        x-nullable: false
    type: object
  CDRConsentsRequest:
    properties:
      accounts:
        description: |-
          List of accounts.

          It can refer to user bank accounts the client application is allowed to access.
        items:
          type: string
        type: array
        x-nullable: false
      after_consent_id:
        description: |-
          A consent identifier.

          Use it to navigate through the request pagination when the number of consents is greater than
          the `limit` set for results in the response.

          With `after_consent_id`, the list you obtain starts from the subsequent consent after the specified one. Also,
          the response depends on the `sort` and `order` parameters, if any are passed.
        type: string
        x-nullable: false
      before_consent_id:
        description: |-
          A consent identifier.

          Use it to navigate through the request pagination when the number of consents is greater than
          the limit set for results in the response.

          With `before_consent_id`, the list you obtain comprises consents up to the specified one. The specified consent
          isn't included. Also, the response depends on the `sort` and `order` parameters, if any are passed.
        type: string
        x-nullable: false
      client_id:
        description: A client identifier.
        type: string
        x-nullable: false
      customer_id:
        description: |-
          Customer identifier. It represents an organization. The customer identifier can cover several
          user identifiers as organization members.

          When you pass a `customer_id` with your request, the response contains results related to the specified
          organization, including the allowed information about its users and their arrangements.
        type: string
        x-nullable: false
      limit:
        default: 20
        description: Limit the number of results returned in the response.
        format: int64
        maximum: 100
        minimum: 1
        type: integer
        x-nullable: false
      order:
        default: desc
        description: |-
          Input: `acs` or `desc`.

          Set the order of results returned in the response.
        type: string
        x-nullable: false
      sort:
        description: Sort results returned in the response.
        type: string
        x-nullable: false
      status:
        description: List of the consent statuses.
        items:
          type: string
        type: array
        x-nullable: false
      types:
        description: |-
          Consent types.

          in:query
        items:
          type: string
        type: array
        x-nullable: false
      user_id:
        description: |-
          User identifier. It represents an end-user.

          When you pass a `user_id` with your request, the endpoint returns the details relating to the specified user.
        type: string
        x-nullable: false
    type: object
  CDRCustomerID:
    type: string
  CDRDynamicClientRegistrationRequest:
    properties:
      app_url:
        description: Application URL
        type: string
        x-nullable: false
      application_type:
        default: web
        description: |-
          The client application type.

          Client applications can be either of a `web` or `native` types.

          Web applications include clients like server web applications or service apps.

          Native applications include single-page applications (SPAs) and mobile or desktop
          applications.

          Apply security measures according to the type of your application.
        example: web
        type: string
        x-nullable: false
      application_types:
        default:
        - server_web
        description: An array of dynamically calculated application types that can
          be used for filtering
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        - dcr
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          - dcr
          type: string
        readOnly: true
        type: array
        x-nullable: false
      aud:
        description: |-
          The audience for the request. This should be the unique identifier
          for the ASPSP issued by the issuer of the software statement.
          An ASPSP processing the software statement may validate the value
          of the claim and reject software statements for which the ASPSP
          is not the audience.The value must be a Base62 encoded GUID.
        pattern: ^[0-9a-zA-Z]{1,18}$
        type: string
        x-nullable: false
      audience:
        default:
        - client_id
        description: |-
          Identity of the intended recipients (the audience).

          Typically, the audience is a single resource server or a list of resource servers.

          It is considered a good practice to limit the audience of the token for security purposes.
        items:
          type: string
        type: array
        x-nullable: false
      authorization_details_types:
        description: |-
          Authorization details types

          Indicates what authorization details types the client can use.
        items:
          $ref: '#/definitions/AuthorizationDetailType'
        type: array
        x-nullable: false
      authorization_encrypted_response_alg:
        description: |-
          Algorithm used for encrypting authorization responses.

          If both signing and encryption are requested, the response is first signed, and then encrypted.
          As a result, a Nested JWT is obtained, as defined in JWT [RFC7519].

          If omitted, no encryption is applied by default.
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        example: RSA-OAEP-256
        type: string
        x-nullable: false
      authorization_encrypted_response_enc:
        description: |-
          Algorithm used for encrypting authorization responses.

          With `authorization_encrypted_response_alg` specified, the default value is `A128CBC-HS256`.
          When `authorization_encrypted_response_enc` is included, `authorization_encrypted_response_alg`
          MUST also be provided in a request.
        enum:
        - A256GCM
        - A128CBC-HS256
        example: A128CBC-HS256
        type: string
        x-nullable: false
      authorization_signed_response_alg:
        description: |-
          Algorithm used for signing authorization responses.

          With this parameter specified, the response is signed using JWS and according to the configured algorithm.

          `none` isn't allowed.
        example: RS256
        type: string
        x-nullable: false
      backchannel_authentication_request_signing_alg:
        description: |-
          OPTIONAL. The JWS alg algorithm value used by the client application to sign authentication requests.

          When omitted, the client application doesn't send signed authentication requests.
        type: string
        x-nullable: false
      backchannel_client_notification_endpoint:
        description: |-
          REQUIRED for requests when the client application uses CIBA as an authorization grant type, and the token
          delivery mode is set to `ping` or `push`.

          This parameter is the endpoint where an OP (OpenID Provider) posts a notification after end-user authentication.

          Input: an HTTPS URL.
        type: string
        x-nullable: false
      backchannel_logout_session_required:
        description: Boolean value specifying whether the RP requires that a sid (session
          ID) claim be included in the Logout Token to identify the RP session with
          the OP when the backchannel_logout_uri is used.
        type: boolean
        x-nullable: false
      backchannel_logout_uri:
        description: RP URL that will cause the RP to log itself out when sent a Logout
          Token by the OP.
        type: string
        x-nullable: false
      backchannel_token_delivery_mode:
        description: |-
          REQUIRED for requests when the client application uses CIBA as an authorization grant type.

          Input: `poll`, `ping`, or `push`.
        type: string
        x-nullable: false
      backchannel_user_code_parameter:
        description: |-
          OPTIONAL. A boolean value indicating the `user_code` parameter support by the client application.

          If omitted, the default value is `false`.

          This applies only when the `backchannel_user_code_parameter_supported` OP parameter is `true`.
        type: boolean
        x-nullable: false
      client_id_issued_at:
        description: |-
          The client identifier time of issue.

          The value is the number of seconds between 1970-01-01T00:00:00Z (UTC) and the date/time of issue.
        format: int64
        type: integer
        x-nullable: false
      client_name:
        description: Human-readable name of a client application.
        example: My app
        type: string
        x-nullable: false
      client_secret_expires_at:
        description: |-
          The client secret expiration time.

          If the client secret does not expire, `client_secret_expires_at` = `0`.
        format: int64
        type: integer
        x-nullable: false
      client_uri:
        description: URI of a client application.
        type: string
        x-nullable: false
      created_at:
        description: Date when the client application was created.
        example: "2022-04-07T19:17:31.323187Z"
        format: date-time
        type: string
        x-nullable: false
      description:
        description: Description of the client application.
        type: string
        x-nullable: false
      dpop_bound_access_tokens:
        description: |-
          Boolean value specifying whether the client always uses DPoP for token requests
          If true, the authorization server will reject token requests from this client that do not contain the DPoP header.
        type: boolean
        x-nullable: false
      exp:
        description: |-
          The time at which the request expires expressed as seconds since
          the epoch. An ASPSP processing the request must reject requests
          where the current time is greater than the time specified in the claim.
        format: int64
        type: integer
        x-nullable: false
      grant_types:
        default:
        - authorization_code
        description: |-
          An array of allowed OAuth client grant types.

          The `grantTypes` array stores OAuth flows that are allowed for a given client application.

          [Read more](https://cloudentity.com/developers/basics/oauth-grant-types/grant-types-overview/) about grant types.
        example:
        - password
        - refresh_token
        - client_credentials
        - implicit
        - authorization_code
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          - urn:ietf:params:oauth:grant-type:device_code
          type: string
        type: array
        x-nullable: false
      iat:
        description: |-
          The time at which the request was issued by the TPP expressed
          as "seconds since the epoch"
        format: int64
        type: integer
        x-nullable: false
      id_token_encrypted_response_alg:
        description: JWE alg algorithm for encrypting the ID token issued to this
          client application.
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        type: string
        x-nullable: false
      id_token_encrypted_response_enc:
        description: JWE enc algorithm for encrypting the ID token issued to this
          client application.
        enum:
        - A256GCM
        - A128CBC-HS256
        type: string
        x-nullable: false
      id_token_signed_response_alg:
        description: |-
          Algorithm for signing ID tokens issued for a client application.

          The default value depends on authorization server configuration.
        enum:
        - RS256
        - ES256
        - PS256
        example: ES256
        type: string
        x-nullable: false
      introspection_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          An introspection endpoint authentication method configured for the client application (read-only).

          If empty, the `token_endpoint_auth_method` is used.

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      iss:
        description: |-
          Identifier for the TPP. This value must be unique for each TPP
          registered by the issuer of the SSA.The value must be a Base62
          encoded GUID. For SSAs issued by the OB Directory,
          this must be the software_id.
        pattern: ^[0-9a-zA-Z]{1,22}$
        type: string
        x-nullable: false
      jti:
        description: A unique identifier for the JWT. The value must be a UUIDv4 GUID.
        pattern: ^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: A URL of JSON Web Key Set with the public keys used by a client
          application to authenticate to Cloudentity.
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI.
        type: string
        x-nullable: false
      organisation_id:
        description: |-
          External organization identifier. It is a unique string assigned by the CDR Register to identify an Accredited
          Data Recipient Brand.

          The value obtained is used as the `aud` claim for message signing, for example, when a JSON Web Token (JWT) is
          required for authorization, and represents the audience(s) the JWT is intended for.
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used.
        type: string
        x-nullable: false
      post_logout_redirect_uris:
        description: Array of URLs to which a relying party may request that the user
          be redirected after a logout has been performed.
        items:
          type: string
        type: array
        x-nullable: false
      privacy:
        $ref: '#/definitions/ClientPrivacy'
      redirect_uris:
        $ref: '#/definitions/RedirectURIs'
      request_object_encryption_alg:
        description: Optional JWE alg algorithm the client is declaring that it may
          use for encrypting Request Objects
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        example: RSA-OAEP
        type: string
        x-nullable: false
      request_object_encryption_enc:
        description: |-
          Optional JWE enc algorithm the client is declaring that it may use for encrypting Request Objects
          When `request_object_encryption_enc` is included, `request_object_encryption_alg` MUST also be provided.
        enum:
        - A256GCM
        - A128CBC-HS256
        example: A256GCM
        type: string
        x-nullable: false
      request_object_signing_alg:
        default: any
        description: |-
          Request object signing algorithm for the token endpoint

          Cloudentity supports signing tokens with the RS256, ES256, and PS256 algorithms. If you do not want
          to use a signing algorithm, set the value of this parameter to `none`.
        enum:
        - any
        - none
        - RS256
        - ES256
        - PS256
        example: none
        type: string
        x-nullable: false
      request_uris:
        description: Array of absolute URIs that points to the Request Object that
          holds authorization request parameters.
        items:
          type: string
        type: array
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the only means of initiating
          an authorization request the client is allowed to use is PAR.
        type: boolean
        x-nullable: false
      response_types:
        $ref: '#/definitions/ResponseTypes'
      revocation_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          A revocation endpoint authentication method configured for the client application (read-only).
          If empty, the `token_endpoint_auth_method` is used.

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      scope:
        description: Space-separated list of scopes for compatibility with the OAuth
          specification.
        example: email offline_access openid
        type: string
        x-nullable: false
      scopes:
        description: An array of string represented scopes assigned to a client application
        example:
        - email
        - offline_access
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      sector_identifier_uri:
        description: |-
          OPTIONAL. [A URL using the HTTPS scheme](https://openid.net/specs/openid-connect-registration-1_0.html#SectorIdentifierValidation).
          It must reference a JSON file with the array of `redirect_uri` values.

          Pass this parameter when you use multiple domains in your `redirect_uris` or need a mechanism to allow changes in
          domain without affecting consumer consent.

          [Read more](https://openid.net/specs/openid-connect-core-1_0.html)
        type: string
        x-nullable: false
      software_id:
        description: |-
          A unique identifier string (e.g., a Universally Unique Identifier
          (UUID)) assigned by the client developer or software publisher.

          The `software_id` MUST remain the same across
          multiple updates or versions of the same software package. The
          value of this field is not intended to be human-readable and is
          usually opaque to the client and authorization server.
        type: string
        x-nullable: false
      software_statement:
        description: |-
          A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
          asserts metadata values about the client software.  In some cases,
          a software statement is issued directly by the client
          developer.  In other cases, a software statement is issued by
          a third-party organization for use by the client developer.

          In both cases, the trust relationship the authorization server has
          with the issuer of the software statement is intended to be used
          as an input to the evaluation of whether the registration request
          is accepted.

          A software statement can be presented to an
          authorization server as part of the client registration request.
        type: string
        x-nullable: false
      software_version:
        description: |-
          A version identifier string for the client software identified by
          `software_id`. The value of the `software_version` MUST be changed
          with any update of the client software identified by the same
          `software_id`.
        type: string
        x-nullable: false
      subject_type:
        default: public
        description: |-
          Subject identifier type

          Stores information if the subject identifier is of the `public` or the `pairwise` type.

          Subject identifiers identify an end-user. They are locally unique and never reassigned within the Issuer,
          and are intended to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.

          For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
          Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        enum:
        - public
        - pairwise
        example: public
        type: string
        x-nullable: false
      tls_client_auth_san_dns:
        description: A string containing the value of an expected dNSName SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_email:
        description: A string containing the value of an expected rfc822Name SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_ip:
        description: A string representation of an IP address in either dotted decimal
          notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined
          in [RFC5952]) that is expected to be present as an iPAddress SAN entry in
          the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_uri:
        description: A string containing the value of an expected uniformResourceIdentifier
          SAN entry in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_subject_dn:
        description: An [RFC4514] string representation of the expected subject distinguished
          name of the certificate.
        type: string
        x-nullable: false
      tls_client_certificate_bound_access_tokens:
        description: Boolean value indicating server support for mutual TLS client
          certificate-bound access tokens. If omitted, the default value is "false".
        type: boolean
        x-nullable: false
      token_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          Token endpoint authentication method configured for a client application

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          To learn more, go to the Authorization Basics > Client Authentication section of this guide.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      token_endpoint_auth_signing_alg:
        default: ES256
        description: |-
          Signing algorithm for the token endpoint

          This field is optional. If empty, a client can use any algorithm supported by the server (see `token_endpoint_auth_signing_alg_values_supported` in the well-known endpoing).

          If provided, depending on the server configuration, client can use of one: HS256, RS256, ES256, PS256 algorithms.

          If your token endpoint authentication is set to the `private_key_jwt` method, the
          `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.

          If your token endpoint authentication is set to the `client_secret_jwt` method,
          the `token_endpoint_auth_signing_alg` parameter must be HS256.
        enum:
        - RS256
        - ES256
        - PS256
        - HS256
        - ""
        example: ES256
        type: string
        x-nullable: false
      token_exchange:
        $ref: '#/definitions/ClientTokenExchangeConfiguration'
      tos_uri:
        description: Terms of Service URL.
        type: string
        x-nullable: false
      updated_at:
        description: Date when the client application was updated.
        example: "2022-05-08T01:11:51.1262916Z"
        format: date-time
        type: string
        x-nullable: false
      userinfo_signed_response_alg:
        default: none
        description: |-
          JWS alg algorithm REQUIRED for signing UserInfo Responses.

          If specified, the response is a JWT serialized and signed with JWS.

          If omitted, then by default, UserInfo Response returns the Claims
          as an UTF-8 encoded JSON object using the application/json content-type.
        enum:
        - none
        - RS256
        - ES256
        example: none
        type: string
        x-nullable: false
    type: object
  CDRDynamicClientRegistrationResponse:
    properties:
      app_url:
        description: Application URL
        type: string
        x-nullable: false
      application_type:
        default: web
        description: |-
          The client application type.

          Client applications can be either of a `web` or `native` types.

          Web applications include clients like server web applications or service apps.

          Native applications include single-page applications (SPAs) and mobile or desktop
          applications.

          Apply security measures according to the type of your application.
        example: web
        type: string
        x-nullable: false
      application_types:
        default:
        - server_web
        description: An array of dynamically calculated application types that can
          be used for filtering
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        - dcr
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          - dcr
          type: string
        readOnly: true
        type: array
        x-nullable: false
      audience:
        default:
        - client_id
        description: |-
          Identity of the intended recipients (the audience).

          Typically, the audience is a single resource server or a list of resource servers.

          It is considered a good practice to limit the audience of the token for security purposes.
        items:
          type: string
        type: array
        x-nullable: false
      authorization_details_types:
        description: |-
          Authorization details types

          Indicates what authorization details types the client can use.
        items:
          $ref: '#/definitions/AuthorizationDetailType'
        type: array
        x-nullable: false
      authorization_encrypted_response_alg:
        description: |-
          Algorithm used for encrypting authorization responses.

          If both signing and encryption are requested, the response is first signed, and then encrypted.
          As a result, a Nested JWT is obtained, as defined in JWT [RFC7519].

          If omitted, no encryption is applied by default.
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        example: RSA-OAEP-256
        type: string
        x-nullable: false
      authorization_encrypted_response_enc:
        description: |-
          Algorithm used for encrypting authorization responses.

          With `authorization_encrypted_response_alg` specified, the default value is `A128CBC-HS256`.
          When `authorization_encrypted_response_enc` is included, `authorization_encrypted_response_alg`
          MUST also be provided in a request.
        enum:
        - A256GCM
        - A128CBC-HS256
        example: A128CBC-HS256
        type: string
        x-nullable: false
      authorization_signed_response_alg:
        description: |-
          Algorithm used for signing authorization responses.

          With this parameter specified, the response is signed using JWS and according to the configured algorithm.

          `none` isn't allowed.
        example: RS256
        type: string
        x-nullable: false
      backchannel_authentication_request_signing_alg:
        description: |-
          OPTIONAL. The JWS alg algorithm value used by the client application to sign authentication requests.

          When omitted, the client application doesn't send signed authentication requests.
        type: string
        x-nullable: false
      backchannel_client_notification_endpoint:
        description: |-
          REQUIRED for requests when the client application uses CIBA as an authorization grant type, and the token
          delivery mode is set to `ping` or `push`.

          This parameter is the endpoint where an OP (OpenID Provider) posts a notification after end-user authentication.

          Input: an HTTPS URL.
        type: string
        x-nullable: false
      backchannel_logout_session_required:
        description: Boolean value specifying whether the RP requires that a sid (session
          ID) claim be included in the Logout Token to identify the RP session with
          the OP when the backchannel_logout_uri is used.
        type: boolean
        x-nullable: false
      backchannel_logout_uri:
        description: RP URL that will cause the RP to log itself out when sent a Logout
          Token by the OP.
        type: string
        x-nullable: false
      backchannel_token_delivery_mode:
        description: |-
          REQUIRED for requests when the client application uses CIBA as an authorization grant type.

          Input: `poll`, `ping`, or `push`.
        type: string
        x-nullable: false
      backchannel_user_code_parameter:
        description: |-
          OPTIONAL. A boolean value indicating the `user_code` parameter support by the client application.

          If omitted, the default value is `false`.

          This applies only when the `backchannel_user_code_parameter_supported` OP parameter is `true`.
        type: boolean
        x-nullable: false
      client_description:
        description: Human-readable string name of the software product description
          to be presented to the end user during authorization
        type: string
        x-nullable: false
      client_id:
        description: |-
          OAuth client application identifier

          If not provided, a random client ID is generated.
        format: clientID
        type: string
        x-nullable: false
      client_id_issued_at:
        description: |-
          The client identifier time of issue.

          The value is the number of seconds between 1970-01-01T00:00:00Z (UTC) and the date/time of issue.
        format: int64
        type: integer
        x-nullable: false
      client_name:
        description: Human-readable name of a client application.
        example: My app
        type: string
        x-nullable: false
      client_secret:
        description: |-
          OAuth client secret

          If not provided, a random client secret is generated.
        minLength: 32
        type: string
        x-nullable: false
      client_secret_expires_at:
        description: |-
          The client secret expiration time.

          If the client secret does not expire, `client_secret_expires_at` = `0`.
        format: int64
        type: integer
        x-nullable: false
      client_status:
        description: |-
          Defines whether the client application is active or not.

          Only clients with the `Active` status can preform authorization, authentication, and PAR requests.
        enum:
        - active
        - inactive
        type: string
        x-nullable: false
      client_uri:
        description: URI of a client application.
        type: string
        x-nullable: false
      created_at:
        description: Date when the client application was created.
        example: "2022-04-07T19:17:31.323187Z"
        format: date-time
        type: string
        x-nullable: false
      description:
        description: Description of the client application.
        type: string
        x-nullable: false
      developer_id:
        description: Optional developer owner of the client application.
        format: subject
        type: string
        x-nullable: false
      dpop_bound_access_tokens:
        description: |-
          Boolean value specifying whether the client always uses DPoP for token requests
          If true, the authorization server will reject token requests from this client that do not contain the DPoP header.
        type: boolean
        x-nullable: false
      dynamically_registered:
        type: boolean
        x-nullable: false
      grant_types:
        default:
        - authorization_code
        description: |-
          An array of allowed OAuth client grant types.

          The `grantTypes` array stores OAuth flows that are allowed for a given client application.

          [Read more](https://cloudentity.com/developers/basics/oauth-grant-types/grant-types-overview/) about grant types.
        example:
        - password
        - refresh_token
        - client_credentials
        - implicit
        - authorization_code
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          - urn:ietf:params:oauth:grant-type:device_code
          type: string
        type: array
        x-nullable: false
      hashed_rotated_secrets:
        description: An array of hashed rotated client secrets
        items:
          type: string
        type: array
        x-nullable: false
      hashed_secret:
        description: |-
          Hashed client secret

          Hashing client secrets provides additional security for your secrets storage as it hides
          plaintext secrets from being viewed both in the UI and the database.
        type: string
        x-nullable: false
      id_token_encrypted_response_alg:
        description: JWE alg algorithm for encrypting the ID token issued to this
          client application.
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        type: string
        x-nullable: false
      id_token_encrypted_response_enc:
        description: JWE enc algorithm for encrypting the ID token issued to this
          client application.
        enum:
        - A256GCM
        - A128CBC-HS256
        type: string
        x-nullable: false
      id_token_signed_response_alg:
        description: |-
          Algorithm for signing ID tokens issued for a client application.

          The default value depends on authorization server configuration.
        enum:
        - RS256
        - ES256
        - PS256
        example: ES256
        type: string
        x-nullable: false
      introspection_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          An introspection endpoint authentication method configured for the client application (read-only).

          If empty, the `token_endpoint_auth_method` is used.

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: A URL of JSON Web Key Set with the public keys used by a client
          application to authenticate to Cloudentity.
        type: string
        x-nullable: false
      legal_entity_id:
        description: A unique identifier string assigned by the CDR Register that
          identifies the Accredited Data Recipient Legal Entity
        type: string
        x-nullable: false
      legal_entity_name:
        description: Human-readable string name of the Accredited Data Recipient Legal
          Entity
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI.
        type: string
        x-nullable: false
      org_id:
        description: A unique identifier string assigned by the CDR Register that
          identifies the Accredited Data Recipient Brand
        type: string
        x-nullable: false
      org_name:
        description: Human-readable string name of the Accredited Data Recipient Brand
          to be presented to the end user during authorization
        type: string
        x-nullable: false
      organisation_id:
        description: |-
          External organization identifier. It is a unique string assigned by the CDR Register to identify an Accredited
          Data Recipient Brand.

          The value obtained is used as the `aud` claim for message signing, for example, when a JSON Web Token (JWT) is
          required for authorization, and represents the audience(s) the JWT is intended for.
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used.
        type: string
        x-nullable: false
      post_logout_redirect_uris:
        description: Array of URLs to which a relying party may request that the user
          be redirected after a logout has been performed.
        items:
          type: string
        type: array
        x-nullable: false
      privacy:
        $ref: '#/definitions/ClientPrivacy'
      recipient_base_uri:
        description: Base URI for the Consumer Data Standard Data Recipient endpoints.
          This SHOULD be the base to provide reference to all other Data Recipient
          Endpoints
        type: string
        x-nullable: false
      redirect_uris:
        $ref: '#/definitions/RedirectURIs'
      request_object_encryption_alg:
        description: Optional JWE alg algorithm the client is declaring that it may
          use for encrypting Request Objects
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        example: RSA-OAEP
        type: string
        x-nullable: false
      request_object_encryption_enc:
        description: |-
          Optional JWE enc algorithm the client is declaring that it may use for encrypting Request Objects
          When `request_object_encryption_enc` is included, `request_object_encryption_alg` MUST also be provided.
        enum:
        - A256GCM
        - A128CBC-HS256
        example: A256GCM
        type: string
        x-nullable: false
      request_object_signing_alg:
        default: any
        description: |-
          Request object signing algorithm for the token endpoint

          Cloudentity supports signing tokens with the RS256, ES256, and PS256 algorithms. If you do not want
          to use a signing algorithm, set the value of this parameter to `none`.
        enum:
        - any
        - none
        - RS256
        - ES256
        - PS256
        example: none
        type: string
        x-nullable: false
      request_uris:
        description: Array of absolute URIs that points to the Request Object that
          holds authorization request parameters.
        items:
          type: string
        type: array
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the only means of initiating
          an authorization request the client is allowed to use is PAR.
        type: boolean
        x-nullable: false
      response_types:
        $ref: '#/definitions/ResponseTypes'
      revocation_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          A revocation endpoint authentication method configured for the client application (read-only).
          If empty, the `token_endpoint_auth_method` is used.

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      revocation_uri:
        description: URI string that references the location of the Software Product
          consent revocation endpoint as per Consumer Data Standards Endpoints
        type: string
        x-nullable: false
      rotated_secrets:
        description: An array of rotated OAuth client secrets
        items:
          type: string
        minLength: 32
        type: array
        x-nullable: false
      scope:
        description: Space-separated list of scopes for compatibility with the OAuth
          specification.
        example: email offline_access openid
        type: string
        x-nullable: false
      scopes:
        description: An array of string represented scopes assigned to a client application
        example:
        - email
        - offline_access
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      sector_identifier_uri:
        description: |-
          OPTIONAL. [A URL using the HTTPS scheme](https://openid.net/specs/openid-connect-registration-1_0.html#SectorIdentifierValidation).
          It must reference a JSON file with the array of `redirect_uri` values.

          Pass this parameter when you use multiple domains in your `redirect_uris` or need a mechanism to allow changes in
          domain without affecting consumer consent.

          [Read more](https://openid.net/specs/openid-connect-core-1_0.html)
        type: string
        x-nullable: false
      software_id:
        description: |-
          String representing a unique identifier assigned by the Register and used by registration endpoints to identify the software product to be dynamically registered.

          The software_id will remain the same across multiple updates or versions of the same piece of software.
          The software_id SHOULD be used as the primary external identifier for the client to prevent duplicate client registrations
        type: string
        x-nullable: false
      software_roles:
        description: String containing a role of the software in the CDR Regime. Initially
          the only value used with be “data-recipient-software-product”
        type: string
        x-nullable: false
      software_statement:
        type: string
        x-nullable: false
      software_version:
        description: |-
          A version identifier string for the client software identified by
          `software_id`. The value of the `software_version` MUST be changed
          with any update of the client software identified by the same
          `software_id`.
        type: string
        x-nullable: false
      subject_type:
        default: public
        description: |-
          Subject identifier type

          Stores information if the subject identifier is of the `public` or the `pairwise` type.

          Subject identifiers identify an end-user. They are locally unique and never reassigned within the Issuer,
          and are intended to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.

          For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
          Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        enum:
        - public
        - pairwise
        example: public
        type: string
        x-nullable: false
      system:
        description: Defines whether the client application is a system tenant's application
          or not.
        type: boolean
        x-nullable: false
      tls_client_auth_san_dns:
        description: A string containing the value of an expected dNSName SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_email:
        description: A string containing the value of an expected rfc822Name SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_ip:
        description: A string representation of an IP address in either dotted decimal
          notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined
          in [RFC5952]) that is expected to be present as an iPAddress SAN entry in
          the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_uri:
        description: A string containing the value of an expected uniformResourceIdentifier
          SAN entry in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_subject_dn:
        description: An [RFC4514] string representation of the expected subject distinguished
          name of the certificate.
        type: string
        x-nullable: false
      tls_client_certificate_bound_access_tokens:
        description: Boolean value indicating server support for mutual TLS client
          certificate-bound access tokens. If omitted, the default value is "false".
        type: boolean
        x-nullable: false
      token_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          Token endpoint authentication method configured for a client application

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          To learn more, go to the Authorization Basics > Client Authentication section of this guide.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      token_endpoint_auth_signing_alg:
        default: ES256
        description: |-
          Signing algorithm for the token endpoint

          This field is optional. If empty, a client can use any algorithm supported by the server (see `token_endpoint_auth_signing_alg_values_supported` in the well-known endpoing).

          If provided, depending on the server configuration, client can use of one: HS256, RS256, ES256, PS256 algorithms.

          If your token endpoint authentication is set to the `private_key_jwt` method, the
          `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.

          If your token endpoint authentication is set to the `client_secret_jwt` method,
          the `token_endpoint_auth_signing_alg` parameter must be HS256.
        enum:
        - RS256
        - ES256
        - PS256
        - HS256
        - ""
        example: ES256
        type: string
        x-nullable: false
      token_exchange:
        $ref: '#/definitions/ClientTokenExchangeConfiguration'
      token_ttls:
        $ref: '#/definitions/TokenTTLs'
      tos_uri:
        description: Terms of Service URL.
        type: string
        x-nullable: false
      trusted:
        description: |-
          Defines whether the client application is trusted or not.

          For trusted clients, consent pages are skipped during the authorization process.
        type: boolean
        x-nullable: false
      updated_at:
        description: Date when the client application was updated.
        example: "2022-05-08T01:11:51.1262916Z"
        format: date-time
        type: string
        x-nullable: false
      use_custom_token_ttls:
        description: If enabled the client application will be able to set its own
          token TTLs.
        type: boolean
        x-nullable: false
      userinfo_signed_response_alg:
        default: none
        description: |-
          JWS alg algorithm REQUIRED for signing UserInfo Responses.

          If specified, the response is a JWT serialized and signed with JWS.

          If omitted, then by default, UserInfo Response returns the Claims
          as an UTF-8 encoded JSON object using the application/json content-type.
        enum:
        - none
        - RS256
        - ES256
        example: none
        type: string
        x-nullable: false
    type: object
  CDRError:
    properties:
      code:
        type: string
        x-nullable: false
      detail:
        type: string
        x-nullable: false
      title:
        type: string
        x-nullable: false
    type: object
  CDRErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/CDRError'
        type: array
        x-nullable: false
    type: object
  CDRRegisterClientMetadata:
    properties:
      data_recipient_status:
        description: Data recipient status
        type: string
        x-nullable: false
      software_product_status:
        description: Software product status
        type: string
        x-nullable: false
    type: object
  Client:
    properties:
      app_url:
        description: Application URL
        type: string
        x-nullable: false
      application_type:
        default: web
        description: |-
          The client application type.

          Client applications can be either of a `web` or `native` types.

          Web applications include clients like server web applications or service apps.

          Native applications include single-page applications (SPAs) and mobile or desktop
          applications.

          Apply security measures according to the type of your application.
        example: web
        type: string
        x-nullable: false
      application_types:
        default:
        - server_web
        description: An array of dynamically calculated application types that can
          be used for filtering
        example:
        - single_page
        - server_web
        - mobile_desktop
        - service
        - legacy
        - dcr
        items:
          enum:
          - single_page
          - server_web
          - mobile_desktop
          - service
          - legacy
          - dcr
          type: string
        readOnly: true
        type: array
        x-nullable: false
      audience:
        default:
        - client_id
        description: |-
          Identity of the intended recipients (the audience).

          Typically, the audience is a single resource server or a list of resource servers.

          It is considered a good practice to limit the audience of the token for security purposes.
        items:
          type: string
        type: array
        x-nullable: false
      authorization_details_types:
        description: |-
          Authorization details types

          Indicates what authorization details types the client can use.
        items:
          $ref: '#/definitions/AuthorizationDetailType'
        type: array
        x-nullable: false
      authorization_encrypted_response_alg:
        description: |-
          Algorithm used for encrypting authorization responses.

          If both signing and encryption are requested, the response is first signed, and then encrypted.
          As a result, a Nested JWT is obtained, as defined in JWT [RFC7519].

          If omitted, no encryption is applied by default.
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        example: RSA-OAEP-256
        type: string
        x-nullable: false
      authorization_encrypted_response_enc:
        description: |-
          Algorithm used for encrypting authorization responses.

          With `authorization_encrypted_response_alg` specified, the default value is `A128CBC-HS256`.
          When `authorization_encrypted_response_enc` is included, `authorization_encrypted_response_alg`
          MUST also be provided in a request.
        enum:
        - A256GCM
        - A128CBC-HS256
        example: A128CBC-HS256
        type: string
        x-nullable: false
      authorization_server_id:
        description: An authorization server (workspace) identifier holding the client
          application.
        example: default
        format: serverID
        type: string
        x-nullable: false
      authorization_signed_response_alg:
        description: |-
          Algorithm used for signing authorization responses.

          With this parameter specified, the response is signed using JWS and according to the configured algorithm.

          `none` isn't allowed.
        example: RS256
        type: string
        x-nullable: false
      backchannel_authentication_request_signing_alg:
        description: |-
          OPTIONAL. The JWS alg algorithm value used by the client application to sign authentication requests.

          When omitted, the client application doesn't send signed authentication requests.
        type: string
        x-nullable: false
      backchannel_client_notification_endpoint:
        description: |-
          REQUIRED for requests when the client application uses CIBA as an authorization grant type, and the token
          delivery mode is set to `ping` or `push`.

          This parameter is the endpoint where an OP (OpenID Provider) posts a notification after end-user authentication.

          Input: an HTTPS URL.
        type: string
        x-nullable: false
      backchannel_logout_session_required:
        description: Boolean value specifying whether the RP requires that a sid (session
          ID) claim be included in the Logout Token to identify the RP session with
          the OP when the backchannel_logout_uri is used.
        type: boolean
        x-nullable: false
      backchannel_logout_uri:
        description: RP URL that will cause the RP to log itself out when sent a Logout
          Token by the OP.
        type: string
        x-nullable: false
      backchannel_token_delivery_mode:
        description: |-
          REQUIRED for requests when the client application uses CIBA as an authorization grant type.

          Input: `poll`, `ping`, or `push`.
        type: string
        x-nullable: false
      backchannel_user_code_parameter:
        description: |-
          OPTIONAL. A boolean value indicating the `user_code` parameter support by the client application.

          If omitted, the default value is `false`.

          This applies only when the `backchannel_user_code_parameter_supported` OP parameter is `true`.
        type: boolean
        x-nullable: false
      client_id:
        description: |-
          OAuth client application identifier

          If not provided, a random client ID is generated.
        format: clientID
        type: string
        x-nullable: false
      client_id_issued_at:
        description: |-
          The client identifier time of issue.

          The value is the number of seconds between 1970-01-01T00:00:00Z (UTC) and the date/time of issue.
        format: int64
        type: integer
        x-nullable: false
      client_name:
        description: Human-readable name of a client application.
        example: My app
        type: string
        x-nullable: false
      client_secret:
        description: |-
          OAuth client secret

          If not provided, a random client secret is generated.
        minLength: 32
        type: string
        x-nullable: false
      client_secret_expires_at:
        description: |-
          The client secret expiration time.

          If the client secret does not expire, `client_secret_expires_at` = `0`.
        format: int64
        type: integer
        x-nullable: false
      client_status:
        description: |-
          Defines whether the client application is active or not.

          Only clients with the `Active` status can preform authorization, authentication, and PAR requests.
        enum:
        - active
        - inactive
        type: string
        x-nullable: false
      client_type:
        enum:
        - oauth2
        - saml
        type: string
        x-nullable: false
      client_uri:
        description: URI of a client application.
        type: string
        x-nullable: false
      confirmation:
        $ref: '#/definitions/Confirmation'
      created_at:
        description: Date when the client application was created.
        example: "2022-04-07T19:17:31.323187Z"
        format: date-time
        type: string
        x-nullable: false
      description:
        description: Description of the client application.
        type: string
        x-nullable: false
      developer_id:
        description: Optional developer owner of the client application.
        format: subject
        type: string
        x-nullable: false
      developer_metadata:
        $ref: '#/definitions/Metadata'
      dpop_bound_access_tokens:
        description: |-
          Boolean value specifying whether the client always uses DPoP for token requests
          If true, the authorization server will reject token requests from this client that do not contain the DPoP header.
        type: boolean
        x-nullable: false
      dynamically_registered:
        type: boolean
        x-nullable: false
      fdx:
        $ref: '#/definitions/FDXMetadata'
      grant_types:
        default:
        - authorization_code
        description: |-
          An array of allowed OAuth client grant types.

          The `grantTypes` array stores OAuth flows that are allowed for a given client application.

          [Read more](https://cloudentity.com/developers/basics/oauth-grant-types/grant-types-overview/) about grant types.
        example:
        - password
        - refresh_token
        - client_credentials
        - implicit
        - authorization_code
        items:
          enum:
          - authorization_code
          - implicit
          - client_credentials
          - refresh_token
          - password
          - urn:ietf:params:oauth:grant-type:jwt-bearer
          - urn:openid:params:grant-type:ciba
          - urn:ietf:params:oauth:grant-type:token-exchange
          - urn:ietf:params:oauth:grant-type:device_code
          type: string
        type: array
        x-nullable: false
      hashed_rotated_secrets:
        description: An array of hashed rotated client secrets
        items:
          type: string
        type: array
        x-nullable: false
      hashed_secret:
        description: |-
          Hashed client secret

          Hashing client secrets provides additional security for your secrets storage as it hides
          plaintext secrets from being viewed both in the UI and the database.
        type: string
        x-nullable: false
      id_token_encrypted_response_alg:
        description: JWE alg algorithm for encrypting the ID token issued to this
          client application.
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        type: string
        x-nullable: false
      id_token_encrypted_response_enc:
        description: JWE enc algorithm for encrypting the ID token issued to this
          client application.
        enum:
        - A256GCM
        - A128CBC-HS256
        type: string
        x-nullable: false
      id_token_signed_response_alg:
        description: |-
          Algorithm for signing ID tokens issued for a client application.

          The default value depends on authorization server configuration.
        enum:
        - RS256
        - ES256
        - PS256
        example: ES256
        type: string
        x-nullable: false
      introspection_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          An introspection endpoint authentication method configured for the client application (read-only).

          If empty, the `token_endpoint_auth_method` is used.

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      jwks:
        $ref: '#/definitions/ClientJWKs'
      jwks_uri:
        description: A URL of JSON Web Key Set with the public keys used by a client
          application to authenticate to Cloudentity.
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI.
        type: string
        x-nullable: false
      metadata:
        $ref: '#/definitions/Metadata'
      obbr:
        $ref: '#/definitions/OBBRMetadata'
      organisation_id:
        description: |-
          External organization identifier. It is a unique string assigned by the CDR Register to identify an Accredited
          Data Recipient Brand.

          The value obtained is used as the `aud` claim for message signing, for example, when a JSON Web Token (JWT) is
          required for authorization, and represents the audience(s) the JWT is intended for.
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used.
        type: string
        x-nullable: false
      post_logout_redirect_uris:
        description: Array of URLs to which a relying party may request that the user
          be redirected after a logout has been performed.
        items:
          type: string
        type: array
        x-nullable: false
      privacy:
        $ref: '#/definitions/ClientPrivacy'
      redirect_uris:
        $ref: '#/definitions/RedirectURIs'
      registration_token:
        $ref: '#/definitions/RegistrationToken'
      request_object_encryption_alg:
        description: Optional JWE alg algorithm the client is declaring that it may
          use for encrypting Request Objects
        enum:
        - RSA-OAEP
        - RSA-OAEP-256
        example: RSA-OAEP
        type: string
        x-nullable: false
      request_object_encryption_enc:
        description: |-
          Optional JWE enc algorithm the client is declaring that it may use for encrypting Request Objects
          When `request_object_encryption_enc` is included, `request_object_encryption_alg` MUST also be provided.
        enum:
        - A256GCM
        - A128CBC-HS256
        example: A256GCM
        type: string
        x-nullable: false
      request_object_signing_alg:
        default: any
        description: |-
          Request object signing algorithm for the token endpoint

          Cloudentity supports signing tokens with the RS256, ES256, and PS256 algorithms. If you do not want
          to use a signing algorithm, set the value of this parameter to `none`.
        enum:
        - any
        - none
        - RS256
        - ES256
        - PS256
        example: none
        type: string
        x-nullable: false
      request_uris:
        description: Array of absolute URIs that points to the Request Object that
          holds authorization request parameters.
        items:
          type: string
        type: array
        x-nullable: false
      require_pushed_authorization_requests:
        description: Boolean parameter indicating whether the only means of initiating
          an authorization request the client is allowed to use is PAR.
        type: boolean
        x-nullable: false
      response_types:
        $ref: '#/definitions/ResponseTypes'
      revocation_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          A revocation endpoint authentication method configured for the client application (read-only).
          If empty, the `token_endpoint_auth_method` is used.

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      rotated_secrets:
        description: An array of rotated OAuth client secrets
        items:
          type: string
        minLength: 32
        type: array
        x-nullable: false
      saml_metadata:
        $ref: '#/definitions/EntityDescriptor'
      saml_service_provider_id:
        type: string
        x-nullable: false
      scope:
        description: Space-separated list of scopes for compatibility with the OAuth
          specification.
        example: email offline_access openid
        type: string
        x-nullable: false
      scopes:
        description: An array of string represented scopes assigned to a client application
        example:
        - email
        - offline_access
        - openid
        items:
          type: string
        type: array
        x-nullable: false
      sector_identifier_uri:
        description: |-
          OPTIONAL. [A URL using the HTTPS scheme](https://openid.net/specs/openid-connect-registration-1_0.html#SectorIdentifierValidation).
          It must reference a JSON file with the array of `redirect_uri` values.

          Pass this parameter when you use multiple domains in your `redirect_uris` or need a mechanism to allow changes in
          domain without affecting consumer consent.

          [Read more](https://openid.net/specs/openid-connect-core-1_0.html)
        type: string
        x-nullable: false
      software_id:
        description: |-
          A unique identifier string (e.g., a Universally Unique Identifier
          (UUID)) assigned by the client developer or software publisher.

          The `software_id` MUST remain the same across
          multiple updates or versions of the same software package. The
          value of this field is not intended to be human-readable and is
          usually opaque to the client and authorization server.
        type: string
        x-nullable: false
      software_statement:
        description: |-
          A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
          asserts metadata values about the client software.  In some cases,
          a software statement is issued directly by the client
          developer.  In other cases, a software statement is issued by
          a third-party organization for use by the client developer.

          In both cases, the trust relationship the authorization server has
          with the issuer of the software statement is intended to be used
          as an input to the evaluation of whether the registration request
          is accepted.

          A software statement can be presented to an
          authorization server as part of the client registration request.
        type: string
        x-nullable: false
      software_statement_payload:
        $ref: '#/definitions/Metadata'
      software_version:
        description: |-
          A version identifier string for the client software identified by
          `software_id`. The value of the `software_version` MUST be changed
          with any update of the client software identified by the same
          `software_id`.
        type: string
        x-nullable: false
      subject_type:
        default: public
        description: |-
          Subject identifier type

          Stores information if the subject identifier is of the `public` or the `pairwise` type.

          Subject identifiers identify an end-user. They are locally unique and never reassigned within the Issuer,
          and are intended to be consumed by client applications. There are two types
          of subject identifiers: `public` and `pairwise`.

          For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.

          For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
          Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
          activity without their permission.
        enum:
        - public
        - pairwise
        example: public
        type: string
        x-nullable: false
      system:
        description: Defines whether the client application is a system tenant's application
          or not.
        type: boolean
        x-nullable: false
      tenant_id:
        description: ID of a tenant where the client application is added
        example: default
        format: tenantID
        type: string
        x-nullable: false
      tls_client_auth_san_dns:
        description: A string containing the value of an expected dNSName SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_email:
        description: A string containing the value of an expected rfc822Name SAN entry
          in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_ip:
        description: A string representation of an IP address in either dotted decimal
          notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined
          in [RFC5952]) that is expected to be present as an iPAddress SAN entry in
          the certificate.
        type: string
        x-nullable: false
      tls_client_auth_san_uri:
        description: A string containing the value of an expected uniformResourceIdentifier
          SAN entry in the certificate.
        type: string
        x-nullable: false
      tls_client_auth_subject_dn:
        description: An [RFC4514] string representation of the expected subject distinguished
          name of the certificate.
        type: string
        x-nullable: false
      tls_client_certificate_bound_access_tokens:
        description: Boolean value indicating server support for mutual TLS client
          certificate-bound access tokens. If omitted, the default value is "false".
        type: boolean
        x-nullable: false
      token_endpoint_auth_method:
        default: client_secret_basic
        description: |-
          Token endpoint authentication method configured for a client application

          Cloudentity supports the following client authentication methods:
          `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
          `self_signed_tls_client_auth`, `tls_client_auth`, `none`.

          To learn more, go to the Authorization Basics > Client Authentication section of this guide.
        enum:
        - client_secret_basic
        - client_secret_post
        - client_secret_jwt
        - private_key_jwt
        - self_signed_tls_client_auth
        - tls_client_auth
        - none
        example: client_secret_basic
        type: string
        x-nullable: false
      token_endpoint_auth_signing_alg:
        default: ES256
        description: |-
          Signing algorithm for the token endpoint

          This field is optional. If empty, a client can use any algorithm supported by the server (see `token_endpoint_auth_signing_alg_values_supported` in the well-known endpoing).

          If provided, depending on the server configuration, client can use of one: HS256, RS256, ES256, PS256 algorithms.

          If your token endpoint authentication is set to the `private_key_jwt` method, the
          `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.

          If your token endpoint authentication is set to the `client_secret_jwt` method,
          the `token_endpoint_auth_signing_alg` parameter must be HS256.
        enum:
        - RS256
        - ES256
        - PS256
        - HS256
        - ""
        example: ES256
        type: string
        x-nullable: false
      token_exchange:
        $ref: '#/definitions/ClientTokenExchangeConfiguration'
      token_ttls:
        $ref: '#/definitions/TokenTTLs'
      tos_uri:
        description: Terms of Service URL.
        type: string
        x-nullable: false
      trusted:
        description: |-
          Defines whether the client application is trusted or not.

          For trusted clients, consent pages are skipped during the authorization process.
        type: boolean
        x-nullable: false
      updated_at:
        description: Date when the client application was updated.
        example: "2022-05-08T01:11:51.1262916Z"
        format: date-time
        type: string
        x-nullable: false
      use_custom_token_ttls:
        description: If enabled the client application will be able to set its own
          token TTLs.
        type: boolean
        x-nullable: false
      userinfo_signed_response_alg:
        default: none
        description: |-
          JWS alg algorithm REQUIRED for signing UserInfo Responses.

          If specified, the response is a JWT serialized and signed with JWS.

          If omitted, then by default, UserInfo Response returns the Claims
          as an UTF-8 encoded JSON object using the application/json content-type.
        enum:
        - none
        - RS256
        - ES256
        example: none
        type: string
        x-nullable: false
    required:
    - tenant_id
    - authorization_server_id
    title: Defines a client application and its properties.
    type: object
  ClientInfo:
    properties:
      client_name:
        description: Human-readable name of a client application.
        example: My app
        type: string
        x-nullable: false
      client_uri:
        description: URI of a client application.
        type: string
        x-nullable: false
      description:
        description: Description of the client application.
        type: string
        x-nullable: false
      logo_uri:
        description: Logo URI.
        type: string
        x-nullable: false
      organisation_id:
        description: |-
          External organization identifier. It is a unique string assigned by the CDR Register to identify an Accredited
          Data Recipient Brand.

          The value obtained is used as the `aud` claim for message signing, for example, when a JSON Web Token (JWT) is
          required for authorization, and represents the audience(s) the JWT is intended for.
        example: 5647fe90-f6bc-11eb-9a03-0242ac130003
        type: string
        x-nullable: false
      policy_uri:
        description: Policy URL to read about how the profile data is used.
        type: string
        x-nullable: false
      tos_uri:
        description: Terms of Service URL.
        type: string
        x-nullable: false
    type: object
  ClientJWK:
    properties:
      alg:
        description: |-
          The "alg" (algorithm) parameter identifies the algorithm intended for
          use with the key.  The values used should either be registered in the
          IANA "JSON Web Signature and Encryption Algorithms" registry
          established by [JWA] or be a value that contains a Collision-
          Resistant Name.
        example: RS256
        type: string
        x-nullable: false
      crv:
        example: P-256
        type: string
        x-nullable: false
      d:
        example: T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE
        type: string
        x-nullable: false
      dp:
        example: G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0
        type: string
        x-nullable: false
      dq:
        example: s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk
        type: string
        x-nullable: false
      e:
        example: AQAB
        type: string
        x-nullable: false
      k:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      kid:
        description: |-
          The "kid" (key ID) parameter is used to match a specific key.  This
          is used, for instance, to choose among a set of keys within a JWK Set
          during key rollover.  The structure of the "kid" value is
          unspecified.  When "kid" values are used within a JWK Set, different
          keys within the JWK Set SHOULD use distinct "kid" values.  (One
          example in which different keys might use the same "kid" value is if
          they have different "kty" (key type) values but are considered to be
          equivalent alternatives by the application using them.)  The "kid"
          value is a case-sensitive string.
        example: 1603dfe0af8f4596
        type: string
        x-nullable: false
      kty:
        description: |-
          The "kty" (key type) parameter identifies the cryptographic algorithm
          family used with the key, such as "RSA" or "EC". "kty" values should
          either be registered in the IANA "JSON Web Key Types" registry
          established by [JWA] or be a value that contains a Collision-
          Resistant Name.  The "kty" value is a case-sensitive string.
        example: RSA
        type: string
        x-nullable: false
      "n":
        example: vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0
        type: string
        x-nullable: false
      p:
        example: 6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ
        type: string
        x-nullable: false
      q:
        example: 0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ
        type: string
        x-nullable: false
      qi:
        example: GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU
        type: string
        x-nullable: false
      use:
        description: |-
          Use ("public key use") identifies the intended use of
          the public key. The "use" parameter is employed to indicate whether
          a public key is used for encrypting data or verifying the signature
          on data. Values are commonly "sig" (signature) or "enc" (encryption).
        example: sig
        type: string
        x-nullable: false
      x:
        example: f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU
        type: string
        x-nullable: false
      x5c:
        description: |-
          The "x5c" (X.509 certificate chain) parameter contains a chain of one
          or more PKIX certificates [RFC5280].  The certificate chain is
          represented as a JSON array of certificate value strings.  Each
          string in the array is a base64-encoded (Section 4 of [RFC4648] --
          not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
          The PKIX certificate containing the key value MUST be the first
          certificate.
        items:
          type: string
        type: array
        x-nullable: false
      x5t:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      x5t#S256:
        example: GawgguFyGrWKav7AX4VKUg
        type: string
        x-nullable: false
      "y":
        example: x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0
        type: string
        x-nullable: false
    required:
    - kty
    type: object
  ClientJWKs:
    properties:
      keys:
        example: []
        items:
          $ref: '#/definitions/ClientJWK'
        type: array
        x-nullable: false
    type: object
  ClientPrivacy:
    properties:
      scopes:
        additionalProperties:
          $ref: '#/definitions/ScopePrivacyInformation'
        description: optional privacy information mapping for scopes
        type: object
        x-nullable: false
    type: object
  ClientTokenExchangeConfiguration:
    properties:
      actor_claims:
        description: |-
          Additional actor token claims

          Claims from the actor token that will be injected into the exchanged token under the `act` claim.

          Applies for the token exchange delegation flow only.
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  Clients:
    description: OAuth clients
    properties:
      clients:
        items:
          $ref: '#/definitions/Client'
        type: array
        x-nullable: false
    type: object
  Confirmation:
    properties:
      jkt:
        type: string
        x-nullable: false
      x5t#S256:
        type: string
        x-nullable: false
    type: object
  ConsentAccepted:
    properties:
      redirect_to:
        description: |-
          A URL to redirect the user.
          It applies for the redirect flow only, i.e the consent page.
        example: https://authorization.cloudentity.com:8443/tenant/server/oauth2/authorize?client_id=bugkgm23g9kregtu051g&consent_verified=true&login_id=cavai7d8s9nelp7k792g&login_state=cauq8fonbud6q8806bf0
        type: string
        x-nullable: false
    type: object
  ConsentRejected:
    properties:
      redirect_to:
        description: |-
          A URL to redirect the user.
          It applies for the redirect flow only, i.e the consent page.
        example: https://authorization.cloudentity.com:8443/tenant/server/oauth2/authorize?client_id=bugkgm23g9kregtu051g&consent_verified=true&login_id=cavai7d8s9nelp7k792g&login_state=cauq8fonbud6q8806bf0
        type: string
        x-nullable: false
    type: object
  ConsentStatus:
    type: string
  ConsentsRemovedResponse:
    properties:
      number_of_consents_removed:
        format: int64
        type: integer
        x-nullable: false
    type: object
  ContactPerson:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.3.2.2
    properties:
      Company:
        type: string
        x-nullable: false
      ContactType:
        type: string
        x-nullable: false
      EmailAddresses:
        items:
          type: string
        type: array
        x-nullable: false
      GivenName:
        type: string
        x-nullable: false
      SurName:
        type: string
        x-nullable: false
      TelephoneNumbers:
        items:
          type: string
        type: array
        x-nullable: false
    title: ContactPerson represents the SAML element ContactPerson.
    type: object
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
  DurationType:
    type: string
  Element:
    properties:
      Attr:
        items:
          $ref: '#/definitions/Attr'
        type: array
        x-nullable: false
      Child:
        items:
          $ref: '#/definitions/Token'
        type: array
        x-nullable: false
      Space:
        type: string
        x-nullable: false
    title: An Element represents an XML element, its attributes, and its child tokens.
    type: object
  EncryptionMethod:
    description: EncryptionMethod represents the XMLSEC object of the same name
    properties:
      Algorithm:
        type: string
        x-nullable: false
    type: object
  Endpoint:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.2.2
    properties:
      Binding:
        type: string
        x-nullable: false
      Location:
        type: string
        x-nullable: false
      ResponseLocation:
        type: string
        x-nullable: false
    title: Endpoint represents the SAML EndpointType object.
    type: object
  EntityDescriptor:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.3.2
    properties:
      AdditionalMetadataLocations:
        items:
          type: string
        type: array
        x-nullable: false
      AffiliationDescriptor:
        $ref: '#/definitions/AffiliationDescriptor'
      AttributeAuthorityDescriptors:
        items:
          $ref: '#/definitions/AttributeAuthorityDescriptor'
        type: array
        x-nullable: false
      AuthnAuthorityDescriptors:
        items:
          $ref: '#/definitions/AuthnAuthorityDescriptor'
        type: array
        x-nullable: false
      CacheDuration:
        $ref: '#/definitions/Duration'
      ContactPerson:
        $ref: '#/definitions/ContactPerson'
      EntityID:
        type: string
        x-nullable: false
      ID:
        type: string
        x-nullable: false
      IDPSSODescriptors:
        items:
          $ref: '#/definitions/IDPSSODescriptor'
        type: array
        x-nullable: false
      Organization:
        $ref: '#/definitions/Organization'
      PDPDescriptors:
        items:
          $ref: '#/definitions/PDPDescriptor'
        type: array
        x-nullable: false
      RoleDescriptors:
        items:
          $ref: '#/definitions/RoleDescriptor'
        type: array
        x-nullable: false
      SPSSODescriptors:
        items:
          $ref: '#/definitions/SPSSODescriptor'
        type: array
        x-nullable: false
      Signature:
        $ref: '#/definitions/Element'
      ValidUntil:
        format: date-time
        type: string
        x-nullable: false
      XMLName:
        $ref: '#/definitions/Name'
    title: EntityDescriptor represents the SAML EntityDescriptor object.
    type: object
  Error:
    description: HTTP error response
    properties:
      details:
        type: object
        x-nullable: false
      error:
        type: string
        x-nullable: false
      status_code:
        format: int64
        type: integer
        x-nullable: false
    type: object
  FDXClientStatus:
    type: string
  FDXMetadata:
    properties:
      contacts:
        description: Contact information of individuals responsible for the Data Recipient
          application.
        items:
          type: string
        type: array
        x-nullable: false
      duration_period:
        default: 365
        description: The time window the end-user grants the consent for. Used when
          `duration_type`=`TIME_BOUND`.
        format: int64
        type: integer
        x-nullable: false
      duration_type:
        default:
        - ONE_TIME
        - PERSISTENT
        - TIME_BOUND
        description: |-
          The rule of consent granting by the end-user to indicate whether they must take action
          to revoke access or the consent will be revoked automatically.

          One of: `ONE_TIME`, `PERSISTENT`, `TIME_BOUND`
        example: ONE_TIME
        items:
          $ref: '#/definitions/DurationType'
        type: array
        x-nullable: false
      intermediaries:
        description: An array of the intermediaries for this Data Recipient.
        items:
          $ref: '#/definitions/Intermediary'
        type: array
        x-nullable: false
      lookback_period:
        default: 365
        description: |-
          The maximum number of days allowed for Data Recipient consumers to obtain in transaction history, effective from
          the current date
        format: int64
        type: integer
        x-nullable: false
      registry_references:
        description: |-
          The list of external registries where the Data Recipient is registered. It comprises the following details:
          name, identifier, and the `registry` string with any additional info.
        items:
          $ref: '#/definitions/RegistryReference'
        type: array
        x-nullable: false
      status:
        $ref: '#/definitions/FDXClientStatus'
    type: object
  GetCDRConsentResponse:
    properties:
      authentication_context:
        $ref: '#/definitions/AuthenticationContext'
      cdr_arrangement:
        $ref: '#/definitions/CDRArrangement'
      client_info:
        $ref: '#/definitions/ClientInfo'
      previous_cdr_arrangement:
        $ref: '#/definitions/CDRArrangement'
      requested_scopes:
        description: List of requested scopes
        items:
          $ref: '#/definitions/RequestedScope'
        type: array
        x-nullable: false
      status:
        description: |-
          Cloudentity internal consent status.

          This parameter is deprecated. The `status` value is available in the `cdr_arrangement` >
          `status` parameter received with the current response.
        example: AwaitingAuthorisation
        type: string
        x-nullable: false
      subject:
        description: |-
          Subject identifying the authenticated user.
          Depending on the workspace configuration, the value can be hashed.
        example: 377eb000a87a471291b5a9869930a2422c670b7b6a06f74143eb74a01ed2fbe1
        format: subject
        type: string
        x-nullable: false
    type: object
  GrantedScopes:
    items:
      format: scopeName
      type: string
    type: array
  IDPSSODescriptor:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.4.3
    properties:
      ArtifactResolutionServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      AssertionIDRequestServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      AttributeProfiles:
        items:
          type: string
        type: array
        x-nullable: false
      Attributes:
        items:
          $ref: '#/definitions/Attribute'
        type: array
        x-nullable: false
      CacheDuration:
        $ref: '#/definitions/Duration'
      ContactPeople:
        items:
          $ref: '#/definitions/ContactPerson'
        type: array
        x-nullable: false
      ErrorURL:
        type: string
        x-nullable: false
      ID:
        type: string
        x-nullable: false
      KeyDescriptors:
        items:
          $ref: '#/definitions/KeyDescriptor'
        type: array
        x-nullable: false
      ManageNameIDServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      NameIDFormats:
        items:
          $ref: '#/definitions/NameIDFormat'
        type: array
        x-nullable: false
      NameIDMappingServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      Organization:
        $ref: '#/definitions/Organization'
      ProtocolSupportEnumeration:
        type: string
        x-nullable: false
      Signature:
        $ref: '#/definitions/Element'
      SingleLogoutServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      SingleSignOnServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      ValidUntil:
        format: date-time
        type: string
        x-nullable: false
      WantAuthnRequestsSigned:
        type: boolean
        x-nullable: false
      XMLName:
        $ref: '#/definitions/Name'
    title: IDPSSODescriptor represents the SAML IDPSSODescriptorType object.
    type: object
  IndexedEndpoint:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.2.3
    properties:
      Binding:
        type: string
        x-nullable: false
      Index:
        format: int64
        type: integer
        x-nullable: false
      IsDefault:
        type: boolean
        x-nullable: false
      Location:
        type: string
        x-nullable: false
      ResponseLocation:
        type: string
        x-nullable: false
    title: IndexedEndpoint represents the SAML IndexedEndpointType object.
    type: object
  Intermediary:
    properties:
      contacts:
        description: Array of strings representing ways to contact people responsible
          for this intermediary
        items:
          type: string
        type: array
        x-nullable: false
      description:
        description: A short description of the intermediary
        type: string
        x-nullable: false
      logo_uri:
        description: A URL string that references a logo for this intermediary
        type: string
        x-nullable: false
      name:
        description: Name of intermediary party
        type: string
        x-nullable: false
      registry_references:
        description: Registry references for this intermediary
        items:
          $ref: '#/definitions/RegistryReference'
        type: array
        x-nullable: false
      uri:
        description: A URL string of a web page providing information about the intermediary
        type: string
        x-nullable: false
    type: object
  IntrospectResponse:
    properties:
      acr:
        description: Authentication context class reference
        type: string
        x-nullable: false
      act:
        additionalProperties:
          type: object
        description: Actor claims used in the Token Exchange flow.
        type: object
        x-nullable: false
      active:
        description: |-
          Active is a boolean indicator of whether or not the presented token
          is currently active. The specifics of a token's `active` state
          varies depending on the implementation of an authorization
          server and the information it keeps about its token. Still, the `true`
          value returned for the `active` property generally indicates
          that a given token has been issued by this authorization server,
          has not been revoked by the resource owner, and is within its
          given time window of validity (e.g., between its issuance and
          expiration time).
        type: boolean
        x-nullable: false
      amr:
        description: Authentication method references
        items:
          type: string
        type: array
        x-nullable: false
      aud:
        description: Audience contains the list of the audiences the token is intended
          for.
        items:
          type: string
        type: array
        x-nullable: false
      client_id:
        description: |-
          A client application identifier for the OAuth 2.0 client that
          requested this token.
        type: string
        x-nullable: false
      cnf:
        $ref: '#/definitions/Confirmation'
      exp:
        description: |-
          ExpiredAt is the integer timestamp measured in the number of seconds
          since January 1 1970 UTC (1970-01-01T00:00:00Z). It indicates when this token will expire.
        format: int64
        type: integer
        x-nullable: false
      ext:
        additionalProperties:
          type: object
        description: Extra is arbitrary data set by the session.
        type: object
        x-nullable: false
      iat:
        description: |-
          IssuedAt is the integer timestamp measured in the number of seconds
          since January 1 1970 UTC. It indicates when this token was
          originally issued.
        format: int64
        type: integer
        x-nullable: false
      idp:
        description: The identifier of an identity provider that user authenticated
          with.
        type: string
        x-nullable: false
      idp_sub:
        description: IDP subject
        type: string
        x-nullable: false
      iss:
        description: Issuer URL is a string representing the issuer of this token.
        type: string
        x-nullable: false
      may_act:
        additionalProperties:
          type: object
        description: May act claims used in the Token Exchange flow.s
        type: object
        x-nullable: false
      nbf:
        description: |-
          NotBefore is an integer timestamp measured in the number of seconds
          since January 1 1970 UTC. It indicates this token was not
          used before the specified time.
        format: int64
        type: integer
        x-nullable: false
      scope:
        description: |-
          Scope is a JSON string containing a space-separated list of
          scopes associated with this token.
        type: string
        x-nullable: false
      server_id:
        description: |-
          The OAuth 2.0 authorization server identifier that
          issued this token.
        type: string
        x-nullable: false
      sub:
        description: |-
          Subject of the token, as defined in JWT [RFC7519].
          Usually a machine-readable identifier of the resource owner who
          authorized this token.
        type: string
        x-nullable: false
      tenant_id:
        description: |-
          TenantID identifies a tenant holding the authorization server that
          issued this token.
        type: string
        x-nullable: false
      token_type:
        description: TokenType is the type of the introspected token. For example,
          `access_token` or `refresh_token`.
        type: string
        x-nullable: false
      username:
        description: |-
          Username is a human-readable identifier for the resource owner who
          authorized this token.
        type: string
        x-nullable: false
    type: object
  KeyDescriptor:
    description: KeyDescriptor represents the XMLSEC object of the same name
    properties:
      EncryptionMethods:
        items:
          $ref: '#/definitions/EncryptionMethod'
        type: array
        x-nullable: false
      KeyInfo:
        $ref: '#/definitions/KeyInfo'
      Use:
        type: string
        x-nullable: false
    type: object
  KeyInfo:
    description: KeyInfo represents the XMLSEC object of the same name
    properties:
      X509Data:
        $ref: '#/definitions/X509Data'
      XMLName:
        $ref: '#/definitions/Name'
    type: object
  ListCDRCustomerArrangementsFilter:
    properties:
      accounts:
        description: |-
          List of accounts.

          It can refer to user bank accounts the client application is allowed to access.
        items:
          type: string
        type: array
        x-nullable: false
      after_consent_id:
        description: |-
          A consent identifier.

          Use it to navigate through the request pagination when the number of consents is greater than
          the `limit` set for results in the response.

          With `after_consent_id`, the list you obtain starts from the subsequent consent after the specified one. Also,
          the response depends on the `sort` and `order` parameters, if any are passed.
        type: string
        x-nullable: false
      before_consent_id:
        description: |-
          A consent identifier.

          Use it to navigate through the request pagination when the number of consents is greater than
          the limit set for results in the response.

          With `before_consent_id`, the list you obtain comprises consents up to the specified one. The specified consent
          isn't included. Also, the response depends on the `sort` and `order` parameters, if any are passed.
        type: string
        x-nullable: false
      client_id:
        description: A client identifier.
        type: string
        x-nullable: false
      limit:
        default: 20
        description: Limit the number of results returned in the response.
        format: int64
        maximum: 100
        minimum: 1
        type: integer
        x-nullable: false
      order:
        default: desc
        description: |-
          Input: `acs` or `desc`.

          Set the order of results returned in the response.
        type: string
        x-nullable: false
      sort:
        description: Sort results returned in the response.
        type: string
        x-nullable: false
      status:
        description: List of the consent statuses.
        items:
          type: string
        type: array
        x-nullable: false
      types:
        description: |-
          Consent types.

          in:query
        items:
          type: string
        type: array
        x-nullable: false
      user_id:
        description: |-
          Optional User id
          UserID
        type: string
        x-nullable: false
    type: object
  LocalizedName:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.2.4
    properties:
      Lang:
        type: string
        x-nullable: false
      Value:
        type: string
        x-nullable: false
    title: LocalizedName represents the SAML type localizedNameType.
    type: object
  LocalizedURI:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.2.5
    properties:
      Lang:
        type: string
        x-nullable: false
      Value:
        type: string
        x-nullable: false
    title: LocalizedURI represents the SAML type localizedURIType.
    type: object
  Metadata:
    additionalProperties:
      type: object
    type: object
  Name:
    description: |-
      A Name represents an XML name (Local) annotated
      with a name space identifier (Space).
      In tokens returned by Decoder.Token, the Space identifier
      is given as a canonical URL, not the short prefix used
      in the document being parsed.
    properties:
      Space:
        type: string
        x-nullable: false
    type: object
  NameID:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf
      §2.2.3
    properties:
      Format:
        type: string
        x-nullable: false
      NameQualifier:
        type: string
        x-nullable: false
      SPNameQualifier:
        type: string
        x-nullable: false
      SPProvidedID:
        type: string
        x-nullable: false
      Value:
        type: string
        x-nullable: false
    title: NameID represents the SAML element NameID.
    type: object
  NameIDFormat:
    description: NameIDFormat is the format of the id
    type: string
  OBBRMetadata:
    properties:
      webhook_uris:
        description: An array of hosts subscribed to Open Finance Webhook Notifications
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  Organization:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.3.2.1
    properties:
      OrganizationDisplayNames:
        items:
          $ref: '#/definitions/LocalizedName'
        type: array
        x-nullable: false
      OrganizationNames:
        items:
          $ref: '#/definitions/LocalizedName'
        type: array
        x-nullable: false
      OrganizationURLs:
        items:
          $ref: '#/definitions/LocalizedURI'
        type: array
        x-nullable: false
    title: Organization represents the SAML Organization object.
    type: object
  PDPDescriptor:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.4.6
    properties:
      AssertionIDRequestServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      AuthzServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      CacheDuration:
        $ref: '#/definitions/Duration'
      ContactPeople:
        items:
          $ref: '#/definitions/ContactPerson'
        type: array
        x-nullable: false
      ErrorURL:
        type: string
        x-nullable: false
      ID:
        type: string
        x-nullable: false
      KeyDescriptors:
        items:
          $ref: '#/definitions/KeyDescriptor'
        type: array
        x-nullable: false
      NameIDFormats:
        items:
          $ref: '#/definitions/NameIDFormat'
        type: array
        x-nullable: false
      Organization:
        $ref: '#/definitions/Organization'
      ProtocolSupportEnumeration:
        type: string
        x-nullable: false
      Signature:
        $ref: '#/definitions/Element'
      ValidUntil:
        format: date-time
        type: string
        x-nullable: false
    title: PDPDescriptor represents the SAML PDPDescriptor object.
    type: object
  PIICategory:
    properties:
      name:
        description: name
        example: HIPAA
        type: string
        x-nullable: false
    type: object
  PersonalDetails:
    properties:
      user_id:
        type: string
        x-nullable: false
    type: object
  RFC6749Error:
    properties:
      cause:
        type: string
        x-nullable: false
      details:
        type: object
        x-nullable: false
      error:
        type: string
        x-nullable: false
      error_description:
        type: string
        x-nullable: false
      error_hint:
        type: string
        x-nullable: false
      status_code:
        format: int64
        type: integer
        x-nullable: false
    type: object
  RedirectURIs:
    description: |-
      Cloudentity uses redirect URIs to redirect users back to the application after they authorized the application. Along
      with the redirection, an authorization code or access token is added to the URL.

      For backward compatibility reasons, it's also acceptable to pass `redirect_uris` as a string, for example:
      https://example.com/callback.

      example: ["https://example.com/callback"]
    items:
      type: string
    title: OAuth-allowed redirect URIs
    type: array
  RegistrationToken:
    properties:
      client_uri:
        type: string
        x-nullable: false
      expires_in:
        format: int64
        type: integer
        x-nullable: false
      signature:
        type: string
        x-nullable: false
    type: object
  RegistryReference:
    description: Used for registry references. In snake case to match IETF RFC 7591
      naming formats
    properties:
      registered_entity_id:
        description: An identifier of the intermediary that can be looked up from
          a legal identity registry source.
        type: string
        x-nullable: false
      registered_entity_name:
        description: The legal company name for the intermediary.
        type: string
        x-nullable: false
      registry:
        type: string
        x-nullable: false
    type: object
  RejectCDRConsentRequest:
    properties:
      error:
        description: Rejection error indication.
        example: rejected
        type: string
        x-nullable: false
      error_cause:
        description: Rejection reasons.
        example: User personal considerations
        type: string
        x-nullable: false
      error_description:
        description: Rejection error description.
        example: No access to email
        type: string
        x-nullable: false
      login_state:
        description: |-
          A string of characters randomly generated by Cloudentity to mitigate cross-site request forgery (CSRF) attacks.
          Cloudentity passes this value with the `login_state` query parameter when redirecting a user to the consent page.
        example: cauq8fonbud6q8806bf0
        format: loginState
        type: string
        x-nullable: false
      status_code:
        description: Rejection HTTP status code.
        example: 403
        format: int64
        type: integer
        x-nullable: false
    type: object
  RequestedAttribute:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.4.4.2
    properties:
      FriendlyName:
        type: string
        x-nullable: false
      IsRequired:
        type: boolean
        x-nullable: false
      Name:
        type: string
        x-nullable: false
      NameFormat:
        type: string
        x-nullable: false
      Values:
        items:
          $ref: '#/definitions/AttributeValue'
        type: array
        x-nullable: false
    title: RequestedAttribute represents the SAML RequestedAttribute object.
    type: object
  RequestedScope:
    properties:
      authorization_server_id:
        description: Authorization server identifier
        example: my-server
        format: serverID
        type: string
        x-nullable: false
      description:
        description: The scope description displayed as a hint on a consent page
        example: This scope value requests offline access using refresh token
        type: string
        x-nullable: false
      display_name:
        description: The scope name displayed on a consent page
        example: Offline Access
        type: string
        x-nullable: false
      id:
        description: Scope identifier
        example: scope-1
        format: scopeID
        type: string
        x-nullable: false
      implicit:
        description: Request this scope by default for all clients who subscribed
          to this scope
        type: boolean
        x-nullable: false
      implicit_grant:
        description: Do not ask for consent for this scope
        type: boolean
        x-nullable: false
      metadata:
        $ref: '#/definitions/Metadata'
      name:
        description: Scope name
        example: offline_access
        format: scopeName
        type: string
        x-nullable: false
      params:
        items:
          type: string
        type: array
        x-nullable: false
      requested_name:
        format: scopeName
        type: string
        x-nullable: false
      service:
        $ref: '#/definitions/Service'
      tenant_id:
        description: Tenant identifier
        example: my-company
        format: tenantID
        type: string
        x-nullable: false
      transient:
        description: Disable storage of scope grants
        type: boolean
        x-nullable: false
      with_service:
        type: boolean
        x-nullable: false
    type: object
  ResponseTypes:
    description: |-
      The array may consist of the following arguments:

      `code` - when supplied as the value for the `response_type` parameter, a successful
      response includes an authorization code

      `code token` - when supplied as the value for the `response_type` parameter, a successful
      response includes an access token, an access token type, and an authorization code

      `id_token token` - when supplied as the value for the `response_type` parameter, a successful
      response includes an access token, an access token type, and an ID token

      `code id_token token` - when supplied as the value for the `response_type` parameter, a successful
      response includes an authorization code, an ID token, an access token, and an access token
      type.

      `token` - when supplied as the value for the `response_type` parameter, a successful
      response includes an access token and its type. This argument is used for the implicit grant
      flow, but is not recommended. Instead, you should use either the authorization code grant
      flow with PKCE or client authentication set to `none` and with the use of PKCE.

      example: ["token", "id_token", "code"]
      default: ["code"]
    items:
      enum:
      - token
      - id_token
      - code
      - code id_token
      - token id_token
      - token code
      - token id_token code
      - none
      type: string
    title: An array of allowed response types
    type: array
  RevocationChannel:
    type: string
  RevocationReason:
    type: string
  RoleDescriptor:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.4.1
    properties:
      CacheDuration:
        $ref: '#/definitions/Duration'
      ContactPeople:
        items:
          $ref: '#/definitions/ContactPerson'
        type: array
        x-nullable: false
      ErrorURL:
        type: string
        x-nullable: false
      ID:
        type: string
        x-nullable: false
      KeyDescriptors:
        items:
          $ref: '#/definitions/KeyDescriptor'
        type: array
        x-nullable: false
      Organization:
        $ref: '#/definitions/Organization'
      ProtocolSupportEnumeration:
        type: string
        x-nullable: false
      Signature:
        $ref: '#/definitions/Element'
      ValidUntil:
        format: date-time
        type: string
        x-nullable: false
    title: RoleDescriptor represents the SAML element RoleDescriptor.
    type: object
  SPSSODescriptor:
    description: See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf
      §2.4.2
    properties:
      ArtifactResolutionServices:
        items:
          $ref: '#/definitions/IndexedEndpoint'
        type: array
        x-nullable: false
      AssertionConsumerServices:
        items:
          $ref: '#/definitions/IndexedEndpoint'
        type: array
        x-nullable: false
      AttributeConsumingServices:
        items:
          $ref: '#/definitions/AttributeConsumingService'
        type: array
        x-nullable: false
      AuthnRequestsSigned:
        type: boolean
        x-nullable: false
      CacheDuration:
        $ref: '#/definitions/Duration'
      ContactPeople:
        items:
          $ref: '#/definitions/ContactPerson'
        type: array
        x-nullable: false
      ErrorURL:
        type: string
        x-nullable: false
      ID:
        type: string
        x-nullable: false
      KeyDescriptors:
        items:
          $ref: '#/definitions/KeyDescriptor'
        type: array
        x-nullable: false
      ManageNameIDServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      NameIDFormats:
        items:
          $ref: '#/definitions/NameIDFormat'
        type: array
        x-nullable: false
      Organization:
        $ref: '#/definitions/Organization'
      ProtocolSupportEnumeration:
        type: string
        x-nullable: false
      Signature:
        $ref: '#/definitions/Element'
      SingleLogoutServices:
        items:
          $ref: '#/definitions/Endpoint'
        type: array
        x-nullable: false
      ValidUntil:
        format: date-time
        type: string
        x-nullable: false
      WantAssertionsSigned:
        type: boolean
        x-nullable: false
      XMLName:
        $ref: '#/definitions/Name'
    title: SPSSODescriptor represents the SAML SPSSODescriptorType object.
    type: object
  ScopeGrant:
    properties:
      client_id:
        description: Identifier of a client application that is granted with the scope.
        example: bugkgm23g9kregtu051g
        format: clientID
        type: string
        x-nullable: false
      given_at:
        description: Time when the scope was granted
        format: date-time
        type: string
        x-nullable: false
      granted_scope_name:
        description: The scope name with its actual value
        example: accounts.read.own
        format: scopeName
        type: string
        x-nullable: false
      language:
        description: Language
        format: language
        type: string
        x-nullable: false
      scope_name:
        description: |-
          The scope name as it's set initially. This parameter supports dynamic scope syntax, thus can include a scope
          root—a fixed core of the dynamic scope name supplemented with a wildcard—a symbol representing
          an adjustable extension to the scope root allowing to retrieve a specific requested scope.

          The basic dynamic scope template is as follows: `[scope-root.*]` where `*` is a wildcard.
        example: accounts.read.*
        format: scopeName
        type: string
        x-nullable: false
      server_id:
        description: Identifier of a server where the client app is hosted.
        example: my-server
        format: serverID
        type: string
        x-nullable: false
      subject:
        description: Identifier of a user who granted the scope.
        format: subject
        type: string
        x-nullable: false
      tenant_id:
        description: Identifier of the tenant where the client app is hosted.
        example: my-company
        format: tenantID
        type: string
        x-nullable: false
    type: object
  ScopePrivacyInformation:
    properties:
      pii_categories:
        items:
          $ref: '#/definitions/PIICategory'
        type: array
        x-nullable: false
      purpose:
        format: purposeName
        type: string
        x-nullable: false
    type: object
  Service:
    properties:
      authorization_server_id:
        description: Authorization server identifier
        example: my-server
        format: serverID
        type: string
        x-nullable: false
      custom_audience:
        description: Custom service audience
        example: https://api.example.com
        type: string
        x-nullable: false
      description:
        description: Service description
        example: Service description
        type: string
        x-nullable: false
      gateway_id:
        description: Gateway identifier
        example: gateway-1
        format: gatewayID
        type: string
        x-nullable: false
      id:
        description: A unique identifier of a service
        example: service-1
        format: serviceID
        type: string
        x-nullable: false
      name:
        description: Service name
        example: My service
        type: string
        x-nullable: false
      system:
        description: '`true` when the service is a system service'
        example: false
        type: boolean
        x-nullable: false
      tenant_id:
        description: Tenant identifier
        example: my-company
        format: tenantID
        type: string
        x-nullable: false
      type:
        default: user
        description: Service type
        enum:
        - oauth2
        - oidc
        - system
        - user
        - openbanking
        type: string
        x-nullable: false
      updated_at:
        description: The date of service update
        format: date-time
        type: string
        x-nullable: false
      with_specification:
        description: '`true` when the service has the OpenAPI 3.0 specification'
        type: boolean
        x-nullable: false
    type: object
  Token:
    description: |-
      A Token is an interface type used to represent XML elements, character
      data, CDATA sections, XML comments, XML directives, and XML processing
      instructions.
    properties:
      Index:
        format: int64
        type: integer
        x-nullable: false
      Parent:
        $ref: '#/definitions/Element'
    type: object
  TokenTTLs:
    properties:
      access_token_ttl:
        default: 1h0m0s
        description: |-
          Access token time to live

          After an access token reaches its time to live, it expires and it cannot be used to
          authenticate the client application.
        example: 1h10m30s
        format: duration
        type: string
        x-nullable: false
      authorization_code_ttl:
        description: |-
          Authorization code time to live

          After an authorization code reaches its time to live, it expires and it cannot be used to
          authorize the request to the `/token` endpoint.
        example: 10m0s
        format: duration
        type: string
        x-nullable: false
      id_token_ttl:
        description: |-
          ID token time to live

          After an ID token reaches its time to live, it expires and it cannot be used to provide
          user profile information to a client application.
        example: 1h10m30s
        format: duration
        type: string
        x-nullable: false
      refresh_token_ttl:
        default: 720h0m0s
        description: |-
          Refresh token time to live

          After a refresh token reaches its time to live, it expires and it cannot be used to obtain
          new access tokens for a client application.
        example: 720h0m0s
        format: duration
        type: string
        x-nullable: false
    type: object
  X509Certificate:
    description: X509Certificate represents the XMLSEC object of the same name
    properties:
      Data:
        type: string
        x-nullable: false
      XMLName:
        $ref: '#/definitions/Name'
    type: object
  X509Data:
    description: X509Data represents the XMLSEC object of the same name
    properties:
      X509Certificates:
        items:
          $ref: '#/definitions/X509Certificate'
        type: array
        x-nullable: false
      XMLName:
        $ref: '#/definitions/Name'
    type: object
  genericError:
    description: Error response
    properties:
      error:
        example: The requested resource could not be found
        type: string
        x-nullable: false
      error_code:
        description: Code represents the error status code (404, 403, 401, ...).
        example: 404
        format: int64
        type: integer
        x-nullable: false
      error_hint:
        example: Object with ID 12345 does not exist
        type: string
        x-nullable: false
    required:
    - error
    type: object
host: localhost:8443
info:
  description: |-
    Cloudentity [CDR](https://cloudentity.com/developers/basics/openfinance/consumer-data-right-overview/) APIs
    conform with Consumer Data Right requirements for the banking and energy sectors.

    The point of CDR APIs we have is to allow data recipients to request consumer authorization to access their
    financial data. To make it possible, we have APIs that allow data holders to build their custom consent pages to
    enable their customers to provide their consent.

    This collection of APIs allows a
    [data recipient](https://cloudentity.com/developers/basics/openfinance/consumer-data-right-overview/#accredited-data-recipients)
    to request [consumer authorization](https://cloudentity.com/developers/basics/openfinance/consumer-data-right-overview/#consumer-consents)
    to access a consumer's financial data. For this, Cloudentity offers APIs for data holders to build their
    [custom consent page](https://cloudentity.com/developers/howtos/cdr/build-cdr-consent-screen/).
    Upon consent provision or rejection, consumers can manage their consents on their own with
    [consumer dashboards](https://cloudentity.com/developers/howtos/cdr/cdr-consumer-dashboards/). Also, administrators
    can manage consents on behalf of consumers with
    [administrator portals](https://cloudentity.com/developers/howtos/cdr/cdr-admin-portal/).

    Where authorization is required, include the `Authorization: Bearer`
    header in your request and use a token as its value. To obtain the token, apply the
    [Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/)
    or [JWT Bearer](https://cloudentity.com/developers/basics/oauth-grant-types/using-jwt-profile-for-authorization-flows/)
    grant type.

    API requests must feature the explicitly defined `manage_openbanking_consents` scope the client application can access.
    Any other required and optional scopes are listed under individual endpoints. To check scopes for an endpoint, unfold
    the **AUTHORIZATIONS:** block in the endpoint description.
    [Enable](https://cloudentity.com/developers/howtos/access-control/creating-and-configuring-dynamic-scopes/#add-scope)
    the necessary scopes for your client application in advance.

    Learn more about [Cloudentity CDR Workspace](https://cloudentity.com/developers/howtos/cdr/cdr-workspace/),
    [Accredited Data Recipients validation](https://cloudentity.com/developers/howtos/cdr/cdr-adr-validation/), and
    [Data Holder API protection in CDR](https://cloudentity.com/developers/howtos/cdr/cdr-data-api-protection/).

    Check our
    [Open Banking Glossary](https://cloudentity.com/developers/basics/openfinance/glossary-ob/) to get familiar with terms and
    abbreviations.
  title: Cloudentity Consumer Data Right APIs
  version: latest
paths:
  /admin/register/metadata:
    post:
      description: |-
        Indicate that a critical update to the metadata for Accredited Data Recipients has been made
        and should be obtained. This endpoint is used by the CDR Register.

        Supported version(s) of this endpoint: [1]
      operationId: refreshMetadata
      parameters:
      - in: body
        name: Request
        schema:
          $ref: '#/definitions/CDRAdminRequestMetaDataUpdate'
      responses:
        "200":
          description: ' Register refreshed'
        "400":
          $ref: '#/responses/CDRErrorResponse'
        "401":
          $ref: '#/responses/CDRErrorResponse'
        "406":
          $ref: '#/responses/CDRErrorResponse'
        "424":
          $ref: '#/responses/CDRErrorResponse'
      security:
      - defaultcc:
        - admin:metadata:update
      summary: Refresh ADR Metadata
      tags:
      - CDR
  /arrangements/revoke:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Withdraw a consent for an arrangement in compliance with the revocation endpoint defined by the Consumer
        Data Standards specification. The operation is performed per client application.

        This endpoint requires inline
        [Private Key JWT](https://cloudentity.com/developers/basics/oauth-client-authentication/private-key-jwt-client-authentication/) authentication.
      operationId: revokeCDRArrangement
      parameters:
      - in: formData
        name: cdr_arrangement_id
        type: string
      - default: online
        description: Stores the channel that was used to revoke the arrangement
        enum:
        - online
        - writing
        - over_the_phone
        - data_holder
        - data_recipient
        in: query
        name: revocation_channel
        type: string
      - description: Stores the reason why the arrangement was revoked
        in: query
        name: revocation_reason
        type: string
      - default: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
        enum:
        - urn:ietf:params:oauth:client-assertion-type:jwt-bearer
        in: formData
        name: client_assertion_type
        type: string
      - in: formData
        name: client_assertion
        type: string
      - in: formData
        name: client_id
        type: string
      responses:
        "204":
          description: ' CDR arrangement revoked'
        "400":
          $ref: '#/responses/CDRErrorResponse'
        "401":
          $ref: '#/responses/CDRErrorResponse'
        "403":
          $ref: '#/responses/CDRErrorResponse'
        "404":
          $ref: '#/responses/CDRErrorResponse'
        "422":
          $ref: '#/responses/CDRErrorResponse'
        "429":
          $ref: '#/responses/CDRErrorResponse'
      summary: Revoke CDR Arrangement
      tags:
      - CDR
  /cdr/cdr-arrangement/{login}:
    get:
      description: |-
        Call this endpoint to retrieve CDR data from the Data Holder. Based on data obtained, you can build a consent page.

        The response contains details about the arrangement, client application, requested scopes, and authenticated user.
      operationId: getCDRArrangementSystem
      parameters:
      - description: |-
          Login session identifier.

          Cloudentity passes the login session identifier with the `login_id` query parameter when redirecting a user to the consent page.
        in: path
        name: login
        required: true
        type: string
      - description: |-
          A string of characters randomly generated by Cloudentity to mitigate cross-site request forgery (CSRF) attacks.
          Cloudentity passes this value with the `login_state` query parameter when redirecting a user to the consent page.
        in: query
        name: login_state
        type: string
      responses:
        "200":
          $ref: '#/responses/GetCDRConsentResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: Get CDR Request
      tags:
      - CONSENT_PAGE
  /cdr/cdr-arrangement/{login}/accept:
    post:
      description: |-
        Notify Cloudentity that the user has authorized the client application to access their resources on their own behalf.
        It's sent once the user gives consent on the consent page.

        This request includes a list of the permitted accounts along with the access scopes granted, user identifier,
        and the additional parameter to prevent CSRF.
      operationId: acceptCDRArrangementSystem
      parameters:
      - description: |-
          Login session identifier.

          Cloudentity passes the login session identifier with the `login_id` query parameter when redirecting a user to the consent page.
        in: path
        name: login
        required: true
        type: string
      - description: Accept Consent Request
        in: body
        name: AcceptConsent
        schema:
          $ref: '#/definitions/AcceptCDRConsentRequest'
      responses:
        "200":
          $ref: '#/responses/ConsentAccepted'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: Accept CDR Arrangement
      tags:
      - CONSENT_PAGE
  /cdr/cdr-arrangement/{login}/reject:
    post:
      description: |-
        Notify Cloudentity that the client application isn't authorized to access user resources. It's sent when the user
        rejected a consent on the consent page.

        The request includes the error message along with the rejection reasons, HTTP status code, and the additional
        parameter to prevent CSRF.
      operationId: rejectCDRArrangementSystem
      parameters:
      - description: |-
          Login session identifier.

          Cloudentity passes the login session identifier with the `login_id` query parameter when redirecting a user to the consent page.
        in: path
        name: login
        required: true
        type: string
      - description: |-
          Reject Consent Request

          To give more context on why the user rejected the request.
        in: body
        name: RejectConsent
        schema:
          $ref: '#/definitions/RejectCDRConsentRequest'
      responses:
        "200":
          $ref: '#/responses/ConsentRejected'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: Reject CDR Arrangement
      tags:
      - CONSENT_PAGE
  /cdr/consents/introspect:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        Accepts a refresh token and returns meta information surrounding the OAuth 2.0 refresh token along with the
        CDR arrangement.

        As per CDR regulations, Access Tokens and ID Tokens are unavailable for introspection.

        The response includes:

        `exp` a token expiration timestamp.

        `scope` a space-separated list of scopes associated with the token.

        `cdr_arrangement_id` a unique identifier of the arrangement.

        `cdr_arrangement` an object holding the arrangement details.

        `cdr_register_client_metadata` metadata from the CDR Register, including the Data Recipient and Software Product

        statuses.
      operationId: cdrConsentIntrospect
      parameters:
      - in: formData
        name: token
        type: string
      responses:
        "200":
          $ref: '#/responses/IntrospectCDRConsentResponse'
        "401":
          $ref: '#/responses/genericError'
        "404":
          $ref: '#/responses/genericError'
        "429":
          $ref: '#/responses/genericError'
      security:
      - default:
        - introspect_openbanking_tokens
      summary: Introspect CDR Arrangement
      tags:
      - CDR
  /oauth2/register:
    post:
      description: |-
        Dynamic Client Registration endpoint allows to dynamically register OAuth 2.0 client applications
        with the Cloudentity Platform. When a request with all required registration metadata
        values reaches the Cloudentity authorization server, the server issues a client
        identifier and provides client metadata values registered for the client.
        Client applications can use their registration data to communicate with the Cloudentity
        platform using the OAuth 2.0 protocol.
      operationId: dynamicClientRegistration
      parameters:
      - in: body
        name: Client
        schema:
          $ref: '#/definitions/CDRDynamicClientRegistrationRequest'
      responses:
        "201":
          $ref: '#/responses/DynamicClientRegistrationResponse'
        "400":
          $ref: '#/responses/RFC6749Error'
        "401":
          $ref: '#/responses/RFC6749Error'
        "403":
          $ref: '#/responses/RFC6749Error'
        "404":
          $ref: '#/responses/genericError'
      security:
      - default:
        - dcr_register
      summary: CDR Dynamic Client Registration
      tags:
      - DCR
  /oauth2/register/{cid}:
    delete:
      description: This endpoint allows to delete a dynamically registered client.
      operationId: dynamicClientRegistrationDeleteClient
      parameters:
      - default: default
        description: Client id
        in: path
        name: cid
        required: true
        type: string
      responses:
        "204":
          description: ' Client has been deleted'
        "400":
          $ref: '#/responses/RFC6749Error'
        "401":
          $ref: '#/responses/RFC6749Error'
        "403":
          $ref: '#/responses/RFC6749Error'
        "404":
          $ref: '#/responses/genericError'
      security:
      - default: []
      summary: Delete CDR Client
      tags:
      - DCR
    get:
      description: This endpoint allows to get metadata values of a dynamically registered
        client.
      operationId: dynamicClientRegistrationGetClient
      parameters:
      - default: default
        description: Client id
        in: path
        name: cid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/DynamicClientRegistrationResponse'
        "400":
          $ref: '#/responses/RFC6749Error'
        "401":
          $ref: '#/responses/RFC6749Error'
        "403":
          $ref: '#/responses/RFC6749Error'
        "404":
          $ref: '#/responses/genericError'
      security:
      - default: []
      summary: Get CDR Client Metadata
      tags:
      - DCR
    put:
      description: This endpoint allows to update metadata values of a dynamically
        registered client.
      operationId: dynamicClientRegistrationUpdateClient
      parameters:
      - default: default
        description: Client id
        in: path
        name: cid
        required: true
        type: string
      - in: body
        name: Client
        schema:
          $ref: '#/definitions/CDRDynamicClientRegistrationRequest'
      responses:
        "200":
          $ref: '#/responses/DynamicClientRegistrationResponse'
        "400":
          $ref: '#/responses/RFC6749Error'
        "401":
          $ref: '#/responses/RFC6749Error'
        "403":
          $ref: '#/responses/RFC6749Error'
        "404":
          $ref: '#/responses/genericError'
      security:
      - default: []
      summary: Update CDR Client Metadata
      tags:
      - DCR
  /servers/{wid}/cdr/arrangements:
    delete:
      description: |-
        Revoke CDR arrangements by parameters passed.

        Currently, this endpoint supports revocation by the `client id` parameter.

        To revoke all arrangements for a given client application, specify its identifier in the query.
      operationId: revokeCDRArrangements
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - description: Client ID
        in: query
        name: client_id
        required: true
        type: string
      - default: online
        description: Stores the channel that was used to revoke the arrangement
        enum:
        - online
        - writing
        - over_the_phone
        - data_holder
        - data_recipient
        in: query
        name: revocation_channel
        type: string
      - description: Stores the reason why the arrangement was revoked
        in: query
        name: revocation_reason
        type: string
      responses:
        "200":
          $ref: '#/responses/ConsentsRemovedResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: Revoke CDR Arrangements
      tags:
      - MANAGEMENT
    get:
      deprecated: true
      description: |-
        Returns the detailed list of all CDR arrangements available for a workspace.
        To narrow the list down, use the request body parameters.
      operationId: getCDRArrangements
      parameters:
      - description: |-
          Customer identifier. It represents an organization. The customer identifier can cover several
          user identifiers as organization members.

          When you pass a `customer_id` with your request, the response contains results related to the specified
          organization, including the allowed information about its users and their arrangements.
        in: query
        name: customer_id
        type: string
      - description: |-
          User identifier. It represents an end-user.

          When you pass a `user_id` with your request, the endpoint returns the details relating to the specified user.
        in: query
        name: user_id
        type: string
      - description: |-
          List of accounts.

          It can refer to user bank accounts the client application is allowed to access.
        in: query
        items:
          type: string
        name: accounts
        type: array
      - description: A client identifier.
        in: query
        name: client_id
        type: string
      - description: List of the consent statuses.
        in: query
        items:
          type: string
        name: status
        type: array
      - description: Consent types.
        in: query
        items:
          type: string
        name: types
        type: array
      - description: |-
          A consent identifier.

          Use it to navigate through the request pagination when the number of consents is greater than
          the `limit` set for results in the response.

          With `after_consent_id`, the list you obtain starts from the subsequent consent after the specified one. Also,
          the response depends on the `sort` and `order` parameters, if any are passed.
        in: query
        name: after_consent_id
        type: string
      - description: |-
          A consent identifier.

          Use it to navigate through the request pagination when the number of consents is greater than
          the limit set for results in the response.

          With `before_consent_id`, the list you obtain comprises consents up to the specified one. The specified consent
          isn't included. Also, the response depends on the `sort` and `order` parameters, if any are passed.
        in: query
        name: before_consent_id
        type: string
      - description: Sort results returned in the response.
        in: query
        name: sort
        type: string
      - default: desc
        description: |-
          Input: `acs` or `desc`.

          Set the order of results returned in the response.
        in: query
        name: order
        type: string
      - default: 20
        description: Limit the number of results returned in the response.
        format: int64
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: default
        description: Workspace ID
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/CDRArrangements'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: List CDR Arrangements
      tags:
      - MANAGEMENT
    post:
      description: |-
        Returns the detailed list of all CDR arrangements available for a workspace.
        To narrow the list down, use the request body parameters.
      operationId: listCDRArrangements
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - in: body
        name: ConsentsRequest
        schema:
          $ref: '#/definitions/CDRConsentsRequest'
      responses:
        "200":
          $ref: '#/responses/CDRArrangements'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: List CDR Arrangements
      tags:
      - MANAGEMENT
  /servers/{wid}/cdr/arrangements/{arrangementID}:
    delete:
      description: Revoke a CDR arrangement. Specify the required arrangement with
        its identifier passed as the path parameter.
      operationId: revokeCDRArrangementByID
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - description: Arrangement id
        in: path
        name: arrangementID
        required: true
        type: string
      - default: online
        enum:
        - online
        - writing
        - over_the_phone
        - data_holder
        - data_recipient
        in: query
        name: revocation_channel
        type: string
      - description: Stores the reason why the arrangement was revoked
        in: query
        name: revocation_reason
        type: string
      responses:
        "204":
          description: ' Arrangement revoked'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: Revoke CDR Arrangement
      tags:
      - MANAGEMENT
    get:
      description: |-
        Retrieve CDR arrangement by its ID.

        Call this endpoint to get the details of an arrangement within the specified workspace.
      operationId: getCDRArrangement
      parameters:
      - default: default
        description: Workspace ID
        in: path
        name: wid
        required: true
        type: string
      - description: Arrangement ID
        in: path
        name: arrangementID
        required: true
        type: string
      responses:
        "200":
          description: CDRArrangement
          schema:
            $ref: '#/definitions/CDRArrangement'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: Get CDR Arrangement
      tags:
      - MANAGEMENT
  /servers/{wid}/cdr/customer-arrangements:
    delete:
      description: |-
        Revoke CDR arrangements, access tokens, and refresh tokens for a given customer.

        This endpoint requires the `customer_id` value passed as a claim in an access token using the
        [JWT Bearer flow](https://cloudentity.com/developers/basics/oauth-grant-types/using-jwt-profile-for-authorization-flows/).
      operationId: revokeCDRCustomerArrangements
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - default: online
        description: Stores the channel that was used to revoke the arrangement
        enum:
        - online
        - writing
        - over_the_phone
        - data_holder
        - data_recipient
        in: query
        name: revocation_channel
        type: string
      - description: Stores the reason why the arrangement was revoked
        in: query
        name: revocation_reason
        type: string
      responses:
        "200":
          $ref: '#/responses/ConsentsRemovedResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: Revoke CDR Customer Arrangements
      tags:
      - MANAGEMENT
    post:
      description: |-
        Returns the detailed list of CDR arrangements for a given customer.

        This endpoint requires the `customer_id` value passed as a claim in an access token using the
        [JWT Bearer flow](https://cloudentity.com/developers/basics/oauth-grant-types/using-jwt-profile-for-authorization-flows/).

        To narrow the list down, use the request body parameters.
      operationId: listCDRCustomerArrangements
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      - in: body
        name: ConsentsRequest
        schema:
          $ref: '#/definitions/ListCDRCustomerArrangementsFilter'
      responses:
        "200":
          $ref: '#/responses/CDRArrangements'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: List CDR Customer Arrangements
      tags:
      - MANAGEMENT
  /servers/{wid}/cdr/customer-clients:
    get:
      description: |-
        Returns clients that currently have arrangements assigned to them.

        The response must be filtered either by `customer_id` or `account_ids` value passed as claims in an access token
        using the [JWT Bearer flow](https://cloudentity.com/developers/basics/oauth-grant-types/using-jwt-profile-for-authorization-flows/).

        You can pass `account_ids` as an array of maximum 10 identifiers at once.
      operationId: listCustomerClients
      parameters:
      - default: default
        description: Workspace id
        in: path
        name: wid
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/Clients'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_openbanking_consents
      summary: List CDR Customer Clients
      tags:
      - MANAGEMENT
produces:
- application/json
responses:
  CDRArrangements:
    description: CDRArrangements
    schema:
      $ref: '#/definitions/CDRArrangements'
  CDRErrorResponse:
    description: CDR Error
    schema:
      $ref: '#/definitions/CDRErrorResponse'
  Clients:
    description: Clients
    schema:
      $ref: '#/definitions/Clients'
  ConsentAccepted:
    description: Consent Accepted
    schema:
      $ref: '#/definitions/ConsentAccepted'
  ConsentRejected:
    description: Consent rejected
    schema:
      $ref: '#/definitions/ConsentRejected'
  ConsentsRemovedResponse:
    description: Consents Revoked
    schema:
      $ref: '#/definitions/ConsentsRemovedResponse'
  DynamicClientRegistrationResponse:
    description: Dynamic client registration response
    schema:
      $ref: '#/definitions/CDRDynamicClientRegistrationResponse'
  GetCDRConsentResponse:
    description: GetCDRConsentResponse
    schema:
      $ref: '#/definitions/GetCDRConsentResponse'
  IntrospectCDRConsentResponse:
    description: Introspect CDR Consent Response
    schema:
      allOf:
      - $ref: '#/definitions/IntrospectResponse'
      - properties:
          AccountIDs:
            description: Deprecated list of account ids, use `account_ids` from `cdr_arrangement`
            items:
              type: string
            type: array
          cdr_arrangement:
            $ref: '#/definitions/CDRArrangement'
          cdr_arrangement_id:
            description: CDR arrangement ID
            type: string
          cdr_register_client_metadata:
            $ref: '#/definitions/CDRRegisterClientMetadata'
        type: object
  RFC6749Error:
    description: RFC6749 error
    schema:
      $ref: '#/definitions/RFC6749Error'
  badRequestHTTPError:
    description: Bad request
    schema:
      $ref: '#/definitions/Error'
  conflictHTTPError:
    description: Conflict
    schema:
      $ref: '#/definitions/Error'
  forbiddenHTTPError:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
  genericError:
    description: ErrorResponse
    schema:
      $ref: '#/definitions/genericError'
  internalServerErrorHTTPError:
    description: Internal server error
    schema:
      $ref: '#/definitions/Error'
  methodNotAllowedHTTPError:
    description: Method not allowed
    schema:
      $ref: '#/definitions/Error'
  notFoundHTTPError:
    description: Not found
    schema:
      $ref: '#/definitions/Error'
  payloadTooLargeHTTPError:
    description: Payload too large
    schema:
      $ref: '#/definitions/Error'
  preconditionFailedHTTPError:
    description: Precondition failed
    schema:
      $ref: '#/definitions/Error'
  tooManyRequestsHTTPError:
    description: Too many requests
    schema:
      $ref: '#/definitions/Error'
  unauthorizedHTTPError:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  unprocessableEntityHTTPError:
    description: Unprocessable entity
    schema:
      $ref: '#/definitions/Error'
schemes:
- https
securityDefinitions:
  default:
    authorizationUrl: /default/default/oauth2/authorize
    flow: accessCode
    scopes:
      dcr_register: dcr_register
      introspect_openbanking_tokens: introspect_openbanking_tokens
    tokenUrl: /default/default/oauth2/token
    type: oauth2
  defaultcc:
    authorizationUrl: /default/default/oauth2/authorize
    flow: accessCode
    scopes:
      accounts: accounts
      consents: consents
      payments: payments
    tokenUrl: /default/default/oauth2/token
    type: oauth2
  system:
    authorizationUrl: /default/system/oauth2/authorize
    flow: accessCode
    scopes:
      manage_openbanking_consents: manage_openbanking_consents
    tokenUrl: /default/system/oauth2/token
    type: oauth2
swagger: "2.0"
