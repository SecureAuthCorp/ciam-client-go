basePath: /api/identity/default
consumes:
- application/json
definitions:
  AddUserIdentifier:
    properties:
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        example: email
        type: string
        x-nullable: false
    required:
    - identifier
    - type
    type: object
  AddUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        example: mobile
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
    required:
    - address
    - type
    - verified
    type: object
  AuthenticationMechanisms:
    items:
      enum:
      - password
      - otp
      type: string
    type: array
  CodeID:
    properties:
      code_id:
        format: codeID
        type: string
        x-nullable: false
    required:
    - code_id
    type: object
  Codes:
    properties:
      code:
        type: string
        x-nullable: false
      extended_code:
        format: codeID
        type: string
        x-nullable: false
    required:
    - extended_code
    - code
    type: object
  DeleteUserIdentifier:
    properties:
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
    required:
    - identifier
    type: object
  DeleteUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
    required:
    - address
    type: object
  Error:
    description: HTTP error response
    properties:
      details:
        type: object
        x-nullable: false
      error:
        type: string
        x-nullable: false
      status_code:
        format: int64
        type: integer
        x-nullable: false
    type: object
  ExtendedUser:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          type: string
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        example: active
        type: string
        x-nullable: false
      status_updated_at:
        format: date-time
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
      verified addresses:
        items:
          type: string
        type: array
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - status
    type: object
  NewUser:
    properties:
      credentials:
        items:
          $ref: '#/definitions/NewUserCredential'
        type: array
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          $ref: '#/definitions/NewUserIdentifier'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        type: string
        x-nullable: false
      verifiable_addresses:
        items:
          $ref: '#/definitions/NewUserVerifiableAddress'
        type: array
        x-nullable: false
    required:
    - status
    type: object
  NewUserCredential:
    properties:
      password:
        example: secret
        type: string
        x-nullable: false
      type:
        enum:
        - password
        example: password
        type: string
        x-nullable: false
    required:
    - type
    type: object
  NewUserIdentifier:
    properties:
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        example: email
        type: string
        x-nullable: false
    required:
    - identifier
    - type
    type: object
  NewUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        example: mobile
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
    required:
    - address
    - type
    - status
    - verified
    type: object
  OtpConfig:
    properties:
      length:
        format: int64
        type: integer
        x-nullable: false
      ttl:
        format: duration
        type: string
        x-nullable: false
    type: object
  OtpSettings:
    properties:
      activation:
        $ref: '#/definitions/OtpConfig'
      challenge:
        $ref: '#/definitions/OtpConfig'
      reset_password:
        $ref: '#/definitions/OtpConfig'
      verify_address:
        $ref: '#/definitions/OtpConfig'
    type: object
  PasswordPolicy:
    properties:
      capital_letters:
        format: uint64
        type: integer
        x-nullable: false
      digits:
        format: uint64
        type: integer
        x-nullable: false
      min_length:
        format: uint64
        type: integer
        x-nullable: false
      not_used_since:
        format: uint64
        type: integer
        x-nullable: false
      special_characters:
        format: uint64
        type: integer
        x-nullable: false
      strength:
        enum:
        - any
        - weak
        - fair
        - strong
        - very_strong
        type: string
        x-nullable: false
    type: object
  PasswordSettings:
    properties:
      hashing_method:
        enum:
        - bcrypt
        - pbkdf2
        - argon2
        - sha
        type: string
        x-nullable: false
    type: object
  Pool:
    properties:
      authentication_mechanisms:
        $ref: '#/definitions/AuthenticationMechanisms'
      description:
        type: string
        x-nullable: false
      id:
        format: poolID
        type: string
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      name:
        type: string
        x-nullable: false
      otp_settings:
        $ref: '#/definitions/OtpSettings'
      password_policy:
        $ref: '#/definitions/PasswordPolicy'
      password_settings:
        $ref: '#/definitions/PasswordSettings'
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      preferred_authentication_mechanism:
        enum:
        - password
        - otp
        example: password
        type: string
        x-nullable: false
      public_registration_allowed:
        type: boolean
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - name
    type: object
  Pools:
    properties:
      pools:
        items:
          $ref: '#/definitions/Pool'
        type: array
        x-nullable: false
    type: object
  RequestActivation:
    properties:
      address:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
    type: object
  Schema:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      description:
        type: string
        x-nullable: false
      id:
        format: schemaID
        type: string
        x-nullable: false
      name:
        type: string
        x-nullable: false
      schema:
        $ref: '#/definitions/SupportedJSONSchema'
      system:
        type: boolean
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
    required:
    - tenant_id
    - name
    - schema
    type: object
  Schemas:
    properties:
      schemas:
        items:
          $ref: '#/definitions/Schema'
        type: array
        x-nullable: false
    type: object
  SupportedJSONSchema:
    properties:
      additionalProperties:
        type: boolean
        x-nullable: false
      allOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      anyOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      const:
        type: string
        x-nullable: false
      contains:
        $ref: '#/definitions/SupportedJSONSchema'
      dependentRequired:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
        x-nullable: false
      dependentSchemas:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      description:
        type: string
        x-nullable: false
      else:
        $ref: '#/definitions/SupportedJSONSchema'
      enum:
        items:
          type: string
        type: array
        x-nullable: false
      exclusiveMaximum:
        format: int64
        type: integer
        x-nullable: false
      exclusiveMinimum:
        format: int64
        type: integer
        x-nullable: false
      hidden:
        type: boolean
        x-nullable: false
      if:
        $ref: '#/definitions/SupportedJSONSchema'
      items:
        $ref: '#/definitions/SupportedJSONSchema'
      maxContains:
        format: int64
        type: integer
        x-nullable: false
      maxItems:
        description: arrays
        format: int64
        type: integer
        x-nullable: false
      maxLength:
        description: strings
        format: int64
        type: integer
        x-nullable: false
      maxProperties:
        description: objects
        format: int64
        type: integer
        x-nullable: false
      maximum:
        format: int64
        type: integer
        x-nullable: false
      minContains:
        format: int64
        type: integer
        x-nullable: false
      minItems:
        format: int64
        type: integer
        x-nullable: false
      minLength:
        format: int64
        type: integer
        x-nullable: false
      minProperties:
        format: int64
        type: integer
        x-nullable: false
      minimum:
        format: int64
        type: integer
        x-nullable: false
      multipleOf:
        description: numeric
        format: int64
        type: integer
        x-nullable: false
      not:
        $ref: '#/definitions/SupportedJSONSchema'
      oneOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      pattern:
        type: string
        x-nullable: false
      patternProperties:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      properties:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      propertyNames:
        $ref: '#/definitions/SupportedJSONSchema'
      required:
        items:
          type: string
        type: array
        x-nullable: false
      then:
        $ref: '#/definitions/SupportedJSONSchema'
      type:
        description: any
        type: string
        x-nullable: false
      uniqueItems:
        type: boolean
        x-nullable: false
    type: object
  UpdateUser:
    properties:
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        type: string
        x-nullable: false
    type: object
  UpdateUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      verified:
        example: false
        type: boolean
        x-nullable: false
    required:
    - address
    - status
    - verified
    type: object
  UserCredential:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      expires_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: userCredentialID
        type: string
        x-nullable: false
      payload:
        example:
          hashed_password: '###'
        type: object
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        enum:
        - password
        example: password
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_id:
        format: userID
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - user_id
    - type
    - payload
    - created_at
    - updated_at
    type: object
  UserID:
    properties:
      id:
        format: userID
        type: string
        x-nullable: false
    required:
    - id
    type: object
  UserIdentifier:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: userIdentifierID
        type: string
        x-nullable: false
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        example: email
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_id:
        format: userID
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - identifier
    - user_id
    - type
    - created_at
    - updated_at
    type: object
  UserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: verifiableAddressID
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        example: mobile
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_id:
        format: userID
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
      verified_at:
        format: date-time
        type: string
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - user_id
    - address
    - type
    - status
    - verified
    - created_at
    - updated_at
    type: object
  UserWithData:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      credentials:
        items:
          $ref: '#/definitions/UserCredential'
        type: array
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          $ref: '#/definitions/UserIdentifier'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        type: string
        x-nullable: false
      status_updated_at:
        format: date-time
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
      verifiable_addresses:
        items:
          $ref: '#/definitions/UserVerifiableAddress'
        type: array
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - status
    type: object
  Users:
    properties:
      users:
        items:
          $ref: '#/definitions/ExtendedUser'
        type: array
        x-nullable: false
    type: object
host: localhost:8443
info:
  description: Cloudentity Authorization Control Plane Identity Admin API
  title: Cloudentity Authorization Control Plane API
  version: latest
paths:
  /admin/pools:
    get:
      description: Lists pools.
      operationId: listPools
      responses:
        "200":
          description: Pools
          schema:
            $ref: '#/definitions/Pools'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List Pools
      tags:
      - Pools
    post:
      description: |-
        Creates a pool.
        If metadata or payload IDs are not provided,
        they default to `default_payload` and `default_metadata` system schemas.
      operationId: createPool
      parameters:
      - in: body
        name: Pool
        schema:
          $ref: '#/definitions/Pool'
      responses:
        "201":
          description: Pool
          schema:
            $ref: '#/definitions/Pool'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Pool
      tags:
      - Pools
  /admin/pools/{ipID}:
    delete:
      description: Deletes pool.
      operationId: deletePool
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      responses:
        "204":
          description: ' Pool has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete Pool
      tags:
      - Pools
    get:
      description: Gets pool.
      operationId: getPool
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/PoolResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Pool
      tags:
      - Pools
    put:
      description: Updates pool.
      operationId: updatePool
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: Pool
        schema:
          $ref: '#/definitions/Pool'
      responses:
        "200":
          description: Pool
          schema:
            $ref: '#/definitions/Pool'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Pool
      tags:
      - Pools
  /admin/pools/{ipID}/users:
    get:
      description: Lists users.
      operationId: listUsers
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - description: |-
          optional list users after given id
          AfterUserID
        in: query
        name: after_user_id
        type: string
      - description: |-
          optional list users before given id
          BeforeUserID
        in: query
        name: before_user_id
        type: string
      - description: |-
          optional sort clients by given field
          Sort
        in: query
        name: sort
        type: string
      - description: |-
          optional order clients by given direction
          Order
        in: query
        name: order
        type: string
      - default: 20
        description: |-
          optional limit results
          Limit
        format: int64
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: |-
          optional query filter
          query is in json format like {"user_key":"john"} - parameter must be url-encoded
          supported parameters
          `user_key` - limits user set to users that has identifier starting or ending with provided user_key or has verified address starting or ending with provided user_key or their ID is equal to provided user_key
          `payload` - limits user set to users with payload matches provided metadata - for simple values it does exact match, for arrays it does `contain`
          `metadata` - limits user set to users with metadata matches provided metadata - for simple values it does exact match, for arrays it does `contain`
          if multiple parameters provided it does logical AND between the results so users must match ALL parameters
        in: query
        name: query
        type: string
      responses:
        "200":
          description: Users
          schema:
            $ref: '#/definitions/Users'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List Users
      tags:
      - Users
    post:
      description: |-
        Creates a user with extended data. User can be created with any status and set of identifiers, addresses and credentials.
        If payload schema ID or metadata schema ID is not provided, they default to the value from Identity Pool.
        Payload and metadata must be valid against a proper schema.
        Returns an extended view on user entry (see Get User endpoint).
      operationId: createUser
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: NewUser
        schema:
          $ref: '#/definitions/NewUser'
      responses:
        "201":
          $ref: '#/responses/UserResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create User
      tags:
      - Users
  /admin/pools/{ipID}/users/{userID}:
    delete:
      description: Deletes user.
      operationId: deleteUser
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      responses:
        "204":
          description: ' User has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete User
      tags:
      - Users
    get:
      description: |-
        Returns an extended view on user entry.
        Besides the basic user entry, it returns all user identifiers, addresses, and credentials (blurred).
        User payload and metadata are also returned.
      operationId: getUser
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/UserResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get User
      tags:
      - Users
    put:
      description: |-
        Updates base set of user data like payload, metadata, schemas and status.
        Updates only provided fields - overrides them. Not provided fields are not removed/cleared.
        If payload or metadata is provided it must be valid against proper schema.
        If any schema is provided then the corresponding entry (payload or metadata) must be valid against it.
        Returns an extended view on user entry (see Get User endpoint).
      operationId: updateUser
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: UpdateUser
        schema:
          $ref: '#/definitions/UpdateUser'
      responses:
        "200":
          $ref: '#/responses/UserResponse'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update User
      tags:
      - Users
  /admin/pools/{ipID}/users/{userID}/activation/send:
    post:
      description: |-
        Sends an activation message to user to provided address.
        If an address is not provided then it takes user address as destination (if only one address exists)
        Fails if:
        address is not provided and user has no addresses or more than one
        address is someone's else verified address or identifier
        user status is not New.
        Invalidates previously generated OTPs for user activation.
        If `code_type_in_message` query parameter was set to link or not provided then a link will be generated for activation.
        Activation message is valid for specific period of time configured in Identity Pool.

        REFACTORED: input field name has been changed from `identifier` to `address`; field `identifier` stays for backward compatibility and overrides `address` if not empty
      operationId: sendActivationMessage
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: SendActivationMessage
        schema:
          $ref: '#/definitions/RequestActivation'
      - default: link
        description: Code type in message
        enum:
        - link
        - code
        in: query
        name: code_type_in_message
        type: string
      responses:
        "204":
          description: ' Activation message sent'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Send Activation Message
      tags:
      - Users
  /admin/pools/{ipID}/users/{userID}/addresses/add:
    post:
      description: 'Adds a verifiable address to the user account'
      operationId: addUserVerifiableAddress
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: NewAddress
        schema:
          $ref: '#/definitions/AddUserVerifiableAddress'
      responses:
        "200":
          $ref: '#/responses/AddressResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "412":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Add Verifiable Address
      tags:
      - Users
  /admin/pools/{ipID}/users/{userID}/addresses/remove:
    post:
      description: 'Deletes a verifiable address from the user account'
      operationId: deleteUserVerifiableAddress
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: Address
        schema:
          $ref: '#/definitions/DeleteUserVerifiableAddress'
      responses:
        "204":
          $ref: '#/responses/DeleteAddressResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "412":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete Verifiable Address
      tags:
      - Users
  /admin/pools/{ipID}/users/{userID}/addresses/update:
    post:
      description: 'Updates a verifiable address of the user account'
      operationId: updateUserVerifiableAddress
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: UpdateAddress
        schema:
          $ref: '#/definitions/UpdateUserVerifiableAddress'
      responses:
        "200":
          $ref: '#/responses/AddressResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "412":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Verifiable Address
      tags:
      - Users
  /admin/pools/{ipID}/users/{userID}/identifiers/add:
    post:
      description: 'Adds an identifier to the user account'
      operationId: addUserIdentifier
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: NewIdentifier
        schema:
          $ref: '#/definitions/AddUserIdentifier'
      responses:
        "200":
          $ref: '#/responses/IdentifierResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "412":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Add Identifier
      tags:
      - Users
  /admin/pools/{ipID}/users/{userID}/identifiers/remove:
    post:
      description: 'Deletes an identifier from the user account'
      operationId: deleteUserIdentifier
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: Identifier
        schema:
          $ref: '#/definitions/DeleteUserIdentifier'
      responses:
        "204":
          $ref: '#/responses/DeleteIdentifierResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "412":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete Identifier
      tags:
      - Users
  /admin/schemas:
    get:
      description: Lists schemas.
      operationId: listSchemas
      responses:
        "200":
          description: Schemas
          schema:
            $ref: '#/definitions/Schemas'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: List Schemas
      tags:
      - Schemas
    post:
      description: Creates schema. If the `system` flag is set then that schema cannot
        be later deleted or modified.
      operationId: createSchema
      parameters:
      - in: body
        name: Schema
        schema:
          $ref: '#/definitions/Schema'
      responses:
        "201":
          description: Schema
          schema:
            $ref: '#/definitions/Schema'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Create Schema
      tags:
      - Schemas
  /admin/schemas/{schID}:
    delete:
      description: Deletes schema. It is not possible to delete schema marked as `system`.
      operationId: deleteSchema
      parameters:
      - in: path
        name: schID
        required: true
        type: string
      responses:
        "204":
          description: ' Schema has been deleted'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Delete Schema
      tags:
      - Schemas
    get:
      description: Gets schema.
      operationId: getSchema
      parameters:
      - in: path
        name: schID
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/SchemaResponse'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Get Schema
      tags:
      - Schemas
    put:
      description: Updates schema. It is not possible to update schema marked as `system`.
      operationId: updateSchema
      parameters:
      - in: path
        name: schID
        required: true
        type: string
      - in: body
        name: Schema
        schema:
          $ref: '#/definitions/Schema'
      responses:
        "200":
          description: Schema
          schema:
            $ref: '#/definitions/Schema'
        "400":
          $ref: '#/responses/httpError'
        "401":
          $ref: '#/responses/httpError'
        "403":
          $ref: '#/responses/httpError'
        "404":
          $ref: '#/responses/httpError'
        "409":
          $ref: '#/responses/httpError'
        "422":
          $ref: '#/responses/httpError'
        "429":
          $ref: '#/responses/httpError'
      security:
      - admin: []
      summary: Update Schema
      tags:
      - Schemas
produces:
- application/json
responses:
  AddressResponse:
    description: User
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/UserVerifiableAddress'
  ChangePasswordResponse:
    description: Password has been changed
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  CodeIDResponse:
    description: User
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/CodeID'
  CompleteResetPasswordResponse:
    description: Password reset
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  ConfirmResetPasswordResponse:
    description: Password reset
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  DeleteAddressResponse:
    description: Deletes a verifiable address from the user account
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  DeleteIdentifierResponse:
    description: Deletes an identifier from the user account
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  GenerateCodeResponse:
    description: User
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/Codes'
  IdentifierResponse:
    description: User
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/UserIdentifier'
  PoolResponse:
    description: Identity Pool
    schema:
      $ref: '#/definitions/Pool'
  PoolsResponse:
    description: Identity Pools
    schema:
      $ref: '#/definitions/Pools'
  RequestResetPasswordResponse:
    description: Request accepted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  SchemaResponse:
    description: Identity Schema
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/Schema'
  SchemasResponse:
    description: Identity Schemas
    schema:
      $ref: '#/definitions/Schemas'
  SelfSendActivationMessageResponse:
    description: Activation message sent
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  SystemDeleteUserResponse:
    description: User has been deleted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  SystemUsersResponse:
    description: Identity Users
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/Users'
  UserIDResponse:
    description: User
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/UserID'
  UserResponse:
    description: User
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/UserWithData'
  UsersResponse:
    description: Identity Users
    schema:
      $ref: '#/definitions/Users'
  httpError:
    description: HttpError
    schema:
      $ref: '#/definitions/Error'
schemes:
- https
securityDefinitions:
  admin:
    authorizationUrl: /default/admin/oauth2/authorize
    flow: accessCode
    tokenUrl: /default/admin/oauth2/token
    type: oauth2
swagger: "2.0"
