basePath: /default/default/identity
consumes:
- application/json
definitions:
  AuthenticationMechanisms:
    items:
      enum:
      - totp
      - password
      - otp
      - webauthn
      - arculix
      type: string
    type: array
  ChangePassword:
    properties:
      new_password:
        type: string
        x-nullable: false
      old_password:
        type: string
        x-nullable: false
    required:
    - old_password
    - new_password
    type: object
  ChangeTotpSecret:
    properties:
      new_totp_secret:
        type: string
        x-nullable: false
      totp:
        type: string
        x-nullable: false
    required:
    - new_totp_secret
    - totp
    type: object
  CompleteAddressVerification:
    properties:
      address:
        example: sample@email.com/+48123456789
        type: string
        x-nullable: false
      code:
        type: string
        x-nullable: false
    required:
    - address
    - code
    type: object
  Error:
    description: HTTP error response
    properties:
      details:
        type: object
        x-nullable: false
      error:
        type: string
        x-nullable: false
      status_code:
        format: int64
        type: integer
        x-nullable: false
    type: object
  FederatedAccount:
    properties:
      federated_idp_id:
        format: idpID
        type: string
        x-nullable: false
      federated_idp_method:
        type: string
        x-nullable: false
      federated_idp_name:
        type: string
        x-nullable: false
      federated_sub:
        type: string
        x-nullable: false
      identifier_id:
        type: string
        x-nullable: false
      workspace_id:
        type: string
        x-nullable: false
    type: object
  ListUserMFASessions:
    properties:
      sessions:
        items:
          $ref: '#/definitions/UserMFASession'
        type: array
        x-nullable: false
    type: object
  ResetPasswordConfirm:
    properties:
      code:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      new_password:
        type: string
        x-nullable: false
    required:
    - code
    - new_password
    type: object
  SelfUserCredentials:
    properties:
      expires_after:
        format: duration
        type: string
        x-nullable: false
      expires_at:
        format: date-time
        type: string
        x-nullable: false
      state:
        enum:
        - valid
        - must_be_reset
        - must_be_changed
        type: string
        x-nullable: false
      type:
        enum:
        - password
        - webauthn
        - totp
        example: password
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
    required:
    - type
    - updated_at
    type: object
  SelfUserIdentifier:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        - federated
        example: email
        type: string
        x-nullable: false
    required:
    - identifier
    - type
    - created_at
    type: object
  SelfUserUpdate:
    properties:
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
    type: object
  SelfUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        example: mobile
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
      verified_at:
        format: date-time
        type: string
        x-nullable: false
    required:
    - address
    - type
    - status
    - verified
    - created_at
    - updated_at
    type: object
  SelfUserWithData:
    properties:
      business_metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          $ref: '#/definitions/SelfUserIdentifier'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      verifiable_addresses:
        items:
          $ref: '#/definitions/SelfUserVerifiableAddress'
        type: array
        x-nullable: false
    type: object
  SelfUserWithDataV2:
    properties:
      authentication_mechanisms:
        $ref: '#/definitions/AuthenticationMechanisms'
      business_metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      credentials:
        items:
          $ref: '#/definitions/SelfUserCredentials'
        type: array
        x-nullable: false
      federated_accounts:
        items:
          $ref: '#/definitions/FederatedAccount'
        type: array
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          $ref: '#/definitions/SelfUserIdentifier'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema:
        $ref: '#/definitions/SupportedJSONSchema'
      preferred_authentication_mechanism:
        enum:
        - totp
        - password
        - otp
        - webauthn
        - arculix
        example: password
        type: string
        x-nullable: false
      second_factor_authentication_mechanisms:
        $ref: '#/definitions/AuthenticationMechanisms'
      second_factor_preferred_authentication_mechanism:
        enum:
        - totp
        - password
        - otp
        - webauthn
        - arculix
        example: password
        type: string
        x-nullable: false
      verifiable_addresses:
        items:
          $ref: '#/definitions/SelfUserVerifiableAddress'
        type: array
        x-nullable: false
    type: object
  SetPassword:
    properties:
      new_password:
        type: string
        x-nullable: false
    required:
    - new_password
    type: object
  SetTotpSecret:
    properties:
      new_totp_secret:
        type: string
        x-nullable: false
    required:
    - new_totp_secret
    type: object
  SupportedJSONSchema:
    properties:
      additionalProperties:
        type: boolean
        x-nullable: false
      allOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      anyOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      const:
        type: string
        x-nullable: false
      contains:
        $ref: '#/definitions/SupportedJSONSchema'
      dependentRequired:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
        x-nullable: false
      dependentSchemas:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      description:
        type: string
        x-nullable: false
      else:
        $ref: '#/definitions/SupportedJSONSchema'
      enum:
        items:
          type: string
        type: array
        x-nullable: false
      exclusiveMaximum:
        format: int64
        type: integer
        x-nullable: false
      exclusiveMinimum:
        format: int64
        type: integer
        x-nullable: false
      hidden:
        type: boolean
        x-nullable: false
      if:
        $ref: '#/definitions/SupportedJSONSchema'
      items:
        $ref: '#/definitions/SupportedJSONSchema'
      maxContains:
        format: int64
        type: integer
        x-nullable: false
      maxItems:
        description: arrays
        format: int64
        type: integer
        x-nullable: false
      maxLength:
        description: strings
        format: int64
        type: integer
        x-nullable: false
      maxProperties:
        description: objects
        format: int64
        type: integer
        x-nullable: false
      maximum:
        format: int64
        type: integer
        x-nullable: false
      minContains:
        format: int64
        type: integer
        x-nullable: false
      minItems:
        format: int64
        type: integer
        x-nullable: false
      minLength:
        format: int64
        type: integer
        x-nullable: false
      minProperties:
        format: int64
        type: integer
        x-nullable: false
      minimum:
        format: int64
        type: integer
        x-nullable: false
      multipleOf:
        description: numeric
        format: int64
        type: integer
        x-nullable: false
      not:
        $ref: '#/definitions/SupportedJSONSchema'
      oneOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      pattern:
        type: string
        x-nullable: false
      patternProperties:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      properties:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      propertyNames:
        $ref: '#/definitions/SupportedJSONSchema'
      required:
        items:
          type: string
        type: array
        x-nullable: false
      then:
        $ref: '#/definitions/SupportedJSONSchema'
      title:
        type: string
        x-nullable: false
      type:
        description: any
        type: string
        x-nullable: false
      uniqueItems:
        type: boolean
        x-nullable: false
    type: object
  UserMFASession:
    properties:
      id:
        description: Session id
        type: string
        x-nullable: false
      ip_address:
        description: IP address of the user who created the session
        type: string
        x-nullable: false
      issue_time:
        description: Time when the session was issued
        format: date-time
        type: string
        x-nullable: false
      user_agent:
        description: User agent of the user who created the session
        type: string
        x-nullable: false
    type: object
host: localhost:8443
info:
  description: |-
    Cloudentity Identity API

    It is important for clients to note that most APIs return the `ETag` response header. When executing API flows which modify and retrieve a given resource, clients are expected to follow `ETag` protocols by:
    1. Caching the value of an `ETag` returned by the server when retrieving the resource, and
    2. Supplying the `If-Match` header with the `ETag` value when attempting to modify the resource.

    A `412 Precondition Failed` response will be returned if a write request is delayed after a sufficient length of time while a previous write request was being processed.

    When interacting with APIs, make sure to always supply the If-Match header from the previous ETag header response for full consistency.
    Otherwise, the APIs may use the cached user data, and not return what you expect!
  title: Cloudentity API
  version: latest
paths:
  /public/pools/{ipID}/reset-password/confirm:
    post:
      description: |-
        Resets password for user if the provided OTP is valid. It's the second and final step of the
        flow to reset the password.
        Either user identifier or extended code must be provided.
        Endpoint returns generic `401` regardless of the reason of failure to prevent email/mobile enumeration.
        After a successful password reset, OTP gets invalidated, so it cannot be reused.
        Endpoint is protected by Brute Force mechanism.
      operationId: resetPasswordConfirm
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: ResetPasswordConfirm
        schema:
          $ref: '#/definitions/ResetPasswordConfirm'
      responses:
        "204":
          $ref: '#/responses/ResetPasswordConfirmedResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      summary: Confirm Reset Password
      tags:
      - Users
  /self/address-verification/complete:
    post:
      description: |-
        Completes unverified address verification by checking if code is valid or not.
        Both address and code must be provided.
        Fails if address is not user's address or is user's verified or is someone's verified address.
        If the OTP is valid it is removed and a successful response is returned.
        Endpoint is protected by Brute Force mechanism.
      operationId: completeAddressVerification
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: CompleteAddressVerification
        schema:
          $ref: '#/definitions/CompleteAddressVerification'
      responses:
        "204":
          $ref: '#/responses/AddressVerificationCompletedResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      summary: Complete Address Verification
      tags:
      - OTP
  /self/change-password:
    post:
      description: Changes user password if provided password matches current user
        password.
      operationId: changePassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: ChangePassword
        schema:
          $ref: '#/definitions/ChangePassword'
      responses:
        "204":
          $ref: '#/responses/ChangePasswordResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self: []
      summary: Change Password
      tags:
      - Users
  /self/me:
    get:
      deprecated: true
      description: |-
        Returns base view on user entry. Besides basic user entry it returns all user identifiers and addresses.
        Also returns user metadata (only fields not marked as hidden) and payload.
      operationId: getUserProfile
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      responses:
        "200":
          $ref: '#/responses/GetProfileResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self: []
      summary: Self Get User Profile
      tags:
      - Users
    put:
      deprecated: true
      description: |-
        Updates user payload.
        Payload must be valid against schema defined in user entry.

        Returns base view on user entry (see Self Get User Profile endpoint).
      operationId: updateUserProfile
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: UpdateUser
        schema:
          $ref: '#/definitions/SelfUserUpdate'
      responses:
        "200":
          $ref: '#/responses/GetProfileResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self: []
      summary: Self Update User Profile
      tags:
      - Users
  /v2/self/change-password:
    post:
      description: Changes user password if provided password matches current user
        password.
      operationId: changePasswordV2
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: ChangePassword
        schema:
          $ref: '#/definitions/ChangePassword'
      responses:
        "204":
          $ref: '#/responses/ChangePasswordResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Change Password
      tags:
      - Users
  /v2/self/change-totp-secret:
    post:
      description: Changes user totp secret if provided totp code is valid.
      operationId: changeTotpSecret
      parameters:
      - in: body
        name: ChangeTotpSecret
        schema:
          $ref: '#/definitions/ChangeTotpSecret'
      responses:
        "204":
          description: ' Totp secret changed successfully'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Change Totp Secret
      tags:
      - Users
  /v2/self/me:
    get:
      description: |-
        Returns base view on user entry. Besides basic user entry it returns all user identifiers and addresses.
        Also returns user metadata (only fields not marked as hidden) and payload.
      operationId: getUserProfileV2
      responses:
        "200":
          $ref: '#/responses/GetProfileResponseV2'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - view_ss_profile
      summary: Self Get User Profile
      tags:
      - Users
    put:
      description: |-
        Updates user payload.
        Payload must be valid against schema defined in user entry.

        Returns base view on user entry (see Self Get User Profile endpoint).
      operationId: updateUserProfileV2
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: UpdateUser
        schema:
          $ref: '#/definitions/SelfUserUpdate'
      responses:
        "200":
          $ref: '#/responses/GetProfileResponseV2'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Self Update User Profile
      tags:
      - Users
  /v2/self/mfa/sessions:
    get:
      description: user MFA sessions.
      operationId: listUserMFASessions
      responses:
        "200":
          $ref: '#/responses/ListUserMFASessions'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - view_ss_profile
      summary: Lists user MFA sessions.
      tags:
      - mfa
  /v2/self/mfa/sessions/{mfaSessionID}:
    delete:
      operationId: deleteMFASession
      parameters:
      - default: default
        description: MFA session id
        in: path
        name: mfaSessionID
        required: true
        type: string
      responses:
        "204":
          description: ' MFA session has been deleted'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Delete user MFA session
      tags:
      - mfa
  /v2/self/set-password:
    post:
      description: |-
        Set a password for a user who doesn't have one yet

        This API requires authentication to happen within the last 5 minutes.
      operationId: setPassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: SetPassword
        schema:
          $ref: '#/definitions/SetPassword'
      responses:
        "204":
          $ref: '#/responses/SetPasswordResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Set Password
      tags:
      - Users
  /v2/self/set-totp-secret:
    post:
      description: |-
        Set totp secret for a user who doesn't have one yet

        This API requires authentication to happen within the last 5 minutes.
      operationId: setTotpSecret
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: SetTotpSecret
        schema:
          $ref: '#/definitions/SetTotpSecret'
      responses:
        "204":
          description: ' Totp secret set successfully'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Set Totp Secret
      tags:
      - Users
produces:
- application/json
responses:
  AddressVerificationCompletedResponse:
    description: Address verification completed
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  ChangePasswordResponse:
    description: Password has been changed
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  GetProfileResponse:
    description: User profile data
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/SelfUserWithData'
  GetProfileResponseV2:
    description: User profile data
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/SelfUserWithDataV2'
  ListUserMFASessions:
    description: User MFA sessions
    schema:
      $ref: '#/definitions/ListUserMFASessions'
  ResetPasswordConfirmedResponse:
    description: Reset password confirmed
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  SetPasswordResponse:
    description: Password has been set
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  badRequestHTTPError:
    description: Bad request
    schema:
      $ref: '#/definitions/Error'
  conflictHTTPError:
    description: Conflict
    schema:
      $ref: '#/definitions/Error'
  forbiddenHTTPError:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
  internalServerErrorHTTPError:
    description: Internal server error
    schema:
      $ref: '#/definitions/Error'
  methodNotAllowedHTTPError:
    description: Method not allowed
    schema:
      $ref: '#/definitions/Error'
  notFoundHTTPError:
    description: Not found
    schema:
      $ref: '#/definitions/Error'
  payloadTooLargeHTTPError:
    description: Payload too large
    schema:
      $ref: '#/definitions/Error'
  preconditionFailedHTTPError:
    description: Precondition failed
    schema:
      $ref: '#/definitions/Error'
  tooManyRequestsHTTPError:
    description: Too many requests
    schema:
      $ref: '#/definitions/Error'
  unauthorizedHTTPError:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  unprocessableEntityHTTPError:
    description: Unprocessable entity
    schema:
      $ref: '#/definitions/Error'
schemes:
- https
securityDefinitions:
  self:
    authorizationUrl: /default/default/oauth2/authorize
    flow: accessCode
    scopes:
      manage_ss_profile: manage_ss_profile
      view_ss_profile: view_ss_profile
    tokenUrl: /default/default/oauth2/token
    type: oauth2
swagger: "2.0"
