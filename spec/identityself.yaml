basePath: /default/default/identity
consumes:
- application/json
definitions:
  AuthenticationExtensions:
    additionalProperties:
      type: object
    description: 'Specification: §5.7.1. Authentication Extensions Client Inputs (https://www.w3.org/TR/webauthn/#iface-authentication-extensions-client-inputs)'
    title: |-
      AuthenticationExtensions represents the AuthenticationExtensionsClientInputs IDL. This member contains additional
      parameters requesting additional processing by the client and authenticator.
    type: object
  AuthenticationExtensionsClientOutputs:
    additionalProperties:
      type: object
    type: object
  AuthenticationMechanisms:
    items:
      enum:
      - totp
      - password
      - otp
      - email_otp
      - sms_otp
      - webauthn
      type: string
    type: array
  Authenticator:
    properties:
      AAGUID:
        description: |-
          The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
          identifier of the authenticator model being sought.
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      attachment:
        $ref: '#/definitions/AuthenticatorAttachment'
      cloneWarning:
        description: |-
          CloneWarning - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
          credential private key may exist and are being used in parallel. Relying Parties should incorporate
          this information into their risk scoring. Whether the Relying Party updates the stored signature
          counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
        type: boolean
        x-nullable: false
      signCount:
        description: |-
          SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
          with the new signCount value returned in the assertion’s authenticator data. If this new
          signCount value is less than or equal to the stored value, a cloned authenticator may
          exist, or the authenticator may be malfunctioning.
        format: uint32
        type: integer
        x-nullable: false
    type: object
  AuthenticatorAttachment:
    description: |-
      This enumeration’s values describe authenticators' attachment modalities. Relying Parties use this to express a
      preferred authenticator attachment modality when calling navigator.credentials.create() to create a credential.

      If this member is present, eligible authenticators are filtered to only authenticators attached with the specified
      §5.4.5 Authenticator Attachment Enumeration (enum AuthenticatorAttachment). The value SHOULD be a member of
      AuthenticatorAttachment but client platforms MUST ignore unknown values, treating an unknown value as if the member
      does not exist.

      Specification: §5.4.4. Authenticator Selection Criteria (https://www.w3.org/TR/webauthn/#dom-authenticatorselectioncriteria-authenticatorattachment)

      Specification: §5.4.5. Authenticator Attachment Enumeration (https://www.w3.org/TR/webauthn/#enum-attachment)
    title: |-
      AuthenticatorAttachment represents the IDL enum of the same name, and is used as part of the Authenticator Selection
      Criteria.
    type: string
  AuthenticatorAttestationResponse:
    description: 'See: https://www.w3.org/TR/webauthn/#typedefdef-publickeycredentialjson'
    properties:
      attestationObject:
        $ref: '#/definitions/URLEncodedBase64'
      authenticatorData:
        $ref: '#/definitions/URLEncodedBase64'
      clientDataJSON:
        $ref: '#/definitions/URLEncodedBase64'
      publicKey:
        $ref: '#/definitions/URLEncodedBase64'
      publicKeyAlgorithm:
        format: int64
        type: integer
        x-nullable: false
      transports:
        items:
          type: string
        type: array
        x-nullable: false
    title: |-
      AuthenticatorAttestationResponse is the initial unpacked 'response' object received by the relying party. This
      contains the clientDataJSON object, which will be marshalled into CollectedClientData, and the 'attestationObject',
      which contains information about the authenticator, and the newly minted public key credential. The information in
      both objects are used to verify the authenticity of the ceremony and new credential.
    type: object
  AuthenticatorTransport:
    description: |-
      Authenticators may implement various transports for communicating with clients. This enumeration defines hints as to
      how clients might communicate with a particular authenticator in order to obtain an assertion for a specific
      credential. Note that these hints represent the WebAuthn Relying Party's best belief as to how an authenticator may
      be reached. A Relying Party will typically learn of the supported transports for a public key credential via
      getTransports().

      Specification: §5.8.4. Authenticator Transport Enumeration (https://www.w3.org/TR/webauthn/#enumdef-authenticatortransport)
    title: AuthenticatorTransport represents the IDL enum with the same name.
    type: string
  ChangePassword:
    properties:
      new_password:
        type: string
        x-nullable: false
      old_password:
        type: string
        x-nullable: false
    required:
    - old_password
    - new_password
    type: object
  ChangeTotpSecret:
    properties:
      new_totp_secret:
        type: string
        x-nullable: false
      totp:
        type: string
        x-nullable: false
    required:
    - new_totp_secret
    - totp
    type: object
  CompleteAddressVerification:
    properties:
      address:
        example: sample@email.com/+48123456789
        type: string
        x-nullable: false
      code:
        type: string
        x-nullable: false
    required:
    - address
    - code
    type: object
  Credential:
    description: 'See: §4. Terminology: Credential Record (https://www.w3.org/TR/webauthn-3/#credential-record)'
    properties:
      attestation:
        $ref: '#/definitions/CredentialAttestation'
      attestationType:
        description: The attestation format used (if any) by the authenticator when
          creating the credential.
        type: string
        x-nullable: false
      authenticator:
        $ref: '#/definitions/Authenticator'
      flags:
        $ref: '#/definitions/CredentialFlags'
      id:
        description: The Credential ID of the public key credential source. Described
          by the Credential Record 'id' field.
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      publicKey:
        description: The credential public key of the public key credential source.
          Described by the Credential Record 'publicKey field.
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      transport:
        description: The transport types the authenticator supports.
        items:
          $ref: '#/definitions/AuthenticatorTransport'
        type: array
        x-nullable: false
    title: |-
      Credential contains all needed information about a WebAuthn credential for storage. This struct is effectively the
      Credential Record as described in the specification.
    type: object
  CredentialAssertion:
    properties:
      publicKey:
        $ref: '#/definitions/PublicKeyCredentialRequestOptions'
    type: object
  CredentialAttestation:
    properties:
      authenticatorData:
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      clientDataHash:
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      clientDataJSON:
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      object:
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      publicKeyAlgorithm:
        format: int64
        type: integer
        x-nullable: false
    type: object
  CredentialCreationResponse:
    properties:
      authenticatorAttachment:
        type: string
        x-nullable: false
      clientExtensionResults:
        $ref: '#/definitions/AuthenticationExtensionsClientOutputs'
      id:
        description: |-
          ID is The credential’s identifier. The requirements for the
          identifier are distinct for each type of credential. It might
          represent a username for username/password tuples, for example.
        type: string
        x-nullable: false
      rawId:
        $ref: '#/definitions/URLEncodedBase64'
      response:
        $ref: '#/definitions/AuthenticatorAttestationResponse'
      type:
        description: |-
          Type is the value of the object’s interface object's [[type]] slot,
          which specifies the credential type represented by this object.
          This should be type "public-key" for Webauthn credentials.
        type: string
        x-nullable: false
    type: object
  CredentialDescriptor:
    description: |-
      This dictionary contains the attributes that are specified by a caller when referring to a public key credential as
      an input parameter to the create() or get() methods. It mirrors the fields of the PublicKeyCredential object returned
      by the latter methods.

      Specification: §5.10.3. Credential Descriptor (https://www.w3.org/TR/webauthn/#credential-dictionary)
    properties:
      id:
        $ref: '#/definitions/URLEncodedBase64'
      transports:
        description: The authenticator transports that can be used.
        items:
          $ref: '#/definitions/AuthenticatorTransport'
        type: array
        x-nullable: false
      type:
        $ref: '#/definitions/CredentialType'
    title: CredentialDescriptor represents the PublicKeyCredentialDescriptor IDL.
    type: object
  CredentialFlags:
    properties:
      backupEligible:
        description: Flag BE indicates the credential is able to be backed up and/or
          sync'd between devices. This should NEVER change.
        type: boolean
        x-nullable: false
      backupState:
        description: |-
          Flag BS indicates the credential has been backed up and/or sync'd. This value can change but it's recommended
          that RP's keep track of this value.
        type: boolean
        x-nullable: false
      userPresent:
        description: Flag UP indicates the users presence.
        type: boolean
        x-nullable: false
      userVerified:
        description: Flag UV indicates the user performed verification.
        type: boolean
        x-nullable: false
    type: object
  CredentialType:
    description: |-
      This enumeration defines the valid credential types. It is an extension point; values can be added to it in the
      future, as more credential types are defined. The values of this enumeration are used for versioning the
      Authentication Assertion and attestation structures according to the type of the authenticator.

      Currently one credential type is defined, namely "public-key".

      Specification: §5.8.2. Credential Type Enumeration (https://www.w3.org/TR/webauthn/#enumdef-publickeycredentialtype)

      Specification: §5.8.3. Credential Descriptor (https://www.w3.org/TR/webauthn/#dictionary-credential-descriptor)
    title: CredentialType represents the PublicKeyCredentialType IDL and is used with
      the CredentialDescriptor IDL.
    type: string
  Error:
    description: HTTP error response
    properties:
      details:
        type: object
        x-nullable: false
      error:
        type: string
        x-nullable: false
      error_code:
        type: string
        x-nullable: false
      status_code:
        format: int64
        type: integer
        x-nullable: false
    type: object
  FederatedAccount:
    properties:
      federated_idp_id:
        format: idpID
        type: string
        x-nullable: false
      federated_idp_method:
        type: string
        x-nullable: false
      federated_idp_name:
        type: string
        x-nullable: false
      federated_sub:
        type: string
        x-nullable: false
      identifier_id:
        type: string
        x-nullable: false
      workspace_id:
        type: string
        x-nullable: false
    type: object
  ListUserMFASessions:
    properties:
      sessions:
        items:
          $ref: '#/definitions/UserMFASession'
        type: array
        x-nullable: false
    type: object
  NameWebAuthnKey:
    properties:
      name:
        type: string
        x-nullable: false
    required:
    - name
    type: object
  PublicKeyCredentialHints:
    type: string
  PublicKeyCredentialRequestOptions:
    description: |-
      WebAuthn Level 3: hints.

      Specification: §5.5. Options for Assertion Generation (https://www.w3.org/TR/webauthn/#dictionary-assertion-options)
    properties:
      allowCredentials:
        items:
          $ref: '#/definitions/CredentialDescriptor'
        type: array
        x-nullable: false
      challenge:
        $ref: '#/definitions/URLEncodedBase64'
      extensions:
        $ref: '#/definitions/AuthenticationExtensions'
      hints:
        items:
          $ref: '#/definitions/PublicKeyCredentialHints'
        type: array
        x-nullable: false
      rpId:
        type: string
        x-nullable: false
      timeout:
        format: int64
        type: integer
        x-nullable: false
      userVerification:
        $ref: '#/definitions/UserVerificationRequirement'
    title: |-
      The PublicKeyCredentialRequestOptions dictionary supplies get() with the data it needs to generate an assertion.
      Its challenge member MUST be present, while its other members are OPTIONAL.
    type: object
  ResetPasswordConfirm:
    properties:
      code:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      new_password:
        type: string
        x-nullable: false
    required:
    - code
    - new_password
    type: object
  SelfUserCredentials:
    properties:
      expires_after:
        format: duration
        type: string
        x-nullable: false
      expires_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: userCredentialID
        type: string
        x-nullable: false
      name:
        description: some credentials might have name - like passkeys
        type: string
        x-nullable: false
      state:
        enum:
        - valid
        - must_be_reset
        - must_be_changed
        type: string
        x-nullable: false
      type:
        enum:
        - password
        - webauthn
        - totp
        example: password
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
    required:
    - type
    - updated_at
    type: object
  SelfUserIdentifier:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        - federated
        example: email
        type: string
        x-nullable: false
    required:
    - identifier
    - type
    - created_at
    type: object
  SelfUserUpdate:
    properties:
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
    type: object
  SelfUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        example: mobile
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
      verified_at:
        format: date-time
        type: string
        x-nullable: false
    required:
    - address
    - type
    - status
    - verified
    - created_at
    - updated_at
    type: object
  SelfUserWithData:
    properties:
      business_metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          $ref: '#/definitions/SelfUserIdentifier'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      verifiable_addresses:
        items:
          $ref: '#/definitions/SelfUserVerifiableAddress'
        type: array
        x-nullable: false
    type: object
  SelfUserWithDataV2:
    properties:
      allowed_authentication_mechanisms:
        description: allowed authentication mechanisms that user can use
        items:
          enum:
          - totp
          - password
          - otp
          - email_otp
          - sms_otp
          - webauthn
          type: string
        type: array
        x-nullable: false
      authentication_mechanisms:
        $ref: '#/definitions/AuthenticationMechanisms'
      business_metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      credentials:
        items:
          $ref: '#/definitions/SelfUserCredentials'
        type: array
        x-nullable: false
      federated_accounts:
        items:
          $ref: '#/definitions/FederatedAccount'
        type: array
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          $ref: '#/definitions/SelfUserIdentifier'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema:
        $ref: '#/definitions/SupportedJSONSchema'
      preferred_authentication_mechanism:
        enum:
        - totp
        - password
        - otp
        - email_otp
        - sms_otp
        - webauthn
        example: password
        type: string
        x-nullable: false
      second_factor_authentication_mechanisms:
        $ref: '#/definitions/AuthenticationMechanisms'
      second_factor_preferred_authentication_mechanism:
        enum:
        - totp
        - password
        - otp
        - email_otp
        - sms_otp
        - webauthn
        example: password
        type: string
        x-nullable: false
      verifiable_addresses:
        items:
          $ref: '#/definitions/SelfUserVerifiableAddress'
        type: array
        x-nullable: false
    type: object
  SetPassword:
    properties:
      new_password:
        type: string
        x-nullable: false
    required:
    - new_password
    type: object
  SetTotpSecret:
    properties:
      new_totp_secret:
        type: string
        x-nullable: false
    required:
    - new_totp_secret
    type: object
  SetWebAuthn:
    properties:
      new_webauthn:
        $ref: '#/definitions/Credential'
    required:
    - new_webauthn
    type: object
  SupportedJSONSchema:
    properties:
      additionalProperties:
        type: boolean
        x-nullable: false
      allOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      anyOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      const:
        type: string
        x-nullable: false
      contains:
        $ref: '#/definitions/SupportedJSONSchema'
      dependentRequired:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
        x-nullable: false
      dependentSchemas:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      description:
        type: string
        x-nullable: false
      else:
        $ref: '#/definitions/SupportedJSONSchema'
      enum:
        items:
          type: string
        type: array
        x-nullable: false
      exclusiveMaximum:
        format: int64
        type: integer
        x-nullable: false
      exclusiveMinimum:
        format: int64
        type: integer
        x-nullable: false
      hidden:
        type: boolean
        x-nullable: false
      if:
        $ref: '#/definitions/SupportedJSONSchema'
      items:
        $ref: '#/definitions/SupportedJSONSchema'
      maxContains:
        format: int64
        type: integer
        x-nullable: false
      maxItems:
        description: arrays
        format: int64
        type: integer
        x-nullable: false
      maxLength:
        description: strings
        format: int64
        type: integer
        x-nullable: false
      maxProperties:
        description: objects
        format: int64
        type: integer
        x-nullable: false
      maximum:
        format: int64
        type: integer
        x-nullable: false
      minContains:
        format: int64
        type: integer
        x-nullable: false
      minItems:
        format: int64
        type: integer
        x-nullable: false
      minLength:
        format: int64
        type: integer
        x-nullable: false
      minProperties:
        format: int64
        type: integer
        x-nullable: false
      minimum:
        format: int64
        type: integer
        x-nullable: false
      multipleOf:
        description: numeric
        format: int64
        type: integer
        x-nullable: false
      not:
        $ref: '#/definitions/SupportedJSONSchema'
      oneOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      pattern:
        type: string
        x-nullable: false
      patternProperties:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      properties:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      propertyNames:
        $ref: '#/definitions/SupportedJSONSchema'
      required:
        items:
          type: string
        type: array
        x-nullable: false
      then:
        $ref: '#/definitions/SupportedJSONSchema'
      title:
        type: string
        x-nullable: false
      type:
        description: any
        type: string
        x-nullable: false
      uniqueItems:
        type: boolean
        x-nullable: false
    type: object
  URLEncodedBase64:
    description: |-
      When fields of this type are unmarshalled from JSON, the data is base64
      decoded into a byte slice.
    items:
      format: uint8
      type: integer
    title: URLEncodedBase64 represents a byte slice holding URL-encoded base64 data.
    type: array
  UserMFASession:
    properties:
      id:
        description: Session id
        type: string
        x-nullable: false
      ip_address:
        description: IP address of the user who created the session
        type: string
        x-nullable: false
      issue_time:
        description: Time when the session was issued
        format: date-time
        type: string
        x-nullable: false
      user_agent:
        description: User agent of the user who created the session
        type: string
        x-nullable: false
    type: object
  UserVerificationRequirement:
    description: |-
      A WebAuthn Relying Party may require user verification for some of its operations but not for others,
      and may use this type to express its needs.

      Specification: §5.8.6. User Verification Requirement Enumeration (https://www.w3.org/TR/webauthn/#enum-userVerificationRequirement)
    title: UserVerificationRequirement is a representation of the UserVerificationRequirement
      IDL enum.
    type: string
  WebAuthnCredentials:
    properties:
      credentials:
        items:
          $ref: '#/definitions/Credential'
        type: array
        x-nullable: false
    type: object
host: localhost:8443
info:
  description: |-
    Cloudentity Identity API

    It is important for clients to note that most APIs return the `ETag` response header. When executing API flows which modify and retrieve a given resource, clients are expected to follow `ETag` protocols by:
    1. Caching the value of an `ETag` returned by the server when retrieving the resource, and
    2. Supplying the `If-Match` header with the `ETag` value when attempting to modify the resource.

    A `412 Precondition Failed` response will be returned if a write request is delayed after a sufficient length of time while a previous write request was being processed.

    When interacting with APIs, make sure to always supply the If-Match header from the previous ETag header response for full consistency.
    Otherwise, the APIs may use the cached user data, and not return what you expect!

    The POST APIs support idempotency for safely retrying requests without accidentally performing the same operation twice.

    To use idempotent requests:

    1. Generate a unique idempotency key (32-255 characters long).
    2. Include the key in the X-Idempotency-Key header of your POST request.
    3. Retry failed requests with the same key within 1 minute.

    Responses for replayed requests will include the X-Idempotent-Replayed: true header.
  title: Cloudentity API
  version: latest
paths:
  /public/pools/{ipID}/reset-password/confirm:
    post:
      description: |-
        Resets password for user if the provided OTP is valid. It's the second and final step of the
        flow to reset the password.
        Either user identifier or extended code must be provided.
        Endpoint returns generic `401` regardless of the reason of failure to prevent email/mobile enumeration.
        After a successful password reset, OTP gets invalidated, so it cannot be reused.
        Endpoint is protected by Brute Force mechanism.
        Endpoint returns `403` if reset credentials is disabled in pool settings.

        This endpoint requires special privileges and is disabled by default.
      operationId: resetPasswordConfirm
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: ResetPasswordConfirm
        schema:
          $ref: '#/definitions/ResetPasswordConfirm'
      responses:
        "204":
          $ref: '#/responses/ResetPasswordConfirmedResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      summary: Confirm Reset Password
      tags:
      - Users
  /self/address-verification/complete:
    post:
      description: |-
        Completes unverified address verification by checking if code is valid or not.
        Both address and code must be provided.
        Fails if address is not user's address or is user's verified or is someone's verified address.
        If the OTP is valid it is removed and a successful response is returned.
        Endpoint is protected by Brute Force mechanism.

        This endpoint requires special privileges and is disabled by default.
      operationId: completeAddressVerification
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: CompleteAddressVerification
        schema:
          $ref: '#/definitions/CompleteAddressVerification'
      responses:
        "204":
          $ref: '#/responses/AddressVerificationCompletedResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      summary: Complete Address Verification
      tags:
      - OTP
  /self/change-password:
    post:
      deprecated: true
      description: Changes user password if provided password matches current user
        password.
      operationId: changePassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: ChangePassword
        schema:
          $ref: '#/definitions/ChangePassword'
      responses:
        "204":
          $ref: '#/responses/ChangePasswordResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self: []
      summary: Change Password
      tags:
      - Users
  /self/me:
    get:
      deprecated: true
      description: |-
        Returns base view on user entry. Besides basic user entry it returns all user identifiers and addresses.
        Also returns user metadata (only fields not marked as hidden) and payload.
      operationId: getUserProfile
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      responses:
        "200":
          $ref: '#/responses/GetProfileResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self: []
      summary: Self Get User Profile
      tags:
      - Users
    put:
      deprecated: true
      description: |-
        Updates user payload.
        Payload must be valid against schema defined in user entry.

        Returns base view on user entry (see Self Get User Profile endpoint).
      operationId: updateUserProfile
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: UpdateUser
        schema:
          $ref: '#/definitions/SelfUserUpdate'
      responses:
        "200":
          $ref: '#/responses/GetProfileResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self: []
      summary: Self Update User Profile
      tags:
      - Users
  /v2/self/change-password:
    post:
      description: Changes user password if provided password matches current user
        password.
      operationId: changePasswordV2
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: ChangePassword
        schema:
          $ref: '#/definitions/ChangePassword'
      responses:
        "204":
          $ref: '#/responses/ChangePasswordResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Change Password
      tags:
      - Users
  /v2/self/change-totp-secret:
    post:
      description: Changes user totp secret if provided totp code is valid.
      operationId: changeTotpSecret
      parameters:
      - in: body
        name: ChangeTotpSecret
        schema:
          $ref: '#/definitions/ChangeTotpSecret'
      responses:
        "204":
          description: ' Totp secret changed successfully'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Change Totp Secret
      tags:
      - Users
  /v2/self/me:
    get:
      description: |-
        Returns base view on user entry. Besides basic user entry it returns all user identifiers and addresses.
        Also returns user metadata (only fields not marked as hidden) and payload.
      operationId: getUserProfileV2
      responses:
        "200":
          $ref: '#/responses/GetProfileResponseV2'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - view_ss_profile
      summary: Self Get User Profile
      tags:
      - Users
    put:
      description: |-
        Updates user payload.
        Payload must be valid against schema defined in user entry.

        Returns base view on user entry (see Self Get User Profile endpoint).
      operationId: updateUserProfileV2
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: UpdateUser
        schema:
          $ref: '#/definitions/SelfUserUpdate'
      responses:
        "200":
          $ref: '#/responses/GetProfileResponseV2'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Self Update User Profile
      tags:
      - Users
  /v2/self/mfa/sessions:
    get:
      description: user MFA sessions.
      operationId: listUserMFASessions
      responses:
        "200":
          $ref: '#/responses/ListUserMFASessions'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - view_ss_profile
      summary: Lists user MFA sessions.
      tags:
      - mfa
  /v2/self/mfa/sessions/{mfaSessionID}:
    delete:
      operationId: deleteMFASession
      parameters:
      - default: default
        description: MFA session id
        in: path
        name: mfaSessionID
        required: true
        type: string
      responses:
        "204":
          description: ' MFA session has been deleted'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Delete user MFA session
      tags:
      - mfa
  /v2/self/set-password:
    post:
      description: |-
        Set a password for a user who doesn't have one yet

        This API requires authentication to happen within the last 5 minutes.
      operationId: setPassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: SetPassword
        schema:
          $ref: '#/definitions/SetPassword'
      responses:
        "204":
          $ref: '#/responses/SetPasswordResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Set Password
      tags:
      - Users
  /v2/self/set-totp-secret:
    post:
      description: |-
        Set totp secret for a user who doesn't have one yet

        This API requires authentication to happen within the last 5 minutes.
      operationId: setTotpSecret
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: body
        name: SetTotpSecret
        schema:
          $ref: '#/definitions/SetTotpSecret'
      responses:
        "204":
          description: ' Totp secret set successfully'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Set Totp Secret
      tags:
      - Users
  /v2/self/set-webauthn:
    post:
      description: |-
        Set WebAuthn for a user who doesn't have one yet

        This API requires authentication to happen within the last 5 minutes.
      operationId: setWebAuthn
      parameters:
      - in: body
        name: SetWebAuthnSecret
        schema:
          $ref: '#/definitions/SetWebAuthn'
      responses:
        "204":
          description: ' WebAuthn set successfully'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Set WebAuthn
      tags:
      - Users
  /v2/self/webauthn/{webAuthnCredentialID}:
    delete:
      description: |-
        Deletes WebAuthn key.
        NOTICE: it is forbidden to delete the last WebAuthn key.
      operationId: deleteWebAuthnKey
      parameters:
      - default: default
        description: WebAuthn Credential ID
        in: path
        name: webAuthnCredentialID
        required: true
        type: string
      responses:
        "204":
          description: ' WebAuthn deleted'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Delete WebAuthn key
      tags:
      - Users
  /v2/self/webauthn/{webAuthnCredentialID}/name:
    put:
      description: 'Set name for WebAuthn key'
      operationId: nameWebAuthnKey
      parameters:
      - in: body
        name: NameWebAuthnKey
        schema:
          $ref: '#/definitions/NameWebAuthnKey'
      - default: default
        description: WebAuthn Credential ID
        in: path
        name: webAuthnCredentialID
        required: true
        type: string
      responses:
        "204":
          description: ' WebAuthn named successfully'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Name WebAuthn key
      tags:
      - Users
  /v2/self/webauthn/create/begin:
    post:
      description: |-
        Begin WebAuthn credentials generation

        This API requires authentication to happen within the last 5 minutes.
      operationId: beginWebAuthnCredentialsGeneration
      responses:
        "200":
          $ref: '#/responses/WebAuthnCredentialBeginResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Begin WebAuthn credentials generation
      tags:
      - Users
  /v2/self/webauthn/create/complete:
    post:
      description: |-
        Finish WebAuthn credentials generation

        This API requires authentication to happen within the last 5 minutes.
      operationId: completeWebAuthnCredentialsGeneration
      parameters:
      - in: body
        name: SelfCompleteWebAuthnCreate
        schema:
          $ref: '#/definitions/CredentialCreationResponse'
      responses:
        "200":
          $ref: '#/responses/WebAuthnCredentialFinishResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - self:
        - manage_ss_profile
      summary: Finish WebAuthn credentials generation
      tags:
      - Users
produces:
- application/json
responses:
  AddressVerificationCompletedResponse:
    description: Address verification completed
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  ChangePasswordResponse:
    description: Password has been changed
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  GetProfileResponse:
    description: User profile data
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/SelfUserWithData'
  GetProfileResponseV2:
    description: User profile data
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/SelfUserWithDataV2'
  ListUserMFASessions:
    description: User MFA sessions
    schema:
      $ref: '#/definitions/ListUserMFASessions'
  ResetPasswordConfirmedResponse:
    description: Reset password confirmed
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  SetPasswordResponse:
    description: Password has been set
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  WebAuthnCredentialBeginResponse:
    description: User WebAuthn credential data
    schema:
      $ref: '#/definitions/CredentialAssertion'
  WebAuthnCredentialFinishResponse:
    description: User WebAuthn credential data
    schema:
      $ref: '#/definitions/WebAuthnCredentials'
  badRequestHTTPError:
    description: Bad request
    schema:
      $ref: '#/definitions/Error'
  conflictHTTPError:
    description: Conflict
    schema:
      $ref: '#/definitions/Error'
  forbiddenHTTPError:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
  internalServerErrorHTTPError:
    description: Internal server error
    schema:
      $ref: '#/definitions/Error'
  methodNotAllowedHTTPError:
    description: Method not allowed
    schema:
      $ref: '#/definitions/Error'
  notFoundHTTPError:
    description: Not found
    schema:
      $ref: '#/definitions/Error'
  payloadTooLargeHTTPError:
    description: Payload too large
    schema:
      $ref: '#/definitions/Error'
  preconditionFailedHTTPError:
    description: Precondition failed
    schema:
      $ref: '#/definitions/Error'
  tooManyRequestsHTTPError:
    description: Too many requests
    schema:
      $ref: '#/definitions/Error'
  unauthorizedHTTPError:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  unprocessableEntityHTTPError:
    description: Unprocessable entity
    schema:
      $ref: '#/definitions/Error'
schemes:
- https
securityDefinitions:
  self:
    authorizationUrl: /default/default/oauth2/authorize
    flow: accessCode
    scopes:
      manage_ss_profile: manage_ss_profile
      view_ss_profile: view_ss_profile
    tokenUrl: /default/default/oauth2/token
    type: oauth2
swagger: "2.0"
