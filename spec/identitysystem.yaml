basePath: /api/identity/default
consumes:
- application/json
definitions:
  ActivateSelfRegisteredUser:
    properties:
      code:
        type: string
        x-nullable: false
      password:
        type: string
        x-nullable: false
      webauthn:
        items:
          $ref: '#/definitions/Credential'
        type: array
        x-nullable: false
    required:
    - code
    type: object
  AddUserIdentifier:
    properties:
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        description: identifier metadata
        type: object
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        - federated
        example: email
        type: string
        x-nullable: false
    required:
    - identifier
    - type
    type: object
  AddUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        example: mobile
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
    required:
    - address
    - type
    - verified
    type: object
  Address:
    properties:
      address:
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
    type: object
  Argon2Config:
    properties:
      iterations:
        format: int64
        type: integer
        x-nullable: false
      key_length:
        format: int64
        type: integer
        x-nullable: false
      memory_in_kb:
        format: int64
        type: integer
        x-nullable: false
      parallelism:
        format: int64
        type: integer
        x-nullable: false
      salt:
        type: string
        x-nullable: false
      salt_length:
        format: int64
        type: integer
        x-nullable: false
    type: object
  AuthenticationMechanisms:
    items:
      enum:
      - password
      - otp
      - webauthn
      type: string
    type: array
  Authenticator:
    properties:
      AAGUID:
        description: |-
          The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
          identifier of the authenticator model being sought.
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      CloneWarning:
        description: |-
          CloneWarning - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
          credential private key may exist and are being used in parallel. Relying Parties should incorporate
          this information into their risk scoring. Whether the Relying Party updates the stored signature
          counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
        type: boolean
        x-nullable: false
      SignCount:
        description: |-
          SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
          with the new signCount value returned in the assertion’s authenticator data. If this new
          signCount value is less than or equal to the stored value, a cloned authenticator may
          exist, or the authenticator may be malfunctioning.
        format: uint32
        type: integer
        x-nullable: false
    type: object
  BcryptConfig:
    properties:
      cost:
        format: int64
        type: integer
        x-nullable: false
    type: object
  ChangePassword:
    properties:
      new_password:
        type: string
        x-nullable: false
      old_password:
        type: string
        x-nullable: false
    required:
    - old_password
    - new_password
    type: object
  Code:
    properties:
      code:
        $ref: '#/definitions/CodeValue'
      created_at:
        format: date-time
        type: string
        x-nullable: false
      expires_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: codeID
        type: string
        x-nullable: false
      issued_at:
        format: date-time
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        enum:
        - activation
        - reset_password
        - challenge
        - verify_address
        - authentication
        example: active
        type: string
        x-nullable: false
      user_id:
        format: userID
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
      verifiable_address_id:
        format: verifiableAddressID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - user_id
    - type
    - code
    type: object
  CodeID:
    properties:
      code_id:
        format: codeID
        type: string
        x-nullable: false
    required:
    - code_id
    type: object
  CodeValue:
    properties:
      hashed_code:
        $ref: '#/definitions/Hash'
    type: object
  Codes:
    properties:
      code:
        type: string
        x-nullable: false
      extended_code:
        type: string
        x-nullable: false
    required:
    - extended_code
    - code
    type: object
  CompleteAddressVerification:
    properties:
      address:
        example: sample@email.com/+48123456789
        type: string
        x-nullable: false
      code:
        type: string
        x-nullable: false
    required:
    - address
    - code
    type: object
  CompleteResetPassword:
    properties:
      address:
        type: string
        x-nullable: false
      code:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      new_password:
        type: string
        x-nullable: false
      userID:
        type: string
        x-nullable: false
    required:
    - code
    - new_password
    type: object
  CompleteResetWebAuthn:
    properties:
      address:
        type: string
        x-nullable: false
      code:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      new_web_authn:
        items:
          $ref: '#/definitions/Credential'
        type: array
        x-nullable: false
      userID:
        type: string
        x-nullable: false
    required:
    - code
    - new_web_authn
    type: object
  ConfirmResetPassword:
    properties:
      code:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      new_password:
        type: string
        x-nullable: false
      userID:
        type: string
        x-nullable: false
    required:
    - code
    - new_password
    type: object
  Credential:
    description: Credential contains all needed information about a WebAuthn credential
      for storage
    properties:
      AttestationType:
        description: The attestation format used (if any) by the authenticator when
          creating the credential.
        type: string
        x-nullable: false
      Authenticator:
        $ref: '#/definitions/Authenticator'
      ID:
        description: A probabilistically-unique byte sequence identifying a public
          key credential source and its authentication assertions.
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
      PublicKey:
        description: |-
          The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
          a Relying Party at registration time (see also public key credential). The private key portion of the credential key
          pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
          used as the attestation key pair, see self attestation for details.
        items:
          format: uint8
          type: integer
        type: array
        x-nullable: false
    type: object
  DeleteUserIdentifier:
    properties:
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
    required:
    - identifier
    type: object
  DeleteUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
    required:
    - address
    type: object
  Duration:
    description: |-
      A Duration represents the elapsed time between two instants
      as an int64 nanosecond count. The representation limits the
      largest representable duration to approximately 290 years.
    format: int64
    type: integer
  Error:
    description: HTTP error response
    properties:
      details:
        type: object
        x-nullable: false
      error:
        type: string
        x-nullable: false
      status_code:
        format: int64
        type: integer
        x-nullable: false
    type: object
  ExtendedUser:
    properties:
      addresses:
        items:
          $ref: '#/definitions/Address'
        type: array
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          type: string
        type: array
        x-nullable: false
      identifiers_with_details:
        items:
          $ref: '#/definitions/IdentifierDetails'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        example: active
        type: string
        x-nullable: false
      status_updated_at:
        format: date-time
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
      user_type:
        x-nullable: false
      verified addresses:
        items:
          type: string
        type: array
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - status
    type: object
  GetUserByKey:
    properties:
      address:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
    type: object
  Hash:
    properties:
      config:
        $ref: '#/definitions/HashConfig'
      value:
        type: string
        x-nullable: false
    type: object
  HashConfig:
    properties:
      argon2:
        $ref: '#/definitions/Argon2Config'
      bcrypt:
        $ref: '#/definitions/BcryptConfig'
      method:
        enum:
        - bcrypt
        - pbkdf2
        - argon2
        - sha
        type: string
        x-nullable: false
      pbkdf2:
        $ref: '#/definitions/PBKDF2Config'
      sha:
        $ref: '#/definitions/SHAConfig'
    type: object
  IdentifierDetails:
    properties:
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        - federated
        type: string
        x-nullable: false
      value:
        format: userIdentifierValue
        type: string
        x-nullable: false
    type: object
  InspectOTP:
    properties:
      code:
        type: string
        x-nullable: false
    required:
    - code
    type: object
  InspectOTPUserOperationalData:
    properties:
      password_set:
        type: boolean
        x-nullable: false
      user_id:
        type: string
        x-nullable: false
    required:
    - user_id
    - password_set
    type: object
  NewUser:
    properties:
      credentials:
        items:
          $ref: '#/definitions/NewUserCredential'
        type: array
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          $ref: '#/definitions/NewUserIdentifier'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        type: string
        x-nullable: false
      user_type:
        x-nullable: false
      verifiable_addresses:
        items:
          $ref: '#/definitions/NewUserVerifiableAddress'
        type: array
        x-nullable: false
    required:
    - status
    type: object
  NewUserCredential:
    properties:
      must_be_changed:
        default: false
        description: Indicates if user is required to alter their credentials during
          their initial authentication. Currently, it is enforced only for password
          credentials.
        type: boolean
        x-nullable: false
      password:
        example: secret
        type: string
        x-nullable: false
      type:
        enum:
        - password
        - webauthn
        example: password
        type: string
        x-nullable: false
      webauthn_credentials:
        example: public_key
        items:
          $ref: '#/definitions/Credential'
        type: array
        x-nullable: false
    required:
    - type
    type: object
  NewUserIdentifier:
    properties:
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        description: identifier metadata
        type: object
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        - federated
        example: email
        type: string
        x-nullable: false
    required:
    - identifier
    - type
    type: object
  NewUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        example: mobile
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
    required:
    - address
    - type
    - status
    - verified
    type: object
  OtpConfig:
    properties:
      length:
        format: int64
        type: integer
        x-nullable: false
      ttl:
        format: duration
        type: string
        x-nullable: false
    type: object
  OtpSettings:
    properties:
      activation:
        $ref: '#/definitions/OtpConfig'
      authentication:
        $ref: '#/definitions/OtpConfig'
      challenge:
        $ref: '#/definitions/OtpConfig'
      reset_password:
        $ref: '#/definitions/OtpConfig'
      verify_address:
        $ref: '#/definitions/OtpConfig'
    type: object
  PBKDF2Config:
    properties:
      function:
        type: string
        x-nullable: false
      key_length:
        format: int64
        type: integer
        x-nullable: false
      number_of_iterations:
        format: int64
        type: integer
        x-nullable: false
      salt:
        type: string
        x-nullable: false
      salt_length:
        format: int64
        type: integer
        x-nullable: false
    type: object
  PasswordPolicy:
    properties:
      capital_letters:
        format: uint64
        type: integer
        x-nullable: false
      digits:
        format: uint64
        type: integer
        x-nullable: false
      lowercase_letters:
        format: uint64
        type: integer
        x-nullable: false
      min_length:
        format: uint64
        type: integer
        x-nullable: false
      not_used_since:
        format: uint64
        type: integer
        x-nullable: false
      special_characters:
        format: uint64
        type: integer
        x-nullable: false
      strength:
        enum:
        - any
        - weak
        - fair
        - strong
        - very_strong
        type: string
        x-nullable: false
    type: object
  PasswordSettings:
    properties:
      expires_after:
        $ref: '#/definitions/Duration'
      hashing_method:
        enum:
        - bcrypt
        - pbkdf2
        - argon2
        - sha
        type: string
        x-nullable: false
    type: object
  Pool:
    properties:
      authentication_mechanisms:
        $ref: '#/definitions/AuthenticationMechanisms'
      badge_color:
        type: string
        x-nullable: false
      deleted:
        type: boolean
        x-nullable: false
      description:
        type: string
        x-nullable: false
      id:
        format: poolID
        type: string
        x-nullable: false
      identifier_case_insensitive:
        type: boolean
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      name:
        type: string
        x-nullable: false
      otp_settings:
        $ref: '#/definitions/OtpSettings'
      password_policy:
        $ref: '#/definitions/PasswordPolicy'
      password_settings:
        $ref: '#/definitions/PasswordSettings'
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      preferred_authentication_mechanism:
        enum:
        - password
        - otp
        - webauthn
        example: password
        type: string
        x-nullable: false
      public_registration_allowed:
        type: boolean
        x-nullable: false
      system:
        type: boolean
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      workspace_id:
        format: serverID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - name
    type: object
  PoolResponse:
    properties:
      authentication_mechanisms:
        $ref: '#/definitions/AuthenticationMechanisms'
      badge_color:
        type: string
        x-nullable: false
      deleted:
        type: boolean
        x-nullable: false
      description:
        type: string
        x-nullable: false
      id:
        format: poolID
        type: string
        x-nullable: false
      identifier_case_insensitive:
        type: boolean
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      name:
        type: string
        x-nullable: false
      number_of_jit_users:
        format: int64
        type: integer
        x-nullable: false
      number_of_standard_users:
        format: int64
        type: integer
        x-nullable: false
      number_of_users:
        format: int64
        type: integer
        x-nullable: false
      otp_settings:
        $ref: '#/definitions/OtpSettings'
      password_policy:
        $ref: '#/definitions/PasswordPolicy'
      password_settings:
        $ref: '#/definitions/PasswordSettings'
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      preferred_authentication_mechanism:
        enum:
        - password
        - otp
        - webauthn
        example: password
        type: string
        x-nullable: false
      public_registration_allowed:
        type: boolean
        x-nullable: false
      system:
        type: boolean
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      workspace_id:
        format: serverID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - name
    type: object
  RequestActivation:
    properties:
      address:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
    type: object
  RequestCode:
    properties:
      address:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      type:
        enum:
        - activation
        - reset_password
        - challenge
        - verify_address
        - authentication
        type: string
        x-nullable: false
    required:
    - type
    type: object
  RequestCodeForUser:
    properties:
      address:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      type:
        enum:
        - activation
        - reset_password
        - challenge
        - verify_address
        - authentication
        type: string
        x-nullable: false
      userID:
        format: userID
        type: string
        x-nullable: false
    required:
    - type
    type: object
  RequestOTPCode:
    properties:
      address:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      userID:
        type: string
        x-nullable: false
    type: object
  RequestOTPForAddress:
    properties:
      address:
        type: string
        x-nullable: false
    required:
    - address
    type: object
  RequestResetCredential:
    properties:
      address:
        type: string
        x-nullable: false
      identifier:
        type: string
        x-nullable: false
      userID:
        type: string
        x-nullable: false
    required:
    - address
    type: object
  Rfc6902PatchOperation:
    properties:
      op:
        description: |-
          Each operation must have at least one `op` member, which value indicates
          the actual operation to be performed against the target (current) configuration.
          For a detailed description of available operations,
          see the [Operations #4 section of the RFC6902 specification](https://datatracker.ietf.org/doc/html/rfc6902#section-4).
        enum:
        - add
        - remove
        - replace
        - move
        - copy
        - test
        type: string
        x-nullable: false
      path:
        description: |-
          String containing a JSON-Pointer value ([RFC6901](https://datatracker.ietf.org/doc/html/rfc6901))
          that references a location within the target configuration where the operation is performed.

          For available paths, reference the exported configuration.
        type: string
        x-nullable: false
      value:
        description: New object value applied to the patched (target) configuration.
        type: object
        x-nullable: false
    type: object
  Rfc6902PatchOperations:
    items:
      $ref: '#/definitions/Rfc6902PatchOperation'
    type: array
  SHAConfig:
    properties:
      function:
        type: string
        x-nullable: false
      salt:
        type: string
        x-nullable: false
      salt_after_digest_in_hash:
        type: boolean
        x-nullable: false
      salt_length:
        format: int64
        type: integer
        x-nullable: false
    type: object
  Schema:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      description:
        type: string
        x-nullable: false
      id:
        format: schemaID
        type: string
        x-nullable: false
      name:
        type: string
        x-nullable: false
      schema:
        $ref: '#/definitions/SupportedJSONSchema'
      system:
        type: boolean
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
    required:
    - tenant_id
    - name
    - schema
    type: object
  SelfRegisterUser:
    properties:
      identifier:
        type: string
        x-nullable: false
      password:
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      webauthn_credentials:
        items:
          $ref: '#/definitions/Credential'
        type: array
        x-nullable: false
    required:
    - identifier
    type: object
  SetPasswordStateRequest:
    properties:
      state:
        enum:
        - valid
        - must_be_reset
        - must_be_changed
        type: string
        x-nullable: false
    type: object
  SupportedJSONSchema:
    properties:
      additionalProperties:
        type: boolean
        x-nullable: false
      allOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      anyOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      const:
        type: string
        x-nullable: false
      contains:
        $ref: '#/definitions/SupportedJSONSchema'
      dependentRequired:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
        x-nullable: false
      dependentSchemas:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      description:
        type: string
        x-nullable: false
      else:
        $ref: '#/definitions/SupportedJSONSchema'
      enum:
        items:
          type: string
        type: array
        x-nullable: false
      exclusiveMaximum:
        format: int64
        type: integer
        x-nullable: false
      exclusiveMinimum:
        format: int64
        type: integer
        x-nullable: false
      hidden:
        type: boolean
        x-nullable: false
      if:
        $ref: '#/definitions/SupportedJSONSchema'
      items:
        $ref: '#/definitions/SupportedJSONSchema'
      maxContains:
        format: int64
        type: integer
        x-nullable: false
      maxItems:
        description: arrays
        format: int64
        type: integer
        x-nullable: false
      maxLength:
        description: strings
        format: int64
        type: integer
        x-nullable: false
      maxProperties:
        description: objects
        format: int64
        type: integer
        x-nullable: false
      maximum:
        format: int64
        type: integer
        x-nullable: false
      minContains:
        format: int64
        type: integer
        x-nullable: false
      minItems:
        format: int64
        type: integer
        x-nullable: false
      minLength:
        format: int64
        type: integer
        x-nullable: false
      minProperties:
        format: int64
        type: integer
        x-nullable: false
      minimum:
        format: int64
        type: integer
        x-nullable: false
      multipleOf:
        description: numeric
        format: int64
        type: integer
        x-nullable: false
      not:
        $ref: '#/definitions/SupportedJSONSchema'
      oneOf:
        items:
          $ref: '#/definitions/SupportedJSONSchema'
        type: array
        x-nullable: false
      pattern:
        type: string
        x-nullable: false
      patternProperties:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      properties:
        additionalProperties:
          $ref: '#/definitions/SupportedJSONSchema'
        type: object
        x-nullable: false
      propertyNames:
        $ref: '#/definitions/SupportedJSONSchema'
      required:
        items:
          type: string
        type: array
        x-nullable: false
      then:
        $ref: '#/definitions/SupportedJSONSchema'
      type:
        description: any
        type: string
        x-nullable: false
      uniqueItems:
        type: boolean
        x-nullable: false
    type: object
  TenantDump:
    properties:
      codes:
        items:
          $ref: '#/definitions/Code'
        type: array
        x-nullable: false
      pools:
        items:
          $ref: '#/definitions/Pool'
        type: array
        x-nullable: false
      schemas:
        items:
          $ref: '#/definitions/Schema'
        type: array
        x-nullable: false
      user_credentials:
        items:
          $ref: '#/definitions/UserCredential'
        type: array
        x-nullable: false
      user_identifiers:
        items:
          $ref: '#/definitions/UserIdentifier'
        type: array
        x-nullable: false
      user_verifiable_addresses:
        items:
          $ref: '#/definitions/UserVerifiableAddress'
        type: array
        x-nullable: false
      users:
        items:
          $ref: '#/definitions/User'
        type: array
        x-nullable: false
    type: object
  UpdateUser:
    properties:
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        type: string
        x-nullable: false
    type: object
  UpdateUserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      verified:
        example: false
        type: boolean
        x-nullable: false
    required:
    - address
    - status
    - verified
    type: object
  User:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        example: active
        type: string
        x-nullable: false
      status_updated_at:
        format: date-time
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
      user_type:
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - status
    type: object
  UserCredential:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      expires_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: userCredentialID
        type: string
        x-nullable: false
      payload:
        example:
          hashed_password: '###'
        type: object
        x-nullable: false
      state:
        enum:
        - valid
        - must_be_reset
        - must_be_changed
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        enum:
        - password
        - webauthn
        example: password
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_id:
        format: userID
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - user_id
    - type
    - payload
    - created_at
    - updated_at
    type: object
  UserID:
    properties:
      id:
        format: userID
        type: string
        x-nullable: false
    required:
    - id
    type: object
  UserIdentifier:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: userIdentifierID
        type: string
        x-nullable: false
      identifier:
        format: userIdentifierValue
        type: string
        x-nullable: false
      identifier_lc:
        format: userIdentifierValue
        type: string
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        description: general purpose metadata
        type: object
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        - uid
        - external
        - federated
        example: email
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_id:
        format: userID
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - identifier
    - identifier_lc
    - user_id
    - type
    - created_at
    - updated_at
    type: object
  UserVerifiableAddress:
    properties:
      address:
        format: verifiableAddress
        type: string
        x-nullable: false
      address_lc:
        format: verifiableAddress
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        format: verifiableAddressID
        type: string
        x-nullable: false
      preferred_contact_method:
        enum:
        - sms
        - voice
        example: sms
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        example: active
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      type:
        enum:
        - email
        - mobile
        example: mobile
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_id:
        format: userID
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
      verified:
        type: boolean
        x-nullable: false
      verified_at:
        format: date-time
        type: string
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - user_id
    - address
    - address_lc
    - type
    - status
    - verified
    - created_at
    - updated_at
    type: object
  UserWithData:
    properties:
      created_at:
        format: date-time
        type: string
        x-nullable: false
      credentials:
        items:
          $ref: '#/definitions/UserCredential'
        type: array
        x-nullable: false
      id:
        format: userID
        type: string
        x-nullable: false
      identifiers:
        items:
          $ref: '#/definitions/UserIdentifier'
        type: array
        x-nullable: false
      metadata:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      metadata_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      payload:
        additionalProperties:
          type: object
        type: object
        x-nullable: false
      payload_schema_id:
        format: schemaID
        type: string
        x-nullable: false
      status:
        enum:
        - active
        - inactive
        - deleted
        - new
        type: string
        x-nullable: false
      status_updated_at:
        format: date-time
        type: string
        x-nullable: false
      tenant_id:
        example: default
        format: tenantID
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-nullable: false
      user_pool_id:
        example: default
        format: poolID
        type: string
        x-nullable: false
      verifiable_addresses:
        items:
          $ref: '#/definitions/UserVerifiableAddress'
        type: array
        x-nullable: false
    required:
    - tenant_id
    - user_pool_id
    - status
    type: object
  Users:
    description: Identity Users
    properties:
      users:
        items:
          $ref: '#/definitions/ExtendedUser'
        type: array
        x-nullable: false
    type: object
  VerifyOTP:
    properties:
      code:
        type: string
        x-nullable: false
      id:
        type: string
        x-nullable: false
      identifier:
        example: sample@email.com/+48123456789
        type: string
        x-nullable: false
      userID:
        type: string
        x-nullable: false
    required:
    - code
    type: object
  VerifyPassword:
    properties:
      id:
        type: string
        x-nullable: false
      identifier:
        example: sample@email.com/+48123456789
        type: string
        x-nullable: false
      password:
        type: string
        x-nullable: false
      userID:
        type: string
        x-nullable: false
    required:
    - password
    type: object
  VerifyPasswordResponseData:
    properties:
      id:
        format: userID
        type: string
        x-nullable: false
      state:
        enum:
        - valid
        - must_be_reset
        - must_be_changed
        type: string
        x-nullable: false
    required:
    - id
    - state
    type: object
host: localhost:8443
info:
  description: |-
    Cloudentity Identity System API

    It is important for clients to note that system APIs return the `ETag` response header. When executing API flows which modify and retrieve a given resource, clients are expected to follow `ETag` protocols by:
    1. Caching the value of an `ETag` returned by the server when retrieving the resource, and
    2. Supplying the `If-Match` header with the `ETag` value when attempting to modify the resource.

    A `412 Precondition Failed` response will be returned if a write request is delayed after a sufficient length of time while a previous write request was being processed.

    When interacting with APIs, make sure to always supply the If-Match header from the previous ETag header response for full consistency.
    Otherwise, the APIs may use the cached user data, and not return what you expect!
  title: Cloudentity API
  version: latest
paths:
  /configuration:
    get:
      operationId: exportTenantConfiguration
      responses:
        "200":
          $ref: '#/responses/TenantDump'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_configuration
      tags:
      - tenants
    patch:
      operationId: patchTenantConfiguration
      parameters:
      - in: body
        name: patch
        schema:
          $ref: '#/definitions/Rfc6902PatchOperations'
      - format: insertMode
        in: query
        name: mode
        type: string
      responses:
        "204":
          description: ' patch applied'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_configuration
      tags:
      - tenants
    put:
      description: |-
        ACP updates existing values with the values provided in the request.
        API supports only full entries update, not partial, meaning if user is re-imported it should be re-imported with all subentries.
      operationId: importTenantConfiguration
      parameters:
      - in: body
        name: TenantDump
        schema:
          $ref: '#/definitions/TenantDump'
      responses:
        "204":
          description: ' configuration has been imported'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - manage_configuration
      summary: Imports configuration
      tags:
      - tenants
  /system/pools/{ipID}:
    get:
      description: |-
        Gets pool.

        This API does not use ETags but data is always consistent.
      operationId: systemGetPool
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/PoolResponseParams'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Get Pool
      tags:
      - Pools
  /system/pools/{ipID}/user/activate:
    post:
      description: |-
        Activates (changes status to Active) user using extended OTP if the provided code is valid.
        Password is optional.
        Marks address as verified if it's not yet a verified address of this user.
        Adds address as identifier if it's not yet an identifier of this user.
        Invalidates used OTP for account activation.
        Fails if address where OTP was sent still belongs to this user.
        Fails if user status is not New.
        Fails if user has password set already and password was provided.
        Returns an extended view on user entry (see Get User endpoint).
        Endpoint is protected by Brute Force mechanism.
      operationId: activateSelfRegisteredUserUsingExtendedCode
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: Activation
        schema:
          $ref: '#/definitions/ActivateSelfRegisteredUser'
      responses:
        "201":
          $ref: '#/responses/SystemUserResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Activate User Using Extended Code
      tags:
      - Users
  /system/pools/{ipID}/user/code/generate:
    post:
      description: |-
        Generate code of a specific type
        Invalidates previously generated OTPs for action associated with the type.
        Code is valid for specific period of time configured in Identity Pool.

        Either userID or identifier (must be user's identifier) must be provided for most types.
        Exceptions are: reset password and challenge if address is user's verified address

        Keep in mind that `address` attribute for different code types may be optional and may not mean the same:
        for `reset_password`, `authentication` and `challenge` it is not mandatory, but if provided must be user's address (verified or unverified)
        for `activation` it is not mandatory (system will pick up address itself if there is only one in user entry) but if provided it must be one of the user's addresses (can be not verified)
        for `verify_address` it must be user's unverified address and that address cannot be someone's else verified address

        For `activation`, `reset_password` and `challenge` there is only one active code for a user (generating new one invalidates previous)
        For `verify_address` there might be many codes for a user. During verification latest for an address is being compared.
      operationId: generateCodeForUser
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: CodeRequest
        schema:
          $ref: '#/definitions/RequestCodeForUser'
      responses:
        "201":
          $ref: '#/responses/GenerateCodeResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity_self_registration
      summary: Generate code of a specific type
      tags:
      - Users
  /system/pools/{ipID}/user/otp/inspect:
    post:
      description: |-
        Verifies if the provided extended OTP is valid and returns basic user operational data.
        Endpoint is protected by Brute Force mechanism.
        This endpoint is meant for UI integration during user activation.
      operationId: inspectOTP
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: InspectOTP
        schema:
          $ref: '#/definitions/InspectOTP'
      responses:
        "200":
          $ref: '#/responses/InspectOTPResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Inspect Extended OTP
      tags:
      - OTP
  /system/pools/{ipID}/user/otp/request:
    post:
      description: |-
        Generates and sends OTP to the provided address.
        Address must be a valid email or mobile which is marked as a verified address for the user.
        For validating unverified address either userID or identifier must be provided.
        When both userID or identifier and address are provided then matching address is taken from user pointed by either userID or identifier.
        Regardless if the address points to some user or not, the request ends successfully to prevent email/mobile enumeration.
        Requested OTP is valid for specific period of time configured in Identity Pool.
        Generating new challenge invalidates previous challenge.

        REFACTORED: input field name has been renamed from `identifier` to `address`; new field `identifier` has been added and described in documentation
      operationId: requestOTPChallenge
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: RequestOTPChallenge
        schema:
          $ref: '#/definitions/RequestOTPCode'
      - description: |-
          optional server's identifier (used for themes etc.)
          ServerID
        in: query
        name: server_id
        type: string
      responses:
        "204":
          $ref: '#/responses/RequestOTPChallengeResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Request OTP Challenge
      tags:
      - OTP
  /system/pools/{ipID}/user/otp/verify:
    post:
      description: |-
        Verifies if the provided OTP is valid or not.
        This API is meant for challenge OTPs, not for activation or password change.
        Either identifier (must be user's identifier), user id or extended code must be provided.
        If the OTP is valid it is removed and a successful response is returned.
        Endpoint is protected by Brute Force mechanism.
        This endpoint is meant for integration when external system requests and verifies OTP.

        REFACTORED: input field name has been changed from `id` to `userID`; field `id` stays for backward compatibility and overrides `userID` if not empty
      operationId: verifyOTP
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: VerifyOTP
        schema:
          $ref: '#/definitions/VerifyOTP'
      responses:
        "200":
          $ref: '#/responses/UserIDResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Verify OTP Challenge
      tags:
      - OTP
  /system/pools/{ipID}/user/password/reset/complete:
    post:
      description: |-
        Resets password for user if the provided OTP is valid. It's the second and final step of the
        flow to reset the password.
        Either address (must be a valid email or mobile which is marked as verified address for the user), user id, identifier (must be user's identifier) or extended code must be provided.
        Endpoint returns generic `401` regardless of the reason of failure to prevent email/mobile enumeration.
        After a successful password reset, OTP gets invalidated, so it cannot be reused.
        Endpoint is protected by Brute Force mechanism.
      operationId: completeResetPassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: CompleteResetPassword
        schema:
          $ref: '#/definitions/CompleteResetPassword'
      responses:
        "204":
          $ref: '#/responses/CompleteResetPasswordResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Complete Reset Password
      tags:
      - Users
  /system/pools/{ipID}/user/password/reset/confirm:
    post:
      deprecated: true
      description: |-
        Resets password for user if the provided OTP is valid. It's the second and final step of the
        flow to reset the password.
        Either identifier (must be a valid email or mobile which is marked as verified address for the user), user id or extended code must be provided.
        Endpoint returns generic `401` regardless of the reason of failure to prevent email/mobile enumeration.
        After a successful password reset, OTP gets invalidated, so it cannot be reused.
        Endpoint is protected by Brute Force mechanism.
      operationId: confirmResetPassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: ConfirmResetPassword
        schema:
          $ref: '#/definitions/ConfirmResetPassword'
      responses:
        "204":
          $ref: '#/responses/ConfirmResetPasswordResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Confirm Reset Password
      tags:
      - Users
  /system/pools/{ipID}/user/password/reset/request:
    post:
      description: |-
        Sends OTP for password reset. It's first out of two steps of the reset password flow.
        Address must be a valid email or mobile which is marked as verified address for the user.
        For validating unverified address userID or identifier must be provided.
        If userID is provided then identifier must not be set.
        When both userID or identifier and address are provided then address is taken from user pointed by either userID or identifier.
        Regardless if the address points to some user or not, the request ends successfully to
        prevent email/mobile enumeration.
        Invalidates previously generated OTPs for password reset.
        Reset password OTP is valid for a specific period of time configured in Identity Pool.

        REFACTORED: input field name has been renamed from `identifier` to `address`; new field `identifier` has been added and described in documentation
      operationId: requestResetPassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: RequestResetPassword
        schema:
          $ref: '#/definitions/RequestResetCredential'
      - default: link
        description: Code type in message
        enum:
        - link
        - code
        in: query
        name: code_type_in_message
        type: string
      - description: |-
          optional server's identifier (used for themes etc.)
          ServerID
        in: query
        name: server_id
        type: string
      responses:
        "204":
          $ref: '#/responses/RequestResetPasswordResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Request Reset Password
      tags:
      - Users
  /system/pools/{ipID}/user/password/verify:
    post:
      description: |-
        Verifies user's password.
        Either identifier (must be user's identifier) or user ID must be provided.
        Endpoint is protected by Brute Force mechanism.
        This endpoint is meant for integration when external system verifies user's password.

        REFACTORED: input field name has been changed from `id` to `userID`; field `id` stays for backward compatibility and overrides `userID` if not empty
      operationId: verifyPassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: VerifyPassword
        schema:
          $ref: '#/definitions/VerifyPassword'
      responses:
        "200":
          $ref: '#/responses/VerifyPasswordResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Verify User's Password
      tags:
      - Users
  /system/pools/{ipID}/user/register:
    post:
      description: |-
        Creates user using a very basic set of data provided by the user.
        Payload and password are optional.
        Sets payload and metadata schemas to ones from Identity Pool.
        Sets user status to New
        If payload is provided it must be valid against payload schema.
        Request fails if self registration for Identity Pool is not allowed.
        If identifier is someone's verified address or identifier endpoint returns that user ID and end successfully
        to prevent email/mobile enumeration. In the same time user whose email/mobile was provided will get notification that
        identifier is already used.
        If `send_activation_message` query parameter was set to `true`, activation message is sent to provided identifier.
        If `code_type_in_message` query parameter was set to link or not provided, link is generated for activation.
        Activation message is valid for specific period of time configured in Identity Pool.
        If the request succeeds, a new user ID is returned.
        Endpoint is protected by Brute Force mechanism.
      operationId: selfRegisterUser
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: NewUser
        schema:
          $ref: '#/definitions/SelfRegisterUser'
      - default: true
        description: Send activation message
        in: query
        name: send_activation_message
        type: boolean
      - default: link
        description: Code type in message
        enum:
        - link
        - code
        in: query
        name: code_type_in_message
        type: string
      - description: |-
          optional server's identifier (used for themes etc.)
          ServerID
        in: query
        name: server_id
        type: string
      responses:
        "201":
          $ref: '#/responses/UserIDResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Self Register User
      tags:
      - Users
  /system/pools/{ipID}/user/webauthn/reset/complete:
    post:
      description: |-
        Resets WebAuthn for user if the provided OTP is valid. It's the second and final step of the
        flow to reset the WebAuthn.
        Either address (must be a valid email or mobile which is marked as verified address for the user), user id, identifier (must be user's identifier) or extended code must be provided.
        Endpoint returns generic `401` regardless of the reason of failure to prevent email/mobile enumeration.
        After a successful WebAuthn reset, OTP gets invalidated, so it cannot be reused.
        Endpoint is protected by Brute Force mechanism.
      operationId: completeResetWebAuthn
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: CompleteResetWebAuthn
        schema:
          $ref: '#/definitions/CompleteResetWebAuthn'
      responses:
        "204":
          $ref: '#/responses/CompleteResetWebAuthnResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Complete Reset WebAuthn
      tags:
      - Users
  /system/pools/{ipID}/user/webauthn/reset/request:
    post:
      description: |-
        Sends OTP for WebAuthn reset. It's first out of two steps of the reset WebAuthn flow.
        Address must be a valid email or mobile which is marked as verified address for the user.
        For validating unverified address userID or identifier must be provided.
        If userID is provided then identifier must not be set.
        When both userID or identifier and address are provided then address is taken from user pointed by either userID or identifier.
        Regardless if the address points to some user or not, the request ends successfully to
        prevent email/mobile enumeration.
        Invalidates previously generated OTPs for WebAuthn reset.
        Reset WebAuthn OTP is valid for a specific period of time configured in Identity Pool.

        REFACTORED: input field name has been renamed from `identifier` to `address`; new field `identifier` has been added and described in documentation
      operationId: requestResetWebAuthn
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: RequestResetWebAuthn
        schema:
          $ref: '#/definitions/RequestResetCredential'
      - default: link
        description: Code type in message
        enum:
        - link
        - code
        in: query
        name: code_type_in_message
        type: string
      - description: |-
          optional server's identifier (used for themes etc.)
          ServerID
        in: query
        name: server_id
        type: string
      responses:
        "204":
          $ref: '#/responses/RequestResetWebAuthnResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Request Reset WebAuthn
      tags:
      - Users
  /system/pools/{ipID}/users:
    get:
      description: |-
        Retrieve the list of users from the specified identity pool.

        Results are sorted by user ID. No other sorting is supported.

        This API does not use ETags. Data returned in the response is eventually consistent.
        It's not possible to enforce full consistency for this API.
      operationId: systemListUsers
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - description: |-
          optional list users after given id
          AfterUserID
        in: query
        name: after_user_id
        type: string
      - description: |-
          optional list users before given id
          BeforeUserID
        in: query
        name: before_user_id
        type: string
      - description: |-
          optional sort clients by given field
          Sort
        in: query
        name: sort
        type: string
      - description: |-
          optional order clients by given direction
          Order
        in: query
        name: order
        type: string
      - default: 20
        description: |-
          optional limit results
          Limit
        format: int64
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: |-
          optional query filter
          query is in json format like {"user_key":"john"} - parameter must be url-encoded
          supported parameters
          `user_key` - limits user set to users that has identifier starting or ending with provided user_key or has verified address starting or ending with provided user_key or their ID is equal to provided user_key
          `payload` - limits user set to users with payload matches provided metadata - for simple values it does exact match, for arrays it does `contain`
          `metadata` - limits user set to users with metadata matches provided metadata - for simple values it does exact match, for arrays it does `contain`
          if multiple parameters provided it does logical AND between the results so users must match ALL parameters
        in: query
        name: query
        type: string
      responses:
        "200":
          $ref: '#/responses/UsersResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: List Users
      tags:
      - Users
    post:
      description: |-
        Create a user with extended data.

        Any status and set of identifiers, addresses, and credentials are allowed.
        If credential of type password is provided it can be marked as must_be_changed which forces user to change its password upon first login.

        When no `payload_schema_id` or `metadata_schema_id` are provided, the default values are taken from the
        specified Identity Pool.

        Payload and metadata must match the specified schema.

        The response contains an extended view on user entry.

        To retrieve a user entry without user creation, call the **Get User Details** endpoint.
      operationId: systemCreateUser
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: NewUser
        schema:
          $ref: '#/definitions/NewUser'
      responses:
        "201":
          $ref: '#/responses/SystemUserResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Create User
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}:
    delete:
      description: Remove a record about a user account in the specified identity
        pool.
      operationId: systemDeleteUser
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      responses:
        "204":
          $ref: '#/responses/SystemDeleteUserResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Delete User Account
      tags:
      - Users
    get:
      description: |-
        Retrieve extended information about a user record.

        The response contains user's basic details, payload, and metadata, as well as all their identifiers,
        addresses, and blurred credentials.
      operationId: systemGetUser
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/SystemUserResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Get User Details
      tags:
      - Users
    put:
      description: |-
        Update the basic set of user data: payload, metadata, schemas, and status. Provide the required values for the fields
        you need to update. Fields with no values are skipped for the update (not removed nor cleared).

        The fields to be updated are overridden.

        Any `payload` / `metadata` and `payload_schema_id` / `metadata_schema_id` values passed must be mutually relevant.

        To retrieve a user entry without updating their record, call the **Get User Details** endpoint.
      operationId: systemUpdateUser
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: UpdateUser
        schema:
          $ref: '#/definitions/UpdateUser'
      responses:
        "200":
          $ref: '#/responses/SystemUserResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Update User Record
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/activate:
    post:
      description: |-
        Activates (changes status to Active) user if provided code is valid.
        Password is optional.
        Marks address as verified if not already this user's verified address.
        Adds address as identifier if not already this user's identifier.
        Invalidates used OTP for account activation.
        Fails if address where OTP was sent still belongs to this user.
        Fails if user status is not New.
        Fails if user has password set and password was provided.
        Returns an extended view on user entry (see Get User endpoint).
        Endpoint is protected by Brute Force mechanism.
      operationId: activateSelfRegisteredUser
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: Activation
        schema:
          $ref: '#/definitions/ActivateSelfRegisteredUser'
      responses:
        "201":
          $ref: '#/responses/SystemUserResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Activate User With Code
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/activation/generate:
    post:
      deprecated: true
      description: |-
        Generate an activation code for provided address
        Invalidates previously generated OTPs for user activation.
        Activation code is valid for specific period of time configured in Identity Pool.

        NOTE: this API is deprecated, please use the one for generating code of a specific type with type `activation`
        REFACTORED: input field name has been changed from `identifier` to `address`; field `identifier` stays for backward compatibility and overrides `address` if not empty
      operationId: generateActivationCode
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: ActivationCodeRequest
        schema:
          $ref: '#/definitions/RequestActivation'
      responses:
        "201":
          $ref: '#/responses/CodeIDResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity_self_registration
      summary: Generate Activation Code
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/activation/send:
    post:
      description: |-
        Send an activation message to the user's provided address.

        When no `address` is provided in the request body, the message is sent to the address saved for this user (if there
        is only one address). To prevent email or mobile enumeration, this endpoint does not fail.

        The message is **not** sent upon the following:

        • `address` is not provided and user has no addresses or more than one.

        • `address` is someone else's verified address or identifier. This results in the `Identifier is already used` response.

        • The user's `status` is not `new`.

        This request invalidates any previously generated OTPs for user account activation.

        When `code_type_in_message=link` or no value is provided for it, an activation link is generated.

        Activation message validity period is configured in the identity pool settings.

        ❕ REFACTORED: `identifier` is renamed to `address` in the request body. For backward compatibility, the both
        fields are available. If `identifier` is not empty, it overrides the `address` value.
      operationId: selfSendActivationMessage
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: SendActivationMessage
        schema:
          $ref: '#/definitions/RequestActivation'
      - default: link
        description: Code type in message
        enum:
        - link
        - code
        in: query
        name: code_type_in_message
        type: string
      - description: |-
          optional server's identifier (used for themes etc.)
          ServerID
        in: query
        name: server_id
        type: string
      responses:
        "204":
          $ref: '#/responses/SelfSendActivationMessageResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Send Activation Message
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/address/verification/complete:
    post:
      description: |-
        Completes unverified address verification by checking if code is valid or not.
        Both address and code must be provided.
        Fails if address is not user's address or is user's verified or is someone's verified address.
        If the OTP is valid it is removed and a successful response is returned.
        Endpoint is protected by Brute Force mechanism.
      operationId: completeAddressVerification
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: CompleteAddressVerification
        schema:
          $ref: '#/definitions/CompleteAddressVerification'
      responses:
        "204":
          $ref: '#/responses/CompleteAddressVerificationResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Complete Address Verification
      tags:
      - OTP
  /system/pools/{ipID}/users/{userID}/address/verification/request:
    post:
      description: |-
        Generate and send a verification code to the provided address.
        The `address` value must be a valid email or mobile number marked as the user's `unverified address`.

        Also, this value must not be a verified address of any other user. Otherwise, the request returns the
        verification link and runs protection for email or mobile enumeration for the address specified.

        The requested code validity period is configured in the identity pool settings.
      operationId: requestAddressVerification
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: RequestAddressVerification
        schema:
          $ref: '#/definitions/RequestOTPForAddress'
      responses:
        "204":
          $ref: '#/responses/RequestAddressVerificationResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Request Address Verification
      tags:
      - OTP
  /system/pools/{ipID}/users/{userID}/addresses/add:
    post:
      description: 'Adds a verifiable address to the user account'
      operationId: systemAddVerifiableAddress
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: NewAddress
        schema:
          $ref: '#/definitions/AddUserVerifiableAddress'
      responses:
        "200":
          $ref: '#/responses/SystemAddressResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Add Verifiable Address
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/addresses/remove:
    post:
      description: Remove a verifiable address from a user account so it is no longer
        associated with the specified user.
      operationId: systemDeleteVerifiableAddress
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: Address
        schema:
          $ref: '#/definitions/DeleteUserVerifiableAddress'
      responses:
        "204":
          $ref: '#/responses/DeleteAddressResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Delete Verifiable Address
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/addresses/update:
    post:
      description: Update a verifiable address for the user account.
      operationId: systemUpdateVerifiableAddress
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: UpdateAddress
        schema:
          $ref: '#/definitions/UpdateUserVerifiableAddress'
      responses:
        "200":
          $ref: '#/responses/SystemAddressResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Update Verifiable Address
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/change_password:
    post:
      description: |-
        Changes user password if the provided password matches the current user password.
        Fails if the current password is not set. For setting a password for user use the reset password flow.
        Endpoint is protected by Brute Force mechanism.
      operationId: changePassword
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: ChangePassword
        schema:
          $ref: '#/definitions/ChangePassword'
      responses:
        "204":
          $ref: '#/responses/ChangePasswordResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Change Password
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/code/generate:
    post:
      deprecated: true
      description: |-
        Generate code of a specific type
        Invalidates previously generated OTPs for action associated with the type.
        Code is valid for specific period of time configured in Identity Pool.

        Keep in mind that `address` attribute for different code types may be optional and may not mean the same:
        for `reset_password`, `authentication` and `challenge` it is optional, but if provided must be user's address (verified or unverified)
        for `activation` it is not mandatory (system will pick up address itself if there is only one in user entry) but if provided it must be one of the user's addresses (can be not verified)
        for `verify_address` it must be user's unverified address and that address cannot be someone's else verified address

        For `activation`, `reset_password` and `challenge` there is only one active code for a user (generating new one invalidates previous)
        For `verify_address` there might be many codes for a user. During verification latest for an address is being compared.
      operationId: generateCode
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: CodeRequest
        schema:
          $ref: '#/definitions/RequestCode'
      responses:
        "201":
          $ref: '#/responses/GenerateCodeResponse'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity_self_registration
      summary: Generate code of a specific type
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/identifiers/add:
    post:
      description: |-
        Add an identifier to the user account in the specified identity pool.

        The identifier must be unique within the user's account.
      operationId: systemAddIdentifier
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: NewIdentifier
        schema:
          $ref: '#/definitions/AddUserIdentifier'
      responses:
        "200":
          $ref: '#/responses/SystemIdentifierResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "409":
          $ref: '#/responses/conflictHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Add Identifier
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/identifiers/remove:
    post:
      description: Remove an identifier from the specified user account.
      operationId: systemDeleteIdentifier
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: Identifier
        schema:
          $ref: '#/definitions/DeleteUserIdentifier'
      responses:
        "204":
          $ref: '#/responses/DeleteIdentifierResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Remove Identifier
      tags:
      - Users
  /system/pools/{ipID}/users/{userID}/password/state:
    put:
      description: |-
        There is a set of well-defined states password can be in:
        `valid` - password is valid and can be used for authentication etc.
        `must_be_reset` - password is not valid for authentication and must be reset
        `must_be_changed` - password is valid for one authentication and then must be changed or will be moved to `must_be_reset` state
      operationId: setPasswordState
      parameters:
      - in: path
        name: ipID
        required: true
        type: string
      - in: path
        name: userID
        required: true
        type: string
      - in: body
        name: State
        schema:
          $ref: '#/definitions/SetPasswordStateRequest'
      responses:
        "204":
          description: ' State set'
        "400":
          $ref: '#/responses/badRequestHTTPError'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "422":
          $ref: '#/responses/unprocessableEntityHTTPError'
      security:
      - system:
        - identity
      summary: Set Password State
      tags:
      - Users
  /system/pools/{ipID}/users/by_key:
    post:
      description: |-
        Retrieve extended information about a user record found by provided key.

        Only one of `identifier` or `address` can be provided.
        Address must be user's verified address. It's not possible to find user by unverified address.

        The response contains user's basic details, payload, and metadata, as well as all their identifiers,
        addresses, and blurred credentials.
      operationId: systemGetUserByKey
      parameters:
      - description: A server will only return requested resources if the resource
          matches one of the listed ETag value
        format: etag
        in: header
        name: if-match
        type: string
      - in: path
        name: ipID
        required: true
        type: string
      - in: body
        name: GetUserByKey
        schema:
          $ref: '#/definitions/GetUserByKey'
      responses:
        "200":
          $ref: '#/responses/SystemUserResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "412":
          $ref: '#/responses/payloadTooLargeHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Get User Details by key
      tags:
      - Users
  /system/schemas/{schID}:
    get:
      description: |-
        Gets schema.

        This API does not use ETags but data is always consistent.
      operationId: systemGetSchema
      parameters:
      - in: path
        name: schID
        required: true
        type: string
      responses:
        "200":
          $ref: '#/responses/SchemaResponse'
        "401":
          $ref: '#/responses/unauthorizedHTTPError'
        "403":
          $ref: '#/responses/forbiddenHTTPError'
        "404":
          $ref: '#/responses/notFoundHTTPError'
        "429":
          $ref: '#/responses/tooManyRequestsHTTPError'
      security:
      - system:
        - identity
      summary: Get Schema
      tags:
      - Schemas
produces:
- application/json
responses:
  ChangePasswordResponse:
    description: Password has been changed
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  CodeIDResponse:
    description: Code ID
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/CodeID'
  CompleteAddressVerificationResponse:
    description: Complete address veritifaction response
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  CompleteResetPasswordResponse:
    description: Password reset
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  CompleteResetWebAuthnResponse:
    description: Request accepted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  ConfirmResetPasswordResponse:
    description: Request accepted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  DeleteAddressResponse:
    description: Deletes a verifiable address from the user account
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  DeleteIdentifierResponse:
    description: Deletes an identifier from the user account
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  GenerateCodeResponse:
    description: Code
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/Codes'
  InspectOTPResponse:
    description: OTP
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/InspectOTPUserOperationalData'
  PoolResponseParams:
    description: Identity Pool
    schema:
      $ref: '#/definitions/PoolResponse'
  RequestAddressVerificationResponse:
    description: Request accepted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  RequestOTPChallengeResponse:
    description: Request accepted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  RequestResetPasswordResponse:
    description: Request accepted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  RequestResetWebAuthnResponse:
    description: Request accepted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  SchemaResponse:
    description: Identity Schema
    schema:
      $ref: '#/definitions/Schema'
  SelfSendActivationMessageResponse:
    description: Activation message sent
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  SystemAddressResponse:
    description: Address
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/UserVerifiableAddress'
  SystemDeleteUserResponse:
    description: User has been deleted
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
  SystemIdentifierResponse:
    description: Identifier
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/UserIdentifier'
  SystemUserResponse:
    description: User
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/UserWithData'
  TenantDump:
    description: Tenant dump
    schema:
      $ref: '#/definitions/TenantDump'
  UserIDResponse:
    description: User
    headers:
      etag:
        description: |-
          The ETag HTTP header is an identifier for a specific version of a resource

          in:header
        format: etag
        type: string
    schema:
      $ref: '#/definitions/UserID'
  UsersResponse:
    description: Identity Users
    schema:
      $ref: '#/definitions/Users'
  VerifyPasswordResponse:
    description: Password correct
    schema:
      $ref: '#/definitions/VerifyPasswordResponseData'
  badRequestHTTPError:
    description: Bad request
    schema:
      $ref: '#/definitions/Error'
  conflictHTTPError:
    description: Conflict
    schema:
      $ref: '#/definitions/Error'
  forbiddenHTTPError:
    description: Forbidden
    schema:
      $ref: '#/definitions/Error'
  internalServerErrorHTTPError:
    description: Internal server error
    schema:
      $ref: '#/definitions/Error'
  methodNotAllowedHTTPError:
    description: Method not allowed
    schema:
      $ref: '#/definitions/Error'
  notFoundHTTPError:
    description: Not found
    schema:
      $ref: '#/definitions/Error'
  payloadTooLargeHTTPError:
    description: Payload too large
    schema:
      $ref: '#/definitions/Error'
  preconditionFailedHTTPError:
    description: Precondition failed
    schema:
      $ref: '#/definitions/Error'
  tooManyRequestsHTTPError:
    description: Too many requests
    schema:
      $ref: '#/definitions/Error'
  unauthorizedHTTPError:
    description: Unauthorized
    schema:
      $ref: '#/definitions/Error'
  unprocessableEntityHTTPError:
    description: Unprocessable entity
    schema:
      $ref: '#/definitions/Error'
schemes:
- https
securityDefinitions:
  system:
    authorizationUrl: /default/system/oauth2/authorize
    flow: accessCode
    scopes:
      identity: identity
      identity_self_registration: identity_self_registration
      manage_configuration: manage_configuration
    tokenUrl: /default/system/oauth2/token
    type: oauth2
swagger: "2.0"
