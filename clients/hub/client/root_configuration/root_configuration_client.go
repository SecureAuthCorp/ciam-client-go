// Code generated by go-swagger; DO NOT EDIT.

package root_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new root configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new root configuration API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new root configuration API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for root configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextCsv sets the Accept header to "text/csv".
func WithAcceptTextCsv(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/csv"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	ExportSystemConfig(params *ExportSystemConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportSystemConfigOK, error)

	ImportSystemConfig(params *ImportSystemConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportSystemConfigNoContent, error)

	PatchSystemConfigRfc6902(params *PatchSystemConfigRfc6902Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSystemConfigRfc6902NoContent, error)

	PatchSystemConfigRfc7396(params *PatchSystemConfigRfc7396Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSystemConfigRfc7396NoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ExportSystemConfig exports tenant configuration

	Returns a JSON with the configuration of the specified tenant.

Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.
*/
func (a *Client) ExportSystemConfig(params *ExportSystemConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportSystemConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportSystemConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportSystemConfig",
		Method:             "GET",
		PathPattern:        "/system/promote/config",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportSystemConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportSystemConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportSystemConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ImportSystemConfig imports tenant configuration

	Import tenant's configuration.

Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.
*/
func (a *Client) ImportSystemConfig(params *ImportSystemConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportSystemConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportSystemConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportSystemConfig",
		Method:             "POST",
		PathPattern:        "/system/promote/config",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportSystemConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportSystemConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportSystemConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PatchSystemConfigRfc6902 JSONs patch

	Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.

Applies the [RFC 6902](https://datatracker.ietf.org/doc/html/rfc6902) JSON Patch to the tenant configuration.

The Patch JSON API is intended for easy configuration changes when there are a small number of known tenant modifications and the user applying the patch is familiar with them.

The Patch JSON API accepts a JSON Array which objects represent a single
operation applied to the target JSON (tenant configuration).
Evaluation continues until all operations are
successfully applied or until an error condition is encountered.
*/
func (a *Client) PatchSystemConfigRfc6902(params *PatchSystemConfigRfc6902Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSystemConfigRfc6902NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSystemConfigRfc6902Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchSystemConfigRfc6902",
		Method:             "PATCH",
		PathPattern:        "/system/promote/config-rfc6902",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSystemConfigRfc6902Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSystemConfigRfc6902NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchSystemConfigRfc6902: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PatchSystemConfigRfc7396 JSONs merge patch

	Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.

Applies the [RFC 7396](https://www.rfc-editor.org/rfc/rfc7396) JSON Merge Patch to the tenant configuration.

The JSON Merge Patch API facilitates the automated promotion of larger configuration changes.
It provides a straightforward and efficient way to apply extensive modifications, such as through
scripts or automated methods. This API streamlines the process of implementing significant
configuration updates, improving efficiency and accuracy.

The JSON Merge Patch API accepts a JSON that describes changes to be made to a target tenant configuration
using a syntax that closely mimics the configuration being modified.
*/
func (a *Client) PatchSystemConfigRfc7396(params *PatchSystemConfigRfc7396Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchSystemConfigRfc7396NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSystemConfigRfc7396Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchSystemConfigRfc7396",
		Method:             "PATCH",
		PathPattern:        "/system/promote/config-rfc7396",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSystemConfigRfc7396Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchSystemConfigRfc7396NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchSystemConfigRfc7396: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
