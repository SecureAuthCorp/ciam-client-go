// Code generated by go-swagger; DO NOT EDIT.

package workspace_configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workspace configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workspace configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ExportWorkspaceConfig(params *ExportWorkspaceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportWorkspaceConfigOK, error)

	ImportWorkspaceConfig(params *ImportWorkspaceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportWorkspaceConfigNoContent, error)

	CloneWorkspace(params *CloneWorkspaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneWorkspaceNoContent, error)

	PatchWorkspaceConfigRfc6902(params *PatchWorkspaceConfigRfc6902Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchWorkspaceConfigRfc6902NoContent, error)

	PatchWorkspaceConfigRfc7396(params *PatchWorkspaceConfigRfc7396Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchWorkspaceConfigRfc7396NoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ExportWorkspaceConfig exports workspace configuration

	Returns a JSON with the configuration of the specified workspace.

Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.
*/
func (a *Client) ExportWorkspaceConfig(params *ExportWorkspaceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportWorkspaceConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportWorkspaceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportWorkspaceConfig",
		Method:             "GET",
		PathPattern:        "/{tid}/workspaces/{wid}/promote/config",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportWorkspaceConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportWorkspaceConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportWorkspaceConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ImportWorkspaceConfig imports workspace configuration

	Import workspace's configuration.

Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.
*/
func (a *Client) ImportWorkspaceConfig(params *ImportWorkspaceConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportWorkspaceConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportWorkspaceConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportWorkspaceConfig",
		Method:             "POST",
		PathPattern:        "/{tid}/workspaces/{wid}/promote/config",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportWorkspaceConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportWorkspaceConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportWorkspaceConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CloneWorkspace clones workspace

	Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.

Clones the workspace configuration.

Optionally Applies the [RFC 7396](https://www.rfc-editor.org/rfc/rfc7396) JSON Merge Patch to the workspace configuration.
*/
func (a *Client) CloneWorkspace(params *CloneWorkspaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneWorkspaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneWorkspaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneWorkspace",
		Method:             "POST",
		PathPattern:        "/{tid}/workspaces/{wid}/clone",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CloneWorkspaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneWorkspaceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneWorkspace: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PatchWorkspaceConfigRfc6902 JSONs patch

	Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.

Applies the [RFC 6902](https://datatracker.ietf.org/doc/html/rfc6902) JSON Patch to the workspace configuration.

The Patch JSON API is intended for easy configuration changes when there are a small number of known workspace modifications and the user applying the patch is familiar with them.

The Patch JSON API accepts a JSON Array which objects represent a single
operation applied to the target JSON (workspace configuration).
Evaluation continues until all operations are
successfully applied or until an error condition is encountered.
*/
func (a *Client) PatchWorkspaceConfigRfc6902(params *PatchWorkspaceConfigRfc6902Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchWorkspaceConfigRfc6902NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWorkspaceConfigRfc6902Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchWorkspaceConfigRfc6902",
		Method:             "PATCH",
		PathPattern:        "/{tid}/workspaces/{wid}/promote/config-rfc6902",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkspaceConfigRfc6902Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchWorkspaceConfigRfc6902NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchWorkspaceConfigRfc6902: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PatchWorkspaceConfigRfc7396 JSONs merge patch

	Alpha API: Test use only. Subject to potential functionality limitations, breaking changes, future updates, and removal without notice.

Applies the [RFC 7396](https://www.rfc-editor.org/rfc/rfc7396) JSON Merge Patch to the workspace configuration.

The JSON Merge Patch API facilitates the automated promotion of larger configuration changes.
It provides a straightforward and efficient way to apply extensive modifications, such as through
scripts or automated methods. This API streamlines the process of implementing significant
configuration updates, improving efficiency and accuracy.

The JSON Merge Patch API accepts a JSON that describes changes to be made to a target workspace configuration
using a syntax that closely mimics the configuration being modified.
*/
func (a *Client) PatchWorkspaceConfigRfc7396(params *PatchWorkspaceConfigRfc7396Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchWorkspaceConfigRfc7396NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWorkspaceConfigRfc7396Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchWorkspaceConfigRfc7396",
		Method:             "PATCH",
		PathPattern:        "/{tid}/workspaces/{wid}/promote/config-rfc7396",
		ProducesMediaTypes: []string{"application/json", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWorkspaceConfigRfc7396Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchWorkspaceConfigRfc7396NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchWorkspaceConfigRfc7396: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
