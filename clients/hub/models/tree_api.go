// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TreeAPI tree API
//
// swagger:model TreeAPI
type TreeAPI struct {

	// api type
	// Example: rest
	// Enum: ["rest","graphql"]
	APIType string `json:"api_type,omitempty" yaml:"api_type,omitempty"`

	// if false it is not possible to assign a policy
	CanHavePolicy bool `json:"can_have_policy,omitempty" yaml:"can_have_policy,omitempty"`

	// Data classifications
	DataClassifications []string `json:"data_classifications" yaml:"data_classifications"`

	// graphql schema
	GraphqlSchema string `json:"graphql_schema,omitempty" yaml:"graphql_schema,omitempty"`

	// graphql types
	GraphqlTypes GraphQLTypes `json:"graphql_types,omitempty" yaml:"graphql_types,omitempty"`

	// HTTP request method
	// Example: GET
	Method string `json:"method,omitempty" yaml:"method,omitempty"`

	// HTTP request path
	// Example: /pets
	Path string `json:"path,omitempty" yaml:"path,omitempty"`

	// optional id of a policy
	// Example: block
	PolicyID string `json:"policy_id,omitempty" yaml:"policy_id,omitempty"`

	// position of the api in the apis list
	// Example: 1
	Position int64 `json:"position,omitempty" yaml:"position,omitempty"`
}

// Validate validates this tree API
func (m *TreeAPI) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGraphqlTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var treeApiTypeAPITypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rest","graphql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeApiTypeAPITypePropEnum = append(treeApiTypeAPITypePropEnum, v)
	}
}

const (

	// TreeAPIAPITypeRest captures enum value "rest"
	TreeAPIAPITypeRest string = "rest"

	// TreeAPIAPITypeGraphql captures enum value "graphql"
	TreeAPIAPITypeGraphql string = "graphql"
)

// prop value enum
func (m *TreeAPI) validateAPITypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeApiTypeAPITypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeAPI) validateAPIType(formats strfmt.Registry) error {
	if swag.IsZero(m.APIType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAPITypeEnum("api_type", "body", m.APIType); err != nil {
		return err
	}

	return nil
}

func (m *TreeAPI) validateGraphqlTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.GraphqlTypes) { // not required
		return nil
	}

	if err := m.GraphqlTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("graphql_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("graphql_types")
		}
		return err
	}

	return nil
}

// ContextValidate validate this tree API based on the context it is used
func (m *TreeAPI) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGraphqlTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreeAPI) contextValidateGraphqlTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GraphqlTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("graphql_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("graphql_types")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreeAPI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreeAPI) UnmarshalBinary(b []byte) error {
	var res TreeAPI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
