// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DynamicClientRegistrationSettings dynamic client registration settings
//
// swagger:model DynamicClientRegistrationSettings
type DynamicClientRegistrationSettings struct {

	// Binds registration token to the certificate used to register client
	CertBoundRegistrationToken bool `json:"cert_bound_registration_token,omitempty" yaml:"cert_bound_registration_token,omitempty"`

	// An optional list of scopes to be granted to a client when no scopes are provided in the DCR registration request
	//
	// If not provided, the following default scopes are granted for the client application: openid, address, email, phone, profile.
	DefaultScopes []string `json:"default_scopes" yaml:"default_scopes"`

	// Disable registration access token expiry
	//
	// If is flag is on, the registration access token will never expire.
	DisableRegistrationAccessTokenExpiry bool `json:"disable_registration_access_token_expiry,omitempty" yaml:"disable_registration_access_token_expiry,omitempty"`

	// Disables client management using registration token
	//
	// If disabled, client can manage itself using access token issued by client credentials flow.
	DisableRegistrationTokenManagement bool `json:"disable_registration_token_management,omitempty" yaml:"disable_registration_token_management,omitempty"`

	// Disables registration token rotation
	DisableRegistrationTokenRotation bool `json:"disable_registration_token_rotation,omitempty" yaml:"disable_registration_token_rotation,omitempty"`

	// Enables dynamic client registration
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`

	// initial access token
	InitialAccessToken *InitialAccessTokenSettings `json:"initial_access_token,omitempty" yaml:"initial_access_token,omitempty"`

	// payload
	Payload *PayloadSettings `json:"payload,omitempty" yaml:"payload,omitempty"`

	// Registration access token TTL
	//
	// Time to live of the registration access token (default 30 days).
	// The minimum value is 24 hours.
	// Example: 720h0m0s
	// Format: duration
	RegistrationAccessTokenTTL strfmt.Duration `json:"registration_access_token_ttl,omitempty" yaml:"registration_access_token_ttl,omitempty"`
}

// Validate validates this dynamic client registration settings
func (m *DynamicClientRegistrationSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitialAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationAccessTokenTTL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DynamicClientRegistrationSettings) validateInitialAccessToken(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialAccessToken) { // not required
		return nil
	}

	if m.InitialAccessToken != nil {
		if err := m.InitialAccessToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial_access_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initial_access_token")
			}
			return err
		}
	}

	return nil
}

func (m *DynamicClientRegistrationSettings) validatePayload(formats strfmt.Registry) error {
	if swag.IsZero(m.Payload) { // not required
		return nil
	}

	if m.Payload != nil {
		if err := m.Payload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payload")
			}
			return err
		}
	}

	return nil
}

func (m *DynamicClientRegistrationSettings) validateRegistrationAccessTokenTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationAccessTokenTTL) { // not required
		return nil
	}

	if err := validate.FormatOf("registration_access_token_ttl", "body", "duration", m.RegistrationAccessTokenTTL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dynamic client registration settings based on the context it is used
func (m *DynamicClientRegistrationSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInitialAccessToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DynamicClientRegistrationSettings) contextValidateInitialAccessToken(ctx context.Context, formats strfmt.Registry) error {

	if m.InitialAccessToken != nil {

		if swag.IsZero(m.InitialAccessToken) { // not required
			return nil
		}

		if err := m.InitialAccessToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial_access_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initial_access_token")
			}
			return err
		}
	}

	return nil
}

func (m *DynamicClientRegistrationSettings) contextValidatePayload(ctx context.Context, formats strfmt.Registry) error {

	if m.Payload != nil {

		if swag.IsZero(m.Payload) { // not required
			return nil
		}

		if err := m.Payload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DynamicClientRegistrationSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DynamicClientRegistrationSettings) UnmarshalBinary(b []byte) error {
	var res DynamicClientRegistrationSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
