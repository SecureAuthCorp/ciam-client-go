// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OktaSettings Okta IDP specific settings
//
// swagger:model OktaSettings
type OktaSettings struct {

	// ID of a custom authorization server
	//
	// If the `use_org_authorization_server` parameter is set to `false`, use this field to specify
	// the ID of a custom authorization server.
	//
	// If not provided, the `default` value is used.
	AuthorizationServerID string `json:"authorization_server_id,omitempty" yaml:"authorization_server_id,omitempty"`

	// String represented domain of the Okta Authentication Service for your organization
	// Example: dev-316761.okta.com
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty"`

	// If enabled, users' data is collected by calling the `userinfo` endpoint.
	GetUserInfo bool `json:"get_user_info,omitempty" yaml:"get_user_info,omitempty"`

	// An array of additional scopes your client requests
	Scopes []string `json:"scopes" yaml:"scopes"`

	// Whether to send the identifier as a `login_hint` parameter to the IDP
	SendLoginHint bool `json:"send_login_hint,omitempty" yaml:"send_login_hint,omitempty"`

	// If set to `true`, the built-in authorization server is used
	UseOrgAuthorizationServer bool `json:"use_org_authorization_server,omitempty" yaml:"use_org_authorization_server,omitempty"`
}

// Validate validates this okta settings
func (m *OktaSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this okta settings based on context it is used
func (m *OktaSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OktaSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OktaSettings) UnmarshalBinary(b []byte) error {
	var res OktaSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
