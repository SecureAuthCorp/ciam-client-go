// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TreeServerConsent tree server consent
//
// swagger:model TreeServerConsent
type TreeServerConsent struct {

	// client
	Client *TreeClient `json:"client,omitempty"`

	// custom
	Custom *CustomServerConsent `json:"custom,omitempty"`

	// oidc
	Oidc OIDCServerConsent `json:"oidc,omitempty"`

	// openbanking
	Openbanking *OpenbankingServerConsent `json:"openbanking,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this tree server consent
func (m *TreeServerConsent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenbanking(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreeServerConsent) validateClient(formats strfmt.Registry) error {
	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *TreeServerConsent) validateCustom(formats strfmt.Registry) error {
	if swag.IsZero(m.Custom) { // not required
		return nil
	}

	if m.Custom != nil {
		if err := m.Custom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom")
			}
			return err
		}
	}

	return nil
}

func (m *TreeServerConsent) validateOpenbanking(formats strfmt.Registry) error {
	if swag.IsZero(m.Openbanking) { // not required
		return nil
	}

	if m.Openbanking != nil {
		if err := m.Openbanking.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openbanking")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openbanking")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tree server consent based on the context it is used
func (m *TreeServerConsent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpenbanking(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreeServerConsent) contextValidateClient(ctx context.Context, formats strfmt.Registry) error {

	if m.Client != nil {

		if swag.IsZero(m.Client) { // not required
			return nil
		}

		if err := m.Client.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *TreeServerConsent) contextValidateCustom(ctx context.Context, formats strfmt.Registry) error {

	if m.Custom != nil {

		if swag.IsZero(m.Custom) { // not required
			return nil
		}

		if err := m.Custom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom")
			}
			return err
		}
	}

	return nil
}

func (m *TreeServerConsent) contextValidateOpenbanking(ctx context.Context, formats strfmt.Registry) error {

	if m.Openbanking != nil {

		if swag.IsZero(m.Openbanking) { // not required
			return nil
		}

		if err := m.Openbanking.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openbanking")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openbanking")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreeServerConsent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreeServerConsent) UnmarshalBinary(b []byte) error {
	var res TreeServerConsent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
