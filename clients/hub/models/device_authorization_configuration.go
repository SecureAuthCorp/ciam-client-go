// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceAuthorizationConfiguration device authorization configuration
//
// swagger:model DeviceAuthorizationConfiguration
type DeviceAuthorizationConfiguration struct {

	// Custom device authorization request TTL
	// If not provided, TTL is set to 30 minutes
	// Format: duration
	RequestTTL strfmt.Duration `json:"request_ttl,omitempty" yaml:"request_ttl,omitempty"`

	// user code character set
	UserCodeCharacterSet UserCodeCharacterSet `json:"user_code_character_set,omitempty" yaml:"user_code_character_set,omitempty"`

	// user code length
	UserCodeLength int64 `json:"user_code_length,omitempty" yaml:"user_code_length,omitempty"`
}

// Validate validates this device authorization configuration
func (m *DeviceAuthorizationConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCodeCharacterSet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceAuthorizationConfiguration) validateRequestTTL(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestTTL) { // not required
		return nil
	}

	if err := validate.FormatOf("request_ttl", "body", "duration", m.RequestTTL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAuthorizationConfiguration) validateUserCodeCharacterSet(formats strfmt.Registry) error {
	if swag.IsZero(m.UserCodeCharacterSet) { // not required
		return nil
	}

	if err := m.UserCodeCharacterSet.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_code_character_set")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("user_code_character_set")
		}
		return err
	}

	return nil
}

// ContextValidate validate this device authorization configuration based on the context it is used
func (m *DeviceAuthorizationConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserCodeCharacterSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceAuthorizationConfiguration) contextValidateUserCodeCharacterSet(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UserCodeCharacterSet) { // not required
		return nil
	}

	if err := m.UserCodeCharacterSet.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_code_character_set")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("user_code_character_set")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceAuthorizationConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceAuthorizationConfiguration) UnmarshalBinary(b []byte) error {
	var res DeviceAuthorizationConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
