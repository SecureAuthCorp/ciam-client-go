// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TreeClient tree client
//
// swagger:model TreeClient
type TreeClient struct {

	// Application URL
	AppURL string `json:"app_url,omitempty" yaml:"app_url,omitempty"`

	// The client application type.
	//
	// Client applications can be either of a `web` or `native` types.
	//
	// Web applications include clients like server web applications or service apps.
	//
	// Native applications include single-page applications (SPAs) and mobile or desktop
	// applications.
	//
	// Apply security measures according to the type of your application.
	// Example: web
	ApplicationType string `json:"application_type,omitempty" yaml:"application_type,omitempty"`

	// An array of dynamically calculated application types that can be used for filtering
	// Example: ["single_page","server_web","mobile_desktop","service","legacy","dcr"]
	// Read Only: true
	ApplicationTypes []string `json:"application_types" yaml:"application_types"`

	// Identity of the intended recipients (the audience).
	//
	// Typically, the audience is a single resource server or a list of resource servers.
	//
	// It is considered a good practice to limit the audience of the token for security purposes.
	Audience []string `json:"audience" yaml:"audience"`

	// Authorization details types
	//
	// Indicates what authorization details types the client can use.
	AuthorizationDetailsTypes []AuthorizationDetailType `json:"authorization_details_types" yaml:"authorization_details_types"`

	// Algorithm used for encrypting authorization responses.
	//
	// If both signing and encryption are requested, the response is first signed, and then encrypted.
	// As a result, a Nested JWT is obtained, as defined in JWT [RFC7519].
	//
	// If omitted, no encryption is applied by default.
	// Example: RSA-OAEP-256
	// Enum: ["RSA-OAEP","RSA-OAEP-256"]
	AuthorizationEncryptedResponseAlg string `json:"authorization_encrypted_response_alg,omitempty" yaml:"authorization_encrypted_response_alg,omitempty"`

	// Algorithm used for encrypting authorization responses.
	//
	// With `authorization_encrypted_response_alg` specified, the default value is `A128CBC-HS256`.
	// When `authorization_encrypted_response_enc` is included, `authorization_encrypted_response_alg`
	// MUST also be provided in a request.
	// Example: A128CBC-HS256
	// Enum: ["A256GCM","A128CBC-HS256"]
	AuthorizationEncryptedResponseEnc string `json:"authorization_encrypted_response_enc,omitempty" yaml:"authorization_encrypted_response_enc,omitempty"`

	// Algorithm used for signing authorization responses.
	//
	// With this parameter specified, the response is signed using JWS and according to the configured algorithm.
	//
	// `none` isn't allowed.
	// Example: RS256
	AuthorizationSignedResponseAlg string `json:"authorization_signed_response_alg,omitempty" yaml:"authorization_signed_response_alg,omitempty"`

	// OPTIONAL. The JWS alg algorithm value used by the client application to sign authentication requests.
	//
	// When omitted, the client application doesn't send signed authentication requests.
	BackchannelAuthenticationRequestSigningAlg string `json:"backchannel_authentication_request_signing_alg,omitempty" yaml:"backchannel_authentication_request_signing_alg,omitempty"`

	// REQUIRED for requests when the client application uses CIBA as an authorization grant type, and the token
	// delivery mode is set to `ping` or `push`.
	//
	// This parameter is the endpoint where an OP (OpenID Provider) posts a notification after end-user authentication.
	//
	// Input: an HTTPS URL.
	BackchannelClientNotificationEndpoint string `json:"backchannel_client_notification_endpoint,omitempty" yaml:"backchannel_client_notification_endpoint,omitempty"`

	// Boolean value specifying whether the RP requires that a sid (session ID) claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used.
	BackchannelLogoutSessionRequired bool `json:"backchannel_logout_session_required,omitempty" yaml:"backchannel_logout_session_required,omitempty"`

	// RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
	BackchannelLogoutURI string `json:"backchannel_logout_uri,omitempty" yaml:"backchannel_logout_uri,omitempty"`

	// REQUIRED for requests when the client application uses CIBA as an authorization grant type.
	//
	// Input: `poll`, `ping`, or `push`.
	BackchannelTokenDeliveryMode string `json:"backchannel_token_delivery_mode,omitempty" yaml:"backchannel_token_delivery_mode,omitempty"`

	// OPTIONAL. A boolean value indicating the `user_code` parameter support by the client application.
	//
	// If omitted, the default value is `false`.
	//
	// This applies only when the `backchannel_user_code_parameter_supported` OP parameter is `true`.
	BackchannelUserCodeParameter bool `json:"backchannel_user_code_parameter,omitempty" yaml:"backchannel_user_code_parameter,omitempty"`

	// Base64 encoded certicate in PEM format that will be automatically converted and stored in jwks
	//
	// It is used only as an input parameter for the Create / Import Client.
	Certificate string `json:"certificate,omitempty" yaml:"certificate,omitempty"`

	// The client identifier time of issue.
	//
	// The value is the number of seconds between 1970-01-01T00:00:00Z (UTC) and the date/time of issue.
	ClientIDIssuedAt int64 `json:"client_id_issued_at,omitempty" yaml:"client_id_issued_at,omitempty"`

	// Human-readable name of a client application.
	// Example: My app
	ClientName string `json:"client_name,omitempty" yaml:"client_name,omitempty"`

	// OAuth client secret
	//
	// If not provided, a random client secret is generated.
	// Min Length: 32
	ClientSecret string `json:"client_secret,omitempty" yaml:"client_secret,omitempty"`

	// The client secret expiration time.
	//
	// If the client secret does not expire, `client_secret_expires_at` = `0`.
	ClientSecretExpiresAt int64 `json:"client_secret_expires_at,omitempty" yaml:"client_secret_expires_at,omitempty"`

	// Defines whether the client application is active or not.
	//
	// Only clients with the `Active` status can preform authorization, authentication, and PAR requests.
	// Enum: ["active","inactive"]
	ClientStatus string `json:"client_status,omitempty" yaml:"client_status,omitempty"`

	// client type
	// Enum: ["oauth2","saml"]
	ClientType string `json:"client_type,omitempty" yaml:"client_type,omitempty"`

	// URI of a client application.
	ClientURI string `json:"client_uri,omitempty" yaml:"client_uri,omitempty"`

	// confirmation
	Confirmation *Confirmation `json:"confirmation,omitempty" yaml:"confirmation,omitempty"`

	// Date when the client application was created.
	// Example: 2022-04-07T19:17:31.323187Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty" yaml:"created_at,omitempty"`

	// default ACR values
	// list of ACR values that will be implicitly requested for the client if not explicitly specified
	DefaultAcrValues []string `json:"default_acr_values" yaml:"default_acr_values"`

	// Description of the client application.
	Description string `json:"description,omitempty" yaml:"description,omitempty"`

	// Optional developer owner of the client application.
	DeveloperID string `json:"developer_id,omitempty" yaml:"developer_id,omitempty"`

	// developer metadata
	DeveloperMetadata Metadata `json:"developer_metadata,omitempty" yaml:"developer_metadata,omitempty"`

	// Boolean value specifying whether the client always uses DPoP for token requests
	// If true, the authorization server will reject token requests from this client that do not contain the DPoP header.
	DpopBoundAccessTokens bool `json:"dpop_bound_access_tokens,omitempty" yaml:"dpop_bound_access_tokens,omitempty"`

	// dynamically registered
	DynamicallyRegistered bool `json:"dynamically_registered,omitempty" yaml:"dynamically_registered,omitempty"`

	// fdx
	Fdx *FDXMetadata `json:"fdx,omitempty" yaml:"fdx,omitempty"`

	// An array of allowed OAuth client grant types.
	//
	// The `grantTypes` array stores OAuth flows that are allowed for a given client application.
	//
	// [Read more](https://cloudentity.com/developers/basics/oauth-grant-types/grant-types-overview/) about grant types.
	// Example: ["password","refresh_token","client_credentials","implicit","authorization_code"]
	GrantTypes []string `json:"grant_types" yaml:"grant_types"`

	// An array of hashed rotated client secrets
	HashedRotatedSecrets []string `json:"hashed_rotated_secrets" yaml:"hashed_rotated_secrets"`

	// Hashed client secret
	//
	// Hashing client secrets provides additional security for your secrets storage as it hides
	// plaintext secrets from being viewed both in the UI and the database.
	HashedSecret string `json:"hashed_secret,omitempty" yaml:"hashed_secret,omitempty"`

	// JWE alg algorithm for encrypting the ID token issued to this client application.
	// Enum: ["RSA-OAEP","RSA-OAEP-256"]
	IDTokenEncryptedResponseAlg string `json:"id_token_encrypted_response_alg,omitempty" yaml:"id_token_encrypted_response_alg,omitempty"`

	// JWE enc algorithm for encrypting the ID token issued to this client application.
	// Enum: ["A256GCM","A128CBC-HS256"]
	IDTokenEncryptedResponseEnc string `json:"id_token_encrypted_response_enc,omitempty" yaml:"id_token_encrypted_response_enc,omitempty"`

	// Algorithm for signing ID tokens issued for a client application.
	//
	// The default value depends on authorization server configuration.
	// Example: ES256
	// Enum: ["RS256","ES256","PS256"]
	IDTokenSignedResponseAlg string `json:"id_token_signed_response_alg,omitempty" yaml:"id_token_signed_response_alg,omitempty"`

	// An introspection endpoint authentication method configured for the client application (read-only).
	//
	// If empty, the `token_endpoint_auth_method` is used.
	//
	// Cloudentity supports the following client authentication methods:
	// `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
	// `self_signed_tls_client_auth`, `tls_client_auth`, `none`.
	//
	// [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
	// Example: client_secret_basic
	// Enum: ["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]
	IntrospectionEndpointAuthMethod string `json:"introspection_endpoint_auth_method,omitempty" yaml:"introspection_endpoint_auth_method,omitempty"`

	// jwks
	Jwks *ClientJWKs `json:"jwks,omitempty" yaml:"jwks,omitempty"`

	// A URL of JSON Web Key Set with the public keys used by a client application to authenticate to Cloudentity.
	JwksURI string `json:"jwks_uri,omitempty" yaml:"jwks_uri,omitempty"`

	// Logo URI.
	LogoURI string `json:"logo_uri,omitempty" yaml:"logo_uri,omitempty"`

	// metadata
	Metadata Metadata `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// obbr
	Obbr *OBBRMetadata `json:"obbr,omitempty" yaml:"obbr,omitempty"`

	// External organization identifier. It is a unique string assigned by the CDR Register to identify an Accredited
	// Data Recipient Brand.
	//
	// The value obtained is used as the `aud` claim for message signing, for example, when a JSON Web Token (JWT) is
	// required for authorization, and represents the audience(s) the JWT is intended for.
	// Example: 5647fe90-f6bc-11eb-9a03-0242ac130003
	OrganisationID string `json:"organisation_id,omitempty" yaml:"organisation_id,omitempty"`

	// policy execution points
	PolicyExecutionPoints TreePolicyExecutionPoints `json:"policy_execution_points,omitempty" yaml:"policy_execution_points,omitempty"`

	// Policy URL to read about how the profile data is used.
	PolicyURI string `json:"policy_uri,omitempty" yaml:"policy_uri,omitempty"`

	// Array of URLs to which a relying party may request that the user be redirected after a logout has been performed.
	PostLogoutRedirectUris []string `json:"post_logout_redirect_uris" yaml:"post_logout_redirect_uris"`

	// privacy
	Privacy *ClientPrivacy `json:"privacy,omitempty" yaml:"privacy,omitempty"`

	// redirect uris
	RedirectUris RedirectURIs `json:"redirect_uris,omitempty" yaml:"redirect_uris,omitempty"`

	// registration token
	RegistrationToken *RegistrationToken `json:"registration_token,omitempty" yaml:"registration_token,omitempty"`

	// Optional JWE alg algorithm the client is declaring that it may use for encrypting Request Objects
	// Example: RSA-OAEP
	// Enum: ["RSA-OAEP","RSA-OAEP-256"]
	RequestObjectEncryptionAlg string `json:"request_object_encryption_alg,omitempty" yaml:"request_object_encryption_alg,omitempty"`

	// Optional JWE enc algorithm the client is declaring that it may use for encrypting Request Objects
	// When `request_object_encryption_enc` is included, `request_object_encryption_alg` MUST also be provided.
	// Example: A256GCM
	// Enum: ["A256GCM","A128CBC-HS256"]
	RequestObjectEncryptionEnc string `json:"request_object_encryption_enc,omitempty" yaml:"request_object_encryption_enc,omitempty"`

	// Request object signing algorithm for the token endpoint
	//
	// Cloudentity supports signing tokens with the RS256, ES256, and PS256 algorithms. If you do not want
	// to use a signing algorithm, set the value of this parameter to `none`.
	// Example: none
	// Enum: ["any","none","RS256","ES256","PS256"]
	RequestObjectSigningAlg string `json:"request_object_signing_alg,omitempty" yaml:"request_object_signing_alg,omitempty"`

	// Array of absolute URIs that points to the Request Object that holds authorization request parameters.
	RequestUris []string `json:"request_uris" yaml:"request_uris"`

	// Boolean parameter indicating whether the only means of initiating an authorization request the client is allowed to use is PAR.
	RequirePushedAuthorizationRequests bool `json:"require_pushed_authorization_requests,omitempty" yaml:"require_pushed_authorization_requests,omitempty"`

	// response types
	ResponseTypes ResponseTypes `json:"response_types,omitempty" yaml:"response_types,omitempty"`

	// A revocation endpoint authentication method configured for the client application (read-only).
	// If empty, the `token_endpoint_auth_method` is used.
	//
	// Cloudentity supports the following client authentication methods:
	// `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
	// `self_signed_tls_client_auth`, `tls_client_auth`, `none`.
	//
	// [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
	// Example: client_secret_basic
	// Enum: ["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]
	RevocationEndpointAuthMethod string `json:"revocation_endpoint_auth_method,omitempty" yaml:"revocation_endpoint_auth_method,omitempty"`

	// An array of rotated OAuth client secrets
	RotatedSecrets []string `json:"rotated_secrets" yaml:"rotated_secrets"`

	// Allowed SAML attributes
	SamlAllowedAttributes []string `json:"saml_allowed_attributes" yaml:"saml_allowed_attributes"`

	// saml metadata
	SamlMetadata *EntityDescriptor `json:"saml_metadata,omitempty" yaml:"saml_metadata,omitempty"`

	// saml metadata updated at
	// Format: date-time
	SamlMetadataUpdatedAt strfmt.DateTime `json:"saml_metadata_updated_at,omitempty" yaml:"saml_metadata_updated_at,omitempty"`

	// saml metadata url
	SamlMetadataURL string `json:"saml_metadata_url,omitempty" yaml:"saml_metadata_url,omitempty"`

	// If true, then only attributes defined in saml_attributes will be used to build the SAML assertion
	SamlOverrideAttributes bool `json:"saml_override_attributes,omitempty" yaml:"saml_override_attributes,omitempty"`

	// saml service provider id
	SamlServiceProviderID string `json:"saml_service_provider_id,omitempty" yaml:"saml_service_provider_id,omitempty"`

	// SAML Assertion signing hash algorithm.
	// Example: sha-256
	// Enum: ["sha-1","sha-256","sha-512"]
	SamlSigningHash string `json:"saml_signing_hash,omitempty" yaml:"saml_signing_hash,omitempty"`

	// Allows to override the subject name id.
	SamlSubjectNameID string `json:"saml_subject_name_id,omitempty" yaml:"saml_subject_name_id,omitempty"`

	// Allows to override the subject name id format
	// Enum: ["urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified","urn:oasis:names:tc:SAML:2.0:nameid-format:transient","urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress","urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"]
	SamlSubjectNameIDFormat string `json:"saml_subject_name_id_format,omitempty" yaml:"saml_subject_name_id_format,omitempty"`

	// Space-separated list of scopes for compatibility with the OAuth specification.
	// Example: email offline_access openid
	Scope string `json:"scope,omitempty" yaml:"scope,omitempty"`

	// An array of string represented scopes assigned to a client application
	// Example: ["email","offline_access","openid"]
	Scopes []string `json:"scopes" yaml:"scopes"`

	// OPTIONAL. [A URL using the HTTPS scheme](https://openid.net/specs/openid-connect-registration-1_0.html#SectorIdentifierValidation).
	// It must reference a JSON file with the array of `redirect_uri` values.
	//
	// Pass this parameter when you use multiple domains in your `redirect_uris` or need a mechanism to allow changes in
	// domain without affecting consumer consent.
	//
	// [Read more](https://openid.net/specs/openid-connect-core-1_0.html)
	SectorIdentifierURI string `json:"sector_identifier_uri,omitempty" yaml:"sector_identifier_uri,omitempty"`

	// A unique identifier string (e.g., a Universally Unique Identifier
	// (UUID)) assigned by the client developer or software publisher.
	//
	// The `software_id` MUST remain the same across
	// multiple updates or versions of the same software package. The
	// value of this field is not intended to be human-readable and is
	// usually opaque to the client and authorization server.
	SoftwareID string `json:"software_id,omitempty" yaml:"software_id,omitempty"`

	// A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
	// asserts metadata values about the client software.  In some cases,
	// a software statement is issued directly by the client
	// developer.  In other cases, a software statement is issued by
	// a third-party organization for use by the client developer.
	//
	// In both cases, the trust relationship the authorization server has
	// with the issuer of the software statement is intended to be used
	// as an input to the evaluation of whether the registration request
	// is accepted.
	//
	// A software statement can be presented to an
	// authorization server as part of the client registration request.
	SoftwareStatement string `json:"software_statement,omitempty" yaml:"software_statement,omitempty"`

	// software statement payload
	SoftwareStatementPayload Metadata `json:"software_statement_payload,omitempty" yaml:"software_statement_payload,omitempty"`

	// A version identifier string for the client software identified by
	// `software_id`. The value of the `software_version` MUST be changed
	// with any update of the client software identified by the same
	// `software_id`.
	SoftwareVersion string `json:"software_version,omitempty" yaml:"software_version,omitempty"`

	// Subject identifier type
	//
	// Stores information if the subject identifier is of the `public` or the `pairwise` type.
	//
	// Subject identifiers identify an end-user. They are locally unique and never reassigned within the Issuer,
	// and are intended to be consumed by client applications. There are two types
	// of subject identifiers: `public` and `pairwise`.
	//
	// For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.
	//
	// For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
	// Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
	// activity without their permission.
	// Example: public
	// Enum: ["public","pairwise"]
	SubjectType string `json:"subject_type,omitempty" yaml:"subject_type,omitempty"`

	// Defines whether the client application is a system tenant's application or not.
	System bool `json:"system,omitempty" yaml:"system,omitempty"`

	// A string containing the value of an expected dNSName SAN entry in the certificate.
	TLSClientAuthSanDNS string `json:"tls_client_auth_san_dns,omitempty" yaml:"tls_client_auth_san_dns,omitempty"`

	// A string containing the value of an expected rfc822Name SAN entry in the certificate.
	TLSClientAuthSanEmail string `json:"tls_client_auth_san_email,omitempty" yaml:"tls_client_auth_san_email,omitempty"`

	// A string representation of an IP address in either dotted decimal notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined in [RFC5952]) that is expected to be present as an iPAddress SAN entry in the certificate.
	TLSClientAuthSanIP string `json:"tls_client_auth_san_ip,omitempty" yaml:"tls_client_auth_san_ip,omitempty"`

	// A string containing the value of an expected uniformResourceIdentifier SAN entry in the certificate.
	TLSClientAuthSanURI string `json:"tls_client_auth_san_uri,omitempty" yaml:"tls_client_auth_san_uri,omitempty"`

	// An [RFC4514] string representation of the expected subject distinguished name of the certificate.
	TLSClientAuthSubjectDn string `json:"tls_client_auth_subject_dn,omitempty" yaml:"tls_client_auth_subject_dn,omitempty"`

	// Boolean value indicating server support for mutual TLS client certificate-bound access tokens. If omitted, the default value is "false".
	TLSClientCertificateBoundAccessTokens bool `json:"tls_client_certificate_bound_access_tokens,omitempty" yaml:"tls_client_certificate_bound_access_tokens,omitempty"`

	// Token endpoint authentication method configured for a client application
	//
	// Cloudentity supports the following client authentication methods:
	// `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
	// `self_signed_tls_client_auth`, `tls_client_auth`, `none`.
	//
	// To learn more, go to the Authorization Basics > Client Authentication section of this guide.
	// Example: client_secret_basic
	// Enum: ["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none","unspecified"]
	TokenEndpointAuthMethod string `json:"token_endpoint_auth_method,omitempty" yaml:"token_endpoint_auth_method,omitempty"`

	// Signing algorithm for the token endpoint
	//
	// This field is optional. If empty, a client can use any algorithm supported by the server (see `token_endpoint_auth_signing_alg_values_supported` in the well-known endpoing).
	//
	// If provided, depending on the server configuration, client can use of one: HS256, RS256, ES256, PS256 algorithms.
	//
	// If your token endpoint authentication is set to the `private_key_jwt` method, the
	// `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.
	//
	// If your token endpoint authentication is set to the `client_secret_jwt` method,
	// the `token_endpoint_auth_signing_alg` parameter must be HS256.
	// Example: ES256
	// Enum: ["RS256","ES256","PS256","HS256",""]
	TokenEndpointAuthSigningAlg string `json:"token_endpoint_auth_signing_alg,omitempty" yaml:"token_endpoint_auth_signing_alg,omitempty"`

	// token exchange
	TokenExchange *ClientTokenExchangeConfiguration `json:"token_exchange,omitempty" yaml:"token_exchange,omitempty"`

	// token ttls
	TokenTtls *TokenTTLs `json:"token_ttls,omitempty" yaml:"token_ttls,omitempty"`

	// Terms of Service URL.
	TosURI string `json:"tos_uri,omitempty" yaml:"tos_uri,omitempty"`

	// Defines whether the client application is trusted or not.
	//
	// For trusted clients, consent pages are skipped during the authorization process.
	Trusted bool `json:"trusted,omitempty" yaml:"trusted,omitempty"`

	// Date when the client application was updated.
	// Example: 2022-05-08T01:11:51.1262916Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`

	// If enabled the client application will be able to set its own token TTLs.
	UseCustomTokenTtls bool `json:"use_custom_token_ttls,omitempty" yaml:"use_custom_token_ttls,omitempty"`

	// JWS alg algorithm REQUIRED for signing UserInfo Responses.
	//
	// If specified, the response is a JWT serialized and signed with JWS.
	//
	// If omitted, then by default, UserInfo Response returns the Claims
	// as an UTF-8 encoded JSON object using the application/json content-type.
	// Example: none
	// Enum: ["none","RS256","ES256"]
	UserinfoSignedResponseAlg string `json:"userinfo_signed_response_alg,omitempty" yaml:"userinfo_signed_response_alg,omitempty"`
}

// Validate validates this tree client
func (m *TreeClient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationDetailsTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationEncryptedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationEncryptedResponseEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeveloperMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFdx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenEncryptedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenEncryptedResponseEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenSignedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntrospectionEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyExecutionPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectUris(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectEncryptionAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectEncryptionEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectSigningAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevocationEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlMetadataUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlSigningHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlSubjectNameIDFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareStatementPayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpointAuthSigningAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenTtls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserinfoSignedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var treeClientApplicationTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["single_page","server_web","mobile_desktop","service","legacy","dcr"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientApplicationTypesItemsEnum = append(treeClientApplicationTypesItemsEnum, v)
	}
}

func (m *TreeClient) validateApplicationTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientApplicationTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateApplicationTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationTypes); i++ {

		// value enum
		if err := m.validateApplicationTypesItemsEnum("application_types"+"."+strconv.Itoa(i), "body", m.ApplicationTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *TreeClient) validateAuthorizationDetailsTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationDetailsTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthorizationDetailsTypes); i++ {

		if err := m.AuthorizationDetailsTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_details_types" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_details_types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

var treeClientTypeAuthorizationEncryptedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeAuthorizationEncryptedResponseAlgPropEnum = append(treeClientTypeAuthorizationEncryptedResponseAlgPropEnum, v)
	}
}

const (

	// TreeClientAuthorizationEncryptedResponseAlgRSADashOAEP captures enum value "RSA-OAEP"
	TreeClientAuthorizationEncryptedResponseAlgRSADashOAEP string = "RSA-OAEP"

	// TreeClientAuthorizationEncryptedResponseAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	TreeClientAuthorizationEncryptedResponseAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *TreeClient) validateAuthorizationEncryptedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeAuthorizationEncryptedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateAuthorizationEncryptedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationEncryptedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationEncryptedResponseAlgEnum("authorization_encrypted_response_alg", "body", m.AuthorizationEncryptedResponseAlg); err != nil {
		return err
	}

	return nil
}

var treeClientTypeAuthorizationEncryptedResponseEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeAuthorizationEncryptedResponseEncPropEnum = append(treeClientTypeAuthorizationEncryptedResponseEncPropEnum, v)
	}
}

const (

	// TreeClientAuthorizationEncryptedResponseEncA256GCM captures enum value "A256GCM"
	TreeClientAuthorizationEncryptedResponseEncA256GCM string = "A256GCM"

	// TreeClientAuthorizationEncryptedResponseEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	TreeClientAuthorizationEncryptedResponseEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *TreeClient) validateAuthorizationEncryptedResponseEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeAuthorizationEncryptedResponseEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateAuthorizationEncryptedResponseEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationEncryptedResponseEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationEncryptedResponseEncEnum("authorization_encrypted_response_enc", "body", m.AuthorizationEncryptedResponseEnc); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) validateClientSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientSecret) { // not required
		return nil
	}

	if err := validate.MinLength("client_secret", "body", m.ClientSecret, 32); err != nil {
		return err
	}

	return nil
}

var treeClientTypeClientStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeClientStatusPropEnum = append(treeClientTypeClientStatusPropEnum, v)
	}
}

const (

	// TreeClientClientStatusActive captures enum value "active"
	TreeClientClientStatusActive string = "active"

	// TreeClientClientStatusInactive captures enum value "inactive"
	TreeClientClientStatusInactive string = "inactive"
)

// prop value enum
func (m *TreeClient) validateClientStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeClientStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateClientStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientStatusEnum("client_status", "body", m.ClientStatus); err != nil {
		return err
	}

	return nil
}

var treeClientTypeClientTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oauth2","saml"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeClientTypePropEnum = append(treeClientTypeClientTypePropEnum, v)
	}
}

const (

	// TreeClientClientTypeOauth2 captures enum value "oauth2"
	TreeClientClientTypeOauth2 string = "oauth2"

	// TreeClientClientTypeSaml captures enum value "saml"
	TreeClientClientTypeSaml string = "saml"
)

// prop value enum
func (m *TreeClient) validateClientTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeClientTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateClientType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientTypeEnum("client_type", "body", m.ClientType); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) validateConfirmation(formats strfmt.Registry) error {
	if swag.IsZero(m.Confirmation) { // not required
		return nil
	}

	if m.Confirmation != nil {
		if err := m.Confirmation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("confirmation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("confirmation")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) validateDeveloperMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.DeveloperMetadata) { // not required
		return nil
	}

	if m.DeveloperMetadata != nil {
		if err := m.DeveloperMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("developer_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("developer_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validateFdx(formats strfmt.Registry) error {
	if swag.IsZero(m.Fdx) { // not required
		return nil
	}

	if m.Fdx != nil {
		if err := m.Fdx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fdx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fdx")
			}
			return err
		}
	}

	return nil
}

var treeClientGrantTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authorization_code","implicit","client_credentials","refresh_token","password","urn:ietf:params:oauth:grant-type:jwt-bearer","urn:openid:params:grant-type:ciba","urn:ietf:params:oauth:grant-type:token-exchange","urn:ietf:params:oauth:grant-type:device_code"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientGrantTypesItemsEnum = append(treeClientGrantTypesItemsEnum, v)
	}
}

func (m *TreeClient) validateGrantTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientGrantTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateGrantTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.GrantTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.GrantTypes); i++ {

		// value enum
		if err := m.validateGrantTypesItemsEnum("grant_types"+"."+strconv.Itoa(i), "body", m.GrantTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var treeClientTypeIDTokenEncryptedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeIDTokenEncryptedResponseAlgPropEnum = append(treeClientTypeIDTokenEncryptedResponseAlgPropEnum, v)
	}
}

const (

	// TreeClientIDTokenEncryptedResponseAlgRSADashOAEP captures enum value "RSA-OAEP"
	TreeClientIDTokenEncryptedResponseAlgRSADashOAEP string = "RSA-OAEP"

	// TreeClientIDTokenEncryptedResponseAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	TreeClientIDTokenEncryptedResponseAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *TreeClient) validateIDTokenEncryptedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeIDTokenEncryptedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateIDTokenEncryptedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenEncryptedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenEncryptedResponseAlgEnum("id_token_encrypted_response_alg", "body", m.IDTokenEncryptedResponseAlg); err != nil {
		return err
	}

	return nil
}

var treeClientTypeIDTokenEncryptedResponseEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeIDTokenEncryptedResponseEncPropEnum = append(treeClientTypeIDTokenEncryptedResponseEncPropEnum, v)
	}
}

const (

	// TreeClientIDTokenEncryptedResponseEncA256GCM captures enum value "A256GCM"
	TreeClientIDTokenEncryptedResponseEncA256GCM string = "A256GCM"

	// TreeClientIDTokenEncryptedResponseEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	TreeClientIDTokenEncryptedResponseEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *TreeClient) validateIDTokenEncryptedResponseEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeIDTokenEncryptedResponseEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateIDTokenEncryptedResponseEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenEncryptedResponseEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenEncryptedResponseEncEnum("id_token_encrypted_response_enc", "body", m.IDTokenEncryptedResponseEnc); err != nil {
		return err
	}

	return nil
}

var treeClientTypeIDTokenSignedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RS256","ES256","PS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeIDTokenSignedResponseAlgPropEnum = append(treeClientTypeIDTokenSignedResponseAlgPropEnum, v)
	}
}

const (

	// TreeClientIDTokenSignedResponseAlgRS256 captures enum value "RS256"
	TreeClientIDTokenSignedResponseAlgRS256 string = "RS256"

	// TreeClientIDTokenSignedResponseAlgES256 captures enum value "ES256"
	TreeClientIDTokenSignedResponseAlgES256 string = "ES256"

	// TreeClientIDTokenSignedResponseAlgPS256 captures enum value "PS256"
	TreeClientIDTokenSignedResponseAlgPS256 string = "PS256"
)

// prop value enum
func (m *TreeClient) validateIDTokenSignedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeIDTokenSignedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateIDTokenSignedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenSignedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenSignedResponseAlgEnum("id_token_signed_response_alg", "body", m.IDTokenSignedResponseAlg); err != nil {
		return err
	}

	return nil
}

var treeClientTypeIntrospectionEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeIntrospectionEndpointAuthMethodPropEnum = append(treeClientTypeIntrospectionEndpointAuthMethodPropEnum, v)
	}
}

const (

	// TreeClientIntrospectionEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	TreeClientIntrospectionEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// TreeClientIntrospectionEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	TreeClientIntrospectionEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// TreeClientIntrospectionEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	TreeClientIntrospectionEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// TreeClientIntrospectionEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	TreeClientIntrospectionEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// TreeClientIntrospectionEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	TreeClientIntrospectionEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// TreeClientIntrospectionEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	TreeClientIntrospectionEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// TreeClientIntrospectionEndpointAuthMethodNone captures enum value "none"
	TreeClientIntrospectionEndpointAuthMethodNone string = "none"
)

// prop value enum
func (m *TreeClient) validateIntrospectionEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeIntrospectionEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateIntrospectionEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.IntrospectionEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntrospectionEndpointAuthMethodEnum("introspection_endpoint_auth_method", "body", m.IntrospectionEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) validateJwks(formats strfmt.Registry) error {
	if swag.IsZero(m.Jwks) { // not required
		return nil
	}

	if m.Jwks != nil {
		if err := m.Jwks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwks")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validateObbr(formats strfmt.Registry) error {
	if swag.IsZero(m.Obbr) { // not required
		return nil
	}

	if m.Obbr != nil {
		if err := m.Obbr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("obbr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("obbr")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validatePolicyExecutionPoints(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyExecutionPoints) { // not required
		return nil
	}

	if m.PolicyExecutionPoints != nil {
		if err := m.PolicyExecutionPoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_execution_points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_execution_points")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validatePrivacy(formats strfmt.Registry) error {
	if swag.IsZero(m.Privacy) { // not required
		return nil
	}

	if m.Privacy != nil {
		if err := m.Privacy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privacy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privacy")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validateRedirectUris(formats strfmt.Registry) error {
	if swag.IsZero(m.RedirectUris) { // not required
		return nil
	}

	if err := m.RedirectUris.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("redirect_uris")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("redirect_uris")
		}
		return err
	}

	return nil
}

func (m *TreeClient) validateRegistrationToken(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationToken) { // not required
		return nil
	}

	if m.RegistrationToken != nil {
		if err := m.RegistrationToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registration_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registration_token")
			}
			return err
		}
	}

	return nil
}

var treeClientTypeRequestObjectEncryptionAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeRequestObjectEncryptionAlgPropEnum = append(treeClientTypeRequestObjectEncryptionAlgPropEnum, v)
	}
}

const (

	// TreeClientRequestObjectEncryptionAlgRSADashOAEP captures enum value "RSA-OAEP"
	TreeClientRequestObjectEncryptionAlgRSADashOAEP string = "RSA-OAEP"

	// TreeClientRequestObjectEncryptionAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	TreeClientRequestObjectEncryptionAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *TreeClient) validateRequestObjectEncryptionAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeRequestObjectEncryptionAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateRequestObjectEncryptionAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectEncryptionAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectEncryptionAlgEnum("request_object_encryption_alg", "body", m.RequestObjectEncryptionAlg); err != nil {
		return err
	}

	return nil
}

var treeClientTypeRequestObjectEncryptionEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeRequestObjectEncryptionEncPropEnum = append(treeClientTypeRequestObjectEncryptionEncPropEnum, v)
	}
}

const (

	// TreeClientRequestObjectEncryptionEncA256GCM captures enum value "A256GCM"
	TreeClientRequestObjectEncryptionEncA256GCM string = "A256GCM"

	// TreeClientRequestObjectEncryptionEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	TreeClientRequestObjectEncryptionEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *TreeClient) validateRequestObjectEncryptionEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeRequestObjectEncryptionEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateRequestObjectEncryptionEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectEncryptionEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectEncryptionEncEnum("request_object_encryption_enc", "body", m.RequestObjectEncryptionEnc); err != nil {
		return err
	}

	return nil
}

var treeClientTypeRequestObjectSigningAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","none","RS256","ES256","PS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeRequestObjectSigningAlgPropEnum = append(treeClientTypeRequestObjectSigningAlgPropEnum, v)
	}
}

const (

	// TreeClientRequestObjectSigningAlgAny captures enum value "any"
	TreeClientRequestObjectSigningAlgAny string = "any"

	// TreeClientRequestObjectSigningAlgNone captures enum value "none"
	TreeClientRequestObjectSigningAlgNone string = "none"

	// TreeClientRequestObjectSigningAlgRS256 captures enum value "RS256"
	TreeClientRequestObjectSigningAlgRS256 string = "RS256"

	// TreeClientRequestObjectSigningAlgES256 captures enum value "ES256"
	TreeClientRequestObjectSigningAlgES256 string = "ES256"

	// TreeClientRequestObjectSigningAlgPS256 captures enum value "PS256"
	TreeClientRequestObjectSigningAlgPS256 string = "PS256"
)

// prop value enum
func (m *TreeClient) validateRequestObjectSigningAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeRequestObjectSigningAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateRequestObjectSigningAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectSigningAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectSigningAlgEnum("request_object_signing_alg", "body", m.RequestObjectSigningAlg); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) validateResponseTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseTypes) { // not required
		return nil
	}

	if err := m.ResponseTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("response_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("response_types")
		}
		return err
	}

	return nil
}

var treeClientTypeRevocationEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeRevocationEndpointAuthMethodPropEnum = append(treeClientTypeRevocationEndpointAuthMethodPropEnum, v)
	}
}

const (

	// TreeClientRevocationEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	TreeClientRevocationEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// TreeClientRevocationEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	TreeClientRevocationEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// TreeClientRevocationEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	TreeClientRevocationEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// TreeClientRevocationEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	TreeClientRevocationEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// TreeClientRevocationEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	TreeClientRevocationEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// TreeClientRevocationEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	TreeClientRevocationEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// TreeClientRevocationEndpointAuthMethodNone captures enum value "none"
	TreeClientRevocationEndpointAuthMethodNone string = "none"
)

// prop value enum
func (m *TreeClient) validateRevocationEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeRevocationEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateRevocationEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.RevocationEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateRevocationEndpointAuthMethodEnum("revocation_endpoint_auth_method", "body", m.RevocationEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) validateSamlMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.SamlMetadata) { // not required
		return nil
	}

	if m.SamlMetadata != nil {
		if err := m.SamlMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validateSamlMetadataUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SamlMetadataUpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("saml_metadata_updated_at", "body", "date-time", m.SamlMetadataUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var treeClientTypeSamlSigningHashPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sha-1","sha-256","sha-512"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeSamlSigningHashPropEnum = append(treeClientTypeSamlSigningHashPropEnum, v)
	}
}

const (

	// TreeClientSamlSigningHashShaDash1 captures enum value "sha-1"
	TreeClientSamlSigningHashShaDash1 string = "sha-1"

	// TreeClientSamlSigningHashShaDash256 captures enum value "sha-256"
	TreeClientSamlSigningHashShaDash256 string = "sha-256"

	// TreeClientSamlSigningHashShaDash512 captures enum value "sha-512"
	TreeClientSamlSigningHashShaDash512 string = "sha-512"
)

// prop value enum
func (m *TreeClient) validateSamlSigningHashEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeSamlSigningHashPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateSamlSigningHash(formats strfmt.Registry) error {
	if swag.IsZero(m.SamlSigningHash) { // not required
		return nil
	}

	// value enum
	if err := m.validateSamlSigningHashEnum("saml_signing_hash", "body", m.SamlSigningHash); err != nil {
		return err
	}

	return nil
}

var treeClientTypeSamlSubjectNameIDFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified","urn:oasis:names:tc:SAML:2.0:nameid-format:transient","urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress","urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeSamlSubjectNameIDFormatPropEnum = append(treeClientTypeSamlSubjectNameIDFormatPropEnum, v)
	}
}

const (

	// TreeClientSamlSubjectNameIDFormatUrnOasisNamesTcSAML1Dot1NameidDashFormatUnspecified captures enum value "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"
	TreeClientSamlSubjectNameIDFormatUrnOasisNamesTcSAML1Dot1NameidDashFormatUnspecified string = "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified"

	// TreeClientSamlSubjectNameIDFormatUrnOasisNamesTcSAML2Dot0NameidDashFormatTransient captures enum value "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
	TreeClientSamlSubjectNameIDFormatUrnOasisNamesTcSAML2Dot0NameidDashFormatTransient string = "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"

	// TreeClientSamlSubjectNameIDFormatUrnOasisNamesTcSAML1Dot1NameidDashFormatEmailAddress captures enum value "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
	TreeClientSamlSubjectNameIDFormatUrnOasisNamesTcSAML1Dot1NameidDashFormatEmailAddress string = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"

	// TreeClientSamlSubjectNameIDFormatUrnOasisNamesTcSAML2Dot0NameidDashFormatPersistent captures enum value "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
	TreeClientSamlSubjectNameIDFormatUrnOasisNamesTcSAML2Dot0NameidDashFormatPersistent string = "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent"
)

// prop value enum
func (m *TreeClient) validateSamlSubjectNameIDFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeSamlSubjectNameIDFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateSamlSubjectNameIDFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.SamlSubjectNameIDFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateSamlSubjectNameIDFormatEnum("saml_subject_name_id_format", "body", m.SamlSubjectNameIDFormat); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) validateSoftwareStatementPayload(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareStatementPayload) { // not required
		return nil
	}

	if m.SoftwareStatementPayload != nil {
		if err := m.SoftwareStatementPayload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_statement_payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_statement_payload")
			}
			return err
		}
	}

	return nil
}

var treeClientTypeSubjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","pairwise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeSubjectTypePropEnum = append(treeClientTypeSubjectTypePropEnum, v)
	}
}

const (

	// TreeClientSubjectTypePublic captures enum value "public"
	TreeClientSubjectTypePublic string = "public"

	// TreeClientSubjectTypePairwise captures enum value "pairwise"
	TreeClientSubjectTypePairwise string = "pairwise"
)

// prop value enum
func (m *TreeClient) validateSubjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeSubjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateSubjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubjectTypeEnum("subject_type", "body", m.SubjectType); err != nil {
		return err
	}

	return nil
}

var treeClientTypeTokenEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none","unspecified"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeTokenEndpointAuthMethodPropEnum = append(treeClientTypeTokenEndpointAuthMethodPropEnum, v)
	}
}

const (

	// TreeClientTokenEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	TreeClientTokenEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// TreeClientTokenEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	TreeClientTokenEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// TreeClientTokenEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	TreeClientTokenEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// TreeClientTokenEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	TreeClientTokenEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// TreeClientTokenEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	TreeClientTokenEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// TreeClientTokenEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	TreeClientTokenEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// TreeClientTokenEndpointAuthMethodNone captures enum value "none"
	TreeClientTokenEndpointAuthMethodNone string = "none"

	// TreeClientTokenEndpointAuthMethodUnspecified captures enum value "unspecified"
	TreeClientTokenEndpointAuthMethodUnspecified string = "unspecified"
)

// prop value enum
func (m *TreeClient) validateTokenEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeTokenEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateTokenEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenEndpointAuthMethodEnum("token_endpoint_auth_method", "body", m.TokenEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

var treeClientTypeTokenEndpointAuthSigningAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RS256","ES256","PS256","HS256",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeTokenEndpointAuthSigningAlgPropEnum = append(treeClientTypeTokenEndpointAuthSigningAlgPropEnum, v)
	}
}

const (

	// TreeClientTokenEndpointAuthSigningAlgRS256 captures enum value "RS256"
	TreeClientTokenEndpointAuthSigningAlgRS256 string = "RS256"

	// TreeClientTokenEndpointAuthSigningAlgES256 captures enum value "ES256"
	TreeClientTokenEndpointAuthSigningAlgES256 string = "ES256"

	// TreeClientTokenEndpointAuthSigningAlgPS256 captures enum value "PS256"
	TreeClientTokenEndpointAuthSigningAlgPS256 string = "PS256"

	// TreeClientTokenEndpointAuthSigningAlgHS256 captures enum value "HS256"
	TreeClientTokenEndpointAuthSigningAlgHS256 string = "HS256"

	// TreeClientTokenEndpointAuthSigningAlgEmpty captures enum value ""
	TreeClientTokenEndpointAuthSigningAlgEmpty string = ""
)

// prop value enum
func (m *TreeClient) validateTokenEndpointAuthSigningAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeTokenEndpointAuthSigningAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateTokenEndpointAuthSigningAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenEndpointAuthSigningAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenEndpointAuthSigningAlgEnum("token_endpoint_auth_signing_alg", "body", m.TokenEndpointAuthSigningAlg); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) validateTokenExchange(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenExchange) { // not required
		return nil
	}

	if m.TokenExchange != nil {
		if err := m.TokenExchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_exchange")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validateTokenTtls(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenTtls) { // not required
		return nil
	}

	if m.TokenTtls != nil {
		if err := m.TokenTtls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_ttls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_ttls")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var treeClientTypeUserinfoSignedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","RS256","ES256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeClientTypeUserinfoSignedResponseAlgPropEnum = append(treeClientTypeUserinfoSignedResponseAlgPropEnum, v)
	}
}

const (

	// TreeClientUserinfoSignedResponseAlgNone captures enum value "none"
	TreeClientUserinfoSignedResponseAlgNone string = "none"

	// TreeClientUserinfoSignedResponseAlgRS256 captures enum value "RS256"
	TreeClientUserinfoSignedResponseAlgRS256 string = "RS256"

	// TreeClientUserinfoSignedResponseAlgES256 captures enum value "ES256"
	TreeClientUserinfoSignedResponseAlgES256 string = "ES256"
)

// prop value enum
func (m *TreeClient) validateUserinfoSignedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeClientTypeUserinfoSignedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeClient) validateUserinfoSignedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.UserinfoSignedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserinfoSignedResponseAlgEnum("userinfo_signed_response_alg", "body", m.UserinfoSignedResponseAlg); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tree client based on the context it is used
func (m *TreeClient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthorizationDetailsTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfirmation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeveloperMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFdx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJwks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObbr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyExecutionPoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivacy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedirectUris(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrationToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSamlMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareStatementPayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenExchange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenTtls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreeClient) contextValidateApplicationTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "application_types", "body", []string(m.ApplicationTypes)); err != nil {
		return err
	}

	return nil
}

func (m *TreeClient) contextValidateAuthorizationDetailsTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuthorizationDetailsTypes); i++ {

		if swag.IsZero(m.AuthorizationDetailsTypes[i]) { // not required
			return nil
		}

		if err := m.AuthorizationDetailsTypes[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_details_types" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_details_types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *TreeClient) contextValidateConfirmation(ctx context.Context, formats strfmt.Registry) error {

	if m.Confirmation != nil {

		if swag.IsZero(m.Confirmation) { // not required
			return nil
		}

		if err := m.Confirmation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("confirmation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("confirmation")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) contextValidateDeveloperMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DeveloperMetadata) { // not required
		return nil
	}

	if err := m.DeveloperMetadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("developer_metadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("developer_metadata")
		}
		return err
	}

	return nil
}

func (m *TreeClient) contextValidateFdx(ctx context.Context, formats strfmt.Registry) error {

	if m.Fdx != nil {

		if swag.IsZero(m.Fdx) { // not required
			return nil
		}

		if err := m.Fdx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fdx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fdx")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) contextValidateJwks(ctx context.Context, formats strfmt.Registry) error {

	if m.Jwks != nil {

		if swag.IsZero(m.Jwks) { // not required
			return nil
		}

		if err := m.Jwks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwks")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metadata")
		}
		return err
	}

	return nil
}

func (m *TreeClient) contextValidateObbr(ctx context.Context, formats strfmt.Registry) error {

	if m.Obbr != nil {

		if swag.IsZero(m.Obbr) { // not required
			return nil
		}

		if err := m.Obbr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("obbr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("obbr")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) contextValidatePolicyExecutionPoints(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.PolicyExecutionPoints) { // not required
		return nil
	}

	if err := m.PolicyExecutionPoints.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("policy_execution_points")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("policy_execution_points")
		}
		return err
	}

	return nil
}

func (m *TreeClient) contextValidatePrivacy(ctx context.Context, formats strfmt.Registry) error {

	if m.Privacy != nil {

		if swag.IsZero(m.Privacy) { // not required
			return nil
		}

		if err := m.Privacy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privacy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privacy")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) contextValidateRedirectUris(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RedirectUris.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("redirect_uris")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("redirect_uris")
		}
		return err
	}

	return nil
}

func (m *TreeClient) contextValidateRegistrationToken(ctx context.Context, formats strfmt.Registry) error {

	if m.RegistrationToken != nil {

		if swag.IsZero(m.RegistrationToken) { // not required
			return nil
		}

		if err := m.RegistrationToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registration_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registration_token")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) contextValidateResponseTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ResponseTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("response_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("response_types")
		}
		return err
	}

	return nil
}

func (m *TreeClient) contextValidateSamlMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.SamlMetadata != nil {

		if swag.IsZero(m.SamlMetadata) { // not required
			return nil
		}

		if err := m.SamlMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) contextValidateSoftwareStatementPayload(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SoftwareStatementPayload) { // not required
		return nil
	}

	if err := m.SoftwareStatementPayload.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("software_statement_payload")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("software_statement_payload")
		}
		return err
	}

	return nil
}

func (m *TreeClient) contextValidateTokenExchange(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenExchange != nil {

		if swag.IsZero(m.TokenExchange) { // not required
			return nil
		}

		if err := m.TokenExchange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_exchange")
			}
			return err
		}
	}

	return nil
}

func (m *TreeClient) contextValidateTokenTtls(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenTtls != nil {

		if swag.IsZero(m.TokenTtls) { // not required
			return nil
		}

		if err := m.TokenTtls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_ttls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_ttls")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreeClient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreeClient) UnmarshalBinary(b []byte) error {
	var res TreeClient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
