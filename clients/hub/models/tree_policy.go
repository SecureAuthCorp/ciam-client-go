// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TreePolicy tree policy
//
// swagger:model TreePolicy
type TreePolicy struct {

	// cross tenant api policy bindings
	CrossTenantAPIPolicyBindings TreeCrossTenantAPIPolicyBindings `json:"cross_tenant_api_policy_bindings,omitempty" yaml:"cross_tenant_api_policy_bindings,omitempty"`

	// The definition of an Open Policy Agent (OPA) policy provided using the REGO language.
	Definition string `json:"definition,omitempty" yaml:"definition,omitempty"`

	// env version
	EnvVersion FnEnvVersion `json:"env_version,omitempty" yaml:"env_version,omitempty"`

	// Language of a policy
	//
	// ACP supports creating Cloudentity policies (using a visual editor or defined using JSON or
	// YAML) and policies defined using REGO (language used by Open Policy Agent (OPA)).
	// Example: cloudentity
	Language string `json:"language,omitempty" yaml:"language,omitempty"`

	// Display name for your policy
	// Example: check_consent
	PolicyName string `json:"policy_name,omitempty" yaml:"policy_name,omitempty"`

	// Define a type of your policy
	//
	// ACP is provided with the following policy types: user, developer, machine, dcr, api.
	//
	// Depending on the policy type the policy can be assigned to different policy
	// execution points.
	//
	// A policy of the `user` type can be assigned only to the following scopes: `scope_user_grant`,
	// `server_user_token`, `client_user_token`.
	//
	// A `developer` policy can be assigned only to the `scope_client_assignment` and
	// `server_client_assignment` scopes.
	//
	// A policy of the `machine` type can be assigned only to the following scopes:
	// `scope_machine_grant`, `server_machine_token`, `client_machine_token`.
	//
	// A `dcr` policy can be assigned only to the `scope_dynamic_client_registration` and the
	// `server_dynamic_client_registration` scopes.
	//
	// An `api` policy can be assigned to all of the policy execution points.
	//
	// Each of the policies type has its defined and provided out of the box policy validators.
	// Example: user
	Type string `json:"type,omitempty" yaml:"type,omitempty"`

	// An array of validators for a Cloudentity policy
	Validators []*ValidatorConfig `json:"validators" yaml:"validators"`
}

// Validate validates this tree policy
func (m *TreePolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCrossTenantAPIPolicyBindings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidators(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreePolicy) validateCrossTenantAPIPolicyBindings(formats strfmt.Registry) error {
	if swag.IsZero(m.CrossTenantAPIPolicyBindings) { // not required
		return nil
	}

	if m.CrossTenantAPIPolicyBindings != nil {
		if err := m.CrossTenantAPIPolicyBindings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cross_tenant_api_policy_bindings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cross_tenant_api_policy_bindings")
			}
			return err
		}
	}

	return nil
}

func (m *TreePolicy) validateEnvVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvVersion) { // not required
		return nil
	}

	if err := m.EnvVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("env_version")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("env_version")
		}
		return err
	}

	return nil
}

func (m *TreePolicy) validateValidators(formats strfmt.Registry) error {
	if swag.IsZero(m.Validators) { // not required
		return nil
	}

	for i := 0; i < len(m.Validators); i++ {
		if swag.IsZero(m.Validators[i]) { // not required
			continue
		}

		if m.Validators[i] != nil {
			if err := m.Validators[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tree policy based on the context it is used
func (m *TreePolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCrossTenantAPIPolicyBindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidators(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreePolicy) contextValidateCrossTenantAPIPolicyBindings(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CrossTenantAPIPolicyBindings) { // not required
		return nil
	}

	if err := m.CrossTenantAPIPolicyBindings.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cross_tenant_api_policy_bindings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cross_tenant_api_policy_bindings")
		}
		return err
	}

	return nil
}

func (m *TreePolicy) contextValidateEnvVersion(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EnvVersion) { // not required
		return nil
	}

	if err := m.EnvVersion.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("env_version")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("env_version")
		}
		return err
	}

	return nil
}

func (m *TreePolicy) contextValidateValidators(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Validators); i++ {

		if m.Validators[i] != nil {

			if swag.IsZero(m.Validators[i]) { // not required
				return nil
			}

			if err := m.Validators[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("validators" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("validators" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreePolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreePolicy) UnmarshalBinary(b []byte) error {
	var res TreePolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
