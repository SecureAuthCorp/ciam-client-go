// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TreeCustomApp tree custom app
//
// swagger:model TreeCustomApp
type TreeCustomApp struct {

	// client
	Client *TreeClient `json:"client,omitempty" yaml:"client,omitempty"`

	// Name of the CustomApp
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// Type of the custom app
	// Example: post-authn
	// Enum: ["post-authn"]
	Type string `json:"type,omitempty" yaml:"type,omitempty"`

	// url of the CustomApp
	// Required: true
	URL string `json:"url" yaml:"url"`
}

// Validate validates this tree custom app
func (m *TreeCustomApp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreeCustomApp) validateClient(formats strfmt.Registry) error {
	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

var treeCustomAppTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["post-authn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		treeCustomAppTypeTypePropEnum = append(treeCustomAppTypeTypePropEnum, v)
	}
}

const (

	// TreeCustomAppTypePostDashAuthn captures enum value "post-authn"
	TreeCustomAppTypePostDashAuthn string = "post-authn"
)

// prop value enum
func (m *TreeCustomApp) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, treeCustomAppTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TreeCustomApp) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TreeCustomApp) validateURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tree custom app based on the context it is used
func (m *TreeCustomApp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TreeCustomApp) contextValidateClient(ctx context.Context, formats strfmt.Registry) error {

	if m.Client != nil {

		if swag.IsZero(m.Client) { // not required
			return nil
		}

		if err := m.Client.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TreeCustomApp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TreeCustomApp) UnmarshalBinary(b []byte) error {
	var res TreeCustomApp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
