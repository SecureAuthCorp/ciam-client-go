// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloneWorkspaceRequest clone workspace request
//
// swagger:model CloneWorkspaceRequest
type CloneWorkspaceRequest struct {

	// The `destination_id` parameter is an ID of cloned workspace.
	// Required: true
	DestinationID string `json:"destination_id" yaml:"destination_id"`

	// patch
	Patch Rfc7396PatchOperation `json:"patch,omitempty" yaml:"patch,omitempty"`
}

// Validate validates this clone workspace request
func (m *CloneWorkspaceRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneWorkspaceRequest) validateDestinationID(formats strfmt.Registry) error {

	if err := validate.RequiredString("destination_id", "body", m.DestinationID); err != nil {
		return err
	}

	return nil
}

func (m *CloneWorkspaceRequest) validatePatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Patch) { // not required
		return nil
	}

	if m.Patch != nil {
		if err := m.Patch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("patch")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this clone workspace request based on the context it is used
func (m *CloneWorkspaceRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneWorkspaceRequest) contextValidatePatch(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Patch) { // not required
		return nil
	}

	if err := m.Patch.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("patch")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("patch")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloneWorkspaceRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloneWorkspaceRequest) UnmarshalBinary(b []byte) error {
	var res CloneWorkspaceRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
