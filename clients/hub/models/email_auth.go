// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailAuth email auth
//
// swagger:model EmailAuth
type EmailAuth struct {

	// SMTP auth mechanism: crammd5, plain or login
	// Example: plain
	// Required: true
	Auth string `json:"auth" yaml:"auth"`

	// The host of the SMTP server.
	// Required: true
	Host string `json:"host" yaml:"host"`

	// Password which is used to authenticate to the SMTP server.
	// Required: true
	Password string `json:"password" yaml:"password"`

	// The port of the SMTP server.
	// Example: 25
	// Required: true
	Port int64 `json:"port" yaml:"port"`

	// Username which is used to authenticate to the SMTP server.
	// Required: true
	Username string `json:"username" yaml:"username"`
}

// Validate validates this email auth
func (m *EmailAuth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailAuth) validateAuth(formats strfmt.Registry) error {

	if err := validate.RequiredString("auth", "body", m.Auth); err != nil {
		return err
	}

	return nil
}

func (m *EmailAuth) validateHost(formats strfmt.Registry) error {

	if err := validate.RequiredString("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *EmailAuth) validatePassword(formats strfmt.Registry) error {

	if err := validate.RequiredString("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *EmailAuth) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", int64(m.Port)); err != nil {
		return err
	}

	return nil
}

func (m *EmailAuth) validateUsername(formats strfmt.Registry) error {

	if err := validate.RequiredString("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this email auth based on context it is used
func (m *EmailAuth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EmailAuth) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailAuth) UnmarshalBinary(b []byte) error {
	var res EmailAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
