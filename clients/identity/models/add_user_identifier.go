// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddUserIdentifier add user identifier
//
// swagger:model AddUserIdentifier
type AddUserIdentifier struct {

	// identifier
	// Required: true
	Identifier string `json:"identifier" yaml:"identifier"`

	// identifier metadata
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// type
	// Example: email
	// Required: true
	// Enum: ["email","mobile","uid","external","federated"]
	Type string `json:"type" yaml:"type"`
}

// Validate validates this add user identifier
func (m *AddUserIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddUserIdentifier) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.RequiredString("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

var addUserIdentifierTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","mobile","uid","external","federated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addUserIdentifierTypeTypePropEnum = append(addUserIdentifierTypeTypePropEnum, v)
	}
}

const (

	// AddUserIdentifierTypeEmail captures enum value "email"
	AddUserIdentifierTypeEmail string = "email"

	// AddUserIdentifierTypeMobile captures enum value "mobile"
	AddUserIdentifierTypeMobile string = "mobile"

	// AddUserIdentifierTypeUID captures enum value "uid"
	AddUserIdentifierTypeUID string = "uid"

	// AddUserIdentifierTypeExternal captures enum value "external"
	AddUserIdentifierTypeExternal string = "external"

	// AddUserIdentifierTypeFederated captures enum value "federated"
	AddUserIdentifierTypeFederated string = "federated"
)

// prop value enum
func (m *AddUserIdentifier) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addUserIdentifierTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddUserIdentifier) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add user identifier based on context it is used
func (m *AddUserIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddUserIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddUserIdentifier) UnmarshalBinary(b []byte) error {
	var res AddUserIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
