// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// CheckPoolPermissionsReader is a Reader for the CheckPoolPermissions structure.
type CheckPoolPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckPoolPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckPoolPermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCheckPoolPermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckPoolPermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckPoolPermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCheckPoolPermissionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /admin/pools/{ipID}/permissions] checkPoolPermissions", response, response.Code())
	}
}

// NewCheckPoolPermissionsOK creates a CheckPoolPermissionsOK with default headers values
func NewCheckPoolPermissionsOK() *CheckPoolPermissionsOK {
	return &CheckPoolPermissionsOK{}
}

/*
CheckPoolPermissionsOK describes a response with status code 200, with default header values.

PoolPermissions
*/
type CheckPoolPermissionsOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.PoolPermissionsResponse
}

// IsSuccess returns true when this check pool permissions o k response has a 2xx status code
func (o *CheckPoolPermissionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this check pool permissions o k response has a 3xx status code
func (o *CheckPoolPermissionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check pool permissions o k response has a 4xx status code
func (o *CheckPoolPermissionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this check pool permissions o k response has a 5xx status code
func (o *CheckPoolPermissionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this check pool permissions o k response a status code equal to that given
func (o *CheckPoolPermissionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the check pool permissions o k response
func (o *CheckPoolPermissionsOK) Code() int {
	return 200
}

func (o *CheckPoolPermissionsOK) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsOK  %+v", 200, o.Payload)
}

func (o *CheckPoolPermissionsOK) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsOK  %+v", 200, o.Payload)
}

func (o *CheckPoolPermissionsOK) GetPayload() *models.PoolPermissionsResponse {
	return o.Payload
}

func (o *CheckPoolPermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.PoolPermissionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPoolPermissionsUnauthorized creates a CheckPoolPermissionsUnauthorized with default headers values
func NewCheckPoolPermissionsUnauthorized() *CheckPoolPermissionsUnauthorized {
	return &CheckPoolPermissionsUnauthorized{}
}

/*
CheckPoolPermissionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckPoolPermissionsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this check pool permissions unauthorized response has a 2xx status code
func (o *CheckPoolPermissionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check pool permissions unauthorized response has a 3xx status code
func (o *CheckPoolPermissionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check pool permissions unauthorized response has a 4xx status code
func (o *CheckPoolPermissionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this check pool permissions unauthorized response has a 5xx status code
func (o *CheckPoolPermissionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this check pool permissions unauthorized response a status code equal to that given
func (o *CheckPoolPermissionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the check pool permissions unauthorized response
func (o *CheckPoolPermissionsUnauthorized) Code() int {
	return 401
}

func (o *CheckPoolPermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckPoolPermissionsUnauthorized) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckPoolPermissionsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckPoolPermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPoolPermissionsForbidden creates a CheckPoolPermissionsForbidden with default headers values
func NewCheckPoolPermissionsForbidden() *CheckPoolPermissionsForbidden {
	return &CheckPoolPermissionsForbidden{}
}

/*
CheckPoolPermissionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckPoolPermissionsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this check pool permissions forbidden response has a 2xx status code
func (o *CheckPoolPermissionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check pool permissions forbidden response has a 3xx status code
func (o *CheckPoolPermissionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check pool permissions forbidden response has a 4xx status code
func (o *CheckPoolPermissionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this check pool permissions forbidden response has a 5xx status code
func (o *CheckPoolPermissionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this check pool permissions forbidden response a status code equal to that given
func (o *CheckPoolPermissionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the check pool permissions forbidden response
func (o *CheckPoolPermissionsForbidden) Code() int {
	return 403
}

func (o *CheckPoolPermissionsForbidden) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsForbidden  %+v", 403, o.Payload)
}

func (o *CheckPoolPermissionsForbidden) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsForbidden  %+v", 403, o.Payload)
}

func (o *CheckPoolPermissionsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckPoolPermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPoolPermissionsNotFound creates a CheckPoolPermissionsNotFound with default headers values
func NewCheckPoolPermissionsNotFound() *CheckPoolPermissionsNotFound {
	return &CheckPoolPermissionsNotFound{}
}

/*
CheckPoolPermissionsNotFound describes a response with status code 404, with default header values.

Not found
*/
type CheckPoolPermissionsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this check pool permissions not found response has a 2xx status code
func (o *CheckPoolPermissionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check pool permissions not found response has a 3xx status code
func (o *CheckPoolPermissionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check pool permissions not found response has a 4xx status code
func (o *CheckPoolPermissionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this check pool permissions not found response has a 5xx status code
func (o *CheckPoolPermissionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this check pool permissions not found response a status code equal to that given
func (o *CheckPoolPermissionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the check pool permissions not found response
func (o *CheckPoolPermissionsNotFound) Code() int {
	return 404
}

func (o *CheckPoolPermissionsNotFound) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsNotFound  %+v", 404, o.Payload)
}

func (o *CheckPoolPermissionsNotFound) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsNotFound  %+v", 404, o.Payload)
}

func (o *CheckPoolPermissionsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckPoolPermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckPoolPermissionsTooManyRequests creates a CheckPoolPermissionsTooManyRequests with default headers values
func NewCheckPoolPermissionsTooManyRequests() *CheckPoolPermissionsTooManyRequests {
	return &CheckPoolPermissionsTooManyRequests{}
}

/*
CheckPoolPermissionsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type CheckPoolPermissionsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this check pool permissions too many requests response has a 2xx status code
func (o *CheckPoolPermissionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check pool permissions too many requests response has a 3xx status code
func (o *CheckPoolPermissionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check pool permissions too many requests response has a 4xx status code
func (o *CheckPoolPermissionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this check pool permissions too many requests response has a 5xx status code
func (o *CheckPoolPermissionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this check pool permissions too many requests response a status code equal to that given
func (o *CheckPoolPermissionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the check pool permissions too many requests response
func (o *CheckPoolPermissionsTooManyRequests) Code() int {
	return 429
}

func (o *CheckPoolPermissionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CheckPoolPermissionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/permissions][%d] checkPoolPermissionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CheckPoolPermissionsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckPoolPermissionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
