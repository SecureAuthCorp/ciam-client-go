// Code generated by go-swagger; DO NOT EDIT.

package o_t_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// VerifyOTPReader is a Reader for the VerifyOTP structure.
type VerifyOTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VerifyOTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVerifyOTPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewVerifyOTPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewVerifyOTPPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewVerifyOTPUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /admin/pools/{ipID}/users/{userID}/otp/verify] verifyOTP", response, response.Code())
	}
}

// NewVerifyOTPOK creates a VerifyOTPOK with default headers values
func NewVerifyOTPOK() *VerifyOTPOK {
	return &VerifyOTPOK{}
}

/*
VerifyOTPOK describes a response with status code 200, with default header values.

User
*/
type VerifyOTPOK struct {
	Payload *models.UserID
}

// IsSuccess returns true when this verify o t p o k response has a 2xx status code
func (o *VerifyOTPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this verify o t p o k response has a 3xx status code
func (o *VerifyOTPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify o t p o k response has a 4xx status code
func (o *VerifyOTPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify o t p o k response has a 5xx status code
func (o *VerifyOTPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this verify o t p o k response a status code equal to that given
func (o *VerifyOTPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the verify o t p o k response
func (o *VerifyOTPOK) Code() int {
	return 200
}

func (o *VerifyOTPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/otp/verify][%d] verifyOTPOK %s", 200, payload)
}

func (o *VerifyOTPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/otp/verify][%d] verifyOTPOK %s", 200, payload)
}

func (o *VerifyOTPOK) GetPayload() *models.UserID {
	return o.Payload
}

func (o *VerifyOTPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyOTPUnauthorized creates a VerifyOTPUnauthorized with default headers values
func NewVerifyOTPUnauthorized() *VerifyOTPUnauthorized {
	return &VerifyOTPUnauthorized{}
}

/*
VerifyOTPUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type VerifyOTPUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify o t p unauthorized response has a 2xx status code
func (o *VerifyOTPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify o t p unauthorized response has a 3xx status code
func (o *VerifyOTPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify o t p unauthorized response has a 4xx status code
func (o *VerifyOTPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify o t p unauthorized response has a 5xx status code
func (o *VerifyOTPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this verify o t p unauthorized response a status code equal to that given
func (o *VerifyOTPUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the verify o t p unauthorized response
func (o *VerifyOTPUnauthorized) Code() int {
	return 401
}

func (o *VerifyOTPUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/otp/verify][%d] verifyOTPUnauthorized %s", 401, payload)
}

func (o *VerifyOTPUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/otp/verify][%d] verifyOTPUnauthorized %s", 401, payload)
}

func (o *VerifyOTPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyOTPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyOTPPreconditionFailed creates a VerifyOTPPreconditionFailed with default headers values
func NewVerifyOTPPreconditionFailed() *VerifyOTPPreconditionFailed {
	return &VerifyOTPPreconditionFailed{}
}

/*
VerifyOTPPreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type VerifyOTPPreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify o t p precondition failed response has a 2xx status code
func (o *VerifyOTPPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify o t p precondition failed response has a 3xx status code
func (o *VerifyOTPPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify o t p precondition failed response has a 4xx status code
func (o *VerifyOTPPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify o t p precondition failed response has a 5xx status code
func (o *VerifyOTPPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this verify o t p precondition failed response a status code equal to that given
func (o *VerifyOTPPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the verify o t p precondition failed response
func (o *VerifyOTPPreconditionFailed) Code() int {
	return 412
}

func (o *VerifyOTPPreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/otp/verify][%d] verifyOTPPreconditionFailed %s", 412, payload)
}

func (o *VerifyOTPPreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/otp/verify][%d] verifyOTPPreconditionFailed %s", 412, payload)
}

func (o *VerifyOTPPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyOTPPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyOTPUnprocessableEntity creates a VerifyOTPUnprocessableEntity with default headers values
func NewVerifyOTPUnprocessableEntity() *VerifyOTPUnprocessableEntity {
	return &VerifyOTPUnprocessableEntity{}
}

/*
VerifyOTPUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type VerifyOTPUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify o t p unprocessable entity response has a 2xx status code
func (o *VerifyOTPUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify o t p unprocessable entity response has a 3xx status code
func (o *VerifyOTPUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify o t p unprocessable entity response has a 4xx status code
func (o *VerifyOTPUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify o t p unprocessable entity response has a 5xx status code
func (o *VerifyOTPUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this verify o t p unprocessable entity response a status code equal to that given
func (o *VerifyOTPUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the verify o t p unprocessable entity response
func (o *VerifyOTPUnprocessableEntity) Code() int {
	return 422
}

func (o *VerifyOTPUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/otp/verify][%d] verifyOTPUnprocessableEntity %s", 422, payload)
}

func (o *VerifyOTPUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/otp/verify][%d] verifyOTPUnprocessableEntity %s", 422, payload)
}

func (o *VerifyOTPUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyOTPUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
