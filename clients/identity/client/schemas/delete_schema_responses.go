// Code generated by go-swagger; DO NOT EDIT.

package schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// DeleteSchemaReader is a Reader for the DeleteSchema structure.
type DeleteSchemaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSchemaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteSchemaNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSchemaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteSchemaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSchemaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSchemaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteSchemaConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteSchemaTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /admin/schemas/{schID}] deleteSchema", response, response.Code())
	}
}

// NewDeleteSchemaNoContent creates a DeleteSchemaNoContent with default headers values
func NewDeleteSchemaNoContent() *DeleteSchemaNoContent {
	return &DeleteSchemaNoContent{}
}

/*
DeleteSchemaNoContent describes a response with status code 204, with default header values.

	Schema has been deleted
*/
type DeleteSchemaNoContent struct {
}

// IsSuccess returns true when this delete schema no content response has a 2xx status code
func (o *DeleteSchemaNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete schema no content response has a 3xx status code
func (o *DeleteSchemaNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete schema no content response has a 4xx status code
func (o *DeleteSchemaNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete schema no content response has a 5xx status code
func (o *DeleteSchemaNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete schema no content response a status code equal to that given
func (o *DeleteSchemaNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete schema no content response
func (o *DeleteSchemaNoContent) Code() int {
	return 204
}

func (o *DeleteSchemaNoContent) Error() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaNoContent ", 204)
}

func (o *DeleteSchemaNoContent) String() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaNoContent ", 204)
}

func (o *DeleteSchemaNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSchemaBadRequest creates a DeleteSchemaBadRequest with default headers values
func NewDeleteSchemaBadRequest() *DeleteSchemaBadRequest {
	return &DeleteSchemaBadRequest{}
}

/*
DeleteSchemaBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteSchemaBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete schema bad request response has a 2xx status code
func (o *DeleteSchemaBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete schema bad request response has a 3xx status code
func (o *DeleteSchemaBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete schema bad request response has a 4xx status code
func (o *DeleteSchemaBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete schema bad request response has a 5xx status code
func (o *DeleteSchemaBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete schema bad request response a status code equal to that given
func (o *DeleteSchemaBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete schema bad request response
func (o *DeleteSchemaBadRequest) Code() int {
	return 400
}

func (o *DeleteSchemaBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSchemaBadRequest) String() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSchemaBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSchemaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSchemaUnauthorized creates a DeleteSchemaUnauthorized with default headers values
func NewDeleteSchemaUnauthorized() *DeleteSchemaUnauthorized {
	return &DeleteSchemaUnauthorized{}
}

/*
DeleteSchemaUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteSchemaUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete schema unauthorized response has a 2xx status code
func (o *DeleteSchemaUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete schema unauthorized response has a 3xx status code
func (o *DeleteSchemaUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete schema unauthorized response has a 4xx status code
func (o *DeleteSchemaUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete schema unauthorized response has a 5xx status code
func (o *DeleteSchemaUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete schema unauthorized response a status code equal to that given
func (o *DeleteSchemaUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete schema unauthorized response
func (o *DeleteSchemaUnauthorized) Code() int {
	return 401
}

func (o *DeleteSchemaUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSchemaUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSchemaUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSchemaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSchemaForbidden creates a DeleteSchemaForbidden with default headers values
func NewDeleteSchemaForbidden() *DeleteSchemaForbidden {
	return &DeleteSchemaForbidden{}
}

/*
DeleteSchemaForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteSchemaForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete schema forbidden response has a 2xx status code
func (o *DeleteSchemaForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete schema forbidden response has a 3xx status code
func (o *DeleteSchemaForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete schema forbidden response has a 4xx status code
func (o *DeleteSchemaForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete schema forbidden response has a 5xx status code
func (o *DeleteSchemaForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete schema forbidden response a status code equal to that given
func (o *DeleteSchemaForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete schema forbidden response
func (o *DeleteSchemaForbidden) Code() int {
	return 403
}

func (o *DeleteSchemaForbidden) Error() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSchemaForbidden) String() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSchemaForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSchemaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSchemaNotFound creates a DeleteSchemaNotFound with default headers values
func NewDeleteSchemaNotFound() *DeleteSchemaNotFound {
	return &DeleteSchemaNotFound{}
}

/*
DeleteSchemaNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteSchemaNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete schema not found response has a 2xx status code
func (o *DeleteSchemaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete schema not found response has a 3xx status code
func (o *DeleteSchemaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete schema not found response has a 4xx status code
func (o *DeleteSchemaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete schema not found response has a 5xx status code
func (o *DeleteSchemaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete schema not found response a status code equal to that given
func (o *DeleteSchemaNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete schema not found response
func (o *DeleteSchemaNotFound) Code() int {
	return 404
}

func (o *DeleteSchemaNotFound) Error() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSchemaNotFound) String() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSchemaNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSchemaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSchemaConflict creates a DeleteSchemaConflict with default headers values
func NewDeleteSchemaConflict() *DeleteSchemaConflict {
	return &DeleteSchemaConflict{}
}

/*
DeleteSchemaConflict describes a response with status code 409, with default header values.

Conflict
*/
type DeleteSchemaConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete schema conflict response has a 2xx status code
func (o *DeleteSchemaConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete schema conflict response has a 3xx status code
func (o *DeleteSchemaConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete schema conflict response has a 4xx status code
func (o *DeleteSchemaConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete schema conflict response has a 5xx status code
func (o *DeleteSchemaConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete schema conflict response a status code equal to that given
func (o *DeleteSchemaConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete schema conflict response
func (o *DeleteSchemaConflict) Code() int {
	return 409
}

func (o *DeleteSchemaConflict) Error() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaConflict  %+v", 409, o.Payload)
}

func (o *DeleteSchemaConflict) String() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaConflict  %+v", 409, o.Payload)
}

func (o *DeleteSchemaConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSchemaConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSchemaTooManyRequests creates a DeleteSchemaTooManyRequests with default headers values
func NewDeleteSchemaTooManyRequests() *DeleteSchemaTooManyRequests {
	return &DeleteSchemaTooManyRequests{}
}

/*
DeleteSchemaTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteSchemaTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete schema too many requests response has a 2xx status code
func (o *DeleteSchemaTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete schema too many requests response has a 3xx status code
func (o *DeleteSchemaTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete schema too many requests response has a 4xx status code
func (o *DeleteSchemaTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete schema too many requests response has a 5xx status code
func (o *DeleteSchemaTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete schema too many requests response a status code equal to that given
func (o *DeleteSchemaTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete schema too many requests response
func (o *DeleteSchemaTooManyRequests) Code() int {
	return 429
}

func (o *DeleteSchemaTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSchemaTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /admin/schemas/{schID}][%d] deleteSchemaTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSchemaTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSchemaTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
