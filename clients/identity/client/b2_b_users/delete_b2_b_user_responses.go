// Code generated by go-swagger; DO NOT EDIT.

package b2_b_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// DeleteB2BUserReader is a Reader for the DeleteB2BUser structure.
type DeleteB2BUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteB2BUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteB2BUserNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteB2BUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteB2BUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteB2BUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteB2BUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /admin/b2b/pools/{ipID}/users/{userID}] deleteB2BUser", response, response.Code())
	}
}

// NewDeleteB2BUserNoContent creates a DeleteB2BUserNoContent with default headers values
func NewDeleteB2BUserNoContent() *DeleteB2BUserNoContent {
	return &DeleteB2BUserNoContent{}
}

/*
DeleteB2BUserNoContent describes a response with status code 204, with default header values.

	User has been deleted
*/
type DeleteB2BUserNoContent struct {
}

// IsSuccess returns true when this delete b2 b user no content response has a 2xx status code
func (o *DeleteB2BUserNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete b2 b user no content response has a 3xx status code
func (o *DeleteB2BUserNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete b2 b user no content response has a 4xx status code
func (o *DeleteB2BUserNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete b2 b user no content response has a 5xx status code
func (o *DeleteB2BUserNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete b2 b user no content response a status code equal to that given
func (o *DeleteB2BUserNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete b2 b user no content response
func (o *DeleteB2BUserNoContent) Code() int {
	return 204
}

func (o *DeleteB2BUserNoContent) Error() string {
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserNoContent", 204)
}

func (o *DeleteB2BUserNoContent) String() string {
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserNoContent", 204)
}

func (o *DeleteB2BUserNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteB2BUserUnauthorized creates a DeleteB2BUserUnauthorized with default headers values
func NewDeleteB2BUserUnauthorized() *DeleteB2BUserUnauthorized {
	return &DeleteB2BUserUnauthorized{}
}

/*
DeleteB2BUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteB2BUserUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete b2 b user unauthorized response has a 2xx status code
func (o *DeleteB2BUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete b2 b user unauthorized response has a 3xx status code
func (o *DeleteB2BUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete b2 b user unauthorized response has a 4xx status code
func (o *DeleteB2BUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete b2 b user unauthorized response has a 5xx status code
func (o *DeleteB2BUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete b2 b user unauthorized response a status code equal to that given
func (o *DeleteB2BUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete b2 b user unauthorized response
func (o *DeleteB2BUserUnauthorized) Code() int {
	return 401
}

func (o *DeleteB2BUserUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserUnauthorized %s", 401, payload)
}

func (o *DeleteB2BUserUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserUnauthorized %s", 401, payload)
}

func (o *DeleteB2BUserUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteB2BUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteB2BUserForbidden creates a DeleteB2BUserForbidden with default headers values
func NewDeleteB2BUserForbidden() *DeleteB2BUserForbidden {
	return &DeleteB2BUserForbidden{}
}

/*
DeleteB2BUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteB2BUserForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete b2 b user forbidden response has a 2xx status code
func (o *DeleteB2BUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete b2 b user forbidden response has a 3xx status code
func (o *DeleteB2BUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete b2 b user forbidden response has a 4xx status code
func (o *DeleteB2BUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete b2 b user forbidden response has a 5xx status code
func (o *DeleteB2BUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete b2 b user forbidden response a status code equal to that given
func (o *DeleteB2BUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete b2 b user forbidden response
func (o *DeleteB2BUserForbidden) Code() int {
	return 403
}

func (o *DeleteB2BUserForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserForbidden %s", 403, payload)
}

func (o *DeleteB2BUserForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserForbidden %s", 403, payload)
}

func (o *DeleteB2BUserForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteB2BUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteB2BUserNotFound creates a DeleteB2BUserNotFound with default headers values
func NewDeleteB2BUserNotFound() *DeleteB2BUserNotFound {
	return &DeleteB2BUserNotFound{}
}

/*
DeleteB2BUserNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteB2BUserNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete b2 b user not found response has a 2xx status code
func (o *DeleteB2BUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete b2 b user not found response has a 3xx status code
func (o *DeleteB2BUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete b2 b user not found response has a 4xx status code
func (o *DeleteB2BUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete b2 b user not found response has a 5xx status code
func (o *DeleteB2BUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete b2 b user not found response a status code equal to that given
func (o *DeleteB2BUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete b2 b user not found response
func (o *DeleteB2BUserNotFound) Code() int {
	return 404
}

func (o *DeleteB2BUserNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserNotFound %s", 404, payload)
}

func (o *DeleteB2BUserNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserNotFound %s", 404, payload)
}

func (o *DeleteB2BUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteB2BUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteB2BUserTooManyRequests creates a DeleteB2BUserTooManyRequests with default headers values
func NewDeleteB2BUserTooManyRequests() *DeleteB2BUserTooManyRequests {
	return &DeleteB2BUserTooManyRequests{}
}

/*
DeleteB2BUserTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteB2BUserTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete b2 b user too many requests response has a 2xx status code
func (o *DeleteB2BUserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete b2 b user too many requests response has a 3xx status code
func (o *DeleteB2BUserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete b2 b user too many requests response has a 4xx status code
func (o *DeleteB2BUserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete b2 b user too many requests response has a 5xx status code
func (o *DeleteB2BUserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete b2 b user too many requests response a status code equal to that given
func (o *DeleteB2BUserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete b2 b user too many requests response
func (o *DeleteB2BUserTooManyRequests) Code() int {
	return 429
}

func (o *DeleteB2BUserTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserTooManyRequests %s", 429, payload)
}

func (o *DeleteB2BUserTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/b2b/pools/{ipID}/users/{userID}][%d] deleteB2BUserTooManyRequests %s", 429, payload)
}

func (o *DeleteB2BUserTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteB2BUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
