// Code generated by go-swagger; DO NOT EDIT.

package b2_b_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// UpdateB2BUserReader is a Reader for the UpdateB2BUser structure.
type UpdateB2BUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateB2BUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateB2BUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateB2BUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateB2BUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateB2BUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateB2BUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateB2BUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateB2BUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateB2BUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /admin/b2b/pools/{ipID}/users/{userID}] updateB2BUser", response, response.Code())
	}
}

// NewUpdateB2BUserOK creates a UpdateB2BUserOK with default headers values
func NewUpdateB2BUserOK() *UpdateB2BUserOK {
	return &UpdateB2BUserOK{}
}

/*
UpdateB2BUserOK describes a response with status code 200, with default header values.

User
*/
type UpdateB2BUserOK struct {
	Payload *models.BaseUserWithData
}

// IsSuccess returns true when this update b2 b user o k response has a 2xx status code
func (o *UpdateB2BUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update b2 b user o k response has a 3xx status code
func (o *UpdateB2BUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update b2 b user o k response has a 4xx status code
func (o *UpdateB2BUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update b2 b user o k response has a 5xx status code
func (o *UpdateB2BUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update b2 b user o k response a status code equal to that given
func (o *UpdateB2BUserOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update b2 b user o k response
func (o *UpdateB2BUserOK) Code() int {
	return 200
}

func (o *UpdateB2BUserOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserOK %s", 200, payload)
}

func (o *UpdateB2BUserOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserOK %s", 200, payload)
}

func (o *UpdateB2BUserOK) GetPayload() *models.BaseUserWithData {
	return o.Payload
}

func (o *UpdateB2BUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BaseUserWithData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateB2BUserBadRequest creates a UpdateB2BUserBadRequest with default headers values
func NewUpdateB2BUserBadRequest() *UpdateB2BUserBadRequest {
	return &UpdateB2BUserBadRequest{}
}

/*
UpdateB2BUserBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateB2BUserBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update b2 b user bad request response has a 2xx status code
func (o *UpdateB2BUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update b2 b user bad request response has a 3xx status code
func (o *UpdateB2BUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update b2 b user bad request response has a 4xx status code
func (o *UpdateB2BUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update b2 b user bad request response has a 5xx status code
func (o *UpdateB2BUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update b2 b user bad request response a status code equal to that given
func (o *UpdateB2BUserBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update b2 b user bad request response
func (o *UpdateB2BUserBadRequest) Code() int {
	return 400
}

func (o *UpdateB2BUserBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserBadRequest %s", 400, payload)
}

func (o *UpdateB2BUserBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserBadRequest %s", 400, payload)
}

func (o *UpdateB2BUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateB2BUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateB2BUserUnauthorized creates a UpdateB2BUserUnauthorized with default headers values
func NewUpdateB2BUserUnauthorized() *UpdateB2BUserUnauthorized {
	return &UpdateB2BUserUnauthorized{}
}

/*
UpdateB2BUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateB2BUserUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update b2 b user unauthorized response has a 2xx status code
func (o *UpdateB2BUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update b2 b user unauthorized response has a 3xx status code
func (o *UpdateB2BUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update b2 b user unauthorized response has a 4xx status code
func (o *UpdateB2BUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update b2 b user unauthorized response has a 5xx status code
func (o *UpdateB2BUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update b2 b user unauthorized response a status code equal to that given
func (o *UpdateB2BUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update b2 b user unauthorized response
func (o *UpdateB2BUserUnauthorized) Code() int {
	return 401
}

func (o *UpdateB2BUserUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserUnauthorized %s", 401, payload)
}

func (o *UpdateB2BUserUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserUnauthorized %s", 401, payload)
}

func (o *UpdateB2BUserUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateB2BUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateB2BUserForbidden creates a UpdateB2BUserForbidden with default headers values
func NewUpdateB2BUserForbidden() *UpdateB2BUserForbidden {
	return &UpdateB2BUserForbidden{}
}

/*
UpdateB2BUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateB2BUserForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update b2 b user forbidden response has a 2xx status code
func (o *UpdateB2BUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update b2 b user forbidden response has a 3xx status code
func (o *UpdateB2BUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update b2 b user forbidden response has a 4xx status code
func (o *UpdateB2BUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update b2 b user forbidden response has a 5xx status code
func (o *UpdateB2BUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update b2 b user forbidden response a status code equal to that given
func (o *UpdateB2BUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update b2 b user forbidden response
func (o *UpdateB2BUserForbidden) Code() int {
	return 403
}

func (o *UpdateB2BUserForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserForbidden %s", 403, payload)
}

func (o *UpdateB2BUserForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserForbidden %s", 403, payload)
}

func (o *UpdateB2BUserForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateB2BUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateB2BUserNotFound creates a UpdateB2BUserNotFound with default headers values
func NewUpdateB2BUserNotFound() *UpdateB2BUserNotFound {
	return &UpdateB2BUserNotFound{}
}

/*
UpdateB2BUserNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateB2BUserNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update b2 b user not found response has a 2xx status code
func (o *UpdateB2BUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update b2 b user not found response has a 3xx status code
func (o *UpdateB2BUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update b2 b user not found response has a 4xx status code
func (o *UpdateB2BUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update b2 b user not found response has a 5xx status code
func (o *UpdateB2BUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update b2 b user not found response a status code equal to that given
func (o *UpdateB2BUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update b2 b user not found response
func (o *UpdateB2BUserNotFound) Code() int {
	return 404
}

func (o *UpdateB2BUserNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserNotFound %s", 404, payload)
}

func (o *UpdateB2BUserNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserNotFound %s", 404, payload)
}

func (o *UpdateB2BUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateB2BUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateB2BUserConflict creates a UpdateB2BUserConflict with default headers values
func NewUpdateB2BUserConflict() *UpdateB2BUserConflict {
	return &UpdateB2BUserConflict{}
}

/*
UpdateB2BUserConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateB2BUserConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update b2 b user conflict response has a 2xx status code
func (o *UpdateB2BUserConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update b2 b user conflict response has a 3xx status code
func (o *UpdateB2BUserConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update b2 b user conflict response has a 4xx status code
func (o *UpdateB2BUserConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update b2 b user conflict response has a 5xx status code
func (o *UpdateB2BUserConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update b2 b user conflict response a status code equal to that given
func (o *UpdateB2BUserConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update b2 b user conflict response
func (o *UpdateB2BUserConflict) Code() int {
	return 409
}

func (o *UpdateB2BUserConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserConflict %s", 409, payload)
}

func (o *UpdateB2BUserConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserConflict %s", 409, payload)
}

func (o *UpdateB2BUserConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateB2BUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateB2BUserUnprocessableEntity creates a UpdateB2BUserUnprocessableEntity with default headers values
func NewUpdateB2BUserUnprocessableEntity() *UpdateB2BUserUnprocessableEntity {
	return &UpdateB2BUserUnprocessableEntity{}
}

/*
UpdateB2BUserUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateB2BUserUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update b2 b user unprocessable entity response has a 2xx status code
func (o *UpdateB2BUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update b2 b user unprocessable entity response has a 3xx status code
func (o *UpdateB2BUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update b2 b user unprocessable entity response has a 4xx status code
func (o *UpdateB2BUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update b2 b user unprocessable entity response has a 5xx status code
func (o *UpdateB2BUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update b2 b user unprocessable entity response a status code equal to that given
func (o *UpdateB2BUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update b2 b user unprocessable entity response
func (o *UpdateB2BUserUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateB2BUserUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserUnprocessableEntity %s", 422, payload)
}

func (o *UpdateB2BUserUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserUnprocessableEntity %s", 422, payload)
}

func (o *UpdateB2BUserUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateB2BUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateB2BUserTooManyRequests creates a UpdateB2BUserTooManyRequests with default headers values
func NewUpdateB2BUserTooManyRequests() *UpdateB2BUserTooManyRequests {
	return &UpdateB2BUserTooManyRequests{}
}

/*
UpdateB2BUserTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateB2BUserTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update b2 b user too many requests response has a 2xx status code
func (o *UpdateB2BUserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update b2 b user too many requests response has a 3xx status code
func (o *UpdateB2BUserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update b2 b user too many requests response has a 4xx status code
func (o *UpdateB2BUserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update b2 b user too many requests response has a 5xx status code
func (o *UpdateB2BUserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update b2 b user too many requests response a status code equal to that given
func (o *UpdateB2BUserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update b2 b user too many requests response
func (o *UpdateB2BUserTooManyRequests) Code() int {
	return 429
}

func (o *UpdateB2BUserTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserTooManyRequests %s", 429, payload)
}

func (o *UpdateB2BUserTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /admin/b2b/pools/{ipID}/users/{userID}][%d] updateB2BUserTooManyRequests %s", 429, payload)
}

func (o *UpdateB2BUserTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateB2BUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
