// Code generated by go-swagger; DO NOT EDIT.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// ListMyWorkspacePoolsReader is a Reader for the ListMyWorkspacePools structure.
type ListMyWorkspacePoolsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListMyWorkspacePoolsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListMyWorkspacePoolsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListMyWorkspacePoolsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListMyWorkspacePoolsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListMyWorkspacePoolsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /admin/workspace/{wid}/my/pools] listMyWorkspacePools", response, response.Code())
	}
}

// NewListMyWorkspacePoolsOK creates a ListMyWorkspacePoolsOK with default headers values
func NewListMyWorkspacePoolsOK() *ListMyWorkspacePoolsOK {
	return &ListMyWorkspacePoolsOK{}
}

/*
ListMyWorkspacePoolsOK describes a response with status code 200, with default header values.

Pools
*/
type ListMyWorkspacePoolsOK struct {
	Payload *models.Pools
}

// IsSuccess returns true when this list my workspace pools o k response has a 2xx status code
func (o *ListMyWorkspacePoolsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list my workspace pools o k response has a 3xx status code
func (o *ListMyWorkspacePoolsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list my workspace pools o k response has a 4xx status code
func (o *ListMyWorkspacePoolsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list my workspace pools o k response has a 5xx status code
func (o *ListMyWorkspacePoolsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list my workspace pools o k response a status code equal to that given
func (o *ListMyWorkspacePoolsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list my workspace pools o k response
func (o *ListMyWorkspacePoolsOK) Code() int {
	return 200
}

func (o *ListMyWorkspacePoolsOK) Error() string {
	return fmt.Sprintf("[GET /admin/workspace/{wid}/my/pools][%d] listMyWorkspacePoolsOK  %+v", 200, o.Payload)
}

func (o *ListMyWorkspacePoolsOK) String() string {
	return fmt.Sprintf("[GET /admin/workspace/{wid}/my/pools][%d] listMyWorkspacePoolsOK  %+v", 200, o.Payload)
}

func (o *ListMyWorkspacePoolsOK) GetPayload() *models.Pools {
	return o.Payload
}

func (o *ListMyWorkspacePoolsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Pools)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListMyWorkspacePoolsUnauthorized creates a ListMyWorkspacePoolsUnauthorized with default headers values
func NewListMyWorkspacePoolsUnauthorized() *ListMyWorkspacePoolsUnauthorized {
	return &ListMyWorkspacePoolsUnauthorized{}
}

/*
ListMyWorkspacePoolsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListMyWorkspacePoolsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list my workspace pools unauthorized response has a 2xx status code
func (o *ListMyWorkspacePoolsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list my workspace pools unauthorized response has a 3xx status code
func (o *ListMyWorkspacePoolsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list my workspace pools unauthorized response has a 4xx status code
func (o *ListMyWorkspacePoolsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list my workspace pools unauthorized response has a 5xx status code
func (o *ListMyWorkspacePoolsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list my workspace pools unauthorized response a status code equal to that given
func (o *ListMyWorkspacePoolsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list my workspace pools unauthorized response
func (o *ListMyWorkspacePoolsUnauthorized) Code() int {
	return 401
}

func (o *ListMyWorkspacePoolsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /admin/workspace/{wid}/my/pools][%d] listMyWorkspacePoolsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListMyWorkspacePoolsUnauthorized) String() string {
	return fmt.Sprintf("[GET /admin/workspace/{wid}/my/pools][%d] listMyWorkspacePoolsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListMyWorkspacePoolsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListMyWorkspacePoolsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListMyWorkspacePoolsForbidden creates a ListMyWorkspacePoolsForbidden with default headers values
func NewListMyWorkspacePoolsForbidden() *ListMyWorkspacePoolsForbidden {
	return &ListMyWorkspacePoolsForbidden{}
}

/*
ListMyWorkspacePoolsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListMyWorkspacePoolsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list my workspace pools forbidden response has a 2xx status code
func (o *ListMyWorkspacePoolsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list my workspace pools forbidden response has a 3xx status code
func (o *ListMyWorkspacePoolsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list my workspace pools forbidden response has a 4xx status code
func (o *ListMyWorkspacePoolsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list my workspace pools forbidden response has a 5xx status code
func (o *ListMyWorkspacePoolsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list my workspace pools forbidden response a status code equal to that given
func (o *ListMyWorkspacePoolsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list my workspace pools forbidden response
func (o *ListMyWorkspacePoolsForbidden) Code() int {
	return 403
}

func (o *ListMyWorkspacePoolsForbidden) Error() string {
	return fmt.Sprintf("[GET /admin/workspace/{wid}/my/pools][%d] listMyWorkspacePoolsForbidden  %+v", 403, o.Payload)
}

func (o *ListMyWorkspacePoolsForbidden) String() string {
	return fmt.Sprintf("[GET /admin/workspace/{wid}/my/pools][%d] listMyWorkspacePoolsForbidden  %+v", 403, o.Payload)
}

func (o *ListMyWorkspacePoolsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListMyWorkspacePoolsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListMyWorkspacePoolsTooManyRequests creates a ListMyWorkspacePoolsTooManyRequests with default headers values
func NewListMyWorkspacePoolsTooManyRequests() *ListMyWorkspacePoolsTooManyRequests {
	return &ListMyWorkspacePoolsTooManyRequests{}
}

/*
ListMyWorkspacePoolsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListMyWorkspacePoolsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list my workspace pools too many requests response has a 2xx status code
func (o *ListMyWorkspacePoolsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list my workspace pools too many requests response has a 3xx status code
func (o *ListMyWorkspacePoolsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list my workspace pools too many requests response has a 4xx status code
func (o *ListMyWorkspacePoolsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list my workspace pools too many requests response has a 5xx status code
func (o *ListMyWorkspacePoolsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list my workspace pools too many requests response a status code equal to that given
func (o *ListMyWorkspacePoolsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list my workspace pools too many requests response
func (o *ListMyWorkspacePoolsTooManyRequests) Code() int {
	return 429
}

func (o *ListMyWorkspacePoolsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /admin/workspace/{wid}/my/pools][%d] listMyWorkspacePoolsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListMyWorkspacePoolsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /admin/workspace/{wid}/my/pools][%d] listMyWorkspacePoolsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListMyWorkspacePoolsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListMyWorkspacePoolsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
