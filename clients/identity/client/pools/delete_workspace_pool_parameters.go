// Code generated by go-swagger; DO NOT EDIT.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteWorkspacePoolParams creates a new DeleteWorkspacePoolParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteWorkspacePoolParams() *DeleteWorkspacePoolParams {
	return &DeleteWorkspacePoolParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteWorkspacePoolParamsWithTimeout creates a new DeleteWorkspacePoolParams object
// with the ability to set a timeout on a request.
func NewDeleteWorkspacePoolParamsWithTimeout(timeout time.Duration) *DeleteWorkspacePoolParams {
	return &DeleteWorkspacePoolParams{
		timeout: timeout,
	}
}

// NewDeleteWorkspacePoolParamsWithContext creates a new DeleteWorkspacePoolParams object
// with the ability to set a context for a request.
func NewDeleteWorkspacePoolParamsWithContext(ctx context.Context) *DeleteWorkspacePoolParams {
	return &DeleteWorkspacePoolParams{
		Context: ctx,
	}
}

// NewDeleteWorkspacePoolParamsWithHTTPClient creates a new DeleteWorkspacePoolParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteWorkspacePoolParamsWithHTTPClient(client *http.Client) *DeleteWorkspacePoolParams {
	return &DeleteWorkspacePoolParams{
		HTTPClient: client,
	}
}

/*
DeleteWorkspacePoolParams contains all the parameters to send to the API endpoint

	for the delete workspace pool operation.

	Typically these are written to a http.Request.
*/
type DeleteWorkspacePoolParams struct {

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	// IPID.
	IPID string

	/* Wid.

	   Workspace id

	   Default: "default"
	*/
	Wid string

	/* WithIdp.

	   With idp
	*/
	WithIdp *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete workspace pool params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteWorkspacePoolParams) WithDefaults() *DeleteWorkspacePoolParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete workspace pool params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteWorkspacePoolParams) SetDefaults() {
	var (
		widDefault = string("default")
	)

	val := DeleteWorkspacePoolParams{
		Wid: widDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) WithTimeout(timeout time.Duration) *DeleteWorkspacePoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) WithContext(ctx context.Context) *DeleteWorkspacePoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) WithHTTPClient(client *http.Client) *DeleteWorkspacePoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) WithIfMatch(ifMatch *string) *DeleteWorkspacePoolParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithIPID adds the iPID to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) WithIPID(iPID string) *DeleteWorkspacePoolParams {
	o.SetIPID(iPID)
	return o
}

// SetIPID adds the ipId to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) SetIPID(iPID string) {
	o.IPID = iPID
}

// WithWid adds the wid to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) WithWid(wid string) *DeleteWorkspacePoolParams {
	o.SetWid(wid)
	return o
}

// SetWid adds the wid to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) SetWid(wid string) {
	o.Wid = wid
}

// WithWithIdp adds the withIdp to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) WithWithIdp(withIdp *bool) *DeleteWorkspacePoolParams {
	o.SetWithIdp(withIdp)
	return o
}

// SetWithIdp adds the withIdp to the delete workspace pool params
func (o *DeleteWorkspacePoolParams) SetWithIdp(withIdp *bool) {
	o.WithIdp = withIdp
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteWorkspacePoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	// path param ipID
	if err := r.SetPathParam("ipID", o.IPID); err != nil {
		return err
	}

	// path param wid
	if err := r.SetPathParam("wid", o.Wid); err != nil {
		return err
	}

	if o.WithIdp != nil {

		// query param with_idp
		var qrWithIdp bool

		if o.WithIdp != nil {
			qrWithIdp = *o.WithIdp
		}
		qWithIdp := swag.FormatBool(qrWithIdp)
		if qWithIdp != "" {

			if err := r.SetQueryParam("with_idp", qWithIdp); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
