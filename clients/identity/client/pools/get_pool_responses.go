// Code generated by go-swagger; DO NOT EDIT.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// GetPoolReader is a Reader for the GetPool structure.
type GetPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPoolUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPoolForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPoolTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPoolOK creates a GetPoolOK with default headers values
func NewGetPoolOK() *GetPoolOK {
	return &GetPoolOK{}
}

/*
GetPoolOK describes a response with status code 200, with default header values.

Identity Pool
*/
type GetPoolOK struct {
	Payload *models.PoolResponse
}

// IsSuccess returns true when this get pool o k response has a 2xx status code
func (o *GetPoolOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get pool o k response has a 3xx status code
func (o *GetPoolOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pool o k response has a 4xx status code
func (o *GetPoolOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get pool o k response has a 5xx status code
func (o *GetPoolOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get pool o k response a status code equal to that given
func (o *GetPoolOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetPoolOK) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolOK  %+v", 200, o.Payload)
}

func (o *GetPoolOK) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolOK  %+v", 200, o.Payload)
}

func (o *GetPoolOK) GetPayload() *models.PoolResponse {
	return o.Payload
}

func (o *GetPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PoolResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoolUnauthorized creates a GetPoolUnauthorized with default headers values
func NewGetPoolUnauthorized() *GetPoolUnauthorized {
	return &GetPoolUnauthorized{}
}

/*
GetPoolUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPoolUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get pool unauthorized response has a 2xx status code
func (o *GetPoolUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pool unauthorized response has a 3xx status code
func (o *GetPoolUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pool unauthorized response has a 4xx status code
func (o *GetPoolUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pool unauthorized response has a 5xx status code
func (o *GetPoolUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get pool unauthorized response a status code equal to that given
func (o *GetPoolUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetPoolUnauthorized) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPoolUnauthorized) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPoolUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPoolUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoolForbidden creates a GetPoolForbidden with default headers values
func NewGetPoolForbidden() *GetPoolForbidden {
	return &GetPoolForbidden{}
}

/*
GetPoolForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPoolForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get pool forbidden response has a 2xx status code
func (o *GetPoolForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pool forbidden response has a 3xx status code
func (o *GetPoolForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pool forbidden response has a 4xx status code
func (o *GetPoolForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pool forbidden response has a 5xx status code
func (o *GetPoolForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get pool forbidden response a status code equal to that given
func (o *GetPoolForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetPoolForbidden) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolForbidden  %+v", 403, o.Payload)
}

func (o *GetPoolForbidden) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolForbidden  %+v", 403, o.Payload)
}

func (o *GetPoolForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPoolForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoolNotFound creates a GetPoolNotFound with default headers values
func NewGetPoolNotFound() *GetPoolNotFound {
	return &GetPoolNotFound{}
}

/*
GetPoolNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetPoolNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get pool not found response has a 2xx status code
func (o *GetPoolNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pool not found response has a 3xx status code
func (o *GetPoolNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pool not found response has a 4xx status code
func (o *GetPoolNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pool not found response has a 5xx status code
func (o *GetPoolNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get pool not found response a status code equal to that given
func (o *GetPoolNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetPoolNotFound) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolNotFound  %+v", 404, o.Payload)
}

func (o *GetPoolNotFound) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolNotFound  %+v", 404, o.Payload)
}

func (o *GetPoolNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPoolTooManyRequests creates a GetPoolTooManyRequests with default headers values
func NewGetPoolTooManyRequests() *GetPoolTooManyRequests {
	return &GetPoolTooManyRequests{}
}

/*
GetPoolTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetPoolTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get pool too many requests response has a 2xx status code
func (o *GetPoolTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pool too many requests response has a 3xx status code
func (o *GetPoolTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pool too many requests response has a 4xx status code
func (o *GetPoolTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pool too many requests response has a 5xx status code
func (o *GetPoolTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get pool too many requests response a status code equal to that given
func (o *GetPoolTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetPoolTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPoolTooManyRequests) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}][%d] getPoolTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPoolTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPoolTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
