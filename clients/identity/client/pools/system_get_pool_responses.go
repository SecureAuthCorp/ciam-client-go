// Code generated by go-swagger; DO NOT EDIT.

package pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// SystemGetPoolReader is a Reader for the SystemGetPool structure.
type SystemGetPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SystemGetPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSystemGetPoolOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSystemGetPoolUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSystemGetPoolForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSystemGetPoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSystemGetPoolTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSystemGetPoolOK creates a SystemGetPoolOK with default headers values
func NewSystemGetPoolOK() *SystemGetPoolOK {
	return &SystemGetPoolOK{}
}

/* SystemGetPoolOK describes a response with status code 200, with default header values.

Identity Pool
*/
type SystemGetPoolOK struct {
	Payload *models.Pool
}

func (o *SystemGetPoolOK) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}][%d] systemGetPoolOK  %+v", 200, o.Payload)
}
func (o *SystemGetPoolOK) GetPayload() *models.Pool {
	return o.Payload
}

func (o *SystemGetPoolOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Pool)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemGetPoolUnauthorized creates a SystemGetPoolUnauthorized with default headers values
func NewSystemGetPoolUnauthorized() *SystemGetPoolUnauthorized {
	return &SystemGetPoolUnauthorized{}
}

/* SystemGetPoolUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type SystemGetPoolUnauthorized struct {
	Payload *models.Error
}

func (o *SystemGetPoolUnauthorized) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}][%d] systemGetPoolUnauthorized  %+v", 401, o.Payload)
}
func (o *SystemGetPoolUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SystemGetPoolUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemGetPoolForbidden creates a SystemGetPoolForbidden with default headers values
func NewSystemGetPoolForbidden() *SystemGetPoolForbidden {
	return &SystemGetPoolForbidden{}
}

/* SystemGetPoolForbidden describes a response with status code 403, with default header values.

HttpError
*/
type SystemGetPoolForbidden struct {
	Payload *models.Error
}

func (o *SystemGetPoolForbidden) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}][%d] systemGetPoolForbidden  %+v", 403, o.Payload)
}
func (o *SystemGetPoolForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *SystemGetPoolForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemGetPoolNotFound creates a SystemGetPoolNotFound with default headers values
func NewSystemGetPoolNotFound() *SystemGetPoolNotFound {
	return &SystemGetPoolNotFound{}
}

/* SystemGetPoolNotFound describes a response with status code 404, with default header values.

HttpError
*/
type SystemGetPoolNotFound struct {
	Payload *models.Error
}

func (o *SystemGetPoolNotFound) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}][%d] systemGetPoolNotFound  %+v", 404, o.Payload)
}
func (o *SystemGetPoolNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SystemGetPoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSystemGetPoolTooManyRequests creates a SystemGetPoolTooManyRequests with default headers values
func NewSystemGetPoolTooManyRequests() *SystemGetPoolTooManyRequests {
	return &SystemGetPoolTooManyRequests{}
}

/* SystemGetPoolTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type SystemGetPoolTooManyRequests struct {
	Payload *models.Error
}

func (o *SystemGetPoolTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}][%d] systemGetPoolTooManyRequests  %+v", 429, o.Payload)
}
func (o *SystemGetPoolTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *SystemGetPoolTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
