// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// SendActivationMessageReader is a Reader for the SendActivationMessage structure.
type SendActivationMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendActivationMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSendActivationMessageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSendActivationMessageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSendActivationMessageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSendActivationMessageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSendActivationMessageUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSendActivationMessageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /admin/pools/{ipID}/users/{userID}/activation/send] sendActivationMessage", response, response.Code())
	}
}

// NewSendActivationMessageNoContent creates a SendActivationMessageNoContent with default headers values
func NewSendActivationMessageNoContent() *SendActivationMessageNoContent {
	return &SendActivationMessageNoContent{}
}

/*
SendActivationMessageNoContent describes a response with status code 204, with default header values.

	Activation message sent
*/
type SendActivationMessageNoContent struct {
}

// IsSuccess returns true when this send activation message no content response has a 2xx status code
func (o *SendActivationMessageNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this send activation message no content response has a 3xx status code
func (o *SendActivationMessageNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send activation message no content response has a 4xx status code
func (o *SendActivationMessageNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this send activation message no content response has a 5xx status code
func (o *SendActivationMessageNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this send activation message no content response a status code equal to that given
func (o *SendActivationMessageNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the send activation message no content response
func (o *SendActivationMessageNoContent) Code() int {
	return 204
}

func (o *SendActivationMessageNoContent) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageNoContent ", 204)
}

func (o *SendActivationMessageNoContent) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageNoContent ", 204)
}

func (o *SendActivationMessageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSendActivationMessageBadRequest creates a SendActivationMessageBadRequest with default headers values
func NewSendActivationMessageBadRequest() *SendActivationMessageBadRequest {
	return &SendActivationMessageBadRequest{}
}

/*
SendActivationMessageBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SendActivationMessageBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this send activation message bad request response has a 2xx status code
func (o *SendActivationMessageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send activation message bad request response has a 3xx status code
func (o *SendActivationMessageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send activation message bad request response has a 4xx status code
func (o *SendActivationMessageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this send activation message bad request response has a 5xx status code
func (o *SendActivationMessageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this send activation message bad request response a status code equal to that given
func (o *SendActivationMessageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the send activation message bad request response
func (o *SendActivationMessageBadRequest) Code() int {
	return 400
}

func (o *SendActivationMessageBadRequest) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageBadRequest  %+v", 400, o.Payload)
}

func (o *SendActivationMessageBadRequest) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageBadRequest  %+v", 400, o.Payload)
}

func (o *SendActivationMessageBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SendActivationMessageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendActivationMessageUnauthorized creates a SendActivationMessageUnauthorized with default headers values
func NewSendActivationMessageUnauthorized() *SendActivationMessageUnauthorized {
	return &SendActivationMessageUnauthorized{}
}

/*
SendActivationMessageUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SendActivationMessageUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this send activation message unauthorized response has a 2xx status code
func (o *SendActivationMessageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send activation message unauthorized response has a 3xx status code
func (o *SendActivationMessageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send activation message unauthorized response has a 4xx status code
func (o *SendActivationMessageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this send activation message unauthorized response has a 5xx status code
func (o *SendActivationMessageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this send activation message unauthorized response a status code equal to that given
func (o *SendActivationMessageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the send activation message unauthorized response
func (o *SendActivationMessageUnauthorized) Code() int {
	return 401
}

func (o *SendActivationMessageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *SendActivationMessageUnauthorized) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageUnauthorized  %+v", 401, o.Payload)
}

func (o *SendActivationMessageUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SendActivationMessageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendActivationMessageNotFound creates a SendActivationMessageNotFound with default headers values
func NewSendActivationMessageNotFound() *SendActivationMessageNotFound {
	return &SendActivationMessageNotFound{}
}

/*
SendActivationMessageNotFound describes a response with status code 404, with default header values.

Not found
*/
type SendActivationMessageNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this send activation message not found response has a 2xx status code
func (o *SendActivationMessageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send activation message not found response has a 3xx status code
func (o *SendActivationMessageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send activation message not found response has a 4xx status code
func (o *SendActivationMessageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this send activation message not found response has a 5xx status code
func (o *SendActivationMessageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this send activation message not found response a status code equal to that given
func (o *SendActivationMessageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the send activation message not found response
func (o *SendActivationMessageNotFound) Code() int {
	return 404
}

func (o *SendActivationMessageNotFound) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageNotFound  %+v", 404, o.Payload)
}

func (o *SendActivationMessageNotFound) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageNotFound  %+v", 404, o.Payload)
}

func (o *SendActivationMessageNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SendActivationMessageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendActivationMessageUnprocessableEntity creates a SendActivationMessageUnprocessableEntity with default headers values
func NewSendActivationMessageUnprocessableEntity() *SendActivationMessageUnprocessableEntity {
	return &SendActivationMessageUnprocessableEntity{}
}

/*
SendActivationMessageUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type SendActivationMessageUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this send activation message unprocessable entity response has a 2xx status code
func (o *SendActivationMessageUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send activation message unprocessable entity response has a 3xx status code
func (o *SendActivationMessageUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send activation message unprocessable entity response has a 4xx status code
func (o *SendActivationMessageUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this send activation message unprocessable entity response has a 5xx status code
func (o *SendActivationMessageUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this send activation message unprocessable entity response a status code equal to that given
func (o *SendActivationMessageUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the send activation message unprocessable entity response
func (o *SendActivationMessageUnprocessableEntity) Code() int {
	return 422
}

func (o *SendActivationMessageUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SendActivationMessageUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SendActivationMessageUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *SendActivationMessageUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendActivationMessageTooManyRequests creates a SendActivationMessageTooManyRequests with default headers values
func NewSendActivationMessageTooManyRequests() *SendActivationMessageTooManyRequests {
	return &SendActivationMessageTooManyRequests{}
}

/*
SendActivationMessageTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type SendActivationMessageTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this send activation message too many requests response has a 2xx status code
func (o *SendActivationMessageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send activation message too many requests response has a 3xx status code
func (o *SendActivationMessageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send activation message too many requests response has a 4xx status code
func (o *SendActivationMessageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this send activation message too many requests response has a 5xx status code
func (o *SendActivationMessageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this send activation message too many requests response a status code equal to that given
func (o *SendActivationMessageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the send activation message too many requests response
func (o *SendActivationMessageTooManyRequests) Code() int {
	return 429
}

func (o *SendActivationMessageTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageTooManyRequests  %+v", 429, o.Payload)
}

func (o *SendActivationMessageTooManyRequests) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/activation/send][%d] sendActivationMessageTooManyRequests  %+v", 429, o.Payload)
}

func (o *SendActivationMessageTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *SendActivationMessageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
