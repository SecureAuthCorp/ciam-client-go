// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// ListUsersReader is a Reader for the ListUsers structure.
type ListUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListUsersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUsersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewListUsersUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListUsersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListUsersOK creates a ListUsersOK with default headers values
func NewListUsersOK() *ListUsersOK {
	return &ListUsersOK{}
}

/* ListUsersOK describes a response with status code 200, with default header values.

Users
*/
type ListUsersOK struct {
	Payload *models.Users
}

func (o *ListUsersOK) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users][%d] listUsersOK  %+v", 200, o.Payload)
}
func (o *ListUsersOK) GetPayload() *models.Users {
	return o.Payload
}

func (o *ListUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Users)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersBadRequest creates a ListUsersBadRequest with default headers values
func NewListUsersBadRequest() *ListUsersBadRequest {
	return &ListUsersBadRequest{}
}

/* ListUsersBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type ListUsersBadRequest struct {
	Payload *models.Error
}

func (o *ListUsersBadRequest) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users][%d] listUsersBadRequest  %+v", 400, o.Payload)
}
func (o *ListUsersBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUsersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersUnauthorized creates a ListUsersUnauthorized with default headers values
func NewListUsersUnauthorized() *ListUsersUnauthorized {
	return &ListUsersUnauthorized{}
}

/* ListUsersUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type ListUsersUnauthorized struct {
	Payload *models.Error
}

func (o *ListUsersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users][%d] listUsersUnauthorized  %+v", 401, o.Payload)
}
func (o *ListUsersUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersForbidden creates a ListUsersForbidden with default headers values
func NewListUsersForbidden() *ListUsersForbidden {
	return &ListUsersForbidden{}
}

/* ListUsersForbidden describes a response with status code 403, with default header values.

HttpError
*/
type ListUsersForbidden struct {
	Payload *models.Error
}

func (o *ListUsersForbidden) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users][%d] listUsersForbidden  %+v", 403, o.Payload)
}
func (o *ListUsersForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersNotFound creates a ListUsersNotFound with default headers values
func NewListUsersNotFound() *ListUsersNotFound {
	return &ListUsersNotFound{}
}

/* ListUsersNotFound describes a response with status code 404, with default header values.

HttpError
*/
type ListUsersNotFound struct {
	Payload *models.Error
}

func (o *ListUsersNotFound) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users][%d] listUsersNotFound  %+v", 404, o.Payload)
}
func (o *ListUsersNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUsersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersUnprocessableEntity creates a ListUsersUnprocessableEntity with default headers values
func NewListUsersUnprocessableEntity() *ListUsersUnprocessableEntity {
	return &ListUsersUnprocessableEntity{}
}

/* ListUsersUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type ListUsersUnprocessableEntity struct {
	Payload *models.Error
}

func (o *ListUsersUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users][%d] listUsersUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *ListUsersUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUsersUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersTooManyRequests creates a ListUsersTooManyRequests with default headers values
func NewListUsersTooManyRequests() *ListUsersTooManyRequests {
	return &ListUsersTooManyRequests{}
}

/* ListUsersTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type ListUsersTooManyRequests struct {
	Payload *models.Error
}

func (o *ListUsersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users][%d] listUsersTooManyRequests  %+v", 429, o.Payload)
}
func (o *ListUsersTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUsersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
