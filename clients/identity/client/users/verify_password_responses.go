// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// VerifyPasswordReader is a Reader for the VerifyPassword structure.
type VerifyPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VerifyPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVerifyPasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewVerifyPasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewVerifyPasswordUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVerifyPasswordOK creates a VerifyPasswordOK with default headers values
func NewVerifyPasswordOK() *VerifyPasswordOK {
	return &VerifyPasswordOK{}
}

/* VerifyPasswordOK describes a response with status code 200, with default header values.

User
*/
type VerifyPasswordOK struct {
	Payload *models.UserID
}

func (o *VerifyPasswordOK) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/verify][%d] verifyPasswordOK  %+v", 200, o.Payload)
}
func (o *VerifyPasswordOK) GetPayload() *models.UserID {
	return o.Payload
}

func (o *VerifyPasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyPasswordUnauthorized creates a VerifyPasswordUnauthorized with default headers values
func NewVerifyPasswordUnauthorized() *VerifyPasswordUnauthorized {
	return &VerifyPasswordUnauthorized{}
}

/* VerifyPasswordUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type VerifyPasswordUnauthorized struct {
	Payload *models.Error
}

func (o *VerifyPasswordUnauthorized) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/verify][%d] verifyPasswordUnauthorized  %+v", 401, o.Payload)
}
func (o *VerifyPasswordUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyPasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyPasswordUnprocessableEntity creates a VerifyPasswordUnprocessableEntity with default headers values
func NewVerifyPasswordUnprocessableEntity() *VerifyPasswordUnprocessableEntity {
	return &VerifyPasswordUnprocessableEntity{}
}

/* VerifyPasswordUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type VerifyPasswordUnprocessableEntity struct {
	Payload *models.Error
}

func (o *VerifyPasswordUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/verify][%d] verifyPasswordUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *VerifyPasswordUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyPasswordUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
