// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// AddUserVerifiableAddressReader is a Reader for the AddUserVerifiableAddress structure.
type AddUserVerifiableAddressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUserVerifiableAddressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddUserVerifiableAddressOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddUserVerifiableAddressUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddUserVerifiableAddressForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddUserVerifiableAddressNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddUserVerifiableAddressConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAddUserVerifiableAddressUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /admin/pools/{ipID}/users/{userID}/addresses/add] addUserVerifiableAddress", response, response.Code())
	}
}

// NewAddUserVerifiableAddressOK creates a AddUserVerifiableAddressOK with default headers values
func NewAddUserVerifiableAddressOK() *AddUserVerifiableAddressOK {
	return &AddUserVerifiableAddressOK{}
}

/*
AddUserVerifiableAddressOK describes a response with status code 200, with default header values.

Address
*/
type AddUserVerifiableAddressOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.UserVerifiableAddress
}

// IsSuccess returns true when this add user verifiable address o k response has a 2xx status code
func (o *AddUserVerifiableAddressOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add user verifiable address o k response has a 3xx status code
func (o *AddUserVerifiableAddressOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user verifiable address o k response has a 4xx status code
func (o *AddUserVerifiableAddressOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add user verifiable address o k response has a 5xx status code
func (o *AddUserVerifiableAddressOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add user verifiable address o k response a status code equal to that given
func (o *AddUserVerifiableAddressOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add user verifiable address o k response
func (o *AddUserVerifiableAddressOK) Code() int {
	return 200
}

func (o *AddUserVerifiableAddressOK) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressOK  %+v", 200, o.Payload)
}

func (o *AddUserVerifiableAddressOK) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressOK  %+v", 200, o.Payload)
}

func (o *AddUserVerifiableAddressOK) GetPayload() *models.UserVerifiableAddress {
	return o.Payload
}

func (o *AddUserVerifiableAddressOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.UserVerifiableAddress)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserVerifiableAddressUnauthorized creates a AddUserVerifiableAddressUnauthorized with default headers values
func NewAddUserVerifiableAddressUnauthorized() *AddUserVerifiableAddressUnauthorized {
	return &AddUserVerifiableAddressUnauthorized{}
}

/*
AddUserVerifiableAddressUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddUserVerifiableAddressUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user verifiable address unauthorized response has a 2xx status code
func (o *AddUserVerifiableAddressUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user verifiable address unauthorized response has a 3xx status code
func (o *AddUserVerifiableAddressUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user verifiable address unauthorized response has a 4xx status code
func (o *AddUserVerifiableAddressUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user verifiable address unauthorized response has a 5xx status code
func (o *AddUserVerifiableAddressUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add user verifiable address unauthorized response a status code equal to that given
func (o *AddUserVerifiableAddressUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add user verifiable address unauthorized response
func (o *AddUserVerifiableAddressUnauthorized) Code() int {
	return 401
}

func (o *AddUserVerifiableAddressUnauthorized) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserVerifiableAddressUnauthorized) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserVerifiableAddressUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserVerifiableAddressUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserVerifiableAddressForbidden creates a AddUserVerifiableAddressForbidden with default headers values
func NewAddUserVerifiableAddressForbidden() *AddUserVerifiableAddressForbidden {
	return &AddUserVerifiableAddressForbidden{}
}

/*
AddUserVerifiableAddressForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddUserVerifiableAddressForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user verifiable address forbidden response has a 2xx status code
func (o *AddUserVerifiableAddressForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user verifiable address forbidden response has a 3xx status code
func (o *AddUserVerifiableAddressForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user verifiable address forbidden response has a 4xx status code
func (o *AddUserVerifiableAddressForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user verifiable address forbidden response has a 5xx status code
func (o *AddUserVerifiableAddressForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add user verifiable address forbidden response a status code equal to that given
func (o *AddUserVerifiableAddressForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add user verifiable address forbidden response
func (o *AddUserVerifiableAddressForbidden) Code() int {
	return 403
}

func (o *AddUserVerifiableAddressForbidden) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressForbidden  %+v", 403, o.Payload)
}

func (o *AddUserVerifiableAddressForbidden) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressForbidden  %+v", 403, o.Payload)
}

func (o *AddUserVerifiableAddressForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserVerifiableAddressForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserVerifiableAddressNotFound creates a AddUserVerifiableAddressNotFound with default headers values
func NewAddUserVerifiableAddressNotFound() *AddUserVerifiableAddressNotFound {
	return &AddUserVerifiableAddressNotFound{}
}

/*
AddUserVerifiableAddressNotFound describes a response with status code 404, with default header values.

Not found
*/
type AddUserVerifiableAddressNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user verifiable address not found response has a 2xx status code
func (o *AddUserVerifiableAddressNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user verifiable address not found response has a 3xx status code
func (o *AddUserVerifiableAddressNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user verifiable address not found response has a 4xx status code
func (o *AddUserVerifiableAddressNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user verifiable address not found response has a 5xx status code
func (o *AddUserVerifiableAddressNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add user verifiable address not found response a status code equal to that given
func (o *AddUserVerifiableAddressNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add user verifiable address not found response
func (o *AddUserVerifiableAddressNotFound) Code() int {
	return 404
}

func (o *AddUserVerifiableAddressNotFound) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressNotFound  %+v", 404, o.Payload)
}

func (o *AddUserVerifiableAddressNotFound) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressNotFound  %+v", 404, o.Payload)
}

func (o *AddUserVerifiableAddressNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserVerifiableAddressNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserVerifiableAddressConflict creates a AddUserVerifiableAddressConflict with default headers values
func NewAddUserVerifiableAddressConflict() *AddUserVerifiableAddressConflict {
	return &AddUserVerifiableAddressConflict{}
}

/*
AddUserVerifiableAddressConflict describes a response with status code 409, with default header values.

Conflict
*/
type AddUserVerifiableAddressConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user verifiable address conflict response has a 2xx status code
func (o *AddUserVerifiableAddressConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user verifiable address conflict response has a 3xx status code
func (o *AddUserVerifiableAddressConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user verifiable address conflict response has a 4xx status code
func (o *AddUserVerifiableAddressConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user verifiable address conflict response has a 5xx status code
func (o *AddUserVerifiableAddressConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this add user verifiable address conflict response a status code equal to that given
func (o *AddUserVerifiableAddressConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the add user verifiable address conflict response
func (o *AddUserVerifiableAddressConflict) Code() int {
	return 409
}

func (o *AddUserVerifiableAddressConflict) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressConflict  %+v", 409, o.Payload)
}

func (o *AddUserVerifiableAddressConflict) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressConflict  %+v", 409, o.Payload)
}

func (o *AddUserVerifiableAddressConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserVerifiableAddressConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserVerifiableAddressUnprocessableEntity creates a AddUserVerifiableAddressUnprocessableEntity with default headers values
func NewAddUserVerifiableAddressUnprocessableEntity() *AddUserVerifiableAddressUnprocessableEntity {
	return &AddUserVerifiableAddressUnprocessableEntity{}
}

/*
AddUserVerifiableAddressUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type AddUserVerifiableAddressUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user verifiable address unprocessable entity response has a 2xx status code
func (o *AddUserVerifiableAddressUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user verifiable address unprocessable entity response has a 3xx status code
func (o *AddUserVerifiableAddressUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user verifiable address unprocessable entity response has a 4xx status code
func (o *AddUserVerifiableAddressUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user verifiable address unprocessable entity response has a 5xx status code
func (o *AddUserVerifiableAddressUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this add user verifiable address unprocessable entity response a status code equal to that given
func (o *AddUserVerifiableAddressUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the add user verifiable address unprocessable entity response
func (o *AddUserVerifiableAddressUnprocessableEntity) Code() int {
	return 422
}

func (o *AddUserVerifiableAddressUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddUserVerifiableAddressUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /admin/pools/{ipID}/users/{userID}/addresses/add][%d] addUserVerifiableAddressUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddUserVerifiableAddressUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserVerifiableAddressUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
