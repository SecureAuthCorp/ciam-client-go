// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// DeleteUserReader is a Reader for the DeleteUser structure.
type DeleteUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteUserNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /admin/pools/{ipID}/users/{userID}] deleteUser", response, response.Code())
	}
}

// NewDeleteUserNoContent creates a DeleteUserNoContent with default headers values
func NewDeleteUserNoContent() *DeleteUserNoContent {
	return &DeleteUserNoContent{}
}

/*
DeleteUserNoContent describes a response with status code 204, with default header values.

	User has been deleted
*/
type DeleteUserNoContent struct {
}

// IsSuccess returns true when this delete user no content response has a 2xx status code
func (o *DeleteUserNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete user no content response has a 3xx status code
func (o *DeleteUserNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user no content response has a 4xx status code
func (o *DeleteUserNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete user no content response has a 5xx status code
func (o *DeleteUserNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user no content response a status code equal to that given
func (o *DeleteUserNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete user no content response
func (o *DeleteUserNoContent) Code() int {
	return 204
}

func (o *DeleteUserNoContent) Error() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserNoContent ", 204)
}

func (o *DeleteUserNoContent) String() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserNoContent ", 204)
}

func (o *DeleteUserNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUserUnauthorized creates a DeleteUserUnauthorized with default headers values
func NewDeleteUserUnauthorized() *DeleteUserUnauthorized {
	return &DeleteUserUnauthorized{}
}

/*
DeleteUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteUserUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete user unauthorized response has a 2xx status code
func (o *DeleteUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user unauthorized response has a 3xx status code
func (o *DeleteUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user unauthorized response has a 4xx status code
func (o *DeleteUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user unauthorized response has a 5xx status code
func (o *DeleteUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user unauthorized response a status code equal to that given
func (o *DeleteUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete user unauthorized response
func (o *DeleteUserUnauthorized) Code() int {
	return 401
}

func (o *DeleteUserUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteUserUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteUserUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserForbidden creates a DeleteUserForbidden with default headers values
func NewDeleteUserForbidden() *DeleteUserForbidden {
	return &DeleteUserForbidden{}
}

/*
DeleteUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteUserForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete user forbidden response has a 2xx status code
func (o *DeleteUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user forbidden response has a 3xx status code
func (o *DeleteUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user forbidden response has a 4xx status code
func (o *DeleteUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user forbidden response has a 5xx status code
func (o *DeleteUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user forbidden response a status code equal to that given
func (o *DeleteUserForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete user forbidden response
func (o *DeleteUserForbidden) Code() int {
	return 403
}

func (o *DeleteUserForbidden) Error() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserForbidden  %+v", 403, o.Payload)
}

func (o *DeleteUserForbidden) String() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserForbidden  %+v", 403, o.Payload)
}

func (o *DeleteUserForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserNotFound creates a DeleteUserNotFound with default headers values
func NewDeleteUserNotFound() *DeleteUserNotFound {
	return &DeleteUserNotFound{}
}

/*
DeleteUserNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteUserNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete user not found response has a 2xx status code
func (o *DeleteUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user not found response has a 3xx status code
func (o *DeleteUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user not found response has a 4xx status code
func (o *DeleteUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user not found response has a 5xx status code
func (o *DeleteUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user not found response a status code equal to that given
func (o *DeleteUserNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete user not found response
func (o *DeleteUserNotFound) Code() int {
	return 404
}

func (o *DeleteUserNotFound) Error() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserNotFound  %+v", 404, o.Payload)
}

func (o *DeleteUserNotFound) String() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserNotFound  %+v", 404, o.Payload)
}

func (o *DeleteUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUserTooManyRequests creates a DeleteUserTooManyRequests with default headers values
func NewDeleteUserTooManyRequests() *DeleteUserTooManyRequests {
	return &DeleteUserTooManyRequests{}
}

/*
DeleteUserTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteUserTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete user too many requests response has a 2xx status code
func (o *DeleteUserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete user too many requests response has a 3xx status code
func (o *DeleteUserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete user too many requests response has a 4xx status code
func (o *DeleteUserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete user too many requests response has a 5xx status code
func (o *DeleteUserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete user too many requests response a status code equal to that given
func (o *DeleteUserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete user too many requests response
func (o *DeleteUserTooManyRequests) Code() int {
	return 429
}

func (o *DeleteUserTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteUserTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/users/{userID}][%d] deleteUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteUserTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
