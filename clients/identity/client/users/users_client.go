// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddUserIdentifier(params *AddUserIdentifierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserIdentifierOK, error)

	AddUserVerifiableAddress(params *AddUserVerifiableAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserVerifiableAddressOK, error)

	CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserCreated, error)

	DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserNoContent, error)

	DeleteUserIdentifier(params *DeleteUserIdentifierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserIdentifierNoContent, error)

	DeleteUserVerifiableAddress(params *DeleteUserVerifiableAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserVerifiableAddressNoContent, error)

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error)

	ListUsers(params *ListUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUsersOK, error)

	SendActivationMessage(params *SendActivationMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendActivationMessageNoContent, error)

	UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserOK, error)

	UpdateUserVerifiableAddress(params *UpdateUserVerifiableAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserVerifiableAddressOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddUserIdentifier adds identifier

Adds an identifier to the user account
*/
func (a *Client) AddUserIdentifier(params *AddUserIdentifierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserIdentifierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserIdentifier",
		Method:             "POST",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}/identifiers/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserIdentifierOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddUserVerifiableAddress adds verifiable address

Adds a verifiable address to the user account
*/
func (a *Client) AddUserVerifiableAddress(params *AddUserVerifiableAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserVerifiableAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserVerifiableAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserVerifiableAddress",
		Method:             "POST",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}/addresses/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserVerifiableAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserVerifiableAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserVerifiableAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateUser creates user

	Creates a user with extended data. User can be created with any status and set of identifiers, addresses and credentials.

If payload schema ID or metadata schema ID is not provided, they default to the value from Identity Pool.
Payload and metadata must be valid against a proper schema.
Returns an extended view on user entry (see Get User endpoint).
*/
func (a *Client) CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUser",
		Method:             "POST",
		PathPattern:        "/admin/pools/{ipID}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUser deletes user

Deletes user.
*/
func (a *Client) DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserIdentifier deletes identifier

Deletes an identifier from the user account
*/
func (a *Client) DeleteUserIdentifier(params *DeleteUserIdentifierParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserIdentifierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserIdentifierParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserIdentifier",
		Method:             "POST",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}/identifiers/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserIdentifierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserIdentifierNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserIdentifier: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserVerifiableAddress deletes verifiable address

Deletes a verifiable address from the user account
*/
func (a *Client) DeleteUserVerifiableAddress(params *DeleteUserVerifiableAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserVerifiableAddressNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserVerifiableAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserVerifiableAddress",
		Method:             "POST",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}/addresses/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserVerifiableAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserVerifiableAddressNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserVerifiableAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUser gets user

	Returns an extended view on user entry.

Besides the basic user entry, it returns all user identifiers, addresses, and credentials (blurred).
User payload and metadata are also returned.
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListUsers lists users

	Lists users.

Results are sorted by user ID. No other sorting is supported.
*/
func (a *Client) ListUsers(params *ListUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listUsers",
		Method:             "GET",
		PathPattern:        "/admin/pools/{ipID}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SendActivationMessage sends activation message

	Sends an activation message to user to provided address.

If an address is not provided then it takes user address as destination (if only one address exists)
Fails if:
address is not provided and user has no addresses or more than one
address is someone's else verified address or identifier
user status is not New.
Invalidates previously generated OTPs for user activation.
If `code_type_in_message` query parameter was set to link or not provided then a link will be generated for activation.
Activation message is valid for specific period of time configured in Identity Pool.

REFACTORED: input field name has been changed from `identifier` to `address`; field `identifier` stays for backward compatibility and overrides `address` if not empty
*/
func (a *Client) SendActivationMessage(params *SendActivationMessageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SendActivationMessageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendActivationMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sendActivationMessage",
		Method:             "POST",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}/activation/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendActivationMessageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendActivationMessageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendActivationMessage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateUser updates user

	Updates base set of user data like payload, metadata, schemas and status.

Updates only provided fields - overrides them. Not provided fields are not removed/cleared.
If payload or metadata is provided it must be valid against proper schema.
If any schema is provided then the corresponding entry (payload or metadata) must be valid against it.
Returns an extended view on user entry (see Get User endpoint).
*/
func (a *Client) UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUser",
		Method:             "PUT",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserVerifiableAddress updates verifiable address

Updates a verifiable address of the user account
*/
func (a *Client) UpdateUserVerifiableAddress(params *UpdateUserVerifiableAddressParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserVerifiableAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserVerifiableAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserVerifiableAddress",
		Method:             "POST",
		PathPattern:        "/admin/pools/{ipID}/users/{userID}/addresses/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserVerifiableAddressReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserVerifiableAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserVerifiableAddress: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
