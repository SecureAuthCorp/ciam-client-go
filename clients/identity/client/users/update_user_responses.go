// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// UpdateUserReader is a Reader for the UpdateUser structure.
type UpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateUserOK creates a UpdateUserOK with default headers values
func NewUpdateUserOK() *UpdateUserOK {
	return &UpdateUserOK{}
}

/*
UpdateUserOK describes a response with status code 200, with default header values.

User
*/
type UpdateUserOK struct {
	Payload *models.UserWithData
}

// IsSuccess returns true when this update user o k response has a 2xx status code
func (o *UpdateUserOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update user o k response has a 3xx status code
func (o *UpdateUserOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user o k response has a 4xx status code
func (o *UpdateUserOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update user o k response has a 5xx status code
func (o *UpdateUserOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update user o k response a status code equal to that given
func (o *UpdateUserOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateUserOK) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserOK  %+v", 200, o.Payload)
}

func (o *UpdateUserOK) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserOK  %+v", 200, o.Payload)
}

func (o *UpdateUserOK) GetPayload() *models.UserWithData {
	return o.Payload
}

func (o *UpdateUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserWithData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserBadRequest creates a UpdateUserBadRequest with default headers values
func NewUpdateUserBadRequest() *UpdateUserBadRequest {
	return &UpdateUserBadRequest{}
}

/*
UpdateUserBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateUserBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user bad request response has a 2xx status code
func (o *UpdateUserBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user bad request response has a 3xx status code
func (o *UpdateUserBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user bad request response has a 4xx status code
func (o *UpdateUserBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user bad request response has a 5xx status code
func (o *UpdateUserBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update user bad request response a status code equal to that given
func (o *UpdateUserBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateUserBadRequest) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserBadRequest) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateUserBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserUnauthorized creates a UpdateUserUnauthorized with default headers values
func NewUpdateUserUnauthorized() *UpdateUserUnauthorized {
	return &UpdateUserUnauthorized{}
}

/*
UpdateUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUserUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user unauthorized response has a 2xx status code
func (o *UpdateUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user unauthorized response has a 3xx status code
func (o *UpdateUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user unauthorized response has a 4xx status code
func (o *UpdateUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user unauthorized response has a 5xx status code
func (o *UpdateUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update user unauthorized response a status code equal to that given
func (o *UpdateUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateUserUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUserUnauthorized) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateUserUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserForbidden creates a UpdateUserForbidden with default headers values
func NewUpdateUserForbidden() *UpdateUserForbidden {
	return &UpdateUserForbidden{}
}

/*
UpdateUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUserForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user forbidden response has a 2xx status code
func (o *UpdateUserForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user forbidden response has a 3xx status code
func (o *UpdateUserForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user forbidden response has a 4xx status code
func (o *UpdateUserForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user forbidden response has a 5xx status code
func (o *UpdateUserForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update user forbidden response a status code equal to that given
func (o *UpdateUserForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserForbidden) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserForbidden  %+v", 403, o.Payload)
}

func (o *UpdateUserForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserNotFound creates a UpdateUserNotFound with default headers values
func NewUpdateUserNotFound() *UpdateUserNotFound {
	return &UpdateUserNotFound{}
}

/*
UpdateUserNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateUserNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user not found response has a 2xx status code
func (o *UpdateUserNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user not found response has a 3xx status code
func (o *UpdateUserNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user not found response has a 4xx status code
func (o *UpdateUserNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user not found response has a 5xx status code
func (o *UpdateUserNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update user not found response a status code equal to that given
func (o *UpdateUserNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserNotFound) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserNotFound  %+v", 404, o.Payload)
}

func (o *UpdateUserNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserConflict creates a UpdateUserConflict with default headers values
func NewUpdateUserConflict() *UpdateUserConflict {
	return &UpdateUserConflict{}
}

/*
UpdateUserConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateUserConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user conflict response has a 2xx status code
func (o *UpdateUserConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user conflict response has a 3xx status code
func (o *UpdateUserConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user conflict response has a 4xx status code
func (o *UpdateUserConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user conflict response has a 5xx status code
func (o *UpdateUserConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update user conflict response a status code equal to that given
func (o *UpdateUserConflict) IsCode(code int) bool {
	return code == 409
}

func (o *UpdateUserConflict) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserConflict  %+v", 409, o.Payload)
}

func (o *UpdateUserConflict) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserConflict  %+v", 409, o.Payload)
}

func (o *UpdateUserConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserUnprocessableEntity creates a UpdateUserUnprocessableEntity with default headers values
func NewUpdateUserUnprocessableEntity() *UpdateUserUnprocessableEntity {
	return &UpdateUserUnprocessableEntity{}
}

/*
UpdateUserUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateUserUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user unprocessable entity response has a 2xx status code
func (o *UpdateUserUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user unprocessable entity response has a 3xx status code
func (o *UpdateUserUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user unprocessable entity response has a 4xx status code
func (o *UpdateUserUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user unprocessable entity response has a 5xx status code
func (o *UpdateUserUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update user unprocessable entity response a status code equal to that given
func (o *UpdateUserUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *UpdateUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateUserUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateUserUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserTooManyRequests creates a UpdateUserTooManyRequests with default headers values
func NewUpdateUserTooManyRequests() *UpdateUserTooManyRequests {
	return &UpdateUserTooManyRequests{}
}

/*
UpdateUserTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateUserTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update user too many requests response has a 2xx status code
func (o *UpdateUserTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update user too many requests response has a 3xx status code
func (o *UpdateUserTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update user too many requests response has a 4xx status code
func (o *UpdateUserTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update user too many requests response has a 5xx status code
func (o *UpdateUserTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update user too many requests response a status code equal to that given
func (o *UpdateUserTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateUserTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateUserTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/users/{userID}][%d] updateUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateUserTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
