// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// GetUserMetadataReader is a Reader for the GetUserMetadata structure.
type GetUserMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetUserMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetUserMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserMetadataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetUserMetadataTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}] getUserMetadata", response, response.Code())
	}
}

// NewGetUserMetadataOK creates a GetUserMetadataOK with default headers values
func NewGetUserMetadataOK() *GetUserMetadataOK {
	return &GetUserMetadataOK{}
}

/*
GetUserMetadataOK describes a response with status code 200, with default header values.

UserMetadata
*/
type GetUserMetadataOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.UserMetadataWithSchema
}

// IsSuccess returns true when this get user metadata o k response has a 2xx status code
func (o *GetUserMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get user metadata o k response has a 3xx status code
func (o *GetUserMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user metadata o k response has a 4xx status code
func (o *GetUserMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get user metadata o k response has a 5xx status code
func (o *GetUserMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get user metadata o k response a status code equal to that given
func (o *GetUserMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get user metadata o k response
func (o *GetUserMetadataOK) Code() int {
	return 200
}

func (o *GetUserMetadataOK) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataOK  %+v", 200, o.Payload)
}

func (o *GetUserMetadataOK) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataOK  %+v", 200, o.Payload)
}

func (o *GetUserMetadataOK) GetPayload() *models.UserMetadataWithSchema {
	return o.Payload
}

func (o *GetUserMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.UserMetadataWithSchema)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserMetadataBadRequest creates a GetUserMetadataBadRequest with default headers values
func NewGetUserMetadataBadRequest() *GetUserMetadataBadRequest {
	return &GetUserMetadataBadRequest{}
}

/*
GetUserMetadataBadRequest describes a response with status code 400, with default header values.

Unauthorized
*/
type GetUserMetadataBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get user metadata bad request response has a 2xx status code
func (o *GetUserMetadataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user metadata bad request response has a 3xx status code
func (o *GetUserMetadataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user metadata bad request response has a 4xx status code
func (o *GetUserMetadataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user metadata bad request response has a 5xx status code
func (o *GetUserMetadataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get user metadata bad request response a status code equal to that given
func (o *GetUserMetadataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get user metadata bad request response
func (o *GetUserMetadataBadRequest) Code() int {
	return 400
}

func (o *GetUserMetadataBadRequest) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserMetadataBadRequest) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *GetUserMetadataBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserMetadataUnauthorized creates a GetUserMetadataUnauthorized with default headers values
func NewGetUserMetadataUnauthorized() *GetUserMetadataUnauthorized {
	return &GetUserMetadataUnauthorized{}
}

/*
GetUserMetadataUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetUserMetadataUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get user metadata unauthorized response has a 2xx status code
func (o *GetUserMetadataUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user metadata unauthorized response has a 3xx status code
func (o *GetUserMetadataUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user metadata unauthorized response has a 4xx status code
func (o *GetUserMetadataUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user metadata unauthorized response has a 5xx status code
func (o *GetUserMetadataUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get user metadata unauthorized response a status code equal to that given
func (o *GetUserMetadataUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get user metadata unauthorized response
func (o *GetUserMetadataUnauthorized) Code() int {
	return 401
}

func (o *GetUserMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserMetadataUnauthorized) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUserMetadataUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserMetadataForbidden creates a GetUserMetadataForbidden with default headers values
func NewGetUserMetadataForbidden() *GetUserMetadataForbidden {
	return &GetUserMetadataForbidden{}
}

/*
GetUserMetadataForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUserMetadataForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get user metadata forbidden response has a 2xx status code
func (o *GetUserMetadataForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user metadata forbidden response has a 3xx status code
func (o *GetUserMetadataForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user metadata forbidden response has a 4xx status code
func (o *GetUserMetadataForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user metadata forbidden response has a 5xx status code
func (o *GetUserMetadataForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get user metadata forbidden response a status code equal to that given
func (o *GetUserMetadataForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get user metadata forbidden response
func (o *GetUserMetadataForbidden) Code() int {
	return 403
}

func (o *GetUserMetadataForbidden) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataForbidden  %+v", 403, o.Payload)
}

func (o *GetUserMetadataForbidden) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataForbidden  %+v", 403, o.Payload)
}

func (o *GetUserMetadataForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserMetadataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserMetadataNotFound creates a GetUserMetadataNotFound with default headers values
func NewGetUserMetadataNotFound() *GetUserMetadataNotFound {
	return &GetUserMetadataNotFound{}
}

/*
GetUserMetadataNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetUserMetadataNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get user metadata not found response has a 2xx status code
func (o *GetUserMetadataNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user metadata not found response has a 3xx status code
func (o *GetUserMetadataNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user metadata not found response has a 4xx status code
func (o *GetUserMetadataNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user metadata not found response has a 5xx status code
func (o *GetUserMetadataNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get user metadata not found response a status code equal to that given
func (o *GetUserMetadataNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get user metadata not found response
func (o *GetUserMetadataNotFound) Code() int {
	return 404
}

func (o *GetUserMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetUserMetadataNotFound) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataNotFound  %+v", 404, o.Payload)
}

func (o *GetUserMetadataNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserMetadataTooManyRequests creates a GetUserMetadataTooManyRequests with default headers values
func NewGetUserMetadataTooManyRequests() *GetUserMetadataTooManyRequests {
	return &GetUserMetadataTooManyRequests{}
}

/*
GetUserMetadataTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetUserMetadataTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get user metadata too many requests response has a 2xx status code
func (o *GetUserMetadataTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get user metadata too many requests response has a 3xx status code
func (o *GetUserMetadataTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get user metadata too many requests response has a 4xx status code
func (o *GetUserMetadataTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get user metadata too many requests response has a 5xx status code
func (o *GetUserMetadataTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get user metadata too many requests response a status code equal to that given
func (o *GetUserMetadataTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get user metadata too many requests response
func (o *GetUserMetadataTooManyRequests) Code() int {
	return 429
}

func (o *GetUserMetadataTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetUserMetadataTooManyRequests) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/metadata/{metadataType}][%d] getUserMetadataTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetUserMetadataTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUserMetadataTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
