// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// NewSelfRegisterUserParams creates a new SelfRegisterUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSelfRegisterUserParams() *SelfRegisterUserParams {
	return &SelfRegisterUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSelfRegisterUserParamsWithTimeout creates a new SelfRegisterUserParams object
// with the ability to set a timeout on a request.
func NewSelfRegisterUserParamsWithTimeout(timeout time.Duration) *SelfRegisterUserParams {
	return &SelfRegisterUserParams{
		timeout: timeout,
	}
}

// NewSelfRegisterUserParamsWithContext creates a new SelfRegisterUserParams object
// with the ability to set a context for a request.
func NewSelfRegisterUserParamsWithContext(ctx context.Context) *SelfRegisterUserParams {
	return &SelfRegisterUserParams{
		Context: ctx,
	}
}

// NewSelfRegisterUserParamsWithHTTPClient creates a new SelfRegisterUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewSelfRegisterUserParamsWithHTTPClient(client *http.Client) *SelfRegisterUserParams {
	return &SelfRegisterUserParams{
		HTTPClient: client,
	}
}

/* SelfRegisterUserParams contains all the parameters to send to the API endpoint
   for the self register user operation.

   Typically these are written to a http.Request.
*/
type SelfRegisterUserParams struct {

	// NewUser.
	NewUser *models.SelfRegisterUser

	/* CodeTypeInMessage.

	   Code type in message

	   Default: "link"
	*/
	CodeTypeInMessage *string

	// IPID.
	IPID string

	/* SendActivationMessage.

	   Send activation message

	   Default: true
	*/
	SendActivationMessage *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the self register user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SelfRegisterUserParams) WithDefaults() *SelfRegisterUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the self register user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SelfRegisterUserParams) SetDefaults() {
	var (
		codeTypeInMessageDefault = string("link")

		sendActivationMessageDefault = bool(true)
	)

	val := SelfRegisterUserParams{
		CodeTypeInMessage:     &codeTypeInMessageDefault,
		SendActivationMessage: &sendActivationMessageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the self register user params
func (o *SelfRegisterUserParams) WithTimeout(timeout time.Duration) *SelfRegisterUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the self register user params
func (o *SelfRegisterUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the self register user params
func (o *SelfRegisterUserParams) WithContext(ctx context.Context) *SelfRegisterUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the self register user params
func (o *SelfRegisterUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the self register user params
func (o *SelfRegisterUserParams) WithHTTPClient(client *http.Client) *SelfRegisterUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the self register user params
func (o *SelfRegisterUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNewUser adds the newUser to the self register user params
func (o *SelfRegisterUserParams) WithNewUser(newUser *models.SelfRegisterUser) *SelfRegisterUserParams {
	o.SetNewUser(newUser)
	return o
}

// SetNewUser adds the newUser to the self register user params
func (o *SelfRegisterUserParams) SetNewUser(newUser *models.SelfRegisterUser) {
	o.NewUser = newUser
}

// WithCodeTypeInMessage adds the codeTypeInMessage to the self register user params
func (o *SelfRegisterUserParams) WithCodeTypeInMessage(codeTypeInMessage *string) *SelfRegisterUserParams {
	o.SetCodeTypeInMessage(codeTypeInMessage)
	return o
}

// SetCodeTypeInMessage adds the codeTypeInMessage to the self register user params
func (o *SelfRegisterUserParams) SetCodeTypeInMessage(codeTypeInMessage *string) {
	o.CodeTypeInMessage = codeTypeInMessage
}

// WithIPID adds the iPID to the self register user params
func (o *SelfRegisterUserParams) WithIPID(iPID string) *SelfRegisterUserParams {
	o.SetIPID(iPID)
	return o
}

// SetIPID adds the ipId to the self register user params
func (o *SelfRegisterUserParams) SetIPID(iPID string) {
	o.IPID = iPID
}

// WithSendActivationMessage adds the sendActivationMessage to the self register user params
func (o *SelfRegisterUserParams) WithSendActivationMessage(sendActivationMessage *bool) *SelfRegisterUserParams {
	o.SetSendActivationMessage(sendActivationMessage)
	return o
}

// SetSendActivationMessage adds the sendActivationMessage to the self register user params
func (o *SelfRegisterUserParams) SetSendActivationMessage(sendActivationMessage *bool) {
	o.SendActivationMessage = sendActivationMessage
}

// WriteToRequest writes these params to a swagger request
func (o *SelfRegisterUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.NewUser != nil {
		if err := r.SetBodyParam(o.NewUser); err != nil {
			return err
		}
	}

	if o.CodeTypeInMessage != nil {

		// query param code_type_in_message
		var qrCodeTypeInMessage string

		if o.CodeTypeInMessage != nil {
			qrCodeTypeInMessage = *o.CodeTypeInMessage
		}
		qCodeTypeInMessage := qrCodeTypeInMessage
		if qCodeTypeInMessage != "" {

			if err := r.SetQueryParam("code_type_in_message", qCodeTypeInMessage); err != nil {
				return err
			}
		}
	}

	// path param ipID
	if err := r.SetPathParam("ipID", o.IPID); err != nil {
		return err
	}

	if o.SendActivationMessage != nil {

		// query param send_activation_message
		var qrSendActivationMessage bool

		if o.SendActivationMessage != nil {
			qrSendActivationMessage = *o.SendActivationMessage
		}
		qSendActivationMessage := swag.FormatBool(qrSendActivationMessage)
		if qSendActivationMessage != "" {

			if err := r.SetQueryParam("send_activation_message", qSendActivationMessage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
