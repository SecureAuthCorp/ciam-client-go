// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// ChangePasswordReader is a Reader for the ChangePassword structure.
type ChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewChangePasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChangePasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewChangePasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChangePasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChangePasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewChangePasswordUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewChangePasswordTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewChangePasswordNoContent creates a ChangePasswordNoContent with default headers values
func NewChangePasswordNoContent() *ChangePasswordNoContent {
	return &ChangePasswordNoContent{}
}

/* ChangePasswordNoContent describes a response with status code 204, with default header values.

Password has been changed
*/
type ChangePasswordNoContent struct {
}

func (o *ChangePasswordNoContent) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/users/{userID}/change_password][%d] changePasswordNoContent ", 204)
}

func (o *ChangePasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChangePasswordBadRequest creates a ChangePasswordBadRequest with default headers values
func NewChangePasswordBadRequest() *ChangePasswordBadRequest {
	return &ChangePasswordBadRequest{}
}

/* ChangePasswordBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type ChangePasswordBadRequest struct {
	Payload *models.Error
}

func (o *ChangePasswordBadRequest) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/users/{userID}/change_password][%d] changePasswordBadRequest  %+v", 400, o.Payload)
}
func (o *ChangePasswordBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordUnauthorized creates a ChangePasswordUnauthorized with default headers values
func NewChangePasswordUnauthorized() *ChangePasswordUnauthorized {
	return &ChangePasswordUnauthorized{}
}

/* ChangePasswordUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type ChangePasswordUnauthorized struct {
	Payload *models.Error
}

func (o *ChangePasswordUnauthorized) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/users/{userID}/change_password][%d] changePasswordUnauthorized  %+v", 401, o.Payload)
}
func (o *ChangePasswordUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordForbidden creates a ChangePasswordForbidden with default headers values
func NewChangePasswordForbidden() *ChangePasswordForbidden {
	return &ChangePasswordForbidden{}
}

/* ChangePasswordForbidden describes a response with status code 403, with default header values.

HttpError
*/
type ChangePasswordForbidden struct {
	Payload *models.Error
}

func (o *ChangePasswordForbidden) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/users/{userID}/change_password][%d] changePasswordForbidden  %+v", 403, o.Payload)
}
func (o *ChangePasswordForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordNotFound creates a ChangePasswordNotFound with default headers values
func NewChangePasswordNotFound() *ChangePasswordNotFound {
	return &ChangePasswordNotFound{}
}

/* ChangePasswordNotFound describes a response with status code 404, with default header values.

HttpError
*/
type ChangePasswordNotFound struct {
	Payload *models.Error
}

func (o *ChangePasswordNotFound) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/users/{userID}/change_password][%d] changePasswordNotFound  %+v", 404, o.Payload)
}
func (o *ChangePasswordNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordUnprocessableEntity creates a ChangePasswordUnprocessableEntity with default headers values
func NewChangePasswordUnprocessableEntity() *ChangePasswordUnprocessableEntity {
	return &ChangePasswordUnprocessableEntity{}
}

/* ChangePasswordUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type ChangePasswordUnprocessableEntity struct {
	Payload *models.Error
}

func (o *ChangePasswordUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/users/{userID}/change_password][%d] changePasswordUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *ChangePasswordUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordTooManyRequests creates a ChangePasswordTooManyRequests with default headers values
func NewChangePasswordTooManyRequests() *ChangePasswordTooManyRequests {
	return &ChangePasswordTooManyRequests{}
}

/* ChangePasswordTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type ChangePasswordTooManyRequests struct {
	Payload *models.Error
}

func (o *ChangePasswordTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/users/{userID}/change_password][%d] changePasswordTooManyRequests  %+v", 429, o.Payload)
}
func (o *ChangePasswordTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
