// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// ListUserGroupsReader is a Reader for the ListUserGroups structure.
type ListUserGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUserGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUserGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListUserGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListUserGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUserGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUserGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewListUserGroupsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListUserGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /admin/pools/{ipID}/users/{userID}/groups] listUserGroups", response, response.Code())
	}
}

// NewListUserGroupsOK creates a ListUserGroupsOK with default headers values
func NewListUserGroupsOK() *ListUserGroupsOK {
	return &ListUserGroupsOK{}
}

/*
ListUserGroupsOK describes a response with status code 200, with default header values.

Groups
*/
type ListUserGroupsOK struct {
	Payload models.Groups
}

// IsSuccess returns true when this list user groups o k response has a 2xx status code
func (o *ListUserGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list user groups o k response has a 3xx status code
func (o *ListUserGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups o k response has a 4xx status code
func (o *ListUserGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list user groups o k response has a 5xx status code
func (o *ListUserGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups o k response a status code equal to that given
func (o *ListUserGroupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list user groups o k response
func (o *ListUserGroupsOK) Code() int {
	return 200
}

func (o *ListUserGroupsOK) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsOK  %+v", 200, o.Payload)
}

func (o *ListUserGroupsOK) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsOK  %+v", 200, o.Payload)
}

func (o *ListUserGroupsOK) GetPayload() models.Groups {
	return o.Payload
}

func (o *ListUserGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsBadRequest creates a ListUserGroupsBadRequest with default headers values
func NewListUserGroupsBadRequest() *ListUserGroupsBadRequest {
	return &ListUserGroupsBadRequest{}
}

/*
ListUserGroupsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ListUserGroupsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user groups bad request response has a 2xx status code
func (o *ListUserGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups bad request response has a 3xx status code
func (o *ListUserGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups bad request response has a 4xx status code
func (o *ListUserGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user groups bad request response has a 5xx status code
func (o *ListUserGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups bad request response a status code equal to that given
func (o *ListUserGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list user groups bad request response
func (o *ListUserGroupsBadRequest) Code() int {
	return 400
}

func (o *ListUserGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ListUserGroupsBadRequest) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ListUserGroupsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsUnauthorized creates a ListUserGroupsUnauthorized with default headers values
func NewListUserGroupsUnauthorized() *ListUserGroupsUnauthorized {
	return &ListUserGroupsUnauthorized{}
}

/*
ListUserGroupsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListUserGroupsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user groups unauthorized response has a 2xx status code
func (o *ListUserGroupsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups unauthorized response has a 3xx status code
func (o *ListUserGroupsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups unauthorized response has a 4xx status code
func (o *ListUserGroupsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user groups unauthorized response has a 5xx status code
func (o *ListUserGroupsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups unauthorized response a status code equal to that given
func (o *ListUserGroupsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list user groups unauthorized response
func (o *ListUserGroupsUnauthorized) Code() int {
	return 401
}

func (o *ListUserGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUserGroupsUnauthorized) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUserGroupsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsForbidden creates a ListUserGroupsForbidden with default headers values
func NewListUserGroupsForbidden() *ListUserGroupsForbidden {
	return &ListUserGroupsForbidden{}
}

/*
ListUserGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListUserGroupsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user groups forbidden response has a 2xx status code
func (o *ListUserGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups forbidden response has a 3xx status code
func (o *ListUserGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups forbidden response has a 4xx status code
func (o *ListUserGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user groups forbidden response has a 5xx status code
func (o *ListUserGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups forbidden response a status code equal to that given
func (o *ListUserGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list user groups forbidden response
func (o *ListUserGroupsForbidden) Code() int {
	return 403
}

func (o *ListUserGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ListUserGroupsForbidden) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ListUserGroupsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsNotFound creates a ListUserGroupsNotFound with default headers values
func NewListUserGroupsNotFound() *ListUserGroupsNotFound {
	return &ListUserGroupsNotFound{}
}

/*
ListUserGroupsNotFound describes a response with status code 404, with default header values.

Not found
*/
type ListUserGroupsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user groups not found response has a 2xx status code
func (o *ListUserGroupsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups not found response has a 3xx status code
func (o *ListUserGroupsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups not found response has a 4xx status code
func (o *ListUserGroupsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user groups not found response has a 5xx status code
func (o *ListUserGroupsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups not found response a status code equal to that given
func (o *ListUserGroupsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list user groups not found response
func (o *ListUserGroupsNotFound) Code() int {
	return 404
}

func (o *ListUserGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsNotFound  %+v", 404, o.Payload)
}

func (o *ListUserGroupsNotFound) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsNotFound  %+v", 404, o.Payload)
}

func (o *ListUserGroupsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsUnprocessableEntity creates a ListUserGroupsUnprocessableEntity with default headers values
func NewListUserGroupsUnprocessableEntity() *ListUserGroupsUnprocessableEntity {
	return &ListUserGroupsUnprocessableEntity{}
}

/*
ListUserGroupsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ListUserGroupsUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user groups unprocessable entity response has a 2xx status code
func (o *ListUserGroupsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups unprocessable entity response has a 3xx status code
func (o *ListUserGroupsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups unprocessable entity response has a 4xx status code
func (o *ListUserGroupsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user groups unprocessable entity response has a 5xx status code
func (o *ListUserGroupsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups unprocessable entity response a status code equal to that given
func (o *ListUserGroupsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the list user groups unprocessable entity response
func (o *ListUserGroupsUnprocessableEntity) Code() int {
	return 422
}

func (o *ListUserGroupsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ListUserGroupsUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ListUserGroupsUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserGroupsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserGroupsTooManyRequests creates a ListUserGroupsTooManyRequests with default headers values
func NewListUserGroupsTooManyRequests() *ListUserGroupsTooManyRequests {
	return &ListUserGroupsTooManyRequests{}
}

/*
ListUserGroupsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListUserGroupsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user groups too many requests response has a 2xx status code
func (o *ListUserGroupsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user groups too many requests response has a 3xx status code
func (o *ListUserGroupsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user groups too many requests response has a 4xx status code
func (o *ListUserGroupsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user groups too many requests response has a 5xx status code
func (o *ListUserGroupsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list user groups too many requests response a status code equal to that given
func (o *ListUserGroupsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list user groups too many requests response
func (o *ListUserGroupsTooManyRequests) Code() int {
	return 429
}

func (o *ListUserGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListUserGroupsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /admin/pools/{ipID}/users/{userID}/groups][%d] listUserGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListUserGroupsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
