// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// RemoveUserFromGroupReader is a Reader for the RemoveUserFromGroup structure.
type RemoveUserFromGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RemoveUserFromGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRemoveUserFromGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRemoveUserFromGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRemoveUserFromGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRemoveUserFromGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRemoveUserFromGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRemoveUserFromGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRemoveUserFromGroupUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRemoveUserFromGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}] removeUserFromGroup", response, response.Code())
	}
}

// NewRemoveUserFromGroupNoContent creates a RemoveUserFromGroupNoContent with default headers values
func NewRemoveUserFromGroupNoContent() *RemoveUserFromGroupNoContent {
	return &RemoveUserFromGroupNoContent{}
}

/*
RemoveUserFromGroupNoContent describes a response with status code 204, with default header values.

	OK
*/
type RemoveUserFromGroupNoContent struct {
}

// IsSuccess returns true when this remove user from group no content response has a 2xx status code
func (o *RemoveUserFromGroupNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this remove user from group no content response has a 3xx status code
func (o *RemoveUserFromGroupNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user from group no content response has a 4xx status code
func (o *RemoveUserFromGroupNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this remove user from group no content response has a 5xx status code
func (o *RemoveUserFromGroupNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user from group no content response a status code equal to that given
func (o *RemoveUserFromGroupNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the remove user from group no content response
func (o *RemoveUserFromGroupNoContent) Code() int {
	return 204
}

func (o *RemoveUserFromGroupNoContent) Error() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupNoContent", 204)
}

func (o *RemoveUserFromGroupNoContent) String() string {
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupNoContent", 204)
}

func (o *RemoveUserFromGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRemoveUserFromGroupBadRequest creates a RemoveUserFromGroupBadRequest with default headers values
func NewRemoveUserFromGroupBadRequest() *RemoveUserFromGroupBadRequest {
	return &RemoveUserFromGroupBadRequest{}
}

/*
RemoveUserFromGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RemoveUserFromGroupBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove user from group bad request response has a 2xx status code
func (o *RemoveUserFromGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user from group bad request response has a 3xx status code
func (o *RemoveUserFromGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user from group bad request response has a 4xx status code
func (o *RemoveUserFromGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user from group bad request response has a 5xx status code
func (o *RemoveUserFromGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user from group bad request response a status code equal to that given
func (o *RemoveUserFromGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the remove user from group bad request response
func (o *RemoveUserFromGroupBadRequest) Code() int {
	return 400
}

func (o *RemoveUserFromGroupBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupBadRequest %s", 400, payload)
}

func (o *RemoveUserFromGroupBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupBadRequest %s", 400, payload)
}

func (o *RemoveUserFromGroupBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveUserFromGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserFromGroupUnauthorized creates a RemoveUserFromGroupUnauthorized with default headers values
func NewRemoveUserFromGroupUnauthorized() *RemoveUserFromGroupUnauthorized {
	return &RemoveUserFromGroupUnauthorized{}
}

/*
RemoveUserFromGroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RemoveUserFromGroupUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove user from group unauthorized response has a 2xx status code
func (o *RemoveUserFromGroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user from group unauthorized response has a 3xx status code
func (o *RemoveUserFromGroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user from group unauthorized response has a 4xx status code
func (o *RemoveUserFromGroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user from group unauthorized response has a 5xx status code
func (o *RemoveUserFromGroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user from group unauthorized response a status code equal to that given
func (o *RemoveUserFromGroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the remove user from group unauthorized response
func (o *RemoveUserFromGroupUnauthorized) Code() int {
	return 401
}

func (o *RemoveUserFromGroupUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupUnauthorized %s", 401, payload)
}

func (o *RemoveUserFromGroupUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupUnauthorized %s", 401, payload)
}

func (o *RemoveUserFromGroupUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveUserFromGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserFromGroupForbidden creates a RemoveUserFromGroupForbidden with default headers values
func NewRemoveUserFromGroupForbidden() *RemoveUserFromGroupForbidden {
	return &RemoveUserFromGroupForbidden{}
}

/*
RemoveUserFromGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RemoveUserFromGroupForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove user from group forbidden response has a 2xx status code
func (o *RemoveUserFromGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user from group forbidden response has a 3xx status code
func (o *RemoveUserFromGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user from group forbidden response has a 4xx status code
func (o *RemoveUserFromGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user from group forbidden response has a 5xx status code
func (o *RemoveUserFromGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user from group forbidden response a status code equal to that given
func (o *RemoveUserFromGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the remove user from group forbidden response
func (o *RemoveUserFromGroupForbidden) Code() int {
	return 403
}

func (o *RemoveUserFromGroupForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupForbidden %s", 403, payload)
}

func (o *RemoveUserFromGroupForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupForbidden %s", 403, payload)
}

func (o *RemoveUserFromGroupForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveUserFromGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserFromGroupNotFound creates a RemoveUserFromGroupNotFound with default headers values
func NewRemoveUserFromGroupNotFound() *RemoveUserFromGroupNotFound {
	return &RemoveUserFromGroupNotFound{}
}

/*
RemoveUserFromGroupNotFound describes a response with status code 404, with default header values.

Not found
*/
type RemoveUserFromGroupNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove user from group not found response has a 2xx status code
func (o *RemoveUserFromGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user from group not found response has a 3xx status code
func (o *RemoveUserFromGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user from group not found response has a 4xx status code
func (o *RemoveUserFromGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user from group not found response has a 5xx status code
func (o *RemoveUserFromGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user from group not found response a status code equal to that given
func (o *RemoveUserFromGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the remove user from group not found response
func (o *RemoveUserFromGroupNotFound) Code() int {
	return 404
}

func (o *RemoveUserFromGroupNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupNotFound %s", 404, payload)
}

func (o *RemoveUserFromGroupNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupNotFound %s", 404, payload)
}

func (o *RemoveUserFromGroupNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveUserFromGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserFromGroupConflict creates a RemoveUserFromGroupConflict with default headers values
func NewRemoveUserFromGroupConflict() *RemoveUserFromGroupConflict {
	return &RemoveUserFromGroupConflict{}
}

/*
RemoveUserFromGroupConflict describes a response with status code 409, with default header values.

Conflict
*/
type RemoveUserFromGroupConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove user from group conflict response has a 2xx status code
func (o *RemoveUserFromGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user from group conflict response has a 3xx status code
func (o *RemoveUserFromGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user from group conflict response has a 4xx status code
func (o *RemoveUserFromGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user from group conflict response has a 5xx status code
func (o *RemoveUserFromGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user from group conflict response a status code equal to that given
func (o *RemoveUserFromGroupConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the remove user from group conflict response
func (o *RemoveUserFromGroupConflict) Code() int {
	return 409
}

func (o *RemoveUserFromGroupConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupConflict %s", 409, payload)
}

func (o *RemoveUserFromGroupConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupConflict %s", 409, payload)
}

func (o *RemoveUserFromGroupConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveUserFromGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserFromGroupUnprocessableEntity creates a RemoveUserFromGroupUnprocessableEntity with default headers values
func NewRemoveUserFromGroupUnprocessableEntity() *RemoveUserFromGroupUnprocessableEntity {
	return &RemoveUserFromGroupUnprocessableEntity{}
}

/*
RemoveUserFromGroupUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type RemoveUserFromGroupUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove user from group unprocessable entity response has a 2xx status code
func (o *RemoveUserFromGroupUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user from group unprocessable entity response has a 3xx status code
func (o *RemoveUserFromGroupUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user from group unprocessable entity response has a 4xx status code
func (o *RemoveUserFromGroupUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user from group unprocessable entity response has a 5xx status code
func (o *RemoveUserFromGroupUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user from group unprocessable entity response a status code equal to that given
func (o *RemoveUserFromGroupUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the remove user from group unprocessable entity response
func (o *RemoveUserFromGroupUnprocessableEntity) Code() int {
	return 422
}

func (o *RemoveUserFromGroupUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupUnprocessableEntity %s", 422, payload)
}

func (o *RemoveUserFromGroupUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupUnprocessableEntity %s", 422, payload)
}

func (o *RemoveUserFromGroupUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveUserFromGroupUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRemoveUserFromGroupTooManyRequests creates a RemoveUserFromGroupTooManyRequests with default headers values
func NewRemoveUserFromGroupTooManyRequests() *RemoveUserFromGroupTooManyRequests {
	return &RemoveUserFromGroupTooManyRequests{}
}

/*
RemoveUserFromGroupTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type RemoveUserFromGroupTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this remove user from group too many requests response has a 2xx status code
func (o *RemoveUserFromGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this remove user from group too many requests response has a 3xx status code
func (o *RemoveUserFromGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this remove user from group too many requests response has a 4xx status code
func (o *RemoveUserFromGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this remove user from group too many requests response has a 5xx status code
func (o *RemoveUserFromGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this remove user from group too many requests response a status code equal to that given
func (o *RemoveUserFromGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the remove user from group too many requests response
func (o *RemoveUserFromGroupTooManyRequests) Code() int {
	return 429
}

func (o *RemoveUserFromGroupTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupTooManyRequests %s", 429, payload)
}

func (o *RemoveUserFromGroupTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] removeUserFromGroupTooManyRequests %s", 429, payload)
}

func (o *RemoveUserFromGroupTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *RemoveUserFromGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
