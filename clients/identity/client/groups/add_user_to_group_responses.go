// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// AddUserToGroupReader is a Reader for the AddUserToGroup structure.
type AddUserToGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUserToGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAddUserToGroupNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddUserToGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddUserToGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddUserToGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddUserToGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddUserToGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAddUserToGroupUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddUserToGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}] addUserToGroup", response, response.Code())
	}
}

// NewAddUserToGroupNoContent creates a AddUserToGroupNoContent with default headers values
func NewAddUserToGroupNoContent() *AddUserToGroupNoContent {
	return &AddUserToGroupNoContent{}
}

/*
AddUserToGroupNoContent describes a response with status code 204, with default header values.

	OK
*/
type AddUserToGroupNoContent struct {
}

// IsSuccess returns true when this add user to group no content response has a 2xx status code
func (o *AddUserToGroupNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add user to group no content response has a 3xx status code
func (o *AddUserToGroupNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user to group no content response has a 4xx status code
func (o *AddUserToGroupNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this add user to group no content response has a 5xx status code
func (o *AddUserToGroupNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this add user to group no content response a status code equal to that given
func (o *AddUserToGroupNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the add user to group no content response
func (o *AddUserToGroupNoContent) Code() int {
	return 204
}

func (o *AddUserToGroupNoContent) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupNoContent ", 204)
}

func (o *AddUserToGroupNoContent) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupNoContent ", 204)
}

func (o *AddUserToGroupNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUserToGroupBadRequest creates a AddUserToGroupBadRequest with default headers values
func NewAddUserToGroupBadRequest() *AddUserToGroupBadRequest {
	return &AddUserToGroupBadRequest{}
}

/*
AddUserToGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddUserToGroupBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user to group bad request response has a 2xx status code
func (o *AddUserToGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user to group bad request response has a 3xx status code
func (o *AddUserToGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user to group bad request response has a 4xx status code
func (o *AddUserToGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user to group bad request response has a 5xx status code
func (o *AddUserToGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add user to group bad request response a status code equal to that given
func (o *AddUserToGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add user to group bad request response
func (o *AddUserToGroupBadRequest) Code() int {
	return 400
}

func (o *AddUserToGroupBadRequest) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupBadRequest  %+v", 400, o.Payload)
}

func (o *AddUserToGroupBadRequest) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupBadRequest  %+v", 400, o.Payload)
}

func (o *AddUserToGroupBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserToGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToGroupUnauthorized creates a AddUserToGroupUnauthorized with default headers values
func NewAddUserToGroupUnauthorized() *AddUserToGroupUnauthorized {
	return &AddUserToGroupUnauthorized{}
}

/*
AddUserToGroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddUserToGroupUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user to group unauthorized response has a 2xx status code
func (o *AddUserToGroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user to group unauthorized response has a 3xx status code
func (o *AddUserToGroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user to group unauthorized response has a 4xx status code
func (o *AddUserToGroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user to group unauthorized response has a 5xx status code
func (o *AddUserToGroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add user to group unauthorized response a status code equal to that given
func (o *AddUserToGroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add user to group unauthorized response
func (o *AddUserToGroupUnauthorized) Code() int {
	return 401
}

func (o *AddUserToGroupUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserToGroupUnauthorized) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserToGroupUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserToGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToGroupForbidden creates a AddUserToGroupForbidden with default headers values
func NewAddUserToGroupForbidden() *AddUserToGroupForbidden {
	return &AddUserToGroupForbidden{}
}

/*
AddUserToGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddUserToGroupForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user to group forbidden response has a 2xx status code
func (o *AddUserToGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user to group forbidden response has a 3xx status code
func (o *AddUserToGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user to group forbidden response has a 4xx status code
func (o *AddUserToGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user to group forbidden response has a 5xx status code
func (o *AddUserToGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add user to group forbidden response a status code equal to that given
func (o *AddUserToGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add user to group forbidden response
func (o *AddUserToGroupForbidden) Code() int {
	return 403
}

func (o *AddUserToGroupForbidden) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupForbidden  %+v", 403, o.Payload)
}

func (o *AddUserToGroupForbidden) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupForbidden  %+v", 403, o.Payload)
}

func (o *AddUserToGroupForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserToGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToGroupNotFound creates a AddUserToGroupNotFound with default headers values
func NewAddUserToGroupNotFound() *AddUserToGroupNotFound {
	return &AddUserToGroupNotFound{}
}

/*
AddUserToGroupNotFound describes a response with status code 404, with default header values.

Not found
*/
type AddUserToGroupNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user to group not found response has a 2xx status code
func (o *AddUserToGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user to group not found response has a 3xx status code
func (o *AddUserToGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user to group not found response has a 4xx status code
func (o *AddUserToGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user to group not found response has a 5xx status code
func (o *AddUserToGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add user to group not found response a status code equal to that given
func (o *AddUserToGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add user to group not found response
func (o *AddUserToGroupNotFound) Code() int {
	return 404
}

func (o *AddUserToGroupNotFound) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupNotFound  %+v", 404, o.Payload)
}

func (o *AddUserToGroupNotFound) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupNotFound  %+v", 404, o.Payload)
}

func (o *AddUserToGroupNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserToGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToGroupConflict creates a AddUserToGroupConflict with default headers values
func NewAddUserToGroupConflict() *AddUserToGroupConflict {
	return &AddUserToGroupConflict{}
}

/*
AddUserToGroupConflict describes a response with status code 409, with default header values.

Conflict
*/
type AddUserToGroupConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user to group conflict response has a 2xx status code
func (o *AddUserToGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user to group conflict response has a 3xx status code
func (o *AddUserToGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user to group conflict response has a 4xx status code
func (o *AddUserToGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user to group conflict response has a 5xx status code
func (o *AddUserToGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this add user to group conflict response a status code equal to that given
func (o *AddUserToGroupConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the add user to group conflict response
func (o *AddUserToGroupConflict) Code() int {
	return 409
}

func (o *AddUserToGroupConflict) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupConflict  %+v", 409, o.Payload)
}

func (o *AddUserToGroupConflict) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupConflict  %+v", 409, o.Payload)
}

func (o *AddUserToGroupConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserToGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToGroupUnprocessableEntity creates a AddUserToGroupUnprocessableEntity with default headers values
func NewAddUserToGroupUnprocessableEntity() *AddUserToGroupUnprocessableEntity {
	return &AddUserToGroupUnprocessableEntity{}
}

/*
AddUserToGroupUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type AddUserToGroupUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user to group unprocessable entity response has a 2xx status code
func (o *AddUserToGroupUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user to group unprocessable entity response has a 3xx status code
func (o *AddUserToGroupUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user to group unprocessable entity response has a 4xx status code
func (o *AddUserToGroupUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user to group unprocessable entity response has a 5xx status code
func (o *AddUserToGroupUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this add user to group unprocessable entity response a status code equal to that given
func (o *AddUserToGroupUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the add user to group unprocessable entity response
func (o *AddUserToGroupUnprocessableEntity) Code() int {
	return 422
}

func (o *AddUserToGroupUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddUserToGroupUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddUserToGroupUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserToGroupUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserToGroupTooManyRequests creates a AddUserToGroupTooManyRequests with default headers values
func NewAddUserToGroupTooManyRequests() *AddUserToGroupTooManyRequests {
	return &AddUserToGroupTooManyRequests{}
}

/*
AddUserToGroupTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type AddUserToGroupTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this add user to group too many requests response has a 2xx status code
func (o *AddUserToGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add user to group too many requests response has a 3xx status code
func (o *AddUserToGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add user to group too many requests response has a 4xx status code
func (o *AddUserToGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this add user to group too many requests response has a 5xx status code
func (o *AddUserToGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this add user to group too many requests response a status code equal to that given
func (o *AddUserToGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the add user to group too many requests response
func (o *AddUserToGroupTooManyRequests) Code() int {
	return 429
}

func (o *AddUserToGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddUserToGroupTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}/users/{userID}][%d] addUserToGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddUserToGroupTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *AddUserToGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
