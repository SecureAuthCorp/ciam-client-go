// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identity/models"
)

// UpdateGroupReader is a Reader for the UpdateGroup structure.
type UpdateGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateGroupUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGroupForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateGroupConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateGroupUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateGroupTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /admin/pools/{ipID}/groups/{groupID}] updateGroup", response, response.Code())
	}
}

// NewUpdateGroupOK creates a UpdateGroupOK with default headers values
func NewUpdateGroupOK() *UpdateGroupOK {
	return &UpdateGroupOK{}
}

/*
UpdateGroupOK describes a response with status code 200, with default header values.

Group
*/
type UpdateGroupOK struct {
	Payload *models.Group
}

// IsSuccess returns true when this update group o k response has a 2xx status code
func (o *UpdateGroupOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update group o k response has a 3xx status code
func (o *UpdateGroupOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update group o k response has a 4xx status code
func (o *UpdateGroupOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update group o k response has a 5xx status code
func (o *UpdateGroupOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update group o k response a status code equal to that given
func (o *UpdateGroupOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update group o k response
func (o *UpdateGroupOK) Code() int {
	return 200
}

func (o *UpdateGroupOK) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupOK  %+v", 200, o.Payload)
}

func (o *UpdateGroupOK) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupOK  %+v", 200, o.Payload)
}

func (o *UpdateGroupOK) GetPayload() *models.Group {
	return o.Payload
}

func (o *UpdateGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Group)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGroupBadRequest creates a UpdateGroupBadRequest with default headers values
func NewUpdateGroupBadRequest() *UpdateGroupBadRequest {
	return &UpdateGroupBadRequest{}
}

/*
UpdateGroupBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateGroupBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update group bad request response has a 2xx status code
func (o *UpdateGroupBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update group bad request response has a 3xx status code
func (o *UpdateGroupBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update group bad request response has a 4xx status code
func (o *UpdateGroupBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update group bad request response has a 5xx status code
func (o *UpdateGroupBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update group bad request response a status code equal to that given
func (o *UpdateGroupBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update group bad request response
func (o *UpdateGroupBadRequest) Code() int {
	return 400
}

func (o *UpdateGroupBadRequest) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateGroupBadRequest) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateGroupBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGroupUnauthorized creates a UpdateGroupUnauthorized with default headers values
func NewUpdateGroupUnauthorized() *UpdateGroupUnauthorized {
	return &UpdateGroupUnauthorized{}
}

/*
UpdateGroupUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateGroupUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update group unauthorized response has a 2xx status code
func (o *UpdateGroupUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update group unauthorized response has a 3xx status code
func (o *UpdateGroupUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update group unauthorized response has a 4xx status code
func (o *UpdateGroupUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update group unauthorized response has a 5xx status code
func (o *UpdateGroupUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update group unauthorized response a status code equal to that given
func (o *UpdateGroupUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update group unauthorized response
func (o *UpdateGroupUnauthorized) Code() int {
	return 401
}

func (o *UpdateGroupUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateGroupUnauthorized) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateGroupUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGroupUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGroupForbidden creates a UpdateGroupForbidden with default headers values
func NewUpdateGroupForbidden() *UpdateGroupForbidden {
	return &UpdateGroupForbidden{}
}

/*
UpdateGroupForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGroupForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update group forbidden response has a 2xx status code
func (o *UpdateGroupForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update group forbidden response has a 3xx status code
func (o *UpdateGroupForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update group forbidden response has a 4xx status code
func (o *UpdateGroupForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update group forbidden response has a 5xx status code
func (o *UpdateGroupForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update group forbidden response a status code equal to that given
func (o *UpdateGroupForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update group forbidden response
func (o *UpdateGroupForbidden) Code() int {
	return 403
}

func (o *UpdateGroupForbidden) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupForbidden  %+v", 403, o.Payload)
}

func (o *UpdateGroupForbidden) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupForbidden  %+v", 403, o.Payload)
}

func (o *UpdateGroupForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGroupForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGroupNotFound creates a UpdateGroupNotFound with default headers values
func NewUpdateGroupNotFound() *UpdateGroupNotFound {
	return &UpdateGroupNotFound{}
}

/*
UpdateGroupNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateGroupNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update group not found response has a 2xx status code
func (o *UpdateGroupNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update group not found response has a 3xx status code
func (o *UpdateGroupNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update group not found response has a 4xx status code
func (o *UpdateGroupNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update group not found response has a 5xx status code
func (o *UpdateGroupNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update group not found response a status code equal to that given
func (o *UpdateGroupNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update group not found response
func (o *UpdateGroupNotFound) Code() int {
	return 404
}

func (o *UpdateGroupNotFound) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGroupNotFound) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupNotFound  %+v", 404, o.Payload)
}

func (o *UpdateGroupNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGroupConflict creates a UpdateGroupConflict with default headers values
func NewUpdateGroupConflict() *UpdateGroupConflict {
	return &UpdateGroupConflict{}
}

/*
UpdateGroupConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateGroupConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update group conflict response has a 2xx status code
func (o *UpdateGroupConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update group conflict response has a 3xx status code
func (o *UpdateGroupConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update group conflict response has a 4xx status code
func (o *UpdateGroupConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update group conflict response has a 5xx status code
func (o *UpdateGroupConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update group conflict response a status code equal to that given
func (o *UpdateGroupConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update group conflict response
func (o *UpdateGroupConflict) Code() int {
	return 409
}

func (o *UpdateGroupConflict) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupConflict  %+v", 409, o.Payload)
}

func (o *UpdateGroupConflict) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupConflict  %+v", 409, o.Payload)
}

func (o *UpdateGroupConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGroupConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGroupUnprocessableEntity creates a UpdateGroupUnprocessableEntity with default headers values
func NewUpdateGroupUnprocessableEntity() *UpdateGroupUnprocessableEntity {
	return &UpdateGroupUnprocessableEntity{}
}

/*
UpdateGroupUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateGroupUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update group unprocessable entity response has a 2xx status code
func (o *UpdateGroupUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update group unprocessable entity response has a 3xx status code
func (o *UpdateGroupUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update group unprocessable entity response has a 4xx status code
func (o *UpdateGroupUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update group unprocessable entity response has a 5xx status code
func (o *UpdateGroupUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update group unprocessable entity response a status code equal to that given
func (o *UpdateGroupUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update group unprocessable entity response
func (o *UpdateGroupUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateGroupUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateGroupUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateGroupUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGroupUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGroupTooManyRequests creates a UpdateGroupTooManyRequests with default headers values
func NewUpdateGroupTooManyRequests() *UpdateGroupTooManyRequests {
	return &UpdateGroupTooManyRequests{}
}

/*
UpdateGroupTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateGroupTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update group too many requests response has a 2xx status code
func (o *UpdateGroupTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update group too many requests response has a 3xx status code
func (o *UpdateGroupTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update group too many requests response has a 4xx status code
func (o *UpdateGroupTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update group too many requests response has a 5xx status code
func (o *UpdateGroupTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update group too many requests response a status code equal to that given
func (o *UpdateGroupTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update group too many requests response
func (o *UpdateGroupTooManyRequests) Code() int {
	return 429
}

func (o *UpdateGroupTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateGroupTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /admin/pools/{ipID}/groups/{groupID}][%d] updateGroupTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateGroupTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGroupTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
