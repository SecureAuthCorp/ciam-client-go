// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddUserVerifiableAddress add user verifiable address
//
// swagger:model AddUserVerifiableAddress
type AddUserVerifiableAddress struct {

	// address
	// Required: true
	Address string `json:"address" yaml:"address"`

	// preferred contact method
	// Example: sms
	// Enum: [sms voice]
	PreferredContactMethod string `json:"preferred_contact_method,omitempty" yaml:"preferred_contact_method,omitempty"`

	// status
	// Example: active
	// Enum: [active inactive]
	Status string `json:"status,omitempty" yaml:"status,omitempty"`

	// type
	// Example: mobile
	// Required: true
	// Enum: [email mobile]
	Type string `json:"type" yaml:"type"`

	// verified
	// Required: true
	Verified bool `json:"verified" yaml:"verified"`
}

// Validate validates this add user verifiable address
func (m *AddUserVerifiableAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredContactMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerified(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddUserVerifiableAddress) validateAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

var addUserVerifiableAddressTypePreferredContactMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","voice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addUserVerifiableAddressTypePreferredContactMethodPropEnum = append(addUserVerifiableAddressTypePreferredContactMethodPropEnum, v)
	}
}

const (

	// AddUserVerifiableAddressPreferredContactMethodSms captures enum value "sms"
	AddUserVerifiableAddressPreferredContactMethodSms string = "sms"

	// AddUserVerifiableAddressPreferredContactMethodVoice captures enum value "voice"
	AddUserVerifiableAddressPreferredContactMethodVoice string = "voice"
)

// prop value enum
func (m *AddUserVerifiableAddress) validatePreferredContactMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addUserVerifiableAddressTypePreferredContactMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddUserVerifiableAddress) validatePreferredContactMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredContactMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePreferredContactMethodEnum("preferred_contact_method", "body", m.PreferredContactMethod); err != nil {
		return err
	}

	return nil
}

var addUserVerifiableAddressTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addUserVerifiableAddressTypeStatusPropEnum = append(addUserVerifiableAddressTypeStatusPropEnum, v)
	}
}

const (

	// AddUserVerifiableAddressStatusActive captures enum value "active"
	AddUserVerifiableAddressStatusActive string = "active"

	// AddUserVerifiableAddressStatusInactive captures enum value "inactive"
	AddUserVerifiableAddressStatusInactive string = "inactive"
)

// prop value enum
func (m *AddUserVerifiableAddress) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addUserVerifiableAddressTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddUserVerifiableAddress) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var addUserVerifiableAddressTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","mobile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addUserVerifiableAddressTypeTypePropEnum = append(addUserVerifiableAddressTypeTypePropEnum, v)
	}
}

const (

	// AddUserVerifiableAddressTypeEmail captures enum value "email"
	AddUserVerifiableAddressTypeEmail string = "email"

	// AddUserVerifiableAddressTypeMobile captures enum value "mobile"
	AddUserVerifiableAddressTypeMobile string = "mobile"
)

// prop value enum
func (m *AddUserVerifiableAddress) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addUserVerifiableAddressTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AddUserVerifiableAddress) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AddUserVerifiableAddress) validateVerified(formats strfmt.Registry) error {

	if err := validate.Required("verified", "body", bool(m.Verified)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add user verifiable address based on context it is used
func (m *AddUserVerifiableAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddUserVerifiableAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddUserVerifiableAddress) UnmarshalBinary(b []byte) error {
	var res AddUserVerifiableAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
