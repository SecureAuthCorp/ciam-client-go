// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompleteResetWebAuthn complete reset web authn
//
// swagger:model CompleteResetWebAuthn
type CompleteResetWebAuthn struct {

	// address
	Address string `json:"address,omitempty" yaml:"address,omitempty"`

	// code
	// Required: true
	Code string `json:"code" yaml:"code"`

	// identifier
	Identifier string `json:"identifier,omitempty" yaml:"identifier,omitempty"`

	// new web authn
	// Required: true
	NewWebAuthn []*Credential `json:"new_web_authn" yaml:"new_web_authn"`

	// user ID
	UserID string `json:"userID,omitempty" yaml:"userID,omitempty"`
}

// Validate validates this complete reset web authn
func (m *CompleteResetWebAuthn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewWebAuthn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompleteResetWebAuthn) validateCode(formats strfmt.Registry) error {

	if err := validate.RequiredString("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *CompleteResetWebAuthn) validateNewWebAuthn(formats strfmt.Registry) error {

	if err := validate.Required("new_web_authn", "body", m.NewWebAuthn); err != nil {
		return err
	}

	for i := 0; i < len(m.NewWebAuthn); i++ {
		if swag.IsZero(m.NewWebAuthn[i]) { // not required
			continue
		}

		if m.NewWebAuthn[i] != nil {
			if err := m.NewWebAuthn[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_web_authn" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("new_web_authn" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this complete reset web authn based on the context it is used
func (m *CompleteResetWebAuthn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewWebAuthn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompleteResetWebAuthn) contextValidateNewWebAuthn(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewWebAuthn); i++ {

		if m.NewWebAuthn[i] != nil {

			if swag.IsZero(m.NewWebAuthn[i]) { // not required
				return nil
			}

			if err := m.NewWebAuthn[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("new_web_authn" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("new_web_authn" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompleteResetWebAuthn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompleteResetWebAuthn) UnmarshalBinary(b []byte) error {
	var res CompleteResetWebAuthn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
