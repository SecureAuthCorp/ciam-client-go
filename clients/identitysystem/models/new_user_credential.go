// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewUserCredential new user credential
//
// swagger:model NewUserCredential
type NewUserCredential struct {

	// password
	// Example: secret
	Password string `json:"password,omitempty"`

	// type
	// Example: password
	// Required: true
	// Enum: [password]
	Type string `json:"type"`
}

// Validate validates this new user credential
func (m *NewUserCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var newUserCredentialTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["password"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		newUserCredentialTypeTypePropEnum = append(newUserCredentialTypeTypePropEnum, v)
	}
}

const (

	// NewUserCredentialTypePassword captures enum value "password"
	NewUserCredentialTypePassword string = "password"
)

// prop value enum
func (m *NewUserCredential) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, newUserCredentialTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NewUserCredential) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this new user credential based on context it is used
func (m *NewUserCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewUserCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewUserCredential) UnmarshalBinary(b []byte) error {
	var res NewUserCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
