// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthenticatorAttestationResponse AuthenticatorAttestationResponse is the initial unpacked 'response' object received by the relying party. This
// contains the clientDataJSON object, which will be marshalled into CollectedClientData, and the 'attestationObject',
// which contains information about the authenticator, and the newly minted public key credential. The information in
// both objects are used to verify the authenticity of the ceremony and new credential.
//
// See: https://www.w3.org/TR/webauthn/#typedefdef-publickeycredentialjson
//
// swagger:model AuthenticatorAttestationResponse
type AuthenticatorAttestationResponse struct {

	// attestation object
	AttestationObject URLEncodedBase64 `json:"attestationObject,omitempty" yaml:"attestationObject,omitempty"`

	// authenticator data
	AuthenticatorData URLEncodedBase64 `json:"authenticatorData,omitempty" yaml:"authenticatorData,omitempty"`

	// client data JSON
	ClientDataJSON URLEncodedBase64 `json:"clientDataJSON,omitempty" yaml:"clientDataJSON,omitempty"`

	// public key
	PublicKey URLEncodedBase64 `json:"publicKey,omitempty" yaml:"publicKey,omitempty"`

	// public key algorithm
	PublicKeyAlgorithm int64 `json:"publicKeyAlgorithm,omitempty" yaml:"publicKeyAlgorithm,omitempty"`

	// transports
	Transports []string `json:"transports" yaml:"transports"`
}

// Validate validates this authenticator attestation response
func (m *AuthenticatorAttestationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttestationObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticatorData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientDataJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticatorAttestationResponse) validateAttestationObject(formats strfmt.Registry) error {
	if swag.IsZero(m.AttestationObject) { // not required
		return nil
	}

	if err := m.AttestationObject.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attestationObject")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("attestationObject")
		}
		return err
	}

	return nil
}

func (m *AuthenticatorAttestationResponse) validateAuthenticatorData(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticatorData) { // not required
		return nil
	}

	if err := m.AuthenticatorData.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authenticatorData")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authenticatorData")
		}
		return err
	}

	return nil
}

func (m *AuthenticatorAttestationResponse) validateClientDataJSON(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientDataJSON) { // not required
		return nil
	}

	if err := m.ClientDataJSON.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clientDataJSON")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clientDataJSON")
		}
		return err
	}

	return nil
}

func (m *AuthenticatorAttestationResponse) validatePublicKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if err := m.PublicKey.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("publicKey")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("publicKey")
		}
		return err
	}

	return nil
}

// ContextValidate validate this authenticator attestation response based on the context it is used
func (m *AuthenticatorAttestationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttestationObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthenticatorData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientDataJSON(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthenticatorAttestationResponse) contextValidateAttestationObject(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AttestationObject.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attestationObject")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("attestationObject")
		}
		return err
	}

	return nil
}

func (m *AuthenticatorAttestationResponse) contextValidateAuthenticatorData(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AuthenticatorData.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authenticatorData")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authenticatorData")
		}
		return err
	}

	return nil
}

func (m *AuthenticatorAttestationResponse) contextValidateClientDataJSON(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ClientDataJSON.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clientDataJSON")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clientDataJSON")
		}
		return err
	}

	return nil
}

func (m *AuthenticatorAttestationResponse) contextValidatePublicKey(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PublicKey.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("publicKey")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("publicKey")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthenticatorAttestationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthenticatorAttestationResponse) UnmarshalBinary(b []byte) error {
	var res AuthenticatorAttestationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
