// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// VerifyAuthenticationCodeReader is a Reader for the VerifyAuthenticationCode structure.
type VerifyAuthenticationCodeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VerifyAuthenticationCodeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVerifyAuthenticationCodeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewVerifyAuthenticationCodeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewVerifyAuthenticationCodePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewVerifyAuthenticationCodeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /system/pools/{ipID}/user/authentication-code/verify] verifyAuthenticationCode", response, response.Code())
	}
}

// NewVerifyAuthenticationCodeOK creates a VerifyAuthenticationCodeOK with default headers values
func NewVerifyAuthenticationCodeOK() *VerifyAuthenticationCodeOK {
	return &VerifyAuthenticationCodeOK{}
}

/*
VerifyAuthenticationCodeOK describes a response with status code 200, with default header values.

User
*/
type VerifyAuthenticationCodeOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.UserID
}

// IsSuccess returns true when this verify authentication code o k response has a 2xx status code
func (o *VerifyAuthenticationCodeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this verify authentication code o k response has a 3xx status code
func (o *VerifyAuthenticationCodeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify authentication code o k response has a 4xx status code
func (o *VerifyAuthenticationCodeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify authentication code o k response has a 5xx status code
func (o *VerifyAuthenticationCodeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this verify authentication code o k response a status code equal to that given
func (o *VerifyAuthenticationCodeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the verify authentication code o k response
func (o *VerifyAuthenticationCodeOK) Code() int {
	return 200
}

func (o *VerifyAuthenticationCodeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/authentication-code/verify][%d] verifyAuthenticationCodeOK %s", 200, payload)
}

func (o *VerifyAuthenticationCodeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/authentication-code/verify][%d] verifyAuthenticationCodeOK %s", 200, payload)
}

func (o *VerifyAuthenticationCodeOK) GetPayload() *models.UserID {
	return o.Payload
}

func (o *VerifyAuthenticationCodeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.UserID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyAuthenticationCodeUnauthorized creates a VerifyAuthenticationCodeUnauthorized with default headers values
func NewVerifyAuthenticationCodeUnauthorized() *VerifyAuthenticationCodeUnauthorized {
	return &VerifyAuthenticationCodeUnauthorized{}
}

/*
VerifyAuthenticationCodeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type VerifyAuthenticationCodeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify authentication code unauthorized response has a 2xx status code
func (o *VerifyAuthenticationCodeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify authentication code unauthorized response has a 3xx status code
func (o *VerifyAuthenticationCodeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify authentication code unauthorized response has a 4xx status code
func (o *VerifyAuthenticationCodeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify authentication code unauthorized response has a 5xx status code
func (o *VerifyAuthenticationCodeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this verify authentication code unauthorized response a status code equal to that given
func (o *VerifyAuthenticationCodeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the verify authentication code unauthorized response
func (o *VerifyAuthenticationCodeUnauthorized) Code() int {
	return 401
}

func (o *VerifyAuthenticationCodeUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/authentication-code/verify][%d] verifyAuthenticationCodeUnauthorized %s", 401, payload)
}

func (o *VerifyAuthenticationCodeUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/authentication-code/verify][%d] verifyAuthenticationCodeUnauthorized %s", 401, payload)
}

func (o *VerifyAuthenticationCodeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyAuthenticationCodeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyAuthenticationCodePreconditionFailed creates a VerifyAuthenticationCodePreconditionFailed with default headers values
func NewVerifyAuthenticationCodePreconditionFailed() *VerifyAuthenticationCodePreconditionFailed {
	return &VerifyAuthenticationCodePreconditionFailed{}
}

/*
VerifyAuthenticationCodePreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type VerifyAuthenticationCodePreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify authentication code precondition failed response has a 2xx status code
func (o *VerifyAuthenticationCodePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify authentication code precondition failed response has a 3xx status code
func (o *VerifyAuthenticationCodePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify authentication code precondition failed response has a 4xx status code
func (o *VerifyAuthenticationCodePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify authentication code precondition failed response has a 5xx status code
func (o *VerifyAuthenticationCodePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this verify authentication code precondition failed response a status code equal to that given
func (o *VerifyAuthenticationCodePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the verify authentication code precondition failed response
func (o *VerifyAuthenticationCodePreconditionFailed) Code() int {
	return 412
}

func (o *VerifyAuthenticationCodePreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/authentication-code/verify][%d] verifyAuthenticationCodePreconditionFailed %s", 412, payload)
}

func (o *VerifyAuthenticationCodePreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/authentication-code/verify][%d] verifyAuthenticationCodePreconditionFailed %s", 412, payload)
}

func (o *VerifyAuthenticationCodePreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyAuthenticationCodePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyAuthenticationCodeUnprocessableEntity creates a VerifyAuthenticationCodeUnprocessableEntity with default headers values
func NewVerifyAuthenticationCodeUnprocessableEntity() *VerifyAuthenticationCodeUnprocessableEntity {
	return &VerifyAuthenticationCodeUnprocessableEntity{}
}

/*
VerifyAuthenticationCodeUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type VerifyAuthenticationCodeUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify authentication code unprocessable entity response has a 2xx status code
func (o *VerifyAuthenticationCodeUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify authentication code unprocessable entity response has a 3xx status code
func (o *VerifyAuthenticationCodeUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify authentication code unprocessable entity response has a 4xx status code
func (o *VerifyAuthenticationCodeUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify authentication code unprocessable entity response has a 5xx status code
func (o *VerifyAuthenticationCodeUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this verify authentication code unprocessable entity response a status code equal to that given
func (o *VerifyAuthenticationCodeUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the verify authentication code unprocessable entity response
func (o *VerifyAuthenticationCodeUnprocessableEntity) Code() int {
	return 422
}

func (o *VerifyAuthenticationCodeUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/authentication-code/verify][%d] verifyAuthenticationCodeUnprocessableEntity %s", 422, payload)
}

func (o *VerifyAuthenticationCodeUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/authentication-code/verify][%d] verifyAuthenticationCodeUnprocessableEntity %s", 422, payload)
}

func (o *VerifyAuthenticationCodeUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyAuthenticationCodeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
