// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// NameWebAuthnKeyReader is a Reader for the NameWebAuthnKey structure.
type NameWebAuthnKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *NameWebAuthnKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewNameWebAuthnKeyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewNameWebAuthnKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewNameWebAuthnKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewNameWebAuthnKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewNameWebAuthnKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewNameWebAuthnKeyPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewNameWebAuthnKeyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewNameWebAuthnKeyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name] nameWebAuthnKey", response, response.Code())
	}
}

// NewNameWebAuthnKeyNoContent creates a NameWebAuthnKeyNoContent with default headers values
func NewNameWebAuthnKeyNoContent() *NameWebAuthnKeyNoContent {
	return &NameWebAuthnKeyNoContent{}
}

/*
NameWebAuthnKeyNoContent describes a response with status code 204, with default header values.

	WebAuthn named successfully
*/
type NameWebAuthnKeyNoContent struct {
}

// IsSuccess returns true when this name web authn key no content response has a 2xx status code
func (o *NameWebAuthnKeyNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this name web authn key no content response has a 3xx status code
func (o *NameWebAuthnKeyNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this name web authn key no content response has a 4xx status code
func (o *NameWebAuthnKeyNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this name web authn key no content response has a 5xx status code
func (o *NameWebAuthnKeyNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this name web authn key no content response a status code equal to that given
func (o *NameWebAuthnKeyNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the name web authn key no content response
func (o *NameWebAuthnKeyNoContent) Code() int {
	return 204
}

func (o *NameWebAuthnKeyNoContent) Error() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyNoContent ", 204)
}

func (o *NameWebAuthnKeyNoContent) String() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyNoContent ", 204)
}

func (o *NameWebAuthnKeyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewNameWebAuthnKeyBadRequest creates a NameWebAuthnKeyBadRequest with default headers values
func NewNameWebAuthnKeyBadRequest() *NameWebAuthnKeyBadRequest {
	return &NameWebAuthnKeyBadRequest{}
}

/*
NameWebAuthnKeyBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type NameWebAuthnKeyBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this name web authn key bad request response has a 2xx status code
func (o *NameWebAuthnKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this name web authn key bad request response has a 3xx status code
func (o *NameWebAuthnKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this name web authn key bad request response has a 4xx status code
func (o *NameWebAuthnKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this name web authn key bad request response has a 5xx status code
func (o *NameWebAuthnKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this name web authn key bad request response a status code equal to that given
func (o *NameWebAuthnKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the name web authn key bad request response
func (o *NameWebAuthnKeyBadRequest) Code() int {
	return 400
}

func (o *NameWebAuthnKeyBadRequest) Error() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyBadRequest  %+v", 400, o.Payload)
}

func (o *NameWebAuthnKeyBadRequest) String() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyBadRequest  %+v", 400, o.Payload)
}

func (o *NameWebAuthnKeyBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *NameWebAuthnKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNameWebAuthnKeyUnauthorized creates a NameWebAuthnKeyUnauthorized with default headers values
func NewNameWebAuthnKeyUnauthorized() *NameWebAuthnKeyUnauthorized {
	return &NameWebAuthnKeyUnauthorized{}
}

/*
NameWebAuthnKeyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type NameWebAuthnKeyUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this name web authn key unauthorized response has a 2xx status code
func (o *NameWebAuthnKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this name web authn key unauthorized response has a 3xx status code
func (o *NameWebAuthnKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this name web authn key unauthorized response has a 4xx status code
func (o *NameWebAuthnKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this name web authn key unauthorized response has a 5xx status code
func (o *NameWebAuthnKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this name web authn key unauthorized response a status code equal to that given
func (o *NameWebAuthnKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the name web authn key unauthorized response
func (o *NameWebAuthnKeyUnauthorized) Code() int {
	return 401
}

func (o *NameWebAuthnKeyUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *NameWebAuthnKeyUnauthorized) String() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *NameWebAuthnKeyUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *NameWebAuthnKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNameWebAuthnKeyForbidden creates a NameWebAuthnKeyForbidden with default headers values
func NewNameWebAuthnKeyForbidden() *NameWebAuthnKeyForbidden {
	return &NameWebAuthnKeyForbidden{}
}

/*
NameWebAuthnKeyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type NameWebAuthnKeyForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this name web authn key forbidden response has a 2xx status code
func (o *NameWebAuthnKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this name web authn key forbidden response has a 3xx status code
func (o *NameWebAuthnKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this name web authn key forbidden response has a 4xx status code
func (o *NameWebAuthnKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this name web authn key forbidden response has a 5xx status code
func (o *NameWebAuthnKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this name web authn key forbidden response a status code equal to that given
func (o *NameWebAuthnKeyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the name web authn key forbidden response
func (o *NameWebAuthnKeyForbidden) Code() int {
	return 403
}

func (o *NameWebAuthnKeyForbidden) Error() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyForbidden  %+v", 403, o.Payload)
}

func (o *NameWebAuthnKeyForbidden) String() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyForbidden  %+v", 403, o.Payload)
}

func (o *NameWebAuthnKeyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *NameWebAuthnKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNameWebAuthnKeyNotFound creates a NameWebAuthnKeyNotFound with default headers values
func NewNameWebAuthnKeyNotFound() *NameWebAuthnKeyNotFound {
	return &NameWebAuthnKeyNotFound{}
}

/*
NameWebAuthnKeyNotFound describes a response with status code 404, with default header values.

Not found
*/
type NameWebAuthnKeyNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this name web authn key not found response has a 2xx status code
func (o *NameWebAuthnKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this name web authn key not found response has a 3xx status code
func (o *NameWebAuthnKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this name web authn key not found response has a 4xx status code
func (o *NameWebAuthnKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this name web authn key not found response has a 5xx status code
func (o *NameWebAuthnKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this name web authn key not found response a status code equal to that given
func (o *NameWebAuthnKeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the name web authn key not found response
func (o *NameWebAuthnKeyNotFound) Code() int {
	return 404
}

func (o *NameWebAuthnKeyNotFound) Error() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyNotFound  %+v", 404, o.Payload)
}

func (o *NameWebAuthnKeyNotFound) String() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyNotFound  %+v", 404, o.Payload)
}

func (o *NameWebAuthnKeyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *NameWebAuthnKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNameWebAuthnKeyPreconditionFailed creates a NameWebAuthnKeyPreconditionFailed with default headers values
func NewNameWebAuthnKeyPreconditionFailed() *NameWebAuthnKeyPreconditionFailed {
	return &NameWebAuthnKeyPreconditionFailed{}
}

/*
NameWebAuthnKeyPreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type NameWebAuthnKeyPreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this name web authn key precondition failed response has a 2xx status code
func (o *NameWebAuthnKeyPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this name web authn key precondition failed response has a 3xx status code
func (o *NameWebAuthnKeyPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this name web authn key precondition failed response has a 4xx status code
func (o *NameWebAuthnKeyPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this name web authn key precondition failed response has a 5xx status code
func (o *NameWebAuthnKeyPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this name web authn key precondition failed response a status code equal to that given
func (o *NameWebAuthnKeyPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the name web authn key precondition failed response
func (o *NameWebAuthnKeyPreconditionFailed) Code() int {
	return 412
}

func (o *NameWebAuthnKeyPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyPreconditionFailed  %+v", 412, o.Payload)
}

func (o *NameWebAuthnKeyPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyPreconditionFailed  %+v", 412, o.Payload)
}

func (o *NameWebAuthnKeyPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *NameWebAuthnKeyPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNameWebAuthnKeyUnprocessableEntity creates a NameWebAuthnKeyUnprocessableEntity with default headers values
func NewNameWebAuthnKeyUnprocessableEntity() *NameWebAuthnKeyUnprocessableEntity {
	return &NameWebAuthnKeyUnprocessableEntity{}
}

/*
NameWebAuthnKeyUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type NameWebAuthnKeyUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this name web authn key unprocessable entity response has a 2xx status code
func (o *NameWebAuthnKeyUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this name web authn key unprocessable entity response has a 3xx status code
func (o *NameWebAuthnKeyUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this name web authn key unprocessable entity response has a 4xx status code
func (o *NameWebAuthnKeyUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this name web authn key unprocessable entity response has a 5xx status code
func (o *NameWebAuthnKeyUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this name web authn key unprocessable entity response a status code equal to that given
func (o *NameWebAuthnKeyUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the name web authn key unprocessable entity response
func (o *NameWebAuthnKeyUnprocessableEntity) Code() int {
	return 422
}

func (o *NameWebAuthnKeyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *NameWebAuthnKeyUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *NameWebAuthnKeyUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *NameWebAuthnKeyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewNameWebAuthnKeyTooManyRequests creates a NameWebAuthnKeyTooManyRequests with default headers values
func NewNameWebAuthnKeyTooManyRequests() *NameWebAuthnKeyTooManyRequests {
	return &NameWebAuthnKeyTooManyRequests{}
}

/*
NameWebAuthnKeyTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type NameWebAuthnKeyTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this name web authn key too many requests response has a 2xx status code
func (o *NameWebAuthnKeyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this name web authn key too many requests response has a 3xx status code
func (o *NameWebAuthnKeyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this name web authn key too many requests response has a 4xx status code
func (o *NameWebAuthnKeyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this name web authn key too many requests response has a 5xx status code
func (o *NameWebAuthnKeyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this name web authn key too many requests response a status code equal to that given
func (o *NameWebAuthnKeyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the name web authn key too many requests response
func (o *NameWebAuthnKeyTooManyRequests) Code() int {
	return 429
}

func (o *NameWebAuthnKeyTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyTooManyRequests  %+v", 429, o.Payload)
}

func (o *NameWebAuthnKeyTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /system/pools/{ipID}/users/{userID}/webauthn/{webAuthnCredentialID}/name][%d] nameWebAuthnKeyTooManyRequests  %+v", 429, o.Payload)
}

func (o *NameWebAuthnKeyTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *NameWebAuthnKeyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
