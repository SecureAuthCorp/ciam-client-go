// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// RequestResetTotpReader is a Reader for the RequestResetTotp structure.
type RequestResetTotpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestResetTotpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRequestResetTotpNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRequestResetTotpBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRequestResetTotpUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewRequestResetTotpPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRequestResetTotpUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /system/pools/{ipID}/user/totp/reset/request] requestResetTotp", response, response.Code())
	}
}

// NewRequestResetTotpNoContent creates a RequestResetTotpNoContent with default headers values
func NewRequestResetTotpNoContent() *RequestResetTotpNoContent {
	return &RequestResetTotpNoContent{}
}

/*
RequestResetTotpNoContent describes a response with status code 204, with default header values.

	Request to reset totp secret accepted
*/
type RequestResetTotpNoContent struct {
}

// IsSuccess returns true when this request reset totp no content response has a 2xx status code
func (o *RequestResetTotpNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this request reset totp no content response has a 3xx status code
func (o *RequestResetTotpNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset totp no content response has a 4xx status code
func (o *RequestResetTotpNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this request reset totp no content response has a 5xx status code
func (o *RequestResetTotpNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset totp no content response a status code equal to that given
func (o *RequestResetTotpNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the request reset totp no content response
func (o *RequestResetTotpNoContent) Code() int {
	return 204
}

func (o *RequestResetTotpNoContent) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpNoContent ", 204)
}

func (o *RequestResetTotpNoContent) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpNoContent ", 204)
}

func (o *RequestResetTotpNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRequestResetTotpBadRequest creates a RequestResetTotpBadRequest with default headers values
func NewRequestResetTotpBadRequest() *RequestResetTotpBadRequest {
	return &RequestResetTotpBadRequest{}
}

/*
RequestResetTotpBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RequestResetTotpBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this request reset totp bad request response has a 2xx status code
func (o *RequestResetTotpBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request reset totp bad request response has a 3xx status code
func (o *RequestResetTotpBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset totp bad request response has a 4xx status code
func (o *RequestResetTotpBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this request reset totp bad request response has a 5xx status code
func (o *RequestResetTotpBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset totp bad request response a status code equal to that given
func (o *RequestResetTotpBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the request reset totp bad request response
func (o *RequestResetTotpBadRequest) Code() int {
	return 400
}

func (o *RequestResetTotpBadRequest) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpBadRequest  %+v", 400, o.Payload)
}

func (o *RequestResetTotpBadRequest) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpBadRequest  %+v", 400, o.Payload)
}

func (o *RequestResetTotpBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestResetTotpBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestResetTotpUnauthorized creates a RequestResetTotpUnauthorized with default headers values
func NewRequestResetTotpUnauthorized() *RequestResetTotpUnauthorized {
	return &RequestResetTotpUnauthorized{}
}

/*
RequestResetTotpUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RequestResetTotpUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this request reset totp unauthorized response has a 2xx status code
func (o *RequestResetTotpUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request reset totp unauthorized response has a 3xx status code
func (o *RequestResetTotpUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset totp unauthorized response has a 4xx status code
func (o *RequestResetTotpUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this request reset totp unauthorized response has a 5xx status code
func (o *RequestResetTotpUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset totp unauthorized response a status code equal to that given
func (o *RequestResetTotpUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the request reset totp unauthorized response
func (o *RequestResetTotpUnauthorized) Code() int {
	return 401
}

func (o *RequestResetTotpUnauthorized) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpUnauthorized  %+v", 401, o.Payload)
}

func (o *RequestResetTotpUnauthorized) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpUnauthorized  %+v", 401, o.Payload)
}

func (o *RequestResetTotpUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestResetTotpUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestResetTotpPreconditionFailed creates a RequestResetTotpPreconditionFailed with default headers values
func NewRequestResetTotpPreconditionFailed() *RequestResetTotpPreconditionFailed {
	return &RequestResetTotpPreconditionFailed{}
}

/*
RequestResetTotpPreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type RequestResetTotpPreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this request reset totp precondition failed response has a 2xx status code
func (o *RequestResetTotpPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request reset totp precondition failed response has a 3xx status code
func (o *RequestResetTotpPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset totp precondition failed response has a 4xx status code
func (o *RequestResetTotpPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this request reset totp precondition failed response has a 5xx status code
func (o *RequestResetTotpPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset totp precondition failed response a status code equal to that given
func (o *RequestResetTotpPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the request reset totp precondition failed response
func (o *RequestResetTotpPreconditionFailed) Code() int {
	return 412
}

func (o *RequestResetTotpPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpPreconditionFailed  %+v", 412, o.Payload)
}

func (o *RequestResetTotpPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpPreconditionFailed  %+v", 412, o.Payload)
}

func (o *RequestResetTotpPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestResetTotpPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestResetTotpUnprocessableEntity creates a RequestResetTotpUnprocessableEntity with default headers values
func NewRequestResetTotpUnprocessableEntity() *RequestResetTotpUnprocessableEntity {
	return &RequestResetTotpUnprocessableEntity{}
}

/*
RequestResetTotpUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type RequestResetTotpUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this request reset totp unprocessable entity response has a 2xx status code
func (o *RequestResetTotpUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request reset totp unprocessable entity response has a 3xx status code
func (o *RequestResetTotpUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset totp unprocessable entity response has a 4xx status code
func (o *RequestResetTotpUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this request reset totp unprocessable entity response has a 5xx status code
func (o *RequestResetTotpUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset totp unprocessable entity response a status code equal to that given
func (o *RequestResetTotpUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the request reset totp unprocessable entity response
func (o *RequestResetTotpUnprocessableEntity) Code() int {
	return 422
}

func (o *RequestResetTotpUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *RequestResetTotpUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/totp/reset/request][%d] requestResetTotpUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *RequestResetTotpUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestResetTotpUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
