// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// ConfirmResetPasswordReader is a Reader for the ConfirmResetPassword structure.
type ConfirmResetPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmResetPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewConfirmResetPasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewConfirmResetPasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewConfirmResetPasswordPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewConfirmResetPasswordUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfirmResetPasswordNoContent creates a ConfirmResetPasswordNoContent with default headers values
func NewConfirmResetPasswordNoContent() *ConfirmResetPasswordNoContent {
	return &ConfirmResetPasswordNoContent{}
}

/*
ConfirmResetPasswordNoContent describes a response with status code 204, with default header values.

Password reset
*/
type ConfirmResetPasswordNoContent struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string
}

// IsSuccess returns true when this confirm reset password no content response has a 2xx status code
func (o *ConfirmResetPasswordNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm reset password no content response has a 3xx status code
func (o *ConfirmResetPasswordNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm reset password no content response has a 4xx status code
func (o *ConfirmResetPasswordNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm reset password no content response has a 5xx status code
func (o *ConfirmResetPasswordNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm reset password no content response a status code equal to that given
func (o *ConfirmResetPasswordNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *ConfirmResetPasswordNoContent) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/confirm][%d] confirmResetPasswordNoContent ", 204)
}

func (o *ConfirmResetPasswordNoContent) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/confirm][%d] confirmResetPasswordNoContent ", 204)
}

func (o *ConfirmResetPasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	return nil
}

// NewConfirmResetPasswordUnauthorized creates a ConfirmResetPasswordUnauthorized with default headers values
func NewConfirmResetPasswordUnauthorized() *ConfirmResetPasswordUnauthorized {
	return &ConfirmResetPasswordUnauthorized{}
}

/*
ConfirmResetPasswordUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type ConfirmResetPasswordUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this confirm reset password unauthorized response has a 2xx status code
func (o *ConfirmResetPasswordUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm reset password unauthorized response has a 3xx status code
func (o *ConfirmResetPasswordUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm reset password unauthorized response has a 4xx status code
func (o *ConfirmResetPasswordUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm reset password unauthorized response has a 5xx status code
func (o *ConfirmResetPasswordUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm reset password unauthorized response a status code equal to that given
func (o *ConfirmResetPasswordUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ConfirmResetPasswordUnauthorized) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/confirm][%d] confirmResetPasswordUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfirmResetPasswordUnauthorized) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/confirm][%d] confirmResetPasswordUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfirmResetPasswordUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConfirmResetPasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmResetPasswordPreconditionFailed creates a ConfirmResetPasswordPreconditionFailed with default headers values
func NewConfirmResetPasswordPreconditionFailed() *ConfirmResetPasswordPreconditionFailed {
	return &ConfirmResetPasswordPreconditionFailed{}
}

/*
ConfirmResetPasswordPreconditionFailed describes a response with status code 412, with default header values.

HttpError
*/
type ConfirmResetPasswordPreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this confirm reset password precondition failed response has a 2xx status code
func (o *ConfirmResetPasswordPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm reset password precondition failed response has a 3xx status code
func (o *ConfirmResetPasswordPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm reset password precondition failed response has a 4xx status code
func (o *ConfirmResetPasswordPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm reset password precondition failed response has a 5xx status code
func (o *ConfirmResetPasswordPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm reset password precondition failed response a status code equal to that given
func (o *ConfirmResetPasswordPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

func (o *ConfirmResetPasswordPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/confirm][%d] confirmResetPasswordPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ConfirmResetPasswordPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/confirm][%d] confirmResetPasswordPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ConfirmResetPasswordPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConfirmResetPasswordPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmResetPasswordUnprocessableEntity creates a ConfirmResetPasswordUnprocessableEntity with default headers values
func NewConfirmResetPasswordUnprocessableEntity() *ConfirmResetPasswordUnprocessableEntity {
	return &ConfirmResetPasswordUnprocessableEntity{}
}

/*
ConfirmResetPasswordUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type ConfirmResetPasswordUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this confirm reset password unprocessable entity response has a 2xx status code
func (o *ConfirmResetPasswordUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm reset password unprocessable entity response has a 3xx status code
func (o *ConfirmResetPasswordUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm reset password unprocessable entity response has a 4xx status code
func (o *ConfirmResetPasswordUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm reset password unprocessable entity response has a 5xx status code
func (o *ConfirmResetPasswordUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm reset password unprocessable entity response a status code equal to that given
func (o *ConfirmResetPasswordUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *ConfirmResetPasswordUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/confirm][%d] confirmResetPasswordUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ConfirmResetPasswordUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/confirm][%d] confirmResetPasswordUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ConfirmResetPasswordUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConfirmResetPasswordUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
