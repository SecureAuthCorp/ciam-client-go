// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// VerifyPasswordV2Reader is a Reader for the VerifyPasswordV2 structure.
type VerifyPasswordV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VerifyPasswordV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVerifyPasswordV2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewVerifyPasswordV2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewVerifyPasswordV2PreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewVerifyPasswordV2UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /system/pools/{ipID}/user/password/v2/verify] verifyPasswordV2", response, response.Code())
	}
}

// NewVerifyPasswordV2OK creates a VerifyPasswordV2OK with default headers values
func NewVerifyPasswordV2OK() *VerifyPasswordV2OK {
	return &VerifyPasswordV2OK{}
}

/*
VerifyPasswordV2OK describes a response with status code 200, with default header values.

Verify password response
*/
type VerifyPasswordV2OK struct {
	Payload *models.VerifyPasswordResponseDataV2
}

// IsSuccess returns true when this verify password v2 o k response has a 2xx status code
func (o *VerifyPasswordV2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this verify password v2 o k response has a 3xx status code
func (o *VerifyPasswordV2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password v2 o k response has a 4xx status code
func (o *VerifyPasswordV2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this verify password v2 o k response has a 5xx status code
func (o *VerifyPasswordV2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this verify password v2 o k response a status code equal to that given
func (o *VerifyPasswordV2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the verify password v2 o k response
func (o *VerifyPasswordV2OK) Code() int {
	return 200
}

func (o *VerifyPasswordV2OK) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/v2/verify][%d] verifyPasswordV2OK  %+v", 200, o.Payload)
}

func (o *VerifyPasswordV2OK) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/v2/verify][%d] verifyPasswordV2OK  %+v", 200, o.Payload)
}

func (o *VerifyPasswordV2OK) GetPayload() *models.VerifyPasswordResponseDataV2 {
	return o.Payload
}

func (o *VerifyPasswordV2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VerifyPasswordResponseDataV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyPasswordV2Unauthorized creates a VerifyPasswordV2Unauthorized with default headers values
func NewVerifyPasswordV2Unauthorized() *VerifyPasswordV2Unauthorized {
	return &VerifyPasswordV2Unauthorized{}
}

/*
VerifyPasswordV2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type VerifyPasswordV2Unauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify password v2 unauthorized response has a 2xx status code
func (o *VerifyPasswordV2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify password v2 unauthorized response has a 3xx status code
func (o *VerifyPasswordV2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password v2 unauthorized response has a 4xx status code
func (o *VerifyPasswordV2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify password v2 unauthorized response has a 5xx status code
func (o *VerifyPasswordV2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this verify password v2 unauthorized response a status code equal to that given
func (o *VerifyPasswordV2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the verify password v2 unauthorized response
func (o *VerifyPasswordV2Unauthorized) Code() int {
	return 401
}

func (o *VerifyPasswordV2Unauthorized) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/v2/verify][%d] verifyPasswordV2Unauthorized  %+v", 401, o.Payload)
}

func (o *VerifyPasswordV2Unauthorized) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/v2/verify][%d] verifyPasswordV2Unauthorized  %+v", 401, o.Payload)
}

func (o *VerifyPasswordV2Unauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyPasswordV2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyPasswordV2PreconditionFailed creates a VerifyPasswordV2PreconditionFailed with default headers values
func NewVerifyPasswordV2PreconditionFailed() *VerifyPasswordV2PreconditionFailed {
	return &VerifyPasswordV2PreconditionFailed{}
}

/*
VerifyPasswordV2PreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type VerifyPasswordV2PreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify password v2 precondition failed response has a 2xx status code
func (o *VerifyPasswordV2PreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify password v2 precondition failed response has a 3xx status code
func (o *VerifyPasswordV2PreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password v2 precondition failed response has a 4xx status code
func (o *VerifyPasswordV2PreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify password v2 precondition failed response has a 5xx status code
func (o *VerifyPasswordV2PreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this verify password v2 precondition failed response a status code equal to that given
func (o *VerifyPasswordV2PreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the verify password v2 precondition failed response
func (o *VerifyPasswordV2PreconditionFailed) Code() int {
	return 412
}

func (o *VerifyPasswordV2PreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/v2/verify][%d] verifyPasswordV2PreconditionFailed  %+v", 412, o.Payload)
}

func (o *VerifyPasswordV2PreconditionFailed) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/v2/verify][%d] verifyPasswordV2PreconditionFailed  %+v", 412, o.Payload)
}

func (o *VerifyPasswordV2PreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyPasswordV2PreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVerifyPasswordV2UnprocessableEntity creates a VerifyPasswordV2UnprocessableEntity with default headers values
func NewVerifyPasswordV2UnprocessableEntity() *VerifyPasswordV2UnprocessableEntity {
	return &VerifyPasswordV2UnprocessableEntity{}
}

/*
VerifyPasswordV2UnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type VerifyPasswordV2UnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this verify password v2 unprocessable entity response has a 2xx status code
func (o *VerifyPasswordV2UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this verify password v2 unprocessable entity response has a 3xx status code
func (o *VerifyPasswordV2UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this verify password v2 unprocessable entity response has a 4xx status code
func (o *VerifyPasswordV2UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this verify password v2 unprocessable entity response has a 5xx status code
func (o *VerifyPasswordV2UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this verify password v2 unprocessable entity response a status code equal to that given
func (o *VerifyPasswordV2UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the verify password v2 unprocessable entity response
func (o *VerifyPasswordV2UnprocessableEntity) Code() int {
	return 422
}

func (o *VerifyPasswordV2UnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/v2/verify][%d] verifyPasswordV2UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *VerifyPasswordV2UnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/v2/verify][%d] verifyPasswordV2UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *VerifyPasswordV2UnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *VerifyPasswordV2UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
