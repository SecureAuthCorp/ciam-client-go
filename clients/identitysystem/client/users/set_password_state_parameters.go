// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// NewSetPasswordStateParams creates a new SetPasswordStateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSetPasswordStateParams() *SetPasswordStateParams {
	return &SetPasswordStateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSetPasswordStateParamsWithTimeout creates a new SetPasswordStateParams object
// with the ability to set a timeout on a request.
func NewSetPasswordStateParamsWithTimeout(timeout time.Duration) *SetPasswordStateParams {
	return &SetPasswordStateParams{
		timeout: timeout,
	}
}

// NewSetPasswordStateParamsWithContext creates a new SetPasswordStateParams object
// with the ability to set a context for a request.
func NewSetPasswordStateParamsWithContext(ctx context.Context) *SetPasswordStateParams {
	return &SetPasswordStateParams{
		Context: ctx,
	}
}

// NewSetPasswordStateParamsWithHTTPClient creates a new SetPasswordStateParams object
// with the ability to set a custom HTTPClient for a request.
func NewSetPasswordStateParamsWithHTTPClient(client *http.Client) *SetPasswordStateParams {
	return &SetPasswordStateParams{
		HTTPClient: client,
	}
}

/*
SetPasswordStateParams contains all the parameters to send to the API endpoint

	for the set password state operation.

	Typically these are written to a http.Request.
*/
type SetPasswordStateParams struct {

	// State.
	State *models.SetPasswordStateRequest

	// IPID.
	IPID string

	// UserID.
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the set password state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetPasswordStateParams) WithDefaults() *SetPasswordStateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the set password state params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SetPasswordStateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the set password state params
func (o *SetPasswordStateParams) WithTimeout(timeout time.Duration) *SetPasswordStateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set password state params
func (o *SetPasswordStateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set password state params
func (o *SetPasswordStateParams) WithContext(ctx context.Context) *SetPasswordStateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set password state params
func (o *SetPasswordStateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set password state params
func (o *SetPasswordStateParams) WithHTTPClient(client *http.Client) *SetPasswordStateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set password state params
func (o *SetPasswordStateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithState adds the state to the set password state params
func (o *SetPasswordStateParams) WithState(state *models.SetPasswordStateRequest) *SetPasswordStateParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the set password state params
func (o *SetPasswordStateParams) SetState(state *models.SetPasswordStateRequest) {
	o.State = state
}

// WithIPID adds the iPID to the set password state params
func (o *SetPasswordStateParams) WithIPID(iPID string) *SetPasswordStateParams {
	o.SetIPID(iPID)
	return o
}

// SetIPID adds the ipId to the set password state params
func (o *SetPasswordStateParams) SetIPID(iPID string) {
	o.IPID = iPID
}

// WithUserID adds the userID to the set password state params
func (o *SetPasswordStateParams) WithUserID(userID string) *SetPasswordStateParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the set password state params
func (o *SetPasswordStateParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *SetPasswordStateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.State != nil {
		if err := r.SetBodyParam(o.State); err != nil {
			return err
		}
	}

	// path param ipID
	if err := r.SetPathParam("ipID", o.IPID); err != nil {
		return err
	}

	// path param userID
	if err := r.SetPathParam("userID", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
