// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// RequestResetPasswordReader is a Reader for the RequestResetPassword structure.
type RequestResetPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RequestResetPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRequestResetPasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRequestResetPasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRequestResetPasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewRequestResetPasswordPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRequestResetPasswordUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRequestResetPasswordNoContent creates a RequestResetPasswordNoContent with default headers values
func NewRequestResetPasswordNoContent() *RequestResetPasswordNoContent {
	return &RequestResetPasswordNoContent{}
}

/*
RequestResetPasswordNoContent describes a response with status code 204, with default header values.

Request accepted
*/
type RequestResetPasswordNoContent struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string
}

// IsSuccess returns true when this request reset password no content response has a 2xx status code
func (o *RequestResetPasswordNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this request reset password no content response has a 3xx status code
func (o *RequestResetPasswordNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset password no content response has a 4xx status code
func (o *RequestResetPasswordNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this request reset password no content response has a 5xx status code
func (o *RequestResetPasswordNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset password no content response a status code equal to that given
func (o *RequestResetPasswordNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *RequestResetPasswordNoContent) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordNoContent ", 204)
}

func (o *RequestResetPasswordNoContent) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordNoContent ", 204)
}

func (o *RequestResetPasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	return nil
}

// NewRequestResetPasswordBadRequest creates a RequestResetPasswordBadRequest with default headers values
func NewRequestResetPasswordBadRequest() *RequestResetPasswordBadRequest {
	return &RequestResetPasswordBadRequest{}
}

/*
RequestResetPasswordBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type RequestResetPasswordBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this request reset password bad request response has a 2xx status code
func (o *RequestResetPasswordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request reset password bad request response has a 3xx status code
func (o *RequestResetPasswordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset password bad request response has a 4xx status code
func (o *RequestResetPasswordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this request reset password bad request response has a 5xx status code
func (o *RequestResetPasswordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset password bad request response a status code equal to that given
func (o *RequestResetPasswordBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RequestResetPasswordBadRequest) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordBadRequest  %+v", 400, o.Payload)
}

func (o *RequestResetPasswordBadRequest) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordBadRequest  %+v", 400, o.Payload)
}

func (o *RequestResetPasswordBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestResetPasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestResetPasswordUnauthorized creates a RequestResetPasswordUnauthorized with default headers values
func NewRequestResetPasswordUnauthorized() *RequestResetPasswordUnauthorized {
	return &RequestResetPasswordUnauthorized{}
}

/*
RequestResetPasswordUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RequestResetPasswordUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this request reset password unauthorized response has a 2xx status code
func (o *RequestResetPasswordUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request reset password unauthorized response has a 3xx status code
func (o *RequestResetPasswordUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset password unauthorized response has a 4xx status code
func (o *RequestResetPasswordUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this request reset password unauthorized response has a 5xx status code
func (o *RequestResetPasswordUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset password unauthorized response a status code equal to that given
func (o *RequestResetPasswordUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RequestResetPasswordUnauthorized) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordUnauthorized  %+v", 401, o.Payload)
}

func (o *RequestResetPasswordUnauthorized) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordUnauthorized  %+v", 401, o.Payload)
}

func (o *RequestResetPasswordUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestResetPasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestResetPasswordPreconditionFailed creates a RequestResetPasswordPreconditionFailed with default headers values
func NewRequestResetPasswordPreconditionFailed() *RequestResetPasswordPreconditionFailed {
	return &RequestResetPasswordPreconditionFailed{}
}

/*
RequestResetPasswordPreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type RequestResetPasswordPreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this request reset password precondition failed response has a 2xx status code
func (o *RequestResetPasswordPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request reset password precondition failed response has a 3xx status code
func (o *RequestResetPasswordPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset password precondition failed response has a 4xx status code
func (o *RequestResetPasswordPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this request reset password precondition failed response has a 5xx status code
func (o *RequestResetPasswordPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset password precondition failed response a status code equal to that given
func (o *RequestResetPasswordPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

func (o *RequestResetPasswordPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordPreconditionFailed  %+v", 412, o.Payload)
}

func (o *RequestResetPasswordPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordPreconditionFailed  %+v", 412, o.Payload)
}

func (o *RequestResetPasswordPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestResetPasswordPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRequestResetPasswordUnprocessableEntity creates a RequestResetPasswordUnprocessableEntity with default headers values
func NewRequestResetPasswordUnprocessableEntity() *RequestResetPasswordUnprocessableEntity {
	return &RequestResetPasswordUnprocessableEntity{}
}

/*
RequestResetPasswordUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type RequestResetPasswordUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this request reset password unprocessable entity response has a 2xx status code
func (o *RequestResetPasswordUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this request reset password unprocessable entity response has a 3xx status code
func (o *RequestResetPasswordUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this request reset password unprocessable entity response has a 4xx status code
func (o *RequestResetPasswordUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this request reset password unprocessable entity response has a 5xx status code
func (o *RequestResetPasswordUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this request reset password unprocessable entity response a status code equal to that given
func (o *RequestResetPasswordUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *RequestResetPasswordUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *RequestResetPasswordUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /system/pools/{ipID}/user/password/reset/request][%d] requestResetPasswordUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *RequestResetPasswordUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *RequestResetPasswordUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
