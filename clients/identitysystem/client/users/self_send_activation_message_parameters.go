// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// NewSelfSendActivationMessageParams creates a new SelfSendActivationMessageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSelfSendActivationMessageParams() *SelfSendActivationMessageParams {
	return &SelfSendActivationMessageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSelfSendActivationMessageParamsWithTimeout creates a new SelfSendActivationMessageParams object
// with the ability to set a timeout on a request.
func NewSelfSendActivationMessageParamsWithTimeout(timeout time.Duration) *SelfSendActivationMessageParams {
	return &SelfSendActivationMessageParams{
		timeout: timeout,
	}
}

// NewSelfSendActivationMessageParamsWithContext creates a new SelfSendActivationMessageParams object
// with the ability to set a context for a request.
func NewSelfSendActivationMessageParamsWithContext(ctx context.Context) *SelfSendActivationMessageParams {
	return &SelfSendActivationMessageParams{
		Context: ctx,
	}
}

// NewSelfSendActivationMessageParamsWithHTTPClient creates a new SelfSendActivationMessageParams object
// with the ability to set a custom HTTPClient for a request.
func NewSelfSendActivationMessageParamsWithHTTPClient(client *http.Client) *SelfSendActivationMessageParams {
	return &SelfSendActivationMessageParams{
		HTTPClient: client,
	}
}

/*
SelfSendActivationMessageParams contains all the parameters to send to the API endpoint

	for the self send activation message operation.

	Typically these are written to a http.Request.
*/
type SelfSendActivationMessageParams struct {

	// SendActivationMessage.
	SendActivationMessage *models.RequestActivation

	/* CodeTypeInMessage.

	   Code type in message

	   Default: "link"
	*/
	CodeTypeInMessage *string

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	// IPID.
	IPID string

	// UserID.
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the self send activation message params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SelfSendActivationMessageParams) WithDefaults() *SelfSendActivationMessageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the self send activation message params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SelfSendActivationMessageParams) SetDefaults() {
	var (
		codeTypeInMessageDefault = string("link")
	)

	val := SelfSendActivationMessageParams{
		CodeTypeInMessage: &codeTypeInMessageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the self send activation message params
func (o *SelfSendActivationMessageParams) WithTimeout(timeout time.Duration) *SelfSendActivationMessageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the self send activation message params
func (o *SelfSendActivationMessageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the self send activation message params
func (o *SelfSendActivationMessageParams) WithContext(ctx context.Context) *SelfSendActivationMessageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the self send activation message params
func (o *SelfSendActivationMessageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the self send activation message params
func (o *SelfSendActivationMessageParams) WithHTTPClient(client *http.Client) *SelfSendActivationMessageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the self send activation message params
func (o *SelfSendActivationMessageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSendActivationMessage adds the sendActivationMessage to the self send activation message params
func (o *SelfSendActivationMessageParams) WithSendActivationMessage(sendActivationMessage *models.RequestActivation) *SelfSendActivationMessageParams {
	o.SetSendActivationMessage(sendActivationMessage)
	return o
}

// SetSendActivationMessage adds the sendActivationMessage to the self send activation message params
func (o *SelfSendActivationMessageParams) SetSendActivationMessage(sendActivationMessage *models.RequestActivation) {
	o.SendActivationMessage = sendActivationMessage
}

// WithCodeTypeInMessage adds the codeTypeInMessage to the self send activation message params
func (o *SelfSendActivationMessageParams) WithCodeTypeInMessage(codeTypeInMessage *string) *SelfSendActivationMessageParams {
	o.SetCodeTypeInMessage(codeTypeInMessage)
	return o
}

// SetCodeTypeInMessage adds the codeTypeInMessage to the self send activation message params
func (o *SelfSendActivationMessageParams) SetCodeTypeInMessage(codeTypeInMessage *string) {
	o.CodeTypeInMessage = codeTypeInMessage
}

// WithIfMatch adds the ifMatch to the self send activation message params
func (o *SelfSendActivationMessageParams) WithIfMatch(ifMatch *string) *SelfSendActivationMessageParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the self send activation message params
func (o *SelfSendActivationMessageParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithIPID adds the iPID to the self send activation message params
func (o *SelfSendActivationMessageParams) WithIPID(iPID string) *SelfSendActivationMessageParams {
	o.SetIPID(iPID)
	return o
}

// SetIPID adds the ipId to the self send activation message params
func (o *SelfSendActivationMessageParams) SetIPID(iPID string) {
	o.IPID = iPID
}

// WithUserID adds the userID to the self send activation message params
func (o *SelfSendActivationMessageParams) WithUserID(userID string) *SelfSendActivationMessageParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the self send activation message params
func (o *SelfSendActivationMessageParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *SelfSendActivationMessageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.SendActivationMessage != nil {
		if err := r.SetBodyParam(o.SendActivationMessage); err != nil {
			return err
		}
	}

	if o.CodeTypeInMessage != nil {

		// query param code_type_in_message
		var qrCodeTypeInMessage string

		if o.CodeTypeInMessage != nil {
			qrCodeTypeInMessage = *o.CodeTypeInMessage
		}
		qCodeTypeInMessage := qrCodeTypeInMessage
		if qCodeTypeInMessage != "" {

			if err := r.SetQueryParam("code_type_in_message", qCodeTypeInMessage); err != nil {
				return err
			}
		}
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	// path param ipID
	if err := r.SetPathParam("ipID", o.IPID); err != nil {
		return err
	}

	// path param userID
	if err := r.SetPathParam("userID", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
