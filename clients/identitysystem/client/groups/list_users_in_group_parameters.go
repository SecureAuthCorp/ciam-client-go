// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListUsersInGroupParams creates a new ListUsersInGroupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListUsersInGroupParams() *ListUsersInGroupParams {
	return &ListUsersInGroupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListUsersInGroupParamsWithTimeout creates a new ListUsersInGroupParams object
// with the ability to set a timeout on a request.
func NewListUsersInGroupParamsWithTimeout(timeout time.Duration) *ListUsersInGroupParams {
	return &ListUsersInGroupParams{
		timeout: timeout,
	}
}

// NewListUsersInGroupParamsWithContext creates a new ListUsersInGroupParams object
// with the ability to set a context for a request.
func NewListUsersInGroupParamsWithContext(ctx context.Context) *ListUsersInGroupParams {
	return &ListUsersInGroupParams{
		Context: ctx,
	}
}

// NewListUsersInGroupParamsWithHTTPClient creates a new ListUsersInGroupParams object
// with the ability to set a custom HTTPClient for a request.
func NewListUsersInGroupParamsWithHTTPClient(client *http.Client) *ListUsersInGroupParams {
	return &ListUsersInGroupParams{
		HTTPClient: client,
	}
}

/*
ListUsersInGroupParams contains all the parameters to send to the API endpoint

	for the list users in group operation.

	Typically these are written to a http.Request.
*/
type ListUsersInGroupParams struct {

	/* AfterUserID.

	     optional list users after given id
	AfterUserID
	*/
	AfterUserID *string

	/* BeforeUserID.

	     optional list users before given id
	BeforeUserID
	*/
	BeforeUserID *string

	// GroupID.
	GroupID string

	// IPID.
	IPID string

	/* Limit.

	     optional limit results
	Limit

	     Format: int64
	     Default: 20
	*/
	Limit *int64

	// WithNestedGroups.
	WithNestedGroups *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list users in group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListUsersInGroupParams) WithDefaults() *ListUsersInGroupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list users in group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListUsersInGroupParams) SetDefaults() {
	var (
		limitDefault = int64(20)
	)

	val := ListUsersInGroupParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list users in group params
func (o *ListUsersInGroupParams) WithTimeout(timeout time.Duration) *ListUsersInGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list users in group params
func (o *ListUsersInGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list users in group params
func (o *ListUsersInGroupParams) WithContext(ctx context.Context) *ListUsersInGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list users in group params
func (o *ListUsersInGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list users in group params
func (o *ListUsersInGroupParams) WithHTTPClient(client *http.Client) *ListUsersInGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list users in group params
func (o *ListUsersInGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterUserID adds the afterUserID to the list users in group params
func (o *ListUsersInGroupParams) WithAfterUserID(afterUserID *string) *ListUsersInGroupParams {
	o.SetAfterUserID(afterUserID)
	return o
}

// SetAfterUserID adds the afterUserId to the list users in group params
func (o *ListUsersInGroupParams) SetAfterUserID(afterUserID *string) {
	o.AfterUserID = afterUserID
}

// WithBeforeUserID adds the beforeUserID to the list users in group params
func (o *ListUsersInGroupParams) WithBeforeUserID(beforeUserID *string) *ListUsersInGroupParams {
	o.SetBeforeUserID(beforeUserID)
	return o
}

// SetBeforeUserID adds the beforeUserId to the list users in group params
func (o *ListUsersInGroupParams) SetBeforeUserID(beforeUserID *string) {
	o.BeforeUserID = beforeUserID
}

// WithGroupID adds the groupID to the list users in group params
func (o *ListUsersInGroupParams) WithGroupID(groupID string) *ListUsersInGroupParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the list users in group params
func (o *ListUsersInGroupParams) SetGroupID(groupID string) {
	o.GroupID = groupID
}

// WithIPID adds the iPID to the list users in group params
func (o *ListUsersInGroupParams) WithIPID(iPID string) *ListUsersInGroupParams {
	o.SetIPID(iPID)
	return o
}

// SetIPID adds the ipId to the list users in group params
func (o *ListUsersInGroupParams) SetIPID(iPID string) {
	o.IPID = iPID
}

// WithLimit adds the limit to the list users in group params
func (o *ListUsersInGroupParams) WithLimit(limit *int64) *ListUsersInGroupParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list users in group params
func (o *ListUsersInGroupParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithWithNestedGroups adds the withNestedGroups to the list users in group params
func (o *ListUsersInGroupParams) WithWithNestedGroups(withNestedGroups *bool) *ListUsersInGroupParams {
	o.SetWithNestedGroups(withNestedGroups)
	return o
}

// SetWithNestedGroups adds the withNestedGroups to the list users in group params
func (o *ListUsersInGroupParams) SetWithNestedGroups(withNestedGroups *bool) {
	o.WithNestedGroups = withNestedGroups
}

// WriteToRequest writes these params to a swagger request
func (o *ListUsersInGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterUserID != nil {

		// query param after_user_id
		var qrAfterUserID string

		if o.AfterUserID != nil {
			qrAfterUserID = *o.AfterUserID
		}
		qAfterUserID := qrAfterUserID
		if qAfterUserID != "" {

			if err := r.SetQueryParam("after_user_id", qAfterUserID); err != nil {
				return err
			}
		}
	}

	if o.BeforeUserID != nil {

		// query param before_user_id
		var qrBeforeUserID string

		if o.BeforeUserID != nil {
			qrBeforeUserID = *o.BeforeUserID
		}
		qBeforeUserID := qrBeforeUserID
		if qBeforeUserID != "" {

			if err := r.SetQueryParam("before_user_id", qBeforeUserID); err != nil {
				return err
			}
		}
	}

	// path param groupID
	if err := r.SetPathParam("groupID", o.GroupID); err != nil {
		return err
	}

	// path param ipID
	if err := r.SetPathParam("ipID", o.IPID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.WithNestedGroups != nil {

		// query param with_nested_groups
		var qrWithNestedGroups bool

		if o.WithNestedGroups != nil {
			qrWithNestedGroups = *o.WithNestedGroups
		}
		qWithNestedGroups := swag.FormatBool(qrWithNestedGroups)
		if qWithNestedGroups != "" {

			if err := r.SetQueryParam("with_nested_groups", qWithNestedGroups); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
