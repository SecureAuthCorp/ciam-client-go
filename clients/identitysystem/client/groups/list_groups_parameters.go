// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListGroupsParams creates a new ListGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListGroupsParams() *ListGroupsParams {
	return &ListGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListGroupsParamsWithTimeout creates a new ListGroupsParams object
// with the ability to set a timeout on a request.
func NewListGroupsParamsWithTimeout(timeout time.Duration) *ListGroupsParams {
	return &ListGroupsParams{
		timeout: timeout,
	}
}

// NewListGroupsParamsWithContext creates a new ListGroupsParams object
// with the ability to set a context for a request.
func NewListGroupsParamsWithContext(ctx context.Context) *ListGroupsParams {
	return &ListGroupsParams{
		Context: ctx,
	}
}

// NewListGroupsParamsWithHTTPClient creates a new ListGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListGroupsParamsWithHTTPClient(client *http.Client) *ListGroupsParams {
	return &ListGroupsParams{
		HTTPClient: client,
	}
}

/*
ListGroupsParams contains all the parameters to send to the API endpoint

	for the list groups operation.

	Typically these are written to a http.Request.
*/
type ListGroupsParams struct {

	/* AfterGroupID.

	     optional list groups after given id
	AfterGroupID
	*/
	AfterGroupID *string

	/* BeforeGroupID.

	     optional list groups before given id
	BeforeGroupID
	*/
	BeforeGroupID *string

	// IPID.
	IPID string

	/* Limit.

	     optional limit results
	Limit

	     Format: int64
	     Default: 20
	*/
	Limit *int64

	// ParentID.
	ParentID *string

	/* Query.

	     optional query filter
	query is in json format - parameter must be url-encoded
	supported parameters:
	`name` - limits group set to groups that have name starting or ending with provided value (case insensitive)
	*/
	Query *string

	// WithNestedGroups.
	WithNestedGroups *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListGroupsParams) WithDefaults() *ListGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListGroupsParams) SetDefaults() {
	var (
		limitDefault = int64(20)
	)

	val := ListGroupsParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list groups params
func (o *ListGroupsParams) WithTimeout(timeout time.Duration) *ListGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list groups params
func (o *ListGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list groups params
func (o *ListGroupsParams) WithContext(ctx context.Context) *ListGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list groups params
func (o *ListGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list groups params
func (o *ListGroupsParams) WithHTTPClient(client *http.Client) *ListGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list groups params
func (o *ListGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterGroupID adds the afterGroupID to the list groups params
func (o *ListGroupsParams) WithAfterGroupID(afterGroupID *string) *ListGroupsParams {
	o.SetAfterGroupID(afterGroupID)
	return o
}

// SetAfterGroupID adds the afterGroupId to the list groups params
func (o *ListGroupsParams) SetAfterGroupID(afterGroupID *string) {
	o.AfterGroupID = afterGroupID
}

// WithBeforeGroupID adds the beforeGroupID to the list groups params
func (o *ListGroupsParams) WithBeforeGroupID(beforeGroupID *string) *ListGroupsParams {
	o.SetBeforeGroupID(beforeGroupID)
	return o
}

// SetBeforeGroupID adds the beforeGroupId to the list groups params
func (o *ListGroupsParams) SetBeforeGroupID(beforeGroupID *string) {
	o.BeforeGroupID = beforeGroupID
}

// WithIPID adds the iPID to the list groups params
func (o *ListGroupsParams) WithIPID(iPID string) *ListGroupsParams {
	o.SetIPID(iPID)
	return o
}

// SetIPID adds the ipId to the list groups params
func (o *ListGroupsParams) SetIPID(iPID string) {
	o.IPID = iPID
}

// WithLimit adds the limit to the list groups params
func (o *ListGroupsParams) WithLimit(limit *int64) *ListGroupsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list groups params
func (o *ListGroupsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithParentID adds the parentID to the list groups params
func (o *ListGroupsParams) WithParentID(parentID *string) *ListGroupsParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the list groups params
func (o *ListGroupsParams) SetParentID(parentID *string) {
	o.ParentID = parentID
}

// WithQuery adds the query to the list groups params
func (o *ListGroupsParams) WithQuery(query *string) *ListGroupsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list groups params
func (o *ListGroupsParams) SetQuery(query *string) {
	o.Query = query
}

// WithWithNestedGroups adds the withNestedGroups to the list groups params
func (o *ListGroupsParams) WithWithNestedGroups(withNestedGroups *bool) *ListGroupsParams {
	o.SetWithNestedGroups(withNestedGroups)
	return o
}

// SetWithNestedGroups adds the withNestedGroups to the list groups params
func (o *ListGroupsParams) SetWithNestedGroups(withNestedGroups *bool) {
	o.WithNestedGroups = withNestedGroups
}

// WriteToRequest writes these params to a swagger request
func (o *ListGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterGroupID != nil {

		// query param after_group_id
		var qrAfterGroupID string

		if o.AfterGroupID != nil {
			qrAfterGroupID = *o.AfterGroupID
		}
		qAfterGroupID := qrAfterGroupID
		if qAfterGroupID != "" {

			if err := r.SetQueryParam("after_group_id", qAfterGroupID); err != nil {
				return err
			}
		}
	}

	if o.BeforeGroupID != nil {

		// query param before_group_id
		var qrBeforeGroupID string

		if o.BeforeGroupID != nil {
			qrBeforeGroupID = *o.BeforeGroupID
		}
		qBeforeGroupID := qrBeforeGroupID
		if qBeforeGroupID != "" {

			if err := r.SetQueryParam("before_group_id", qBeforeGroupID); err != nil {
				return err
			}
		}
	}

	// path param ipID
	if err := r.SetPathParam("ipID", o.IPID); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.ParentID != nil {

		// query param parent_id
		var qrParentID string

		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID
		if qParentID != "" {

			if err := r.SetQueryParam("parent_id", qParentID); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.WithNestedGroups != nil {

		// query param with_nested_groups
		var qrWithNestedGroups bool

		if o.WithNestedGroups != nil {
			qrWithNestedGroups = *o.WithNestedGroups
		}
		qWithNestedGroups := swag.FormatBool(qrWithNestedGroups)
		if qWithNestedGroups != "" {

			if err := r.SetQueryParam("with_nested_groups", qWithNestedGroups); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
