// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identitysystem/models"
)

// ListGroupsReader is a Reader for the ListGroups structure.
type ListGroupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListGroupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListGroupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListGroupsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListGroupsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListGroupsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListGroupsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewListGroupsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListGroupsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /system/pools/{ipID}/groups] listGroups", response, response.Code())
	}
}

// NewListGroupsOK creates a ListGroupsOK with default headers values
func NewListGroupsOK() *ListGroupsOK {
	return &ListGroupsOK{}
}

/*
ListGroupsOK describes a response with status code 200, with default header values.

Groups
*/
type ListGroupsOK struct {
	Payload models.Groups
}

// IsSuccess returns true when this list groups o k response has a 2xx status code
func (o *ListGroupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list groups o k response has a 3xx status code
func (o *ListGroupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list groups o k response has a 4xx status code
func (o *ListGroupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list groups o k response has a 5xx status code
func (o *ListGroupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list groups o k response a status code equal to that given
func (o *ListGroupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list groups o k response
func (o *ListGroupsOK) Code() int {
	return 200
}

func (o *ListGroupsOK) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsOK  %+v", 200, o.Payload)
}

func (o *ListGroupsOK) String() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsOK  %+v", 200, o.Payload)
}

func (o *ListGroupsOK) GetPayload() models.Groups {
	return o.Payload
}

func (o *ListGroupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListGroupsBadRequest creates a ListGroupsBadRequest with default headers values
func NewListGroupsBadRequest() *ListGroupsBadRequest {
	return &ListGroupsBadRequest{}
}

/*
ListGroupsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ListGroupsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this list groups bad request response has a 2xx status code
func (o *ListGroupsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list groups bad request response has a 3xx status code
func (o *ListGroupsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list groups bad request response has a 4xx status code
func (o *ListGroupsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list groups bad request response has a 5xx status code
func (o *ListGroupsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list groups bad request response a status code equal to that given
func (o *ListGroupsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list groups bad request response
func (o *ListGroupsBadRequest) Code() int {
	return 400
}

func (o *ListGroupsBadRequest) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ListGroupsBadRequest) String() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsBadRequest  %+v", 400, o.Payload)
}

func (o *ListGroupsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListGroupsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListGroupsUnauthorized creates a ListGroupsUnauthorized with default headers values
func NewListGroupsUnauthorized() *ListGroupsUnauthorized {
	return &ListGroupsUnauthorized{}
}

/*
ListGroupsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListGroupsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list groups unauthorized response has a 2xx status code
func (o *ListGroupsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list groups unauthorized response has a 3xx status code
func (o *ListGroupsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list groups unauthorized response has a 4xx status code
func (o *ListGroupsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list groups unauthorized response has a 5xx status code
func (o *ListGroupsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list groups unauthorized response a status code equal to that given
func (o *ListGroupsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list groups unauthorized response
func (o *ListGroupsUnauthorized) Code() int {
	return 401
}

func (o *ListGroupsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListGroupsUnauthorized) String() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListGroupsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListGroupsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListGroupsForbidden creates a ListGroupsForbidden with default headers values
func NewListGroupsForbidden() *ListGroupsForbidden {
	return &ListGroupsForbidden{}
}

/*
ListGroupsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListGroupsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list groups forbidden response has a 2xx status code
func (o *ListGroupsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list groups forbidden response has a 3xx status code
func (o *ListGroupsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list groups forbidden response has a 4xx status code
func (o *ListGroupsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list groups forbidden response has a 5xx status code
func (o *ListGroupsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list groups forbidden response a status code equal to that given
func (o *ListGroupsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list groups forbidden response
func (o *ListGroupsForbidden) Code() int {
	return 403
}

func (o *ListGroupsForbidden) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ListGroupsForbidden) String() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsForbidden  %+v", 403, o.Payload)
}

func (o *ListGroupsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListGroupsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListGroupsNotFound creates a ListGroupsNotFound with default headers values
func NewListGroupsNotFound() *ListGroupsNotFound {
	return &ListGroupsNotFound{}
}

/*
ListGroupsNotFound describes a response with status code 404, with default header values.

Not found
*/
type ListGroupsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this list groups not found response has a 2xx status code
func (o *ListGroupsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list groups not found response has a 3xx status code
func (o *ListGroupsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list groups not found response has a 4xx status code
func (o *ListGroupsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list groups not found response has a 5xx status code
func (o *ListGroupsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list groups not found response a status code equal to that given
func (o *ListGroupsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list groups not found response
func (o *ListGroupsNotFound) Code() int {
	return 404
}

func (o *ListGroupsNotFound) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsNotFound  %+v", 404, o.Payload)
}

func (o *ListGroupsNotFound) String() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsNotFound  %+v", 404, o.Payload)
}

func (o *ListGroupsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListGroupsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListGroupsUnprocessableEntity creates a ListGroupsUnprocessableEntity with default headers values
func NewListGroupsUnprocessableEntity() *ListGroupsUnprocessableEntity {
	return &ListGroupsUnprocessableEntity{}
}

/*
ListGroupsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ListGroupsUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this list groups unprocessable entity response has a 2xx status code
func (o *ListGroupsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list groups unprocessable entity response has a 3xx status code
func (o *ListGroupsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list groups unprocessable entity response has a 4xx status code
func (o *ListGroupsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this list groups unprocessable entity response has a 5xx status code
func (o *ListGroupsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this list groups unprocessable entity response a status code equal to that given
func (o *ListGroupsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the list groups unprocessable entity response
func (o *ListGroupsUnprocessableEntity) Code() int {
	return 422
}

func (o *ListGroupsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ListGroupsUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ListGroupsUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListGroupsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListGroupsTooManyRequests creates a ListGroupsTooManyRequests with default headers values
func NewListGroupsTooManyRequests() *ListGroupsTooManyRequests {
	return &ListGroupsTooManyRequests{}
}

/*
ListGroupsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListGroupsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list groups too many requests response has a 2xx status code
func (o *ListGroupsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list groups too many requests response has a 3xx status code
func (o *ListGroupsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list groups too many requests response has a 4xx status code
func (o *ListGroupsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list groups too many requests response has a 5xx status code
func (o *ListGroupsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list groups too many requests response a status code equal to that given
func (o *ListGroupsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list groups too many requests response
func (o *ListGroupsTooManyRequests) Code() int {
	return 429
}

func (o *ListGroupsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListGroupsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /system/pools/{ipID}/groups][%d] listGroupsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListGroupsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListGroupsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
