// Code generated by go-swagger; DO NOT EDIT.

package international_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/acp-client-go/clients/openbankingUK/payments/models"
)

// GetInternationalPaymentConsentsConsentIDReader is a Reader for the GetInternationalPaymentConsentsConsentID structure.
type GetInternationalPaymentConsentsConsentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInternationalPaymentConsentsConsentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInternationalPaymentConsentsConsentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInternationalPaymentConsentsConsentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInternationalPaymentConsentsConsentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInternationalPaymentConsentsConsentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInternationalPaymentConsentsConsentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetInternationalPaymentConsentsConsentIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetInternationalPaymentConsentsConsentIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInternationalPaymentConsentsConsentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInternationalPaymentConsentsConsentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInternationalPaymentConsentsConsentIDOK creates a GetInternationalPaymentConsentsConsentIDOK with default headers values
func NewGetInternationalPaymentConsentsConsentIDOK() *GetInternationalPaymentConsentsConsentIDOK {
	return &GetInternationalPaymentConsentsConsentIDOK{}
}

/*
GetInternationalPaymentConsentsConsentIDOK describes a response with status code 200, with default header values.

International Payment Consents Read
*/
type GetInternationalPaymentConsentsConsentIDOK struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBWriteInternationalConsentResponse6
}

// IsSuccess returns true when this get international payment consents consent Id o k response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get international payment consents consent Id o k response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id o k response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get international payment consents consent Id o k response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consents consent Id o k response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInternationalPaymentConsentsConsentIDOK) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdOK  %+v", 200, o.Payload)
}

func (o *GetInternationalPaymentConsentsConsentIDOK) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdOK  %+v", 200, o.Payload)
}

func (o *GetInternationalPaymentConsentsConsentIDOK) GetPayload() *models.OBWriteInternationalConsentResponse6 {
	return o.Payload
}

func (o *GetInternationalPaymentConsentsConsentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBWriteInternationalConsentResponse6)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDBadRequest creates a GetInternationalPaymentConsentsConsentIDBadRequest with default headers values
func NewGetInternationalPaymentConsentsConsentIDBadRequest() *GetInternationalPaymentConsentsConsentIDBadRequest {
	return &GetInternationalPaymentConsentsConsentIDBadRequest{}
}

/*
GetInternationalPaymentConsentsConsentIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetInternationalPaymentConsentsConsentIDBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get international payment consents consent Id bad request response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consents consent Id bad request response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id bad request response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consents consent Id bad request response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consents consent Id bad request response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInternationalPaymentConsentsConsentIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetInternationalPaymentConsentsConsentIDBadRequest) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetInternationalPaymentConsentsConsentIDBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalPaymentConsentsConsentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDUnauthorized creates a GetInternationalPaymentConsentsConsentIDUnauthorized with default headers values
func NewGetInternationalPaymentConsentsConsentIDUnauthorized() *GetInternationalPaymentConsentsConsentIDUnauthorized {
	return &GetInternationalPaymentConsentsConsentIDUnauthorized{}
}

/*
GetInternationalPaymentConsentsConsentIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetInternationalPaymentConsentsConsentIDUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international payment consents consent Id unauthorized response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consents consent Id unauthorized response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id unauthorized response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consents consent Id unauthorized response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consents consent Id unauthorized response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetInternationalPaymentConsentsConsentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdUnauthorized ", 401)
}

func (o *GetInternationalPaymentConsentsConsentIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdUnauthorized ", 401)
}

func (o *GetInternationalPaymentConsentsConsentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDForbidden creates a GetInternationalPaymentConsentsConsentIDForbidden with default headers values
func NewGetInternationalPaymentConsentsConsentIDForbidden() *GetInternationalPaymentConsentsConsentIDForbidden {
	return &GetInternationalPaymentConsentsConsentIDForbidden{}
}

/*
GetInternationalPaymentConsentsConsentIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetInternationalPaymentConsentsConsentIDForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get international payment consents consent Id forbidden response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consents consent Id forbidden response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id forbidden response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consents consent Id forbidden response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consents consent Id forbidden response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInternationalPaymentConsentsConsentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetInternationalPaymentConsentsConsentIDForbidden) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetInternationalPaymentConsentsConsentIDForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalPaymentConsentsConsentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDNotFound creates a GetInternationalPaymentConsentsConsentIDNotFound with default headers values
func NewGetInternationalPaymentConsentsConsentIDNotFound() *GetInternationalPaymentConsentsConsentIDNotFound {
	return &GetInternationalPaymentConsentsConsentIDNotFound{}
}

/*
GetInternationalPaymentConsentsConsentIDNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetInternationalPaymentConsentsConsentIDNotFound struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international payment consents consent Id not found response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consents consent Id not found response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id not found response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consents consent Id not found response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consents consent Id not found response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInternationalPaymentConsentsConsentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdNotFound ", 404)
}

func (o *GetInternationalPaymentConsentsConsentIDNotFound) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdNotFound ", 404)
}

func (o *GetInternationalPaymentConsentsConsentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDMethodNotAllowed creates a GetInternationalPaymentConsentsConsentIDMethodNotAllowed with default headers values
func NewGetInternationalPaymentConsentsConsentIDMethodNotAllowed() *GetInternationalPaymentConsentsConsentIDMethodNotAllowed {
	return &GetInternationalPaymentConsentsConsentIDMethodNotAllowed{}
}

/*
GetInternationalPaymentConsentsConsentIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetInternationalPaymentConsentsConsentIDMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international payment consents consent Id method not allowed response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consents consent Id method not allowed response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id method not allowed response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consents consent Id method not allowed response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consents consent Id method not allowed response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

func (o *GetInternationalPaymentConsentsConsentIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdMethodNotAllowed ", 405)
}

func (o *GetInternationalPaymentConsentsConsentIDMethodNotAllowed) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdMethodNotAllowed ", 405)
}

func (o *GetInternationalPaymentConsentsConsentIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDNotAcceptable creates a GetInternationalPaymentConsentsConsentIDNotAcceptable with default headers values
func NewGetInternationalPaymentConsentsConsentIDNotAcceptable() *GetInternationalPaymentConsentsConsentIDNotAcceptable {
	return &GetInternationalPaymentConsentsConsentIDNotAcceptable{}
}

/*
GetInternationalPaymentConsentsConsentIDNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type GetInternationalPaymentConsentsConsentIDNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international payment consents consent Id not acceptable response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consents consent Id not acceptable response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id not acceptable response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consents consent Id not acceptable response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consents consent Id not acceptable response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDNotAcceptable) IsCode(code int) bool {
	return code == 406
}

func (o *GetInternationalPaymentConsentsConsentIDNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdNotAcceptable ", 406)
}

func (o *GetInternationalPaymentConsentsConsentIDNotAcceptable) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdNotAcceptable ", 406)
}

func (o *GetInternationalPaymentConsentsConsentIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDTooManyRequests creates a GetInternationalPaymentConsentsConsentIDTooManyRequests with default headers values
func NewGetInternationalPaymentConsentsConsentIDTooManyRequests() *GetInternationalPaymentConsentsConsentIDTooManyRequests {
	return &GetInternationalPaymentConsentsConsentIDTooManyRequests{}
}

/*
GetInternationalPaymentConsentsConsentIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetInternationalPaymentConsentsConsentIDTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international payment consents consent Id too many requests response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consents consent Id too many requests response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id too many requests response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consents consent Id too many requests response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consents consent Id too many requests response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInternationalPaymentConsentsConsentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdTooManyRequests ", 429)
}

func (o *GetInternationalPaymentConsentsConsentIDTooManyRequests) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdTooManyRequests ", 429)
}

func (o *GetInternationalPaymentConsentsConsentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalPaymentConsentsConsentIDInternalServerError creates a GetInternationalPaymentConsentsConsentIDInternalServerError with default headers values
func NewGetInternationalPaymentConsentsConsentIDInternalServerError() *GetInternationalPaymentConsentsConsentIDInternalServerError {
	return &GetInternationalPaymentConsentsConsentIDInternalServerError{}
}

/*
GetInternationalPaymentConsentsConsentIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetInternationalPaymentConsentsConsentIDInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get international payment consents consent Id internal server error response has a 2xx status code
func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consents consent Id internal server error response has a 3xx status code
func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consents consent Id internal server error response has a 4xx status code
func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get international payment consents consent Id internal server error response has a 5xx status code
func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get international payment consents consent Id internal server error response a status code equal to that given
func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /international-payment-consents/{ConsentId}][%d] getInternationalPaymentConsentsConsentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalPaymentConsentsConsentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
