// Code generated by go-swagger; DO NOT EDIT.

package domestic_scheduled_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/acp-client-go/clients/openbankingUK/payments/models"
)

// GetDomesticScheduledPaymentConsentsConsentIDReader is a Reader for the GetDomesticScheduledPaymentConsentsConsentID structure.
type GetDomesticScheduledPaymentConsentsConsentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomesticScheduledPaymentConsentsConsentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomesticScheduledPaymentConsentsConsentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDomesticScheduledPaymentConsentsConsentIDOK creates a GetDomesticScheduledPaymentConsentsConsentIDOK with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDOK() *GetDomesticScheduledPaymentConsentsConsentIDOK {
	return &GetDomesticScheduledPaymentConsentsConsentIDOK{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDOK describes a response with status code 200, with default header values.

Domestic Scheduled Payment Consents Read
*/
type GetDomesticScheduledPaymentConsentsConsentIDOK struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBWriteDomesticScheduledConsentResponse5
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id o k response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id o k response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id o k response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id o k response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get domestic scheduled payment consents consent Id o k response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get domestic scheduled payment consents consent Id o k response
func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) Code() int {
	return 200
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdOK  %+v", 200, o.Payload)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdOK  %+v", 200, o.Payload)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) GetPayload() *models.OBWriteDomesticScheduledConsentResponse5 {
	return o.Payload
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBWriteDomesticScheduledConsentResponse5)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticScheduledPaymentConsentsConsentIDBadRequest creates a GetDomesticScheduledPaymentConsentsConsentIDBadRequest with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDBadRequest() *GetDomesticScheduledPaymentConsentsConsentIDBadRequest {
	return &GetDomesticScheduledPaymentConsentsConsentIDBadRequest{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetDomesticScheduledPaymentConsentsConsentIDBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id bad request response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id bad request response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id bad request response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id bad request response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get domestic scheduled payment consents consent Id bad request response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get domestic scheduled payment consents consent Id bad request response
func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) Code() int {
	return 400
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticScheduledPaymentConsentsConsentIDUnauthorized creates a GetDomesticScheduledPaymentConsentsConsentIDUnauthorized with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDUnauthorized() *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized {
	return &GetDomesticScheduledPaymentConsentsConsentIDUnauthorized{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetDomesticScheduledPaymentConsentsConsentIDUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id unauthorized response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id unauthorized response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id unauthorized response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id unauthorized response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get domestic scheduled payment consents consent Id unauthorized response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get domestic scheduled payment consents consent Id unauthorized response
func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) Code() int {
	return 401
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdUnauthorized ", 401)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdUnauthorized ", 401)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentConsentsConsentIDForbidden creates a GetDomesticScheduledPaymentConsentsConsentIDForbidden with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDForbidden() *GetDomesticScheduledPaymentConsentsConsentIDForbidden {
	return &GetDomesticScheduledPaymentConsentsConsentIDForbidden{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetDomesticScheduledPaymentConsentsConsentIDForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id forbidden response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id forbidden response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id forbidden response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id forbidden response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get domestic scheduled payment consents consent Id forbidden response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get domestic scheduled payment consents consent Id forbidden response
func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) Code() int {
	return 403
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdForbidden  %+v", 403, o.Payload)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticScheduledPaymentConsentsConsentIDNotFound creates a GetDomesticScheduledPaymentConsentsConsentIDNotFound with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDNotFound() *GetDomesticScheduledPaymentConsentsConsentIDNotFound {
	return &GetDomesticScheduledPaymentConsentsConsentIDNotFound{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetDomesticScheduledPaymentConsentsConsentIDNotFound struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id not found response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id not found response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id not found response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id not found response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get domestic scheduled payment consents consent Id not found response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get domestic scheduled payment consents consent Id not found response
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) Code() int {
	return 404
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdNotFound ", 404)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdNotFound ", 404)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed creates a GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed() *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed {
	return &GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id method not allowed response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id method not allowed response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id method not allowed response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id method not allowed response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get domestic scheduled payment consents consent Id method not allowed response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get domestic scheduled payment consents consent Id method not allowed response
func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) Code() int {
	return 405
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdMethodNotAllowed ", 405)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdMethodNotAllowed ", 405)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentConsentsConsentIDNotAcceptable creates a GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDNotAcceptable() *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable {
	return &GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id not acceptable response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id not acceptable response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id not acceptable response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id not acceptable response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get domestic scheduled payment consents consent Id not acceptable response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the get domestic scheduled payment consents consent Id not acceptable response
func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) Code() int {
	return 406
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdNotAcceptable ", 406)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdNotAcceptable ", 406)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentConsentsConsentIDTooManyRequests creates a GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDTooManyRequests() *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests {
	return &GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id too many requests response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id too many requests response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id too many requests response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id too many requests response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get domestic scheduled payment consents consent Id too many requests response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get domestic scheduled payment consents consent Id too many requests response
func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) Code() int {
	return 429
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdTooManyRequests ", 429)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdTooManyRequests ", 429)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetDomesticScheduledPaymentConsentsConsentIDInternalServerError creates a GetDomesticScheduledPaymentConsentsConsentIDInternalServerError with default headers values
func NewGetDomesticScheduledPaymentConsentsConsentIDInternalServerError() *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError {
	return &GetDomesticScheduledPaymentConsentsConsentIDInternalServerError{}
}

/*
GetDomesticScheduledPaymentConsentsConsentIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDomesticScheduledPaymentConsentsConsentIDInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get domestic scheduled payment consents consent Id internal server error response has a 2xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domestic scheduled payment consents consent Id internal server error response has a 3xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domestic scheduled payment consents consent Id internal server error response has a 4xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domestic scheduled payment consents consent Id internal server error response has a 5xx status code
func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get domestic scheduled payment consents consent Id internal server error response a status code equal to that given
func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get domestic scheduled payment consents consent Id internal server error response
func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) Code() int {
	return 500
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /domestic-scheduled-payment-consents/{ConsentId}][%d] getDomesticScheduledPaymentConsentsConsentIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetDomesticScheduledPaymentConsentsConsentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
