// Code generated by go-swagger; DO NOT EDIT.

package international_scheduled_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/acp-client-go/clients/openbankingUK/payments/models"
)

// GetInternationalScheduledPaymentConsentsConsentIDReader is a Reader for the GetInternationalScheduledPaymentConsentsConsentID structure.
type GetInternationalScheduledPaymentConsentsConsentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInternationalScheduledPaymentConsentsConsentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInternationalScheduledPaymentConsentsConsentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /international-scheduled-payment-consents/{ConsentId}] GetInternationalScheduledPaymentConsentsConsentId", response, response.Code())
	}
}

// NewGetInternationalScheduledPaymentConsentsConsentIDOK creates a GetInternationalScheduledPaymentConsentsConsentIDOK with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDOK() *GetInternationalScheduledPaymentConsentsConsentIDOK {
	return &GetInternationalScheduledPaymentConsentsConsentIDOK{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDOK describes a response with status code 200, with default header values.

International Scheduled Payment Consents Read
*/
type GetInternationalScheduledPaymentConsentsConsentIDOK struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBWriteInternationalScheduledConsentResponse6
}

// IsSuccess returns true when this get international scheduled payment consents consent Id o k response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get international scheduled payment consents consent Id o k response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id o k response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get international scheduled payment consents consent Id o k response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get international scheduled payment consents consent Id o k response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get international scheduled payment consents consent Id o k response
func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) Code() int {
	return 200
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdOK %s", 200, payload)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdOK %s", 200, payload)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) GetPayload() *models.OBWriteInternationalScheduledConsentResponse6 {
	return o.Payload
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBWriteInternationalScheduledConsentResponse6)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalScheduledPaymentConsentsConsentIDBadRequest creates a GetInternationalScheduledPaymentConsentsConsentIDBadRequest with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDBadRequest() *GetInternationalScheduledPaymentConsentsConsentIDBadRequest {
	return &GetInternationalScheduledPaymentConsentsConsentIDBadRequest{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetInternationalScheduledPaymentConsentsConsentIDBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get international scheduled payment consents consent Id bad request response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international scheduled payment consents consent Id bad request response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id bad request response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international scheduled payment consents consent Id bad request response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get international scheduled payment consents consent Id bad request response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get international scheduled payment consents consent Id bad request response
func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) Code() int {
	return 400
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdBadRequest %s", 400, payload)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdBadRequest %s", 400, payload)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalScheduledPaymentConsentsConsentIDUnauthorized creates a GetInternationalScheduledPaymentConsentsConsentIDUnauthorized with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDUnauthorized() *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized {
	return &GetInternationalScheduledPaymentConsentsConsentIDUnauthorized{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetInternationalScheduledPaymentConsentsConsentIDUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international scheduled payment consents consent Id unauthorized response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international scheduled payment consents consent Id unauthorized response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id unauthorized response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international scheduled payment consents consent Id unauthorized response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get international scheduled payment consents consent Id unauthorized response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get international scheduled payment consents consent Id unauthorized response
func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) Code() int {
	return 401
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdUnauthorized", 401)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdUnauthorized", 401)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalScheduledPaymentConsentsConsentIDForbidden creates a GetInternationalScheduledPaymentConsentsConsentIDForbidden with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDForbidden() *GetInternationalScheduledPaymentConsentsConsentIDForbidden {
	return &GetInternationalScheduledPaymentConsentsConsentIDForbidden{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetInternationalScheduledPaymentConsentsConsentIDForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get international scheduled payment consents consent Id forbidden response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international scheduled payment consents consent Id forbidden response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id forbidden response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international scheduled payment consents consent Id forbidden response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get international scheduled payment consents consent Id forbidden response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get international scheduled payment consents consent Id forbidden response
func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) Code() int {
	return 403
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdForbidden %s", 403, payload)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdForbidden %s", 403, payload)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalScheduledPaymentConsentsConsentIDNotFound creates a GetInternationalScheduledPaymentConsentsConsentIDNotFound with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDNotFound() *GetInternationalScheduledPaymentConsentsConsentIDNotFound {
	return &GetInternationalScheduledPaymentConsentsConsentIDNotFound{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetInternationalScheduledPaymentConsentsConsentIDNotFound struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international scheduled payment consents consent Id not found response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international scheduled payment consents consent Id not found response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id not found response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international scheduled payment consents consent Id not found response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get international scheduled payment consents consent Id not found response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get international scheduled payment consents consent Id not found response
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) Code() int {
	return 404
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdNotFound", 404)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) String() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdNotFound", 404)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed creates a GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed() *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed {
	return &GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international scheduled payment consents consent Id method not allowed response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international scheduled payment consents consent Id method not allowed response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id method not allowed response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international scheduled payment consents consent Id method not allowed response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get international scheduled payment consents consent Id method not allowed response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get international scheduled payment consents consent Id method not allowed response
func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) Code() int {
	return 405
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdMethodNotAllowed", 405)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) String() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdMethodNotAllowed", 405)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalScheduledPaymentConsentsConsentIDNotAcceptable creates a GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDNotAcceptable() *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable {
	return &GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international scheduled payment consents consent Id not acceptable response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international scheduled payment consents consent Id not acceptable response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id not acceptable response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international scheduled payment consents consent Id not acceptable response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get international scheduled payment consents consent Id not acceptable response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the get international scheduled payment consents consent Id not acceptable response
func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) Code() int {
	return 406
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdNotAcceptable", 406)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) String() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdNotAcceptable", 406)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalScheduledPaymentConsentsConsentIDTooManyRequests creates a GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDTooManyRequests() *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests {
	return &GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this get international scheduled payment consents consent Id too many requests response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international scheduled payment consents consent Id too many requests response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id too many requests response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international scheduled payment consents consent Id too many requests response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get international scheduled payment consents consent Id too many requests response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get international scheduled payment consents consent Id too many requests response
func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) Code() int {
	return 429
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdTooManyRequests", 429)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) String() string {
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdTooManyRequests", 429)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewGetInternationalScheduledPaymentConsentsConsentIDInternalServerError creates a GetInternationalScheduledPaymentConsentsConsentIDInternalServerError with default headers values
func NewGetInternationalScheduledPaymentConsentsConsentIDInternalServerError() *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError {
	return &GetInternationalScheduledPaymentConsentsConsentIDInternalServerError{}
}

/*
GetInternationalScheduledPaymentConsentsConsentIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetInternationalScheduledPaymentConsentsConsentIDInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this get international scheduled payment consents consent Id internal server error response has a 2xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international scheduled payment consents consent Id internal server error response has a 3xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international scheduled payment consents consent Id internal server error response has a 4xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get international scheduled payment consents consent Id internal server error response has a 5xx status code
func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get international scheduled payment consents consent Id internal server error response a status code equal to that given
func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get international scheduled payment consents consent Id internal server error response
func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) Code() int {
	return 500
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdInternalServerError %s", 500, payload)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /international-scheduled-payment-consents/{ConsentId}][%d] getInternationalScheduledPaymentConsentsConsentIdInternalServerError %s", 500, payload)
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *GetInternationalScheduledPaymentConsentsConsentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
