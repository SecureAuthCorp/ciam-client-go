// Code generated by go-swagger; DO NOT EDIT.

package international_standing_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloudentity/acp-client-go/clients/openbankingUK/payments/models"
)

// CreateInternationalStandingOrderConsentsReader is a Reader for the CreateInternationalStandingOrderConsents structure.
type CreateInternationalStandingOrderConsentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInternationalStandingOrderConsentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateInternationalStandingOrderConsentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInternationalStandingOrderConsentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateInternationalStandingOrderConsentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateInternationalStandingOrderConsentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateInternationalStandingOrderConsentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateInternationalStandingOrderConsentsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewCreateInternationalStandingOrderConsentsNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateInternationalStandingOrderConsentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateInternationalStandingOrderConsentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateInternationalStandingOrderConsentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /international-standing-order-consents] CreateInternationalStandingOrderConsents", response, response.Code())
	}
}

// NewCreateInternationalStandingOrderConsentsCreated creates a CreateInternationalStandingOrderConsentsCreated with default headers values
func NewCreateInternationalStandingOrderConsentsCreated() *CreateInternationalStandingOrderConsentsCreated {
	return &CreateInternationalStandingOrderConsentsCreated{}
}

/*
CreateInternationalStandingOrderConsentsCreated describes a response with status code 201, with default header values.

International Standing Order Consents Created
*/
type CreateInternationalStandingOrderConsentsCreated struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBWriteInternationalStandingOrderConsentResponse7
}

// IsSuccess returns true when this create international standing order consents created response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create international standing order consents created response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents created response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create international standing order consents created response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents created response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create international standing order consents created response
func (o *CreateInternationalStandingOrderConsentsCreated) Code() int {
	return 201
}

func (o *CreateInternationalStandingOrderConsentsCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsCreated %s", 201, payload)
}

func (o *CreateInternationalStandingOrderConsentsCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsCreated %s", 201, payload)
}

func (o *CreateInternationalStandingOrderConsentsCreated) GetPayload() *models.OBWriteInternationalStandingOrderConsentResponse7 {
	return o.Payload
}

func (o *CreateInternationalStandingOrderConsentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBWriteInternationalStandingOrderConsentResponse7)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsBadRequest creates a CreateInternationalStandingOrderConsentsBadRequest with default headers values
func NewCreateInternationalStandingOrderConsentsBadRequest() *CreateInternationalStandingOrderConsentsBadRequest {
	return &CreateInternationalStandingOrderConsentsBadRequest{}
}

/*
CreateInternationalStandingOrderConsentsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateInternationalStandingOrderConsentsBadRequest struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this create international standing order consents bad request response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents bad request response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents bad request response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create international standing order consents bad request response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents bad request response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create international standing order consents bad request response
func (o *CreateInternationalStandingOrderConsentsBadRequest) Code() int {
	return 400
}

func (o *CreateInternationalStandingOrderConsentsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsBadRequest %s", 400, payload)
}

func (o *CreateInternationalStandingOrderConsentsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsBadRequest %s", 400, payload)
}

func (o *CreateInternationalStandingOrderConsentsBadRequest) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *CreateInternationalStandingOrderConsentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsUnauthorized creates a CreateInternationalStandingOrderConsentsUnauthorized with default headers values
func NewCreateInternationalStandingOrderConsentsUnauthorized() *CreateInternationalStandingOrderConsentsUnauthorized {
	return &CreateInternationalStandingOrderConsentsUnauthorized{}
}

/*
CreateInternationalStandingOrderConsentsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateInternationalStandingOrderConsentsUnauthorized struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this create international standing order consents unauthorized response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents unauthorized response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents unauthorized response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create international standing order consents unauthorized response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents unauthorized response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create international standing order consents unauthorized response
func (o *CreateInternationalStandingOrderConsentsUnauthorized) Code() int {
	return 401
}

func (o *CreateInternationalStandingOrderConsentsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsUnauthorized", 401)
}

func (o *CreateInternationalStandingOrderConsentsUnauthorized) String() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsUnauthorized", 401)
}

func (o *CreateInternationalStandingOrderConsentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsForbidden creates a CreateInternationalStandingOrderConsentsForbidden with default headers values
func NewCreateInternationalStandingOrderConsentsForbidden() *CreateInternationalStandingOrderConsentsForbidden {
	return &CreateInternationalStandingOrderConsentsForbidden{}
}

/*
CreateInternationalStandingOrderConsentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateInternationalStandingOrderConsentsForbidden struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this create international standing order consents forbidden response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents forbidden response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents forbidden response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create international standing order consents forbidden response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents forbidden response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create international standing order consents forbidden response
func (o *CreateInternationalStandingOrderConsentsForbidden) Code() int {
	return 403
}

func (o *CreateInternationalStandingOrderConsentsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsForbidden %s", 403, payload)
}

func (o *CreateInternationalStandingOrderConsentsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsForbidden %s", 403, payload)
}

func (o *CreateInternationalStandingOrderConsentsForbidden) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *CreateInternationalStandingOrderConsentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsNotFound creates a CreateInternationalStandingOrderConsentsNotFound with default headers values
func NewCreateInternationalStandingOrderConsentsNotFound() *CreateInternationalStandingOrderConsentsNotFound {
	return &CreateInternationalStandingOrderConsentsNotFound{}
}

/*
CreateInternationalStandingOrderConsentsNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateInternationalStandingOrderConsentsNotFound struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this create international standing order consents not found response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents not found response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents not found response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create international standing order consents not found response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents not found response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create international standing order consents not found response
func (o *CreateInternationalStandingOrderConsentsNotFound) Code() int {
	return 404
}

func (o *CreateInternationalStandingOrderConsentsNotFound) Error() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsNotFound", 404)
}

func (o *CreateInternationalStandingOrderConsentsNotFound) String() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsNotFound", 404)
}

func (o *CreateInternationalStandingOrderConsentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsMethodNotAllowed creates a CreateInternationalStandingOrderConsentsMethodNotAllowed with default headers values
func NewCreateInternationalStandingOrderConsentsMethodNotAllowed() *CreateInternationalStandingOrderConsentsMethodNotAllowed {
	return &CreateInternationalStandingOrderConsentsMethodNotAllowed{}
}

/*
CreateInternationalStandingOrderConsentsMethodNotAllowed describes a response with status code 405, with default header values.

Method Not Allowed
*/
type CreateInternationalStandingOrderConsentsMethodNotAllowed struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this create international standing order consents method not allowed response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents method not allowed response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents method not allowed response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create international standing order consents method not allowed response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents method not allowed response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create international standing order consents method not allowed response
func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) Code() int {
	return 405
}

func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsMethodNotAllowed", 405)
}

func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsMethodNotAllowed", 405)
}

func (o *CreateInternationalStandingOrderConsentsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsNotAcceptable creates a CreateInternationalStandingOrderConsentsNotAcceptable with default headers values
func NewCreateInternationalStandingOrderConsentsNotAcceptable() *CreateInternationalStandingOrderConsentsNotAcceptable {
	return &CreateInternationalStandingOrderConsentsNotAcceptable{}
}

/*
CreateInternationalStandingOrderConsentsNotAcceptable describes a response with status code 406, with default header values.

Not Acceptable
*/
type CreateInternationalStandingOrderConsentsNotAcceptable struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this create international standing order consents not acceptable response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents not acceptable response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents not acceptable response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this create international standing order consents not acceptable response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents not acceptable response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the create international standing order consents not acceptable response
func (o *CreateInternationalStandingOrderConsentsNotAcceptable) Code() int {
	return 406
}

func (o *CreateInternationalStandingOrderConsentsNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsNotAcceptable", 406)
}

func (o *CreateInternationalStandingOrderConsentsNotAcceptable) String() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsNotAcceptable", 406)
}

func (o *CreateInternationalStandingOrderConsentsNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsUnsupportedMediaType creates a CreateInternationalStandingOrderConsentsUnsupportedMediaType with default headers values
func NewCreateInternationalStandingOrderConsentsUnsupportedMediaType() *CreateInternationalStandingOrderConsentsUnsupportedMediaType {
	return &CreateInternationalStandingOrderConsentsUnsupportedMediaType{}
}

/*
CreateInternationalStandingOrderConsentsUnsupportedMediaType describes a response with status code 415, with default header values.

Unsupported Media Type
*/
type CreateInternationalStandingOrderConsentsUnsupportedMediaType struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this create international standing order consents unsupported media type response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents unsupported media type response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents unsupported media type response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create international standing order consents unsupported media type response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents unsupported media type response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the create international standing order consents unsupported media type response
func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) Code() int {
	return 415
}

func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsUnsupportedMediaType", 415)
}

func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsUnsupportedMediaType", 415)
}

func (o *CreateInternationalStandingOrderConsentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsTooManyRequests creates a CreateInternationalStandingOrderConsentsTooManyRequests with default headers values
func NewCreateInternationalStandingOrderConsentsTooManyRequests() *CreateInternationalStandingOrderConsentsTooManyRequests {
	return &CreateInternationalStandingOrderConsentsTooManyRequests{}
}

/*
CreateInternationalStandingOrderConsentsTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type CreateInternationalStandingOrderConsentsTooManyRequests struct {

	/* Number in seconds to wait
	 */
	RetryAfter int64

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string
}

// IsSuccess returns true when this create international standing order consents too many requests response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents too many requests response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents too many requests response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create international standing order consents too many requests response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create international standing order consents too many requests response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create international standing order consents too many requests response
func (o *CreateInternationalStandingOrderConsentsTooManyRequests) Code() int {
	return 429
}

func (o *CreateInternationalStandingOrderConsentsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsTooManyRequests", 429)
}

func (o *CreateInternationalStandingOrderConsentsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsTooManyRequests", 429)
}

func (o *CreateInternationalStandingOrderConsentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Retry-After
	hdrRetryAfter := response.GetHeader("Retry-After")

	if hdrRetryAfter != "" {
		valretryAfter, err := swag.ConvertInt64(hdrRetryAfter)
		if err != nil {
			return errors.InvalidType("Retry-After", "header", "int64", hdrRetryAfter)
		}
		o.RetryAfter = valretryAfter
	}

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	return nil
}

// NewCreateInternationalStandingOrderConsentsInternalServerError creates a CreateInternationalStandingOrderConsentsInternalServerError with default headers values
func NewCreateInternationalStandingOrderConsentsInternalServerError() *CreateInternationalStandingOrderConsentsInternalServerError {
	return &CreateInternationalStandingOrderConsentsInternalServerError{}
}

/*
CreateInternationalStandingOrderConsentsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CreateInternationalStandingOrderConsentsInternalServerError struct {

	/* An RFC4122 UID used as a correlation id.
	 */
	XFapiInteractionID string

	/* Header containing a detached JWS signature of the body of the payload.

	 */
	XJwsSignature string

	Payload *models.OBErrorResponse1
}

// IsSuccess returns true when this create international standing order consents internal server error response has a 2xx status code
func (o *CreateInternationalStandingOrderConsentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create international standing order consents internal server error response has a 3xx status code
func (o *CreateInternationalStandingOrderConsentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create international standing order consents internal server error response has a 4xx status code
func (o *CreateInternationalStandingOrderConsentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create international standing order consents internal server error response has a 5xx status code
func (o *CreateInternationalStandingOrderConsentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create international standing order consents internal server error response a status code equal to that given
func (o *CreateInternationalStandingOrderConsentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create international standing order consents internal server error response
func (o *CreateInternationalStandingOrderConsentsInternalServerError) Code() int {
	return 500
}

func (o *CreateInternationalStandingOrderConsentsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsInternalServerError %s", 500, payload)
}

func (o *CreateInternationalStandingOrderConsentsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /international-standing-order-consents][%d] createInternationalStandingOrderConsentsInternalServerError %s", 500, payload)
}

func (o *CreateInternationalStandingOrderConsentsInternalServerError) GetPayload() *models.OBErrorResponse1 {
	return o.Payload
}

func (o *CreateInternationalStandingOrderConsentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	// hydrates response header x-jws-signature
	hdrXJwsSignature := response.GetHeader("x-jws-signature")

	if hdrXJwsSignature != "" {
		o.XJwsSignature = hdrXJwsSignature
	}

	o.Payload = new(models.OBErrorResponse1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
