// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValidatorConfig Configuration of a policy validator
//
// Depending on the type of a policy different validators are available.
//
// swagger:model ValidatorConfig
type ValidatorConfig struct {

	// Configuration of the validator provided in the JSON format
	//
	// Validators configuration is an array of fields where each node consists of a comparator used,
	// validated field, and a value for comparison. Configuration can be also branched, which means
	// that it is possible to create conditional validators. It allows to define complex
	// authorization scenarios based on the results from other policy validators.
	Conf map[string]interface{} `json:"conf,omitempty"`

	// The name of your validator
	// Example: identity-context
	Name string `json:"name,omitempty"`

	// recovery
	Recovery []*RecoveryConfig `json:"recovery"`
}

// Validate validates this validator config
func (m *ValidatorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecovery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorConfig) validateRecovery(formats strfmt.Registry) error {
	if swag.IsZero(m.Recovery) { // not required
		return nil
	}

	for i := 0; i < len(m.Recovery); i++ {
		if swag.IsZero(m.Recovery[i]) { // not required
			continue
		}

		if m.Recovery[i] != nil {
			if err := m.Recovery[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recovery" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recovery" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this validator config based on the context it is used
func (m *ValidatorConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecovery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidatorConfig) contextValidateRecovery(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Recovery); i++ {

		if m.Recovery[i] != nil {

			if swag.IsZero(m.Recovery[i]) { // not required
				return nil
			}

			if err := m.Recovery[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recovery" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recovery" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidatorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidatorConfig) UnmarshalBinary(b []byte) error {
	var res ValidatorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
