// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InternalAuditEvent internal audit event
//
// swagger:model InternalAuditEvent
type InternalAuditEvent struct {

	// action
	// Enum: ["authenticated","challenged","authorized","unauthorized","created","updated","deleted","generated","requested","confirmed","accepted","rejected","revoked","notified","issued","denied","granted","attempted","failed","succeeded","sent","not_sent","executed","reset_requested","reset_completed","add_requested","add_completed"]
	Action string `json:"action,omitempty" yaml:"action,omitempty"`

	// event id
	EventID string `json:"event_id,omitempty" yaml:"event_id,omitempty"`

	// event payload
	EventPayload interface{} `json:"event_payload,omitempty" yaml:"event_payload,omitempty"`

	// event subject
	// Enum: ["request","gateway_request","gateway_policy","policy","client","credential","login","post_authn","recovery","consent","client_consents","customer_consents","authorization_code","access_token","saml_assertion","scopes","claims","otp","user","schema","pool","password","bruteforce","dcr","script","role","task","jit","tokens","service","server","import","organization","otp_inspect","totp","webauthn"]
	EventSubject string `json:"event_subject,omitempty" yaml:"event_subject,omitempty"`

	// event type
	EventType AuditEventType `json:"event_type,omitempty" yaml:"event_type,omitempty"`

	// metadata
	Metadata *AuditEventMetadata `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// server id
	ServerID string `json:"server_id,omitempty" yaml:"server_id,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty" yaml:"timestamp,omitempty"`
}

// Validate validates this internal audit event
func (m *InternalAuditEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var internalAuditEventTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authenticated","challenged","authorized","unauthorized","created","updated","deleted","generated","requested","confirmed","accepted","rejected","revoked","notified","issued","denied","granted","attempted","failed","succeeded","sent","not_sent","executed","reset_requested","reset_completed","add_requested","add_completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		internalAuditEventTypeActionPropEnum = append(internalAuditEventTypeActionPropEnum, v)
	}
}

const (

	// InternalAuditEventActionAuthenticated captures enum value "authenticated"
	InternalAuditEventActionAuthenticated string = "authenticated"

	// InternalAuditEventActionChallenged captures enum value "challenged"
	InternalAuditEventActionChallenged string = "challenged"

	// InternalAuditEventActionAuthorized captures enum value "authorized"
	InternalAuditEventActionAuthorized string = "authorized"

	// InternalAuditEventActionUnauthorized captures enum value "unauthorized"
	InternalAuditEventActionUnauthorized string = "unauthorized"

	// InternalAuditEventActionCreated captures enum value "created"
	InternalAuditEventActionCreated string = "created"

	// InternalAuditEventActionUpdated captures enum value "updated"
	InternalAuditEventActionUpdated string = "updated"

	// InternalAuditEventActionDeleted captures enum value "deleted"
	InternalAuditEventActionDeleted string = "deleted"

	// InternalAuditEventActionGenerated captures enum value "generated"
	InternalAuditEventActionGenerated string = "generated"

	// InternalAuditEventActionRequested captures enum value "requested"
	InternalAuditEventActionRequested string = "requested"

	// InternalAuditEventActionConfirmed captures enum value "confirmed"
	InternalAuditEventActionConfirmed string = "confirmed"

	// InternalAuditEventActionAccepted captures enum value "accepted"
	InternalAuditEventActionAccepted string = "accepted"

	// InternalAuditEventActionRejected captures enum value "rejected"
	InternalAuditEventActionRejected string = "rejected"

	// InternalAuditEventActionRevoked captures enum value "revoked"
	InternalAuditEventActionRevoked string = "revoked"

	// InternalAuditEventActionNotified captures enum value "notified"
	InternalAuditEventActionNotified string = "notified"

	// InternalAuditEventActionIssued captures enum value "issued"
	InternalAuditEventActionIssued string = "issued"

	// InternalAuditEventActionDenied captures enum value "denied"
	InternalAuditEventActionDenied string = "denied"

	// InternalAuditEventActionGranted captures enum value "granted"
	InternalAuditEventActionGranted string = "granted"

	// InternalAuditEventActionAttempted captures enum value "attempted"
	InternalAuditEventActionAttempted string = "attempted"

	// InternalAuditEventActionFailed captures enum value "failed"
	InternalAuditEventActionFailed string = "failed"

	// InternalAuditEventActionSucceeded captures enum value "succeeded"
	InternalAuditEventActionSucceeded string = "succeeded"

	// InternalAuditEventActionSent captures enum value "sent"
	InternalAuditEventActionSent string = "sent"

	// InternalAuditEventActionNotSent captures enum value "not_sent"
	InternalAuditEventActionNotSent string = "not_sent"

	// InternalAuditEventActionExecuted captures enum value "executed"
	InternalAuditEventActionExecuted string = "executed"

	// InternalAuditEventActionResetRequested captures enum value "reset_requested"
	InternalAuditEventActionResetRequested string = "reset_requested"

	// InternalAuditEventActionResetCompleted captures enum value "reset_completed"
	InternalAuditEventActionResetCompleted string = "reset_completed"

	// InternalAuditEventActionAddRequested captures enum value "add_requested"
	InternalAuditEventActionAddRequested string = "add_requested"

	// InternalAuditEventActionAddCompleted captures enum value "add_completed"
	InternalAuditEventActionAddCompleted string = "add_completed"
)

// prop value enum
func (m *InternalAuditEvent) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, internalAuditEventTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InternalAuditEvent) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var internalAuditEventTypeEventSubjectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["request","gateway_request","gateway_policy","policy","client","credential","login","post_authn","recovery","consent","client_consents","customer_consents","authorization_code","access_token","saml_assertion","scopes","claims","otp","user","schema","pool","password","bruteforce","dcr","script","role","task","jit","tokens","service","server","import","organization","otp_inspect","totp","webauthn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		internalAuditEventTypeEventSubjectPropEnum = append(internalAuditEventTypeEventSubjectPropEnum, v)
	}
}

const (

	// InternalAuditEventEventSubjectRequest captures enum value "request"
	InternalAuditEventEventSubjectRequest string = "request"

	// InternalAuditEventEventSubjectGatewayRequest captures enum value "gateway_request"
	InternalAuditEventEventSubjectGatewayRequest string = "gateway_request"

	// InternalAuditEventEventSubjectGatewayPolicy captures enum value "gateway_policy"
	InternalAuditEventEventSubjectGatewayPolicy string = "gateway_policy"

	// InternalAuditEventEventSubjectPolicy captures enum value "policy"
	InternalAuditEventEventSubjectPolicy string = "policy"

	// InternalAuditEventEventSubjectClient captures enum value "client"
	InternalAuditEventEventSubjectClient string = "client"

	// InternalAuditEventEventSubjectCredential captures enum value "credential"
	InternalAuditEventEventSubjectCredential string = "credential"

	// InternalAuditEventEventSubjectLogin captures enum value "login"
	InternalAuditEventEventSubjectLogin string = "login"

	// InternalAuditEventEventSubjectPostAuthn captures enum value "post_authn"
	InternalAuditEventEventSubjectPostAuthn string = "post_authn"

	// InternalAuditEventEventSubjectRecovery captures enum value "recovery"
	InternalAuditEventEventSubjectRecovery string = "recovery"

	// InternalAuditEventEventSubjectConsent captures enum value "consent"
	InternalAuditEventEventSubjectConsent string = "consent"

	// InternalAuditEventEventSubjectClientConsents captures enum value "client_consents"
	InternalAuditEventEventSubjectClientConsents string = "client_consents"

	// InternalAuditEventEventSubjectCustomerConsents captures enum value "customer_consents"
	InternalAuditEventEventSubjectCustomerConsents string = "customer_consents"

	// InternalAuditEventEventSubjectAuthorizationCode captures enum value "authorization_code"
	InternalAuditEventEventSubjectAuthorizationCode string = "authorization_code"

	// InternalAuditEventEventSubjectAccessToken captures enum value "access_token"
	InternalAuditEventEventSubjectAccessToken string = "access_token"

	// InternalAuditEventEventSubjectSamlAssertion captures enum value "saml_assertion"
	InternalAuditEventEventSubjectSamlAssertion string = "saml_assertion"

	// InternalAuditEventEventSubjectScopes captures enum value "scopes"
	InternalAuditEventEventSubjectScopes string = "scopes"

	// InternalAuditEventEventSubjectClaims captures enum value "claims"
	InternalAuditEventEventSubjectClaims string = "claims"

	// InternalAuditEventEventSubjectOtp captures enum value "otp"
	InternalAuditEventEventSubjectOtp string = "otp"

	// InternalAuditEventEventSubjectUser captures enum value "user"
	InternalAuditEventEventSubjectUser string = "user"

	// InternalAuditEventEventSubjectSchema captures enum value "schema"
	InternalAuditEventEventSubjectSchema string = "schema"

	// InternalAuditEventEventSubjectPool captures enum value "pool"
	InternalAuditEventEventSubjectPool string = "pool"

	// InternalAuditEventEventSubjectPassword captures enum value "password"
	InternalAuditEventEventSubjectPassword string = "password"

	// InternalAuditEventEventSubjectBruteforce captures enum value "bruteforce"
	InternalAuditEventEventSubjectBruteforce string = "bruteforce"

	// InternalAuditEventEventSubjectDcr captures enum value "dcr"
	InternalAuditEventEventSubjectDcr string = "dcr"

	// InternalAuditEventEventSubjectScript captures enum value "script"
	InternalAuditEventEventSubjectScript string = "script"

	// InternalAuditEventEventSubjectRole captures enum value "role"
	InternalAuditEventEventSubjectRole string = "role"

	// InternalAuditEventEventSubjectTask captures enum value "task"
	InternalAuditEventEventSubjectTask string = "task"

	// InternalAuditEventEventSubjectJit captures enum value "jit"
	InternalAuditEventEventSubjectJit string = "jit"

	// InternalAuditEventEventSubjectTokens captures enum value "tokens"
	InternalAuditEventEventSubjectTokens string = "tokens"

	// InternalAuditEventEventSubjectService captures enum value "service"
	InternalAuditEventEventSubjectService string = "service"

	// InternalAuditEventEventSubjectServer captures enum value "server"
	InternalAuditEventEventSubjectServer string = "server"

	// InternalAuditEventEventSubjectImport captures enum value "import"
	InternalAuditEventEventSubjectImport string = "import"

	// InternalAuditEventEventSubjectOrganization captures enum value "organization"
	InternalAuditEventEventSubjectOrganization string = "organization"

	// InternalAuditEventEventSubjectOtpInspect captures enum value "otp_inspect"
	InternalAuditEventEventSubjectOtpInspect string = "otp_inspect"

	// InternalAuditEventEventSubjectTotp captures enum value "totp"
	InternalAuditEventEventSubjectTotp string = "totp"

	// InternalAuditEventEventSubjectWebauthn captures enum value "webauthn"
	InternalAuditEventEventSubjectWebauthn string = "webauthn"
)

// prop value enum
func (m *InternalAuditEvent) validateEventSubjectEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, internalAuditEventTypeEventSubjectPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InternalAuditEvent) validateEventSubject(formats strfmt.Registry) error {
	if swag.IsZero(m.EventSubject) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventSubjectEnum("event_subject", "body", m.EventSubject); err != nil {
		return err
	}

	return nil
}

func (m *InternalAuditEvent) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := m.EventType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("event_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("event_type")
		}
		return err
	}

	return nil
}

func (m *InternalAuditEvent) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *InternalAuditEvent) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this internal audit event based on the context it is used
func (m *InternalAuditEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalAuditEvent) contextValidateEventType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := m.EventType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("event_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("event_type")
		}
		return err
	}

	return nil
}

func (m *InternalAuditEvent) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InternalAuditEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InternalAuditEvent) UnmarshalBinary(b []byte) error {
	var res InternalAuditEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
