// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SSOConfiguration s s o configuration
//
// swagger:model SSOConfiguration
type SSOConfiguration struct {

	// Domain for the SSO cookie
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty"`

	// If enabled, single-sign-on (SSO) is active for all IDPs in this workspace.
	// Example: false
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`

	// loa threshold
	LoaThreshold RiskLOA `json:"loa_threshold,omitempty" yaml:"loa_threshold,omitempty"`

	// Additional domains permitted in the logout redirect_to parameter
	LogoutRedirectDomains []string `json:"logout_redirect_domains" yaml:"logout_redirect_domains"`

	// Active TTL - Active SSO sessions expire after MaxAge nanoseconds.
	// Format: duration
	MaxAge strfmt.Duration `json:"max_age,omitempty" yaml:"max_age,omitempty"`

	// Idle TTL - Idle SSO sessions expire after MaxIdle nanoseconds.
	// Format: duration
	MaxIdle strfmt.Duration `json:"max_idle,omitempty" yaml:"max_idle,omitempty"`

	// Admin-configured target URL after logout, if redirect_to omitted or invalid
	PostLogoutURL string `json:"post_logout_url,omitempty" yaml:"post_logout_url,omitempty"`
}

// Validate validates this s s o configuration
func (m *SSOConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoaThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxIdle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SSOConfiguration) validateLoaThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.LoaThreshold) { // not required
		return nil
	}

	if err := m.LoaThreshold.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loa_threshold")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loa_threshold")
		}
		return err
	}

	return nil
}

func (m *SSOConfiguration) validateMaxAge(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxAge) { // not required
		return nil
	}

	if err := validate.FormatOf("max_age", "body", "duration", m.MaxAge.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SSOConfiguration) validateMaxIdle(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxIdle) { // not required
		return nil
	}

	if err := validate.FormatOf("max_idle", "body", "duration", m.MaxIdle.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this s s o configuration based on the context it is used
func (m *SSOConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoaThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SSOConfiguration) contextValidateLoaThreshold(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.LoaThreshold) { // not required
		return nil
	}

	if err := m.LoaThreshold.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loa_threshold")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loa_threshold")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SSOConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SSOConfiguration) UnmarshalBinary(b []byte) error {
	var res SSOConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
