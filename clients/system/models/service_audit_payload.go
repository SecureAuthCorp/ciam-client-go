// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceAuditPayload service audit payload
//
// swagger:model ServiceAuditPayload
type ServiceAuditPayload struct {

	// Custom service audience
	// Example: https://api.example.com
	CustomAudience string `json:"custom_audience,omitempty" yaml:"custom_audience,omitempty"`

	// Service description
	// Example: Service description
	Description string `json:"description,omitempty" yaml:"description,omitempty"`

	// Gateway identifier
	// Example: gateway-1
	GatewayID string `json:"gateway_id,omitempty" yaml:"gateway_id,omitempty"`

	// A unique identifier of a service
	// Example: service-1
	ID string `json:"id,omitempty" yaml:"id,omitempty"`

	// Service name
	// Example: My service
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// `true` when the service is a system service
	// Example: false
	System bool `json:"system,omitempty" yaml:"system,omitempty"`

	// Service type
	// Enum: ["oauth2","oidc","system","user","openbanking"]
	Type string `json:"type,omitempty" yaml:"type,omitempty"`

	// The date of service update
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty" yaml:"updated_at,omitempty"`

	// `true` when the service has the OpenAPI 3.0 specification
	WithSpecification bool `json:"with_specification,omitempty" yaml:"with_specification,omitempty"`
}

// Validate validates this service audit payload
func (m *ServiceAuditPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serviceAuditPayloadTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oauth2","oidc","system","user","openbanking"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceAuditPayloadTypeTypePropEnum = append(serviceAuditPayloadTypeTypePropEnum, v)
	}
}

const (

	// ServiceAuditPayloadTypeOauth2 captures enum value "oauth2"
	ServiceAuditPayloadTypeOauth2 string = "oauth2"

	// ServiceAuditPayloadTypeOidc captures enum value "oidc"
	ServiceAuditPayloadTypeOidc string = "oidc"

	// ServiceAuditPayloadTypeSystem captures enum value "system"
	ServiceAuditPayloadTypeSystem string = "system"

	// ServiceAuditPayloadTypeUser captures enum value "user"
	ServiceAuditPayloadTypeUser string = "user"

	// ServiceAuditPayloadTypeOpenbanking captures enum value "openbanking"
	ServiceAuditPayloadTypeOpenbanking string = "openbanking"
)

// prop value enum
func (m *ServiceAuditPayload) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceAuditPayloadTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceAuditPayload) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAuditPayload) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service audit payload based on context it is used
func (m *ServiceAuditPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceAuditPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceAuditPayload) UnmarshalBinary(b []byte) error {
	var res ServiceAuditPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
