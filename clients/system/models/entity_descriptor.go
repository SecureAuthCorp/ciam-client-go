// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EntityDescriptor EntityDescriptor represents the SAML EntityDescriptor object.
//
// See http://docs.oasis-open.org/security/saml/v2.0/saml-metadata-2.0-os.pdf ยง2.3.2
//
// swagger:model EntityDescriptor
type EntityDescriptor struct {

	// additional metadata locations
	AdditionalMetadataLocations []string `json:"AdditionalMetadataLocations" yaml:"AdditionalMetadataLocations"`

	// affiliation descriptor
	AffiliationDescriptor *AffiliationDescriptor `json:"AffiliationDescriptor,omitempty" yaml:"AffiliationDescriptor,omitempty"`

	// attribute authority descriptors
	AttributeAuthorityDescriptors []*AttributeAuthorityDescriptor `json:"AttributeAuthorityDescriptors" yaml:"AttributeAuthorityDescriptors"`

	// authn authority descriptors
	AuthnAuthorityDescriptors []*AuthnAuthorityDescriptor `json:"AuthnAuthorityDescriptors" yaml:"AuthnAuthorityDescriptors"`

	// cache duration
	CacheDuration Duration `json:"CacheDuration,omitempty" yaml:"CacheDuration,omitempty"`

	// contact person
	ContactPerson *ContactPerson `json:"ContactPerson,omitempty" yaml:"ContactPerson,omitempty"`

	// entity ID
	EntityID string `json:"EntityID,omitempty" yaml:"EntityID,omitempty"`

	// ID
	ID string `json:"ID,omitempty" yaml:"ID,omitempty"`

	// ID p s s o descriptors
	IDPSSODescriptors []*IDPSSODescriptor `json:"IDPSSODescriptors" yaml:"IDPSSODescriptors"`

	// organization
	Organization *Organization `json:"Organization,omitempty" yaml:"Organization,omitempty"`

	// p d p descriptors
	PDPDescriptors []*PDPDescriptor `json:"PDPDescriptors" yaml:"PDPDescriptors"`

	// role descriptors
	RoleDescriptors []*RoleDescriptor `json:"RoleDescriptors" yaml:"RoleDescriptors"`

	// s p s s o descriptors
	SPSSODescriptors []*SPSSODescriptor `json:"SPSSODescriptors" yaml:"SPSSODescriptors"`

	// signature
	Signature *Element `json:"Signature,omitempty" yaml:"Signature,omitempty"`

	// valid until
	// Format: date-time
	ValidUntil strfmt.DateTime `json:"ValidUntil,omitempty" yaml:"ValidUntil,omitempty"`

	// XML name
	XMLName *Name `json:"XMLName,omitempty" yaml:"XMLName,omitempty"`
}

// Validate validates this entity descriptor
func (m *EntityDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliationDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributeAuthorityDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthnAuthorityDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCacheDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactPerson(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDPSSODescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePDPDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleDescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSPSSODescriptors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateXMLName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityDescriptor) validateAffiliationDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(m.AffiliationDescriptor) { // not required
		return nil
	}

	if m.AffiliationDescriptor != nil {
		if err := m.AffiliationDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AffiliationDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AffiliationDescriptor")
			}
			return err
		}
	}

	return nil
}

func (m *EntityDescriptor) validateAttributeAuthorityDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeAuthorityDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.AttributeAuthorityDescriptors); i++ {
		if swag.IsZero(m.AttributeAuthorityDescriptors[i]) { // not required
			continue
		}

		if m.AttributeAuthorityDescriptors[i] != nil {
			if err := m.AttributeAuthorityDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AttributeAuthorityDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AttributeAuthorityDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) validateAuthnAuthorityDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthnAuthorityDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthnAuthorityDescriptors); i++ {
		if swag.IsZero(m.AuthnAuthorityDescriptors[i]) { // not required
			continue
		}

		if m.AuthnAuthorityDescriptors[i] != nil {
			if err := m.AuthnAuthorityDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AuthnAuthorityDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AuthnAuthorityDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) validateCacheDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.CacheDuration) { // not required
		return nil
	}

	if err := m.CacheDuration.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CacheDuration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("CacheDuration")
		}
		return err
	}

	return nil
}

func (m *EntityDescriptor) validateContactPerson(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactPerson) { // not required
		return nil
	}

	if m.ContactPerson != nil {
		if err := m.ContactPerson.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactPerson")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContactPerson")
			}
			return err
		}
	}

	return nil
}

func (m *EntityDescriptor) validateIDPSSODescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.IDPSSODescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.IDPSSODescriptors); i++ {
		if swag.IsZero(m.IDPSSODescriptors[i]) { // not required
			continue
		}

		if m.IDPSSODescriptors[i] != nil {
			if err := m.IDPSSODescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("IDPSSODescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("IDPSSODescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *EntityDescriptor) validatePDPDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.PDPDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.PDPDescriptors); i++ {
		if swag.IsZero(m.PDPDescriptors[i]) { // not required
			continue
		}

		if m.PDPDescriptors[i] != nil {
			if err := m.PDPDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PDPDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PDPDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) validateRoleDescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleDescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.RoleDescriptors); i++ {
		if swag.IsZero(m.RoleDescriptors[i]) { // not required
			continue
		}

		if m.RoleDescriptors[i] != nil {
			if err := m.RoleDescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RoleDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RoleDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) validateSPSSODescriptors(formats strfmt.Registry) error {
	if swag.IsZero(m.SPSSODescriptors) { // not required
		return nil
	}

	for i := 0; i < len(m.SPSSODescriptors); i++ {
		if swag.IsZero(m.SPSSODescriptors[i]) { // not required
			continue
		}

		if m.SPSSODescriptors[i] != nil {
			if err := m.SPSSODescriptors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SPSSODescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SPSSODescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	if m.Signature != nil {
		if err := m.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Signature")
			}
			return err
		}
	}

	return nil
}

func (m *EntityDescriptor) validateValidUntil(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("ValidUntil", "body", "date-time", m.ValidUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EntityDescriptor) validateXMLName(formats strfmt.Registry) error {
	if swag.IsZero(m.XMLName) { // not required
		return nil
	}

	if m.XMLName != nil {
		if err := m.XMLName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("XMLName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("XMLName")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this entity descriptor based on the context it is used
func (m *EntityDescriptor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliationDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttributeAuthorityDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthnAuthorityDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCacheDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContactPerson(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIDPSSODescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePDPDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleDescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSPSSODescriptors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXMLName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EntityDescriptor) contextValidateAffiliationDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.AffiliationDescriptor != nil {

		if swag.IsZero(m.AffiliationDescriptor) { // not required
			return nil
		}

		if err := m.AffiliationDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AffiliationDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AffiliationDescriptor")
			}
			return err
		}
	}

	return nil
}

func (m *EntityDescriptor) contextValidateAttributeAuthorityDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttributeAuthorityDescriptors); i++ {

		if m.AttributeAuthorityDescriptors[i] != nil {

			if swag.IsZero(m.AttributeAuthorityDescriptors[i]) { // not required
				return nil
			}

			if err := m.AttributeAuthorityDescriptors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AttributeAuthorityDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AttributeAuthorityDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) contextValidateAuthnAuthorityDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuthnAuthorityDescriptors); i++ {

		if m.AuthnAuthorityDescriptors[i] != nil {

			if swag.IsZero(m.AuthnAuthorityDescriptors[i]) { // not required
				return nil
			}

			if err := m.AuthnAuthorityDescriptors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("AuthnAuthorityDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("AuthnAuthorityDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) contextValidateCacheDuration(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.CacheDuration) { // not required
		return nil
	}

	if err := m.CacheDuration.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CacheDuration")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("CacheDuration")
		}
		return err
	}

	return nil
}

func (m *EntityDescriptor) contextValidateContactPerson(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactPerson != nil {

		if swag.IsZero(m.ContactPerson) { // not required
			return nil
		}

		if err := m.ContactPerson.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactPerson")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ContactPerson")
			}
			return err
		}
	}

	return nil
}

func (m *EntityDescriptor) contextValidateIDPSSODescriptors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IDPSSODescriptors); i++ {

		if m.IDPSSODescriptors[i] != nil {

			if swag.IsZero(m.IDPSSODescriptors[i]) { // not required
				return nil
			}

			if err := m.IDPSSODescriptors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("IDPSSODescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("IDPSSODescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {

		if swag.IsZero(m.Organization) { // not required
			return nil
		}

		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *EntityDescriptor) contextValidatePDPDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PDPDescriptors); i++ {

		if m.PDPDescriptors[i] != nil {

			if swag.IsZero(m.PDPDescriptors[i]) { // not required
				return nil
			}

			if err := m.PDPDescriptors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PDPDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("PDPDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) contextValidateRoleDescriptors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RoleDescriptors); i++ {

		if m.RoleDescriptors[i] != nil {

			if swag.IsZero(m.RoleDescriptors[i]) { // not required
				return nil
			}

			if err := m.RoleDescriptors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RoleDescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RoleDescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) contextValidateSPSSODescriptors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SPSSODescriptors); i++ {

		if m.SPSSODescriptors[i] != nil {

			if swag.IsZero(m.SPSSODescriptors[i]) { // not required
				return nil
			}

			if err := m.SPSSODescriptors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SPSSODescriptors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("SPSSODescriptors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EntityDescriptor) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if m.Signature != nil {

		if swag.IsZero(m.Signature) { // not required
			return nil
		}

		if err := m.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Signature")
			}
			return err
		}
	}

	return nil
}

func (m *EntityDescriptor) contextValidateXMLName(ctx context.Context, formats strfmt.Registry) error {

	if m.XMLName != nil {

		if swag.IsZero(m.XMLName) { // not required
			return nil
		}

		if err := m.XMLName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("XMLName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("XMLName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EntityDescriptor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EntityDescriptor) UnmarshalBinary(b []byte) error {
	var res EntityDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
