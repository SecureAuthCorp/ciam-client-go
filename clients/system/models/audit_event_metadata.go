// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditEventMetadata audit event metadata
//
// swagger:model AuditEventMetadata
type AuditEventMetadata struct {

	// Access request actor claims.
	//
	// It's only populated if the token has been issued in token exchange delegation flow.
	ActorClaims map[string]interface{} `json:"actor_claims,omitempty"`

	// Access request client ID related to an audit event.
	//
	// May be empty when the access is incorrect or missing.
	ClientID string `json:"client_id,omitempty"`

	// Audit event IP address.
	//
	// It's first not empty value from: X-Forwaded-For, X-Real-IP or network socket IP address
	IP string `json:"ip,omitempty"`

	// Access request may act claims.
	//
	// It's only populated if the token has been issued token with may_act claim.
	MayActClaims map[string]interface{} `json:"may_act_claims,omitempty"`

	// Session id
	//
	// Correlation ID in a login process. Returns events related to a particular login process.
	// It's empty for audit events that have been created outside login process.
	SessionID string `json:"session_id,omitempty"`

	// Access request subject ID related to a given audit event.
	//
	// May be empty when the access is incorrect or missing.
	Subject string `json:"subject,omitempty"`

	// Token signature
	//
	// Signature of a token that was used to perform an action that has published an audit event.
	TokenSignature string `json:"token_signature,omitempty"`

	// Trace ID
	TraceID string `json:"trace_id,omitempty"`

	// User-agent that describes a device name that generated the audit event.
	UserAgent string `json:"user_agent,omitempty"`
}

// Validate validates this audit event metadata
func (m *AuditEventMetadata) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this audit event metadata based on context it is used
func (m *AuditEventMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AuditEventMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditEventMetadata) UnmarshalBinary(b []byte) error {
	var res AuditEventMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
