// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArculixSettings arculix settings
//
// swagger:model ArculixSettings
type ArculixSettings struct {

	// URL to the DBFP script.
	// Example: https://dbfp.acceptto.com/bfp.js
	// Required: true
	DbfpURL string `json:"dbfp_url" yaml:"dbfp_url"`

	// URL to the Faye server.
	// Example: https://faye.acceptto.net
	// Required: true
	FayeURL string `json:"faye_url" yaml:"faye_url"`

	// URL to the OIDC server's token endpoint.
	// Example: https://oidc.acceptto.net/ce-poc/oauth2/v1/token
	// Required: true
	TokenEndpoint string `json:"token_endpoint" yaml:"token_endpoint"`

	// URL to the Arculix server.
	// Example: https://m2m.acceptto.net
	// Required: true
	URL string `json:"url" yaml:"url"`
}

// Validate validates this arculix settings
func (m *ArculixSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbfpURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFayeURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArculixSettings) validateDbfpURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("dbfp_url", "body", m.DbfpURL); err != nil {
		return err
	}

	return nil
}

func (m *ArculixSettings) validateFayeURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("faye_url", "body", m.FayeURL); err != nil {
		return err
	}

	return nil
}

func (m *ArculixSettings) validateTokenEndpoint(formats strfmt.Registry) error {

	if err := validate.RequiredString("token_endpoint", "body", m.TokenEndpoint); err != nil {
		return err
	}

	return nil
}

func (m *ArculixSettings) validateURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this arculix settings based on context it is used
func (m *ArculixSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArculixSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArculixSettings) UnmarshalBinary(b []byte) error {
	var res ArculixSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
