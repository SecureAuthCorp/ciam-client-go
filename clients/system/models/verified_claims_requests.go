// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VerifiedClaimsRequests verified claims requests
//
// swagger:model VerifiedClaimsRequests
type VerifiedClaimsRequests struct {

	// id token
	IDToken *RequestedVerifiedClaims `json:"id_token,omitempty" yaml:"id_token,omitempty"`

	// userinfo
	Userinfo *RequestedVerifiedClaims `json:"userinfo,omitempty" yaml:"userinfo,omitempty"`
}

// Validate validates this verified claims requests
func (m *VerifiedClaimsRequests) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIDToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserinfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VerifiedClaimsRequests) validateIDToken(formats strfmt.Registry) error {
	if swag.IsZero(m.IDToken) { // not required
		return nil
	}

	if m.IDToken != nil {
		if err := m.IDToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id_token")
			}
			return err
		}
	}

	return nil
}

func (m *VerifiedClaimsRequests) validateUserinfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Userinfo) { // not required
		return nil
	}

	if m.Userinfo != nil {
		if err := m.Userinfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userinfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userinfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this verified claims requests based on the context it is used
func (m *VerifiedClaimsRequests) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIDToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserinfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VerifiedClaimsRequests) contextValidateIDToken(ctx context.Context, formats strfmt.Registry) error {

	if m.IDToken != nil {

		if swag.IsZero(m.IDToken) { // not required
			return nil
		}

		if err := m.IDToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("id_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("id_token")
			}
			return err
		}
	}

	return nil
}

func (m *VerifiedClaimsRequests) contextValidateUserinfo(ctx context.Context, formats strfmt.Registry) error {

	if m.Userinfo != nil {

		if swag.IsZero(m.Userinfo) { // not required
			return nil
		}

		if err := m.Userinfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userinfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("userinfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VerifiedClaimsRequests) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VerifiedClaimsRequests) UnmarshalBinary(b []byte) error {
	var res VerifiedClaimsRequests
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
