// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/system/models"
)

// GatewayExchangeReader is a Reader for the GatewayExchange structure.
type GatewayExchangeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GatewayExchangeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGatewayExchangeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGatewayExchangeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGatewayExchangeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGatewayExchangeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGatewayExchangeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGatewayExchangeOK creates a GatewayExchangeOK with default headers values
func NewGatewayExchangeOK() *GatewayExchangeOK {
	return &GatewayExchangeOK{}
}

/* GatewayExchangeOK describes a response with status code 200, with default header values.

Gateway Exchange response
*/
type GatewayExchangeOK struct {
	Payload *models.GatewayExchangeResponse
}

func (o *GatewayExchangeOK) Error() string {
	return fmt.Sprintf("[POST /gateways/exchange][%d] gatewayExchangeOK  %+v", 200, o.Payload)
}
func (o *GatewayExchangeOK) GetPayload() *models.GatewayExchangeResponse {
	return o.Payload
}

func (o *GatewayExchangeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GatewayExchangeResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGatewayExchangeBadRequest creates a GatewayExchangeBadRequest with default headers values
func NewGatewayExchangeBadRequest() *GatewayExchangeBadRequest {
	return &GatewayExchangeBadRequest{}
}

/* GatewayExchangeBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type GatewayExchangeBadRequest struct {
	Payload *models.Error
}

func (o *GatewayExchangeBadRequest) Error() string {
	return fmt.Sprintf("[POST /gateways/exchange][%d] gatewayExchangeBadRequest  %+v", 400, o.Payload)
}
func (o *GatewayExchangeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GatewayExchangeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGatewayExchangeUnauthorized creates a GatewayExchangeUnauthorized with default headers values
func NewGatewayExchangeUnauthorized() *GatewayExchangeUnauthorized {
	return &GatewayExchangeUnauthorized{}
}

/* GatewayExchangeUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type GatewayExchangeUnauthorized struct {
	Payload *models.Error
}

func (o *GatewayExchangeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /gateways/exchange][%d] gatewayExchangeUnauthorized  %+v", 401, o.Payload)
}
func (o *GatewayExchangeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GatewayExchangeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGatewayExchangeForbidden creates a GatewayExchangeForbidden with default headers values
func NewGatewayExchangeForbidden() *GatewayExchangeForbidden {
	return &GatewayExchangeForbidden{}
}

/* GatewayExchangeForbidden describes a response with status code 403, with default header values.

HttpError
*/
type GatewayExchangeForbidden struct {
	Payload *models.Error
}

func (o *GatewayExchangeForbidden) Error() string {
	return fmt.Sprintf("[POST /gateways/exchange][%d] gatewayExchangeForbidden  %+v", 403, o.Payload)
}
func (o *GatewayExchangeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GatewayExchangeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGatewayExchangeUnprocessableEntity creates a GatewayExchangeUnprocessableEntity with default headers values
func NewGatewayExchangeUnprocessableEntity() *GatewayExchangeUnprocessableEntity {
	return &GatewayExchangeUnprocessableEntity{}
}

/* GatewayExchangeUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type GatewayExchangeUnprocessableEntity struct {
	Payload *models.Error
}

func (o *GatewayExchangeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /gateways/exchange][%d] gatewayExchangeUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *GatewayExchangeUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GatewayExchangeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
