// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListUserConsentsByActionSystemParams creates a new ListUserConsentsByActionSystemParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListUserConsentsByActionSystemParams() *ListUserConsentsByActionSystemParams {
	return &ListUserConsentsByActionSystemParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListUserConsentsByActionSystemParamsWithTimeout creates a new ListUserConsentsByActionSystemParams object
// with the ability to set a timeout on a request.
func NewListUserConsentsByActionSystemParamsWithTimeout(timeout time.Duration) *ListUserConsentsByActionSystemParams {
	return &ListUserConsentsByActionSystemParams{
		timeout: timeout,
	}
}

// NewListUserConsentsByActionSystemParamsWithContext creates a new ListUserConsentsByActionSystemParams object
// with the ability to set a context for a request.
func NewListUserConsentsByActionSystemParamsWithContext(ctx context.Context) *ListUserConsentsByActionSystemParams {
	return &ListUserConsentsByActionSystemParams{
		Context: ctx,
	}
}

// NewListUserConsentsByActionSystemParamsWithHTTPClient creates a new ListUserConsentsByActionSystemParams object
// with the ability to set a custom HTTPClient for a request.
func NewListUserConsentsByActionSystemParamsWithHTTPClient(client *http.Client) *ListUserConsentsByActionSystemParams {
	return &ListUserConsentsByActionSystemParams{
		HTTPClient: client,
	}
}

/* ListUserConsentsByActionSystemParams contains all the parameters to send to the API endpoint
   for the list user consents by action system operation.

   Typically these are written to a http.Request.
*/
type ListUserConsentsByActionSystemParams struct {

	/* Action.

	   Consent action id

	   Default: "default"
	*/
	Action string

	/* XSubject.

	   user identifier
	*/
	XSubject *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list user consents by action system params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListUserConsentsByActionSystemParams) WithDefaults() *ListUserConsentsByActionSystemParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list user consents by action system params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListUserConsentsByActionSystemParams) SetDefaults() {
	var (
		actionDefault = string("default")
	)

	val := ListUserConsentsByActionSystemParams{
		Action: actionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithTimeout(timeout time.Duration) *ListUserConsentsByActionSystemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithContext(ctx context.Context) *ListUserConsentsByActionSystemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithHTTPClient(client *http.Client) *ListUserConsentsByActionSystemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithAction(action string) *ListUserConsentsByActionSystemParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetAction(action string) {
	o.Action = action
}

// WithXSubject adds the xSubject to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) WithXSubject(xSubject *string) *ListUserConsentsByActionSystemParams {
	o.SetXSubject(xSubject)
	return o
}

// SetXSubject adds the xSubject to the list user consents by action system params
func (o *ListUserConsentsByActionSystemParams) SetXSubject(xSubject *string) {
	o.XSubject = xSubject
}

// WriteToRequest writes these params to a swagger request
func (o *ListUserConsentsByActionSystemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param action
	if err := r.SetPathParam("action", o.Action); err != nil {
		return err
	}

	if o.XSubject != nil {

		// header param x-subject
		if err := r.SetHeaderParam("x-subject", *o.XSubject); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
