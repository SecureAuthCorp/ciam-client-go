// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/system/models"
)

// UpdateSecretReader is a Reader for the UpdateSecret structure.
type UpdateSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateSecretCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSecretUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateSecretUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateSecretTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /servers/{wid}/secrets/{sid}] updateSecret", response, response.Code())
	}
}

// NewUpdateSecretCreated creates a UpdateSecretCreated with default headers values
func NewUpdateSecretCreated() *UpdateSecretCreated {
	return &UpdateSecretCreated{}
}

/*
UpdateSecretCreated describes a response with status code 201, with default header values.

Secret
*/
type UpdateSecretCreated struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Secret
}

// IsSuccess returns true when this update secret created response has a 2xx status code
func (o *UpdateSecretCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update secret created response has a 3xx status code
func (o *UpdateSecretCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret created response has a 4xx status code
func (o *UpdateSecretCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update secret created response has a 5xx status code
func (o *UpdateSecretCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret created response a status code equal to that given
func (o *UpdateSecretCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update secret created response
func (o *UpdateSecretCreated) Code() int {
	return 201
}

func (o *UpdateSecretCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretCreated %s", 201, payload)
}

func (o *UpdateSecretCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretCreated %s", 201, payload)
}

func (o *UpdateSecretCreated) GetPayload() *models.Secret {
	return o.Payload
}

func (o *UpdateSecretCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Secret)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretBadRequest creates a UpdateSecretBadRequest with default headers values
func NewUpdateSecretBadRequest() *UpdateSecretBadRequest {
	return &UpdateSecretBadRequest{}
}

/*
UpdateSecretBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateSecretBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update secret bad request response has a 2xx status code
func (o *UpdateSecretBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret bad request response has a 3xx status code
func (o *UpdateSecretBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret bad request response has a 4xx status code
func (o *UpdateSecretBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret bad request response has a 5xx status code
func (o *UpdateSecretBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret bad request response a status code equal to that given
func (o *UpdateSecretBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update secret bad request response
func (o *UpdateSecretBadRequest) Code() int {
	return 400
}

func (o *UpdateSecretBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretBadRequest %s", 400, payload)
}

func (o *UpdateSecretBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretBadRequest %s", 400, payload)
}

func (o *UpdateSecretBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretUnauthorized creates a UpdateSecretUnauthorized with default headers values
func NewUpdateSecretUnauthorized() *UpdateSecretUnauthorized {
	return &UpdateSecretUnauthorized{}
}

/*
UpdateSecretUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateSecretUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update secret unauthorized response has a 2xx status code
func (o *UpdateSecretUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret unauthorized response has a 3xx status code
func (o *UpdateSecretUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret unauthorized response has a 4xx status code
func (o *UpdateSecretUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret unauthorized response has a 5xx status code
func (o *UpdateSecretUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret unauthorized response a status code equal to that given
func (o *UpdateSecretUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update secret unauthorized response
func (o *UpdateSecretUnauthorized) Code() int {
	return 401
}

func (o *UpdateSecretUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretUnauthorized %s", 401, payload)
}

func (o *UpdateSecretUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretUnauthorized %s", 401, payload)
}

func (o *UpdateSecretUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretForbidden creates a UpdateSecretForbidden with default headers values
func NewUpdateSecretForbidden() *UpdateSecretForbidden {
	return &UpdateSecretForbidden{}
}

/*
UpdateSecretForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateSecretForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update secret forbidden response has a 2xx status code
func (o *UpdateSecretForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret forbidden response has a 3xx status code
func (o *UpdateSecretForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret forbidden response has a 4xx status code
func (o *UpdateSecretForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret forbidden response has a 5xx status code
func (o *UpdateSecretForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret forbidden response a status code equal to that given
func (o *UpdateSecretForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update secret forbidden response
func (o *UpdateSecretForbidden) Code() int {
	return 403
}

func (o *UpdateSecretForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretForbidden %s", 403, payload)
}

func (o *UpdateSecretForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretForbidden %s", 403, payload)
}

func (o *UpdateSecretForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretNotFound creates a UpdateSecretNotFound with default headers values
func NewUpdateSecretNotFound() *UpdateSecretNotFound {
	return &UpdateSecretNotFound{}
}

/*
UpdateSecretNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateSecretNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update secret not found response has a 2xx status code
func (o *UpdateSecretNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret not found response has a 3xx status code
func (o *UpdateSecretNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret not found response has a 4xx status code
func (o *UpdateSecretNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret not found response has a 5xx status code
func (o *UpdateSecretNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret not found response a status code equal to that given
func (o *UpdateSecretNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update secret not found response
func (o *UpdateSecretNotFound) Code() int {
	return 404
}

func (o *UpdateSecretNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretNotFound %s", 404, payload)
}

func (o *UpdateSecretNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretNotFound %s", 404, payload)
}

func (o *UpdateSecretNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretUnprocessableEntity creates a UpdateSecretUnprocessableEntity with default headers values
func NewUpdateSecretUnprocessableEntity() *UpdateSecretUnprocessableEntity {
	return &UpdateSecretUnprocessableEntity{}
}

/*
UpdateSecretUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateSecretUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update secret unprocessable entity response has a 2xx status code
func (o *UpdateSecretUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret unprocessable entity response has a 3xx status code
func (o *UpdateSecretUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret unprocessable entity response has a 4xx status code
func (o *UpdateSecretUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret unprocessable entity response has a 5xx status code
func (o *UpdateSecretUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret unprocessable entity response a status code equal to that given
func (o *UpdateSecretUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update secret unprocessable entity response
func (o *UpdateSecretUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateSecretUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretUnprocessableEntity %s", 422, payload)
}

func (o *UpdateSecretUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretUnprocessableEntity %s", 422, payload)
}

func (o *UpdateSecretUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSecretTooManyRequests creates a UpdateSecretTooManyRequests with default headers values
func NewUpdateSecretTooManyRequests() *UpdateSecretTooManyRequests {
	return &UpdateSecretTooManyRequests{}
}

/*
UpdateSecretTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateSecretTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update secret too many requests response has a 2xx status code
func (o *UpdateSecretTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update secret too many requests response has a 3xx status code
func (o *UpdateSecretTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update secret too many requests response has a 4xx status code
func (o *UpdateSecretTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update secret too many requests response has a 5xx status code
func (o *UpdateSecretTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update secret too many requests response a status code equal to that given
func (o *UpdateSecretTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update secret too many requests response
func (o *UpdateSecretTooManyRequests) Code() int {
	return 429
}

func (o *UpdateSecretTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretTooManyRequests %s", 429, payload)
}

func (o *UpdateSecretTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/secrets/{sid}][%d] updateSecretTooManyRequests %s", 429, payload)
}

func (o *UpdateSecretTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSecretTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
