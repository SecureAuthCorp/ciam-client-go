// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/system/models"
)

// PatchTenantConfigurationReader is a Reader for the PatchTenantConfiguration structure.
type PatchTenantConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchTenantConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPatchTenantConfigurationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchTenantConfigurationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchTenantConfigurationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchTenantConfigurationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchTenantConfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchTenantConfigurationUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchTenantConfigurationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /configuration] patchTenantConfiguration", response, response.Code())
	}
}

// NewPatchTenantConfigurationNoContent creates a PatchTenantConfigurationNoContent with default headers values
func NewPatchTenantConfigurationNoContent() *PatchTenantConfigurationNoContent {
	return &PatchTenantConfigurationNoContent{}
}

/*
PatchTenantConfigurationNoContent describes a response with status code 204, with default header values.

	patch applied
*/
type PatchTenantConfigurationNoContent struct {
}

// IsSuccess returns true when this patch tenant configuration no content response has a 2xx status code
func (o *PatchTenantConfigurationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch tenant configuration no content response has a 3xx status code
func (o *PatchTenantConfigurationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch tenant configuration no content response has a 4xx status code
func (o *PatchTenantConfigurationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch tenant configuration no content response has a 5xx status code
func (o *PatchTenantConfigurationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this patch tenant configuration no content response a status code equal to that given
func (o *PatchTenantConfigurationNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the patch tenant configuration no content response
func (o *PatchTenantConfigurationNoContent) Code() int {
	return 204
}

func (o *PatchTenantConfigurationNoContent) Error() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationNoContent ", 204)
}

func (o *PatchTenantConfigurationNoContent) String() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationNoContent ", 204)
}

func (o *PatchTenantConfigurationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchTenantConfigurationBadRequest creates a PatchTenantConfigurationBadRequest with default headers values
func NewPatchTenantConfigurationBadRequest() *PatchTenantConfigurationBadRequest {
	return &PatchTenantConfigurationBadRequest{}
}

/*
PatchTenantConfigurationBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PatchTenantConfigurationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch tenant configuration bad request response has a 2xx status code
func (o *PatchTenantConfigurationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch tenant configuration bad request response has a 3xx status code
func (o *PatchTenantConfigurationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch tenant configuration bad request response has a 4xx status code
func (o *PatchTenantConfigurationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch tenant configuration bad request response has a 5xx status code
func (o *PatchTenantConfigurationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch tenant configuration bad request response a status code equal to that given
func (o *PatchTenantConfigurationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch tenant configuration bad request response
func (o *PatchTenantConfigurationBadRequest) Code() int {
	return 400
}

func (o *PatchTenantConfigurationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchTenantConfigurationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchTenantConfigurationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchTenantConfigurationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTenantConfigurationUnauthorized creates a PatchTenantConfigurationUnauthorized with default headers values
func NewPatchTenantConfigurationUnauthorized() *PatchTenantConfigurationUnauthorized {
	return &PatchTenantConfigurationUnauthorized{}
}

/*
PatchTenantConfigurationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchTenantConfigurationUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch tenant configuration unauthorized response has a 2xx status code
func (o *PatchTenantConfigurationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch tenant configuration unauthorized response has a 3xx status code
func (o *PatchTenantConfigurationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch tenant configuration unauthorized response has a 4xx status code
func (o *PatchTenantConfigurationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch tenant configuration unauthorized response has a 5xx status code
func (o *PatchTenantConfigurationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch tenant configuration unauthorized response a status code equal to that given
func (o *PatchTenantConfigurationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch tenant configuration unauthorized response
func (o *PatchTenantConfigurationUnauthorized) Code() int {
	return 401
}

func (o *PatchTenantConfigurationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchTenantConfigurationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchTenantConfigurationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchTenantConfigurationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTenantConfigurationForbidden creates a PatchTenantConfigurationForbidden with default headers values
func NewPatchTenantConfigurationForbidden() *PatchTenantConfigurationForbidden {
	return &PatchTenantConfigurationForbidden{}
}

/*
PatchTenantConfigurationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchTenantConfigurationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch tenant configuration forbidden response has a 2xx status code
func (o *PatchTenantConfigurationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch tenant configuration forbidden response has a 3xx status code
func (o *PatchTenantConfigurationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch tenant configuration forbidden response has a 4xx status code
func (o *PatchTenantConfigurationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch tenant configuration forbidden response has a 5xx status code
func (o *PatchTenantConfigurationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch tenant configuration forbidden response a status code equal to that given
func (o *PatchTenantConfigurationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch tenant configuration forbidden response
func (o *PatchTenantConfigurationForbidden) Code() int {
	return 403
}

func (o *PatchTenantConfigurationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationForbidden  %+v", 403, o.Payload)
}

func (o *PatchTenantConfigurationForbidden) String() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationForbidden  %+v", 403, o.Payload)
}

func (o *PatchTenantConfigurationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchTenantConfigurationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTenantConfigurationNotFound creates a PatchTenantConfigurationNotFound with default headers values
func NewPatchTenantConfigurationNotFound() *PatchTenantConfigurationNotFound {
	return &PatchTenantConfigurationNotFound{}
}

/*
PatchTenantConfigurationNotFound describes a response with status code 404, with default header values.

Not found
*/
type PatchTenantConfigurationNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch tenant configuration not found response has a 2xx status code
func (o *PatchTenantConfigurationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch tenant configuration not found response has a 3xx status code
func (o *PatchTenantConfigurationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch tenant configuration not found response has a 4xx status code
func (o *PatchTenantConfigurationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch tenant configuration not found response has a 5xx status code
func (o *PatchTenantConfigurationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch tenant configuration not found response a status code equal to that given
func (o *PatchTenantConfigurationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the patch tenant configuration not found response
func (o *PatchTenantConfigurationNotFound) Code() int {
	return 404
}

func (o *PatchTenantConfigurationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *PatchTenantConfigurationNotFound) String() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *PatchTenantConfigurationNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchTenantConfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTenantConfigurationUnprocessableEntity creates a PatchTenantConfigurationUnprocessableEntity with default headers values
func NewPatchTenantConfigurationUnprocessableEntity() *PatchTenantConfigurationUnprocessableEntity {
	return &PatchTenantConfigurationUnprocessableEntity{}
}

/*
PatchTenantConfigurationUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type PatchTenantConfigurationUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch tenant configuration unprocessable entity response has a 2xx status code
func (o *PatchTenantConfigurationUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch tenant configuration unprocessable entity response has a 3xx status code
func (o *PatchTenantConfigurationUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch tenant configuration unprocessable entity response has a 4xx status code
func (o *PatchTenantConfigurationUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch tenant configuration unprocessable entity response has a 5xx status code
func (o *PatchTenantConfigurationUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this patch tenant configuration unprocessable entity response a status code equal to that given
func (o *PatchTenantConfigurationUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the patch tenant configuration unprocessable entity response
func (o *PatchTenantConfigurationUnprocessableEntity) Code() int {
	return 422
}

func (o *PatchTenantConfigurationUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchTenantConfigurationUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchTenantConfigurationUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchTenantConfigurationUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchTenantConfigurationTooManyRequests creates a PatchTenantConfigurationTooManyRequests with default headers values
func NewPatchTenantConfigurationTooManyRequests() *PatchTenantConfigurationTooManyRequests {
	return &PatchTenantConfigurationTooManyRequests{}
}

/*
PatchTenantConfigurationTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type PatchTenantConfigurationTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch tenant configuration too many requests response has a 2xx status code
func (o *PatchTenantConfigurationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch tenant configuration too many requests response has a 3xx status code
func (o *PatchTenantConfigurationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch tenant configuration too many requests response has a 4xx status code
func (o *PatchTenantConfigurationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch tenant configuration too many requests response has a 5xx status code
func (o *PatchTenantConfigurationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch tenant configuration too many requests response a status code equal to that given
func (o *PatchTenantConfigurationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch tenant configuration too many requests response
func (o *PatchTenantConfigurationTooManyRequests) Code() int {
	return 429
}

func (o *PatchTenantConfigurationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchTenantConfigurationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /configuration][%d] patchTenantConfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchTenantConfigurationTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchTenantConfigurationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
