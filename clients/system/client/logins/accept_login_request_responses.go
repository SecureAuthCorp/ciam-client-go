// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/system/models"
)

// AcceptLoginRequestReader is a Reader for the AcceptLoginRequest structure.
type AcceptLoginRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptLoginRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptLoginRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAcceptLoginRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAcceptLoginRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAcceptLoginRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptLoginRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAcceptLoginRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /logins/{login}/accept] acceptLoginRequest", response, response.Code())
	}
}

// NewAcceptLoginRequestOK creates a AcceptLoginRequestOK with default headers values
func NewAcceptLoginRequestOK() *AcceptLoginRequestOK {
	return &AcceptLoginRequestOK{}
}

/*
AcceptLoginRequestOK describes a response with status code 200, with default header values.

Login accepted
*/
type AcceptLoginRequestOK struct {
	Payload *models.LoginAccepted
}

// IsSuccess returns true when this accept login request o k response has a 2xx status code
func (o *AcceptLoginRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this accept login request o k response has a 3xx status code
func (o *AcceptLoginRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept login request o k response has a 4xx status code
func (o *AcceptLoginRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this accept login request o k response has a 5xx status code
func (o *AcceptLoginRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this accept login request o k response a status code equal to that given
func (o *AcceptLoginRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the accept login request o k response
func (o *AcceptLoginRequestOK) Code() int {
	return 200
}

func (o *AcceptLoginRequestOK) Error() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestOK  %+v", 200, o.Payload)
}

func (o *AcceptLoginRequestOK) String() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestOK  %+v", 200, o.Payload)
}

func (o *AcceptLoginRequestOK) GetPayload() *models.LoginAccepted {
	return o.Payload
}

func (o *AcceptLoginRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginAccepted)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptLoginRequestBadRequest creates a AcceptLoginRequestBadRequest with default headers values
func NewAcceptLoginRequestBadRequest() *AcceptLoginRequestBadRequest {
	return &AcceptLoginRequestBadRequest{}
}

/*
AcceptLoginRequestBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AcceptLoginRequestBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept login request bad request response has a 2xx status code
func (o *AcceptLoginRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept login request bad request response has a 3xx status code
func (o *AcceptLoginRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept login request bad request response has a 4xx status code
func (o *AcceptLoginRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept login request bad request response has a 5xx status code
func (o *AcceptLoginRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this accept login request bad request response a status code equal to that given
func (o *AcceptLoginRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the accept login request bad request response
func (o *AcceptLoginRequestBadRequest) Code() int {
	return 400
}

func (o *AcceptLoginRequestBadRequest) Error() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestBadRequest  %+v", 400, o.Payload)
}

func (o *AcceptLoginRequestBadRequest) String() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestBadRequest  %+v", 400, o.Payload)
}

func (o *AcceptLoginRequestBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptLoginRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptLoginRequestUnauthorized creates a AcceptLoginRequestUnauthorized with default headers values
func NewAcceptLoginRequestUnauthorized() *AcceptLoginRequestUnauthorized {
	return &AcceptLoginRequestUnauthorized{}
}

/*
AcceptLoginRequestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AcceptLoginRequestUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept login request unauthorized response has a 2xx status code
func (o *AcceptLoginRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept login request unauthorized response has a 3xx status code
func (o *AcceptLoginRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept login request unauthorized response has a 4xx status code
func (o *AcceptLoginRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept login request unauthorized response has a 5xx status code
func (o *AcceptLoginRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this accept login request unauthorized response a status code equal to that given
func (o *AcceptLoginRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the accept login request unauthorized response
func (o *AcceptLoginRequestUnauthorized) Code() int {
	return 401
}

func (o *AcceptLoginRequestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *AcceptLoginRequestUnauthorized) String() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *AcceptLoginRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptLoginRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptLoginRequestForbidden creates a AcceptLoginRequestForbidden with default headers values
func NewAcceptLoginRequestForbidden() *AcceptLoginRequestForbidden {
	return &AcceptLoginRequestForbidden{}
}

/*
AcceptLoginRequestForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AcceptLoginRequestForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept login request forbidden response has a 2xx status code
func (o *AcceptLoginRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept login request forbidden response has a 3xx status code
func (o *AcceptLoginRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept login request forbidden response has a 4xx status code
func (o *AcceptLoginRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept login request forbidden response has a 5xx status code
func (o *AcceptLoginRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this accept login request forbidden response a status code equal to that given
func (o *AcceptLoginRequestForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the accept login request forbidden response
func (o *AcceptLoginRequestForbidden) Code() int {
	return 403
}

func (o *AcceptLoginRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestForbidden  %+v", 403, o.Payload)
}

func (o *AcceptLoginRequestForbidden) String() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestForbidden  %+v", 403, o.Payload)
}

func (o *AcceptLoginRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptLoginRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptLoginRequestNotFound creates a AcceptLoginRequestNotFound with default headers values
func NewAcceptLoginRequestNotFound() *AcceptLoginRequestNotFound {
	return &AcceptLoginRequestNotFound{}
}

/*
AcceptLoginRequestNotFound describes a response with status code 404, with default header values.

Not found
*/
type AcceptLoginRequestNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept login request not found response has a 2xx status code
func (o *AcceptLoginRequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept login request not found response has a 3xx status code
func (o *AcceptLoginRequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept login request not found response has a 4xx status code
func (o *AcceptLoginRequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept login request not found response has a 5xx status code
func (o *AcceptLoginRequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this accept login request not found response a status code equal to that given
func (o *AcceptLoginRequestNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the accept login request not found response
func (o *AcceptLoginRequestNotFound) Code() int {
	return 404
}

func (o *AcceptLoginRequestNotFound) Error() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestNotFound  %+v", 404, o.Payload)
}

func (o *AcceptLoginRequestNotFound) String() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestNotFound  %+v", 404, o.Payload)
}

func (o *AcceptLoginRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptLoginRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptLoginRequestTooManyRequests creates a AcceptLoginRequestTooManyRequests with default headers values
func NewAcceptLoginRequestTooManyRequests() *AcceptLoginRequestTooManyRequests {
	return &AcceptLoginRequestTooManyRequests{}
}

/*
AcceptLoginRequestTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type AcceptLoginRequestTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept login request too many requests response has a 2xx status code
func (o *AcceptLoginRequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept login request too many requests response has a 3xx status code
func (o *AcceptLoginRequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept login request too many requests response has a 4xx status code
func (o *AcceptLoginRequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept login request too many requests response has a 5xx status code
func (o *AcceptLoginRequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this accept login request too many requests response a status code equal to that given
func (o *AcceptLoginRequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the accept login request too many requests response
func (o *AcceptLoginRequestTooManyRequests) Code() int {
	return 429
}

func (o *AcceptLoginRequestTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *AcceptLoginRequestTooManyRequests) String() string {
	return fmt.Sprintf("[POST /logins/{login}/accept][%d] acceptLoginRequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *AcceptLoginRequestTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptLoginRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
