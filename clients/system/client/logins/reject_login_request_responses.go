// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/system/models"
)

// RejectLoginRequestReader is a Reader for the RejectLoginRequest structure.
type RejectLoginRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectLoginRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectLoginRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRejectLoginRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRejectLoginRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectLoginRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRejectLoginRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /logins/{login}/reject] rejectLoginRequest", response, response.Code())
	}
}

// NewRejectLoginRequestOK creates a RejectLoginRequestOK with default headers values
func NewRejectLoginRequestOK() *RejectLoginRequestOK {
	return &RejectLoginRequestOK{}
}

/*
RejectLoginRequestOK describes a response with status code 200, with default header values.

Login rejected
*/
type RejectLoginRequestOK struct {
	Payload *models.LoginRejected
}

// IsSuccess returns true when this reject login request o k response has a 2xx status code
func (o *RejectLoginRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reject login request o k response has a 3xx status code
func (o *RejectLoginRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject login request o k response has a 4xx status code
func (o *RejectLoginRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reject login request o k response has a 5xx status code
func (o *RejectLoginRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reject login request o k response a status code equal to that given
func (o *RejectLoginRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reject login request o k response
func (o *RejectLoginRequestOK) Code() int {
	return 200
}

func (o *RejectLoginRequestOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestOK %s", 200, payload)
}

func (o *RejectLoginRequestOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestOK %s", 200, payload)
}

func (o *RejectLoginRequestOK) GetPayload() *models.LoginRejected {
	return o.Payload
}

func (o *RejectLoginRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginRejected)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectLoginRequestUnauthorized creates a RejectLoginRequestUnauthorized with default headers values
func NewRejectLoginRequestUnauthorized() *RejectLoginRequestUnauthorized {
	return &RejectLoginRequestUnauthorized{}
}

/*
RejectLoginRequestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RejectLoginRequestUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this reject login request unauthorized response has a 2xx status code
func (o *RejectLoginRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject login request unauthorized response has a 3xx status code
func (o *RejectLoginRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject login request unauthorized response has a 4xx status code
func (o *RejectLoginRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject login request unauthorized response has a 5xx status code
func (o *RejectLoginRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this reject login request unauthorized response a status code equal to that given
func (o *RejectLoginRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the reject login request unauthorized response
func (o *RejectLoginRequestUnauthorized) Code() int {
	return 401
}

func (o *RejectLoginRequestUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestUnauthorized %s", 401, payload)
}

func (o *RejectLoginRequestUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestUnauthorized %s", 401, payload)
}

func (o *RejectLoginRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectLoginRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectLoginRequestForbidden creates a RejectLoginRequestForbidden with default headers values
func NewRejectLoginRequestForbidden() *RejectLoginRequestForbidden {
	return &RejectLoginRequestForbidden{}
}

/*
RejectLoginRequestForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RejectLoginRequestForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this reject login request forbidden response has a 2xx status code
func (o *RejectLoginRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject login request forbidden response has a 3xx status code
func (o *RejectLoginRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject login request forbidden response has a 4xx status code
func (o *RejectLoginRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject login request forbidden response has a 5xx status code
func (o *RejectLoginRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this reject login request forbidden response a status code equal to that given
func (o *RejectLoginRequestForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the reject login request forbidden response
func (o *RejectLoginRequestForbidden) Code() int {
	return 403
}

func (o *RejectLoginRequestForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestForbidden %s", 403, payload)
}

func (o *RejectLoginRequestForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestForbidden %s", 403, payload)
}

func (o *RejectLoginRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectLoginRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectLoginRequestNotFound creates a RejectLoginRequestNotFound with default headers values
func NewRejectLoginRequestNotFound() *RejectLoginRequestNotFound {
	return &RejectLoginRequestNotFound{}
}

/*
RejectLoginRequestNotFound describes a response with status code 404, with default header values.

Not found
*/
type RejectLoginRequestNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this reject login request not found response has a 2xx status code
func (o *RejectLoginRequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject login request not found response has a 3xx status code
func (o *RejectLoginRequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject login request not found response has a 4xx status code
func (o *RejectLoginRequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject login request not found response has a 5xx status code
func (o *RejectLoginRequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reject login request not found response a status code equal to that given
func (o *RejectLoginRequestNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reject login request not found response
func (o *RejectLoginRequestNotFound) Code() int {
	return 404
}

func (o *RejectLoginRequestNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestNotFound %s", 404, payload)
}

func (o *RejectLoginRequestNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestNotFound %s", 404, payload)
}

func (o *RejectLoginRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectLoginRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectLoginRequestTooManyRequests creates a RejectLoginRequestTooManyRequests with default headers values
func NewRejectLoginRequestTooManyRequests() *RejectLoginRequestTooManyRequests {
	return &RejectLoginRequestTooManyRequests{}
}

/*
RejectLoginRequestTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type RejectLoginRequestTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this reject login request too many requests response has a 2xx status code
func (o *RejectLoginRequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject login request too many requests response has a 3xx status code
func (o *RejectLoginRequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject login request too many requests response has a 4xx status code
func (o *RejectLoginRequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject login request too many requests response has a 5xx status code
func (o *RejectLoginRequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this reject login request too many requests response a status code equal to that given
func (o *RejectLoginRequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the reject login request too many requests response
func (o *RejectLoginRequestTooManyRequests) Code() int {
	return 429
}

func (o *RejectLoginRequestTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestTooManyRequests %s", 429, payload)
}

func (o *RejectLoginRequestTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /logins/{login}/reject][%d] rejectLoginRequestTooManyRequests %s", 429, payload)
}

func (o *RejectLoginRequestTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectLoginRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
