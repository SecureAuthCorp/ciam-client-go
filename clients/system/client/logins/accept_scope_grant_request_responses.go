// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/system/models"
)

// AcceptScopeGrantRequestReader is a Reader for the AcceptScopeGrantRequest structure.
type AcceptScopeGrantRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptScopeGrantRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptScopeGrantRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAcceptScopeGrantRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAcceptScopeGrantRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptScopeGrantRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAcceptScopeGrantRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /scope-grants/{login}/accept] acceptScopeGrantRequest", response, response.Code())
	}
}

// NewAcceptScopeGrantRequestOK creates a AcceptScopeGrantRequestOK with default headers values
func NewAcceptScopeGrantRequestOK() *AcceptScopeGrantRequestOK {
	return &AcceptScopeGrantRequestOK{}
}

/*
AcceptScopeGrantRequestOK describes a response with status code 200, with default header values.

Scope grant accepted
*/
type AcceptScopeGrantRequestOK struct {
	Payload *models.ScopeGrantAccepted
}

// IsSuccess returns true when this accept scope grant request o k response has a 2xx status code
func (o *AcceptScopeGrantRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this accept scope grant request o k response has a 3xx status code
func (o *AcceptScopeGrantRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept scope grant request o k response has a 4xx status code
func (o *AcceptScopeGrantRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this accept scope grant request o k response has a 5xx status code
func (o *AcceptScopeGrantRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this accept scope grant request o k response a status code equal to that given
func (o *AcceptScopeGrantRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the accept scope grant request o k response
func (o *AcceptScopeGrantRequestOK) Code() int {
	return 200
}

func (o *AcceptScopeGrantRequestOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestOK %s", 200, payload)
}

func (o *AcceptScopeGrantRequestOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestOK %s", 200, payload)
}

func (o *AcceptScopeGrantRequestOK) GetPayload() *models.ScopeGrantAccepted {
	return o.Payload
}

func (o *AcceptScopeGrantRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScopeGrantAccepted)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptScopeGrantRequestUnauthorized creates a AcceptScopeGrantRequestUnauthorized with default headers values
func NewAcceptScopeGrantRequestUnauthorized() *AcceptScopeGrantRequestUnauthorized {
	return &AcceptScopeGrantRequestUnauthorized{}
}

/*
AcceptScopeGrantRequestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AcceptScopeGrantRequestUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept scope grant request unauthorized response has a 2xx status code
func (o *AcceptScopeGrantRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept scope grant request unauthorized response has a 3xx status code
func (o *AcceptScopeGrantRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept scope grant request unauthorized response has a 4xx status code
func (o *AcceptScopeGrantRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept scope grant request unauthorized response has a 5xx status code
func (o *AcceptScopeGrantRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this accept scope grant request unauthorized response a status code equal to that given
func (o *AcceptScopeGrantRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the accept scope grant request unauthorized response
func (o *AcceptScopeGrantRequestUnauthorized) Code() int {
	return 401
}

func (o *AcceptScopeGrantRequestUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestUnauthorized %s", 401, payload)
}

func (o *AcceptScopeGrantRequestUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestUnauthorized %s", 401, payload)
}

func (o *AcceptScopeGrantRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptScopeGrantRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptScopeGrantRequestForbidden creates a AcceptScopeGrantRequestForbidden with default headers values
func NewAcceptScopeGrantRequestForbidden() *AcceptScopeGrantRequestForbidden {
	return &AcceptScopeGrantRequestForbidden{}
}

/*
AcceptScopeGrantRequestForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AcceptScopeGrantRequestForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept scope grant request forbidden response has a 2xx status code
func (o *AcceptScopeGrantRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept scope grant request forbidden response has a 3xx status code
func (o *AcceptScopeGrantRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept scope grant request forbidden response has a 4xx status code
func (o *AcceptScopeGrantRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept scope grant request forbidden response has a 5xx status code
func (o *AcceptScopeGrantRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this accept scope grant request forbidden response a status code equal to that given
func (o *AcceptScopeGrantRequestForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the accept scope grant request forbidden response
func (o *AcceptScopeGrantRequestForbidden) Code() int {
	return 403
}

func (o *AcceptScopeGrantRequestForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestForbidden %s", 403, payload)
}

func (o *AcceptScopeGrantRequestForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestForbidden %s", 403, payload)
}

func (o *AcceptScopeGrantRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptScopeGrantRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptScopeGrantRequestNotFound creates a AcceptScopeGrantRequestNotFound with default headers values
func NewAcceptScopeGrantRequestNotFound() *AcceptScopeGrantRequestNotFound {
	return &AcceptScopeGrantRequestNotFound{}
}

/*
AcceptScopeGrantRequestNotFound describes a response with status code 404, with default header values.

Not found
*/
type AcceptScopeGrantRequestNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept scope grant request not found response has a 2xx status code
func (o *AcceptScopeGrantRequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept scope grant request not found response has a 3xx status code
func (o *AcceptScopeGrantRequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept scope grant request not found response has a 4xx status code
func (o *AcceptScopeGrantRequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept scope grant request not found response has a 5xx status code
func (o *AcceptScopeGrantRequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this accept scope grant request not found response a status code equal to that given
func (o *AcceptScopeGrantRequestNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the accept scope grant request not found response
func (o *AcceptScopeGrantRequestNotFound) Code() int {
	return 404
}

func (o *AcceptScopeGrantRequestNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestNotFound %s", 404, payload)
}

func (o *AcceptScopeGrantRequestNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestNotFound %s", 404, payload)
}

func (o *AcceptScopeGrantRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptScopeGrantRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptScopeGrantRequestTooManyRequests creates a AcceptScopeGrantRequestTooManyRequests with default headers values
func NewAcceptScopeGrantRequestTooManyRequests() *AcceptScopeGrantRequestTooManyRequests {
	return &AcceptScopeGrantRequestTooManyRequests{}
}

/*
AcceptScopeGrantRequestTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type AcceptScopeGrantRequestTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept scope grant request too many requests response has a 2xx status code
func (o *AcceptScopeGrantRequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept scope grant request too many requests response has a 3xx status code
func (o *AcceptScopeGrantRequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept scope grant request too many requests response has a 4xx status code
func (o *AcceptScopeGrantRequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept scope grant request too many requests response has a 5xx status code
func (o *AcceptScopeGrantRequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this accept scope grant request too many requests response a status code equal to that given
func (o *AcceptScopeGrantRequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the accept scope grant request too many requests response
func (o *AcceptScopeGrantRequestTooManyRequests) Code() int {
	return 429
}

func (o *AcceptScopeGrantRequestTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestTooManyRequests %s", 429, payload)
}

func (o *AcceptScopeGrantRequestTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /scope-grants/{login}/accept][%d] acceptScopeGrantRequestTooManyRequests %s", 429, payload)
}

func (o *AcceptScopeGrantRequestTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptScopeGrantRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
