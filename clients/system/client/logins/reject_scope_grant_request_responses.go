// Code generated by go-swagger; DO NOT EDIT.

package logins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/system/models"
)

// RejectScopeGrantRequestReader is a Reader for the RejectScopeGrantRequest structure.
type RejectScopeGrantRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectScopeGrantRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectScopeGrantRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRejectScopeGrantRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRejectScopeGrantRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectScopeGrantRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRejectScopeGrantRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /scope-grants/{login}/reject] rejectScopeGrantRequest", response, response.Code())
	}
}

// NewRejectScopeGrantRequestOK creates a RejectScopeGrantRequestOK with default headers values
func NewRejectScopeGrantRequestOK() *RejectScopeGrantRequestOK {
	return &RejectScopeGrantRequestOK{}
}

/*
RejectScopeGrantRequestOK describes a response with status code 200, with default header values.

Scope grant rejected
*/
type RejectScopeGrantRequestOK struct {
	Payload *models.ScopeGrantRejected
}

// IsSuccess returns true when this reject scope grant request o k response has a 2xx status code
func (o *RejectScopeGrantRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reject scope grant request o k response has a 3xx status code
func (o *RejectScopeGrantRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject scope grant request o k response has a 4xx status code
func (o *RejectScopeGrantRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reject scope grant request o k response has a 5xx status code
func (o *RejectScopeGrantRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reject scope grant request o k response a status code equal to that given
func (o *RejectScopeGrantRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reject scope grant request o k response
func (o *RejectScopeGrantRequestOK) Code() int {
	return 200
}

func (o *RejectScopeGrantRequestOK) Error() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestOK  %+v", 200, o.Payload)
}

func (o *RejectScopeGrantRequestOK) String() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestOK  %+v", 200, o.Payload)
}

func (o *RejectScopeGrantRequestOK) GetPayload() *models.ScopeGrantRejected {
	return o.Payload
}

func (o *RejectScopeGrantRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScopeGrantRejected)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectScopeGrantRequestUnauthorized creates a RejectScopeGrantRequestUnauthorized with default headers values
func NewRejectScopeGrantRequestUnauthorized() *RejectScopeGrantRequestUnauthorized {
	return &RejectScopeGrantRequestUnauthorized{}
}

/*
RejectScopeGrantRequestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RejectScopeGrantRequestUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this reject scope grant request unauthorized response has a 2xx status code
func (o *RejectScopeGrantRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject scope grant request unauthorized response has a 3xx status code
func (o *RejectScopeGrantRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject scope grant request unauthorized response has a 4xx status code
func (o *RejectScopeGrantRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject scope grant request unauthorized response has a 5xx status code
func (o *RejectScopeGrantRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this reject scope grant request unauthorized response a status code equal to that given
func (o *RejectScopeGrantRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the reject scope grant request unauthorized response
func (o *RejectScopeGrantRequestUnauthorized) Code() int {
	return 401
}

func (o *RejectScopeGrantRequestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *RejectScopeGrantRequestUnauthorized) String() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestUnauthorized  %+v", 401, o.Payload)
}

func (o *RejectScopeGrantRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectScopeGrantRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectScopeGrantRequestForbidden creates a RejectScopeGrantRequestForbidden with default headers values
func NewRejectScopeGrantRequestForbidden() *RejectScopeGrantRequestForbidden {
	return &RejectScopeGrantRequestForbidden{}
}

/*
RejectScopeGrantRequestForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RejectScopeGrantRequestForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this reject scope grant request forbidden response has a 2xx status code
func (o *RejectScopeGrantRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject scope grant request forbidden response has a 3xx status code
func (o *RejectScopeGrantRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject scope grant request forbidden response has a 4xx status code
func (o *RejectScopeGrantRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject scope grant request forbidden response has a 5xx status code
func (o *RejectScopeGrantRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this reject scope grant request forbidden response a status code equal to that given
func (o *RejectScopeGrantRequestForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the reject scope grant request forbidden response
func (o *RejectScopeGrantRequestForbidden) Code() int {
	return 403
}

func (o *RejectScopeGrantRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestForbidden  %+v", 403, o.Payload)
}

func (o *RejectScopeGrantRequestForbidden) String() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestForbidden  %+v", 403, o.Payload)
}

func (o *RejectScopeGrantRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectScopeGrantRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectScopeGrantRequestNotFound creates a RejectScopeGrantRequestNotFound with default headers values
func NewRejectScopeGrantRequestNotFound() *RejectScopeGrantRequestNotFound {
	return &RejectScopeGrantRequestNotFound{}
}

/*
RejectScopeGrantRequestNotFound describes a response with status code 404, with default header values.

Not found
*/
type RejectScopeGrantRequestNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this reject scope grant request not found response has a 2xx status code
func (o *RejectScopeGrantRequestNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject scope grant request not found response has a 3xx status code
func (o *RejectScopeGrantRequestNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject scope grant request not found response has a 4xx status code
func (o *RejectScopeGrantRequestNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject scope grant request not found response has a 5xx status code
func (o *RejectScopeGrantRequestNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this reject scope grant request not found response a status code equal to that given
func (o *RejectScopeGrantRequestNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the reject scope grant request not found response
func (o *RejectScopeGrantRequestNotFound) Code() int {
	return 404
}

func (o *RejectScopeGrantRequestNotFound) Error() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestNotFound  %+v", 404, o.Payload)
}

func (o *RejectScopeGrantRequestNotFound) String() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestNotFound  %+v", 404, o.Payload)
}

func (o *RejectScopeGrantRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectScopeGrantRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectScopeGrantRequestTooManyRequests creates a RejectScopeGrantRequestTooManyRequests with default headers values
func NewRejectScopeGrantRequestTooManyRequests() *RejectScopeGrantRequestTooManyRequests {
	return &RejectScopeGrantRequestTooManyRequests{}
}

/*
RejectScopeGrantRequestTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type RejectScopeGrantRequestTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this reject scope grant request too many requests response has a 2xx status code
func (o *RejectScopeGrantRequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reject scope grant request too many requests response has a 3xx status code
func (o *RejectScopeGrantRequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reject scope grant request too many requests response has a 4xx status code
func (o *RejectScopeGrantRequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this reject scope grant request too many requests response has a 5xx status code
func (o *RejectScopeGrantRequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this reject scope grant request too many requests response a status code equal to that given
func (o *RejectScopeGrantRequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the reject scope grant request too many requests response
func (o *RejectScopeGrantRequestTooManyRequests) Code() int {
	return 429
}

func (o *RejectScopeGrantRequestTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *RejectScopeGrantRequestTooManyRequests) String() string {
	return fmt.Sprintf("[POST /scope-grants/{login}/reject][%d] rejectScopeGrantRequestTooManyRequests  %+v", 429, o.Payload)
}

func (o *RejectScopeGrantRequestTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectScopeGrantRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
