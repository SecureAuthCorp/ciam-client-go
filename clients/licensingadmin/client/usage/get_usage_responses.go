// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/licensingadmin/models"
)

// GetUsageReader is a Reader for the GetUsage structure.
type GetUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUsageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUsageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetUsageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /admin/usage] getUsage", response, response.Code())
	}
}

// NewGetUsageOK creates a GetUsageOK with default headers values
func NewGetUsageOK() *GetUsageOK {
	return &GetUsageOK{}
}

/*
GetUsageOK describes a response with status code 200, with default header values.

Usage
*/
type GetUsageOK struct {
	Payload *models.Usage
}

// IsSuccess returns true when this get usage o k response has a 2xx status code
func (o *GetUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get usage o k response has a 3xx status code
func (o *GetUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get usage o k response has a 4xx status code
func (o *GetUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get usage o k response has a 5xx status code
func (o *GetUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get usage o k response a status code equal to that given
func (o *GetUsageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get usage o k response
func (o *GetUsageOK) Code() int {
	return 200
}

func (o *GetUsageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageOK %s", 200, payload)
}

func (o *GetUsageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageOK %s", 200, payload)
}

func (o *GetUsageOK) GetPayload() *models.Usage {
	return o.Payload
}

func (o *GetUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Usage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsageUnauthorized creates a GetUsageUnauthorized with default headers values
func NewGetUsageUnauthorized() *GetUsageUnauthorized {
	return &GetUsageUnauthorized{}
}

/*
GetUsageUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetUsageUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get usage unauthorized response has a 2xx status code
func (o *GetUsageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get usage unauthorized response has a 3xx status code
func (o *GetUsageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get usage unauthorized response has a 4xx status code
func (o *GetUsageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get usage unauthorized response has a 5xx status code
func (o *GetUsageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get usage unauthorized response a status code equal to that given
func (o *GetUsageUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get usage unauthorized response
func (o *GetUsageUnauthorized) Code() int {
	return 401
}

func (o *GetUsageUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageUnauthorized %s", 401, payload)
}

func (o *GetUsageUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageUnauthorized %s", 401, payload)
}

func (o *GetUsageUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsageForbidden creates a GetUsageForbidden with default headers values
func NewGetUsageForbidden() *GetUsageForbidden {
	return &GetUsageForbidden{}
}

/*
GetUsageForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUsageForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get usage forbidden response has a 2xx status code
func (o *GetUsageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get usage forbidden response has a 3xx status code
func (o *GetUsageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get usage forbidden response has a 4xx status code
func (o *GetUsageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get usage forbidden response has a 5xx status code
func (o *GetUsageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get usage forbidden response a status code equal to that given
func (o *GetUsageForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get usage forbidden response
func (o *GetUsageForbidden) Code() int {
	return 403
}

func (o *GetUsageForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageForbidden %s", 403, payload)
}

func (o *GetUsageForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageForbidden %s", 403, payload)
}

func (o *GetUsageForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsageNotFound creates a GetUsageNotFound with default headers values
func NewGetUsageNotFound() *GetUsageNotFound {
	return &GetUsageNotFound{}
}

/*
GetUsageNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetUsageNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get usage not found response has a 2xx status code
func (o *GetUsageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get usage not found response has a 3xx status code
func (o *GetUsageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get usage not found response has a 4xx status code
func (o *GetUsageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get usage not found response has a 5xx status code
func (o *GetUsageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get usage not found response a status code equal to that given
func (o *GetUsageNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get usage not found response
func (o *GetUsageNotFound) Code() int {
	return 404
}

func (o *GetUsageNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageNotFound %s", 404, payload)
}

func (o *GetUsageNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageNotFound %s", 404, payload)
}

func (o *GetUsageNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsageTooManyRequests creates a GetUsageTooManyRequests with default headers values
func NewGetUsageTooManyRequests() *GetUsageTooManyRequests {
	return &GetUsageTooManyRequests{}
}

/*
GetUsageTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetUsageTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get usage too many requests response has a 2xx status code
func (o *GetUsageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get usage too many requests response has a 3xx status code
func (o *GetUsageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get usage too many requests response has a 4xx status code
func (o *GetUsageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get usage too many requests response has a 5xx status code
func (o *GetUsageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get usage too many requests response a status code equal to that given
func (o *GetUsageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get usage too many requests response
func (o *GetUsageTooManyRequests) Code() int {
	return 429
}

func (o *GetUsageTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageTooManyRequests %s", 429, payload)
}

func (o *GetUsageTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/usage][%d] getUsageTooManyRequests %s", 429, payload)
}

func (o *GetUsageTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetUsageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
