// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/root/models"
)

// AdminSetTenantLicenseReader is a Reader for the AdminSetTenantLicense structure.
type AdminSetTenantLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminSetTenantLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAdminSetTenantLicenseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAdminSetTenantLicenseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAdminSetTenantLicenseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAdminSetTenantLicenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAdminSetTenantLicenseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAdminSetTenantLicenseUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAdminSetTenantLicenseTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/admin/tenants/{tenantID}/license] adminSetTenantLicense", response, response.Code())
	}
}

// NewAdminSetTenantLicenseNoContent creates a AdminSetTenantLicenseNoContent with default headers values
func NewAdminSetTenantLicenseNoContent() *AdminSetTenantLicenseNoContent {
	return &AdminSetTenantLicenseNoContent{}
}

/*
AdminSetTenantLicenseNoContent describes a response with status code 204, with default header values.

	license set
*/
type AdminSetTenantLicenseNoContent struct {
}

// IsSuccess returns true when this admin set tenant license no content response has a 2xx status code
func (o *AdminSetTenantLicenseNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this admin set tenant license no content response has a 3xx status code
func (o *AdminSetTenantLicenseNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin set tenant license no content response has a 4xx status code
func (o *AdminSetTenantLicenseNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this admin set tenant license no content response has a 5xx status code
func (o *AdminSetTenantLicenseNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this admin set tenant license no content response a status code equal to that given
func (o *AdminSetTenantLicenseNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the admin set tenant license no content response
func (o *AdminSetTenantLicenseNoContent) Code() int {
	return 204
}

func (o *AdminSetTenantLicenseNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseNoContent", 204)
}

func (o *AdminSetTenantLicenseNoContent) String() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseNoContent", 204)
}

func (o *AdminSetTenantLicenseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAdminSetTenantLicenseBadRequest creates a AdminSetTenantLicenseBadRequest with default headers values
func NewAdminSetTenantLicenseBadRequest() *AdminSetTenantLicenseBadRequest {
	return &AdminSetTenantLicenseBadRequest{}
}

/*
AdminSetTenantLicenseBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AdminSetTenantLicenseBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin set tenant license bad request response has a 2xx status code
func (o *AdminSetTenantLicenseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin set tenant license bad request response has a 3xx status code
func (o *AdminSetTenantLicenseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin set tenant license bad request response has a 4xx status code
func (o *AdminSetTenantLicenseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin set tenant license bad request response has a 5xx status code
func (o *AdminSetTenantLicenseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this admin set tenant license bad request response a status code equal to that given
func (o *AdminSetTenantLicenseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the admin set tenant license bad request response
func (o *AdminSetTenantLicenseBadRequest) Code() int {
	return 400
}

func (o *AdminSetTenantLicenseBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseBadRequest %s", 400, payload)
}

func (o *AdminSetTenantLicenseBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseBadRequest %s", 400, payload)
}

func (o *AdminSetTenantLicenseBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminSetTenantLicenseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSetTenantLicenseUnauthorized creates a AdminSetTenantLicenseUnauthorized with default headers values
func NewAdminSetTenantLicenseUnauthorized() *AdminSetTenantLicenseUnauthorized {
	return &AdminSetTenantLicenseUnauthorized{}
}

/*
AdminSetTenantLicenseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AdminSetTenantLicenseUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin set tenant license unauthorized response has a 2xx status code
func (o *AdminSetTenantLicenseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin set tenant license unauthorized response has a 3xx status code
func (o *AdminSetTenantLicenseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin set tenant license unauthorized response has a 4xx status code
func (o *AdminSetTenantLicenseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin set tenant license unauthorized response has a 5xx status code
func (o *AdminSetTenantLicenseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this admin set tenant license unauthorized response a status code equal to that given
func (o *AdminSetTenantLicenseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the admin set tenant license unauthorized response
func (o *AdminSetTenantLicenseUnauthorized) Code() int {
	return 401
}

func (o *AdminSetTenantLicenseUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseUnauthorized %s", 401, payload)
}

func (o *AdminSetTenantLicenseUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseUnauthorized %s", 401, payload)
}

func (o *AdminSetTenantLicenseUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminSetTenantLicenseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSetTenantLicenseForbidden creates a AdminSetTenantLicenseForbidden with default headers values
func NewAdminSetTenantLicenseForbidden() *AdminSetTenantLicenseForbidden {
	return &AdminSetTenantLicenseForbidden{}
}

/*
AdminSetTenantLicenseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AdminSetTenantLicenseForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin set tenant license forbidden response has a 2xx status code
func (o *AdminSetTenantLicenseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin set tenant license forbidden response has a 3xx status code
func (o *AdminSetTenantLicenseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin set tenant license forbidden response has a 4xx status code
func (o *AdminSetTenantLicenseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin set tenant license forbidden response has a 5xx status code
func (o *AdminSetTenantLicenseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this admin set tenant license forbidden response a status code equal to that given
func (o *AdminSetTenantLicenseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the admin set tenant license forbidden response
func (o *AdminSetTenantLicenseForbidden) Code() int {
	return 403
}

func (o *AdminSetTenantLicenseForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseForbidden %s", 403, payload)
}

func (o *AdminSetTenantLicenseForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseForbidden %s", 403, payload)
}

func (o *AdminSetTenantLicenseForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminSetTenantLicenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSetTenantLicenseNotFound creates a AdminSetTenantLicenseNotFound with default headers values
func NewAdminSetTenantLicenseNotFound() *AdminSetTenantLicenseNotFound {
	return &AdminSetTenantLicenseNotFound{}
}

/*
AdminSetTenantLicenseNotFound describes a response with status code 404, with default header values.

Not found
*/
type AdminSetTenantLicenseNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin set tenant license not found response has a 2xx status code
func (o *AdminSetTenantLicenseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin set tenant license not found response has a 3xx status code
func (o *AdminSetTenantLicenseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin set tenant license not found response has a 4xx status code
func (o *AdminSetTenantLicenseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin set tenant license not found response has a 5xx status code
func (o *AdminSetTenantLicenseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this admin set tenant license not found response a status code equal to that given
func (o *AdminSetTenantLicenseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the admin set tenant license not found response
func (o *AdminSetTenantLicenseNotFound) Code() int {
	return 404
}

func (o *AdminSetTenantLicenseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseNotFound %s", 404, payload)
}

func (o *AdminSetTenantLicenseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseNotFound %s", 404, payload)
}

func (o *AdminSetTenantLicenseNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminSetTenantLicenseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSetTenantLicenseUnprocessableEntity creates a AdminSetTenantLicenseUnprocessableEntity with default headers values
func NewAdminSetTenantLicenseUnprocessableEntity() *AdminSetTenantLicenseUnprocessableEntity {
	return &AdminSetTenantLicenseUnprocessableEntity{}
}

/*
AdminSetTenantLicenseUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type AdminSetTenantLicenseUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin set tenant license unprocessable entity response has a 2xx status code
func (o *AdminSetTenantLicenseUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin set tenant license unprocessable entity response has a 3xx status code
func (o *AdminSetTenantLicenseUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin set tenant license unprocessable entity response has a 4xx status code
func (o *AdminSetTenantLicenseUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin set tenant license unprocessable entity response has a 5xx status code
func (o *AdminSetTenantLicenseUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this admin set tenant license unprocessable entity response a status code equal to that given
func (o *AdminSetTenantLicenseUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the admin set tenant license unprocessable entity response
func (o *AdminSetTenantLicenseUnprocessableEntity) Code() int {
	return 422
}

func (o *AdminSetTenantLicenseUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseUnprocessableEntity %s", 422, payload)
}

func (o *AdminSetTenantLicenseUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseUnprocessableEntity %s", 422, payload)
}

func (o *AdminSetTenantLicenseUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminSetTenantLicenseUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminSetTenantLicenseTooManyRequests creates a AdminSetTenantLicenseTooManyRequests with default headers values
func NewAdminSetTenantLicenseTooManyRequests() *AdminSetTenantLicenseTooManyRequests {
	return &AdminSetTenantLicenseTooManyRequests{}
}

/*
AdminSetTenantLicenseTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type AdminSetTenantLicenseTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin set tenant license too many requests response has a 2xx status code
func (o *AdminSetTenantLicenseTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin set tenant license too many requests response has a 3xx status code
func (o *AdminSetTenantLicenseTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin set tenant license too many requests response has a 4xx status code
func (o *AdminSetTenantLicenseTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin set tenant license too many requests response has a 5xx status code
func (o *AdminSetTenantLicenseTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this admin set tenant license too many requests response a status code equal to that given
func (o *AdminSetTenantLicenseTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the admin set tenant license too many requests response
func (o *AdminSetTenantLicenseTooManyRequests) Code() int {
	return 429
}

func (o *AdminSetTenantLicenseTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseTooManyRequests %s", 429, payload)
}

func (o *AdminSetTenantLicenseTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] adminSetTenantLicenseTooManyRequests %s", 429, payload)
}

func (o *AdminSetTenantLicenseTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminSetTenantLicenseTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
