// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAdminGetTenantLicenseParams creates a new AdminGetTenantLicenseParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAdminGetTenantLicenseParams() *AdminGetTenantLicenseParams {
	return &AdminGetTenantLicenseParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAdminGetTenantLicenseParamsWithTimeout creates a new AdminGetTenantLicenseParams object
// with the ability to set a timeout on a request.
func NewAdminGetTenantLicenseParamsWithTimeout(timeout time.Duration) *AdminGetTenantLicenseParams {
	return &AdminGetTenantLicenseParams{
		timeout: timeout,
	}
}

// NewAdminGetTenantLicenseParamsWithContext creates a new AdminGetTenantLicenseParams object
// with the ability to set a context for a request.
func NewAdminGetTenantLicenseParamsWithContext(ctx context.Context) *AdminGetTenantLicenseParams {
	return &AdminGetTenantLicenseParams{
		Context: ctx,
	}
}

// NewAdminGetTenantLicenseParamsWithHTTPClient creates a new AdminGetTenantLicenseParams object
// with the ability to set a custom HTTPClient for a request.
func NewAdminGetTenantLicenseParamsWithHTTPClient(client *http.Client) *AdminGetTenantLicenseParams {
	return &AdminGetTenantLicenseParams{
		HTTPClient: client,
	}
}

/*
AdminGetTenantLicenseParams contains all the parameters to send to the API endpoint

	for the admin get tenant license operation.

	Typically these are written to a http.Request.
*/
type AdminGetTenantLicenseParams struct {

	/* TenantID.

	   Tenant id

	   Default: "default"
	*/
	TenantID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the admin get tenant license params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AdminGetTenantLicenseParams) WithDefaults() *AdminGetTenantLicenseParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the admin get tenant license params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AdminGetTenantLicenseParams) SetDefaults() {
	var (
		tenantIDDefault = string("default")
	)

	val := AdminGetTenantLicenseParams{
		TenantID: tenantIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the admin get tenant license params
func (o *AdminGetTenantLicenseParams) WithTimeout(timeout time.Duration) *AdminGetTenantLicenseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the admin get tenant license params
func (o *AdminGetTenantLicenseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the admin get tenant license params
func (o *AdminGetTenantLicenseParams) WithContext(ctx context.Context) *AdminGetTenantLicenseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the admin get tenant license params
func (o *AdminGetTenantLicenseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the admin get tenant license params
func (o *AdminGetTenantLicenseParams) WithHTTPClient(client *http.Client) *AdminGetTenantLicenseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the admin get tenant license params
func (o *AdminGetTenantLicenseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTenantID adds the tenantID to the admin get tenant license params
func (o *AdminGetTenantLicenseParams) WithTenantID(tenantID string) *AdminGetTenantLicenseParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the admin get tenant license params
func (o *AdminGetTenantLicenseParams) SetTenantID(tenantID string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *AdminGetTenantLicenseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param tenantID
	if err := r.SetPathParam("tenantID", o.TenantID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
