// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/root/models"
)

// GetTenantLicenseReader is a Reader for the GetTenantLicense structure.
type GetTenantLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTenantLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTenantLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTenantLicenseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTenantLicenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTenantLicenseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTenantLicenseTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/admin/tenants/{tenantID}/license] getTenantLicense", response, response.Code())
	}
}

// NewGetTenantLicenseOK creates a GetTenantLicenseOK with default headers values
func NewGetTenantLicenseOK() *GetTenantLicenseOK {
	return &GetTenantLicenseOK{}
}

/*
GetTenantLicenseOK describes a response with status code 200, with default header values.

Licenses
*/
type GetTenantLicenseOK struct {
	Payload *models.License
}

// IsSuccess returns true when this get tenant license o k response has a 2xx status code
func (o *GetTenantLicenseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get tenant license o k response has a 3xx status code
func (o *GetTenantLicenseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tenant license o k response has a 4xx status code
func (o *GetTenantLicenseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tenant license o k response has a 5xx status code
func (o *GetTenantLicenseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get tenant license o k response a status code equal to that given
func (o *GetTenantLicenseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get tenant license o k response
func (o *GetTenantLicenseOK) Code() int {
	return 200
}

func (o *GetTenantLicenseOK) Error() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseOK  %+v", 200, o.Payload)
}

func (o *GetTenantLicenseOK) String() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseOK  %+v", 200, o.Payload)
}

func (o *GetTenantLicenseOK) GetPayload() *models.License {
	return o.Payload
}

func (o *GetTenantLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.License)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenantLicenseUnauthorized creates a GetTenantLicenseUnauthorized with default headers values
func NewGetTenantLicenseUnauthorized() *GetTenantLicenseUnauthorized {
	return &GetTenantLicenseUnauthorized{}
}

/*
GetTenantLicenseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTenantLicenseUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get tenant license unauthorized response has a 2xx status code
func (o *GetTenantLicenseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tenant license unauthorized response has a 3xx status code
func (o *GetTenantLicenseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tenant license unauthorized response has a 4xx status code
func (o *GetTenantLicenseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tenant license unauthorized response has a 5xx status code
func (o *GetTenantLicenseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get tenant license unauthorized response a status code equal to that given
func (o *GetTenantLicenseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get tenant license unauthorized response
func (o *GetTenantLicenseUnauthorized) Code() int {
	return 401
}

func (o *GetTenantLicenseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTenantLicenseUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTenantLicenseUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTenantLicenseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenantLicenseForbidden creates a GetTenantLicenseForbidden with default headers values
func NewGetTenantLicenseForbidden() *GetTenantLicenseForbidden {
	return &GetTenantLicenseForbidden{}
}

/*
GetTenantLicenseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTenantLicenseForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get tenant license forbidden response has a 2xx status code
func (o *GetTenantLicenseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tenant license forbidden response has a 3xx status code
func (o *GetTenantLicenseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tenant license forbidden response has a 4xx status code
func (o *GetTenantLicenseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tenant license forbidden response has a 5xx status code
func (o *GetTenantLicenseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get tenant license forbidden response a status code equal to that given
func (o *GetTenantLicenseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get tenant license forbidden response
func (o *GetTenantLicenseForbidden) Code() int {
	return 403
}

func (o *GetTenantLicenseForbidden) Error() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseForbidden  %+v", 403, o.Payload)
}

func (o *GetTenantLicenseForbidden) String() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseForbidden  %+v", 403, o.Payload)
}

func (o *GetTenantLicenseForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTenantLicenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenantLicenseNotFound creates a GetTenantLicenseNotFound with default headers values
func NewGetTenantLicenseNotFound() *GetTenantLicenseNotFound {
	return &GetTenantLicenseNotFound{}
}

/*
GetTenantLicenseNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetTenantLicenseNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get tenant license not found response has a 2xx status code
func (o *GetTenantLicenseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tenant license not found response has a 3xx status code
func (o *GetTenantLicenseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tenant license not found response has a 4xx status code
func (o *GetTenantLicenseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tenant license not found response has a 5xx status code
func (o *GetTenantLicenseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get tenant license not found response a status code equal to that given
func (o *GetTenantLicenseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get tenant license not found response
func (o *GetTenantLicenseNotFound) Code() int {
	return 404
}

func (o *GetTenantLicenseNotFound) Error() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseNotFound  %+v", 404, o.Payload)
}

func (o *GetTenantLicenseNotFound) String() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseNotFound  %+v", 404, o.Payload)
}

func (o *GetTenantLicenseNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTenantLicenseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTenantLicenseTooManyRequests creates a GetTenantLicenseTooManyRequests with default headers values
func NewGetTenantLicenseTooManyRequests() *GetTenantLicenseTooManyRequests {
	return &GetTenantLicenseTooManyRequests{}
}

/*
GetTenantLicenseTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetTenantLicenseTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get tenant license too many requests response has a 2xx status code
func (o *GetTenantLicenseTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tenant license too many requests response has a 3xx status code
func (o *GetTenantLicenseTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tenant license too many requests response has a 4xx status code
func (o *GetTenantLicenseTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tenant license too many requests response has a 5xx status code
func (o *GetTenantLicenseTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get tenant license too many requests response a status code equal to that given
func (o *GetTenantLicenseTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get tenant license too many requests response
func (o *GetTenantLicenseTooManyRequests) Code() int {
	return 429
}

func (o *GetTenantLicenseTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTenantLicenseTooManyRequests) String() string {
	return fmt.Sprintf("[GET /api/admin/tenants/{tenantID}/license][%d] getTenantLicenseTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTenantLicenseTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTenantLicenseTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
