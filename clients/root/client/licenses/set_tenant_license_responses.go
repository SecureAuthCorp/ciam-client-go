// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/root/models"
)

// SetTenantLicenseReader is a Reader for the SetTenantLicense structure.
type SetTenantLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetTenantLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSetTenantLicenseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetTenantLicenseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSetTenantLicenseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetTenantLicenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetTenantLicenseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSetTenantLicenseUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetTenantLicenseTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/admin/tenants/{tenantID}/license] setTenantLicense", response, response.Code())
	}
}

// NewSetTenantLicenseNoContent creates a SetTenantLicenseNoContent with default headers values
func NewSetTenantLicenseNoContent() *SetTenantLicenseNoContent {
	return &SetTenantLicenseNoContent{}
}

/*
SetTenantLicenseNoContent describes a response with status code 204, with default header values.

	license set
*/
type SetTenantLicenseNoContent struct {
}

// IsSuccess returns true when this set tenant license no content response has a 2xx status code
func (o *SetTenantLicenseNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set tenant license no content response has a 3xx status code
func (o *SetTenantLicenseNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set tenant license no content response has a 4xx status code
func (o *SetTenantLicenseNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this set tenant license no content response has a 5xx status code
func (o *SetTenantLicenseNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this set tenant license no content response a status code equal to that given
func (o *SetTenantLicenseNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the set tenant license no content response
func (o *SetTenantLicenseNoContent) Code() int {
	return 204
}

func (o *SetTenantLicenseNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseNoContent ", 204)
}

func (o *SetTenantLicenseNoContent) String() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseNoContent ", 204)
}

func (o *SetTenantLicenseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetTenantLicenseBadRequest creates a SetTenantLicenseBadRequest with default headers values
func NewSetTenantLicenseBadRequest() *SetTenantLicenseBadRequest {
	return &SetTenantLicenseBadRequest{}
}

/*
SetTenantLicenseBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SetTenantLicenseBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this set tenant license bad request response has a 2xx status code
func (o *SetTenantLicenseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set tenant license bad request response has a 3xx status code
func (o *SetTenantLicenseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set tenant license bad request response has a 4xx status code
func (o *SetTenantLicenseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set tenant license bad request response has a 5xx status code
func (o *SetTenantLicenseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set tenant license bad request response a status code equal to that given
func (o *SetTenantLicenseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set tenant license bad request response
func (o *SetTenantLicenseBadRequest) Code() int {
	return 400
}

func (o *SetTenantLicenseBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseBadRequest  %+v", 400, o.Payload)
}

func (o *SetTenantLicenseBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseBadRequest  %+v", 400, o.Payload)
}

func (o *SetTenantLicenseBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetTenantLicenseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTenantLicenseUnauthorized creates a SetTenantLicenseUnauthorized with default headers values
func NewSetTenantLicenseUnauthorized() *SetTenantLicenseUnauthorized {
	return &SetTenantLicenseUnauthorized{}
}

/*
SetTenantLicenseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetTenantLicenseUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this set tenant license unauthorized response has a 2xx status code
func (o *SetTenantLicenseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set tenant license unauthorized response has a 3xx status code
func (o *SetTenantLicenseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set tenant license unauthorized response has a 4xx status code
func (o *SetTenantLicenseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set tenant license unauthorized response has a 5xx status code
func (o *SetTenantLicenseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set tenant license unauthorized response a status code equal to that given
func (o *SetTenantLicenseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set tenant license unauthorized response
func (o *SetTenantLicenseUnauthorized) Code() int {
	return 401
}

func (o *SetTenantLicenseUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseUnauthorized  %+v", 401, o.Payload)
}

func (o *SetTenantLicenseUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseUnauthorized  %+v", 401, o.Payload)
}

func (o *SetTenantLicenseUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetTenantLicenseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTenantLicenseForbidden creates a SetTenantLicenseForbidden with default headers values
func NewSetTenantLicenseForbidden() *SetTenantLicenseForbidden {
	return &SetTenantLicenseForbidden{}
}

/*
SetTenantLicenseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetTenantLicenseForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this set tenant license forbidden response has a 2xx status code
func (o *SetTenantLicenseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set tenant license forbidden response has a 3xx status code
func (o *SetTenantLicenseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set tenant license forbidden response has a 4xx status code
func (o *SetTenantLicenseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set tenant license forbidden response has a 5xx status code
func (o *SetTenantLicenseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set tenant license forbidden response a status code equal to that given
func (o *SetTenantLicenseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set tenant license forbidden response
func (o *SetTenantLicenseForbidden) Code() int {
	return 403
}

func (o *SetTenantLicenseForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseForbidden  %+v", 403, o.Payload)
}

func (o *SetTenantLicenseForbidden) String() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseForbidden  %+v", 403, o.Payload)
}

func (o *SetTenantLicenseForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetTenantLicenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTenantLicenseNotFound creates a SetTenantLicenseNotFound with default headers values
func NewSetTenantLicenseNotFound() *SetTenantLicenseNotFound {
	return &SetTenantLicenseNotFound{}
}

/*
SetTenantLicenseNotFound describes a response with status code 404, with default header values.

Not found
*/
type SetTenantLicenseNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this set tenant license not found response has a 2xx status code
func (o *SetTenantLicenseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set tenant license not found response has a 3xx status code
func (o *SetTenantLicenseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set tenant license not found response has a 4xx status code
func (o *SetTenantLicenseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set tenant license not found response has a 5xx status code
func (o *SetTenantLicenseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set tenant license not found response a status code equal to that given
func (o *SetTenantLicenseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set tenant license not found response
func (o *SetTenantLicenseNotFound) Code() int {
	return 404
}

func (o *SetTenantLicenseNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseNotFound  %+v", 404, o.Payload)
}

func (o *SetTenantLicenseNotFound) String() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseNotFound  %+v", 404, o.Payload)
}

func (o *SetTenantLicenseNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetTenantLicenseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTenantLicenseUnprocessableEntity creates a SetTenantLicenseUnprocessableEntity with default headers values
func NewSetTenantLicenseUnprocessableEntity() *SetTenantLicenseUnprocessableEntity {
	return &SetTenantLicenseUnprocessableEntity{}
}

/*
SetTenantLicenseUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type SetTenantLicenseUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this set tenant license unprocessable entity response has a 2xx status code
func (o *SetTenantLicenseUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set tenant license unprocessable entity response has a 3xx status code
func (o *SetTenantLicenseUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set tenant license unprocessable entity response has a 4xx status code
func (o *SetTenantLicenseUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this set tenant license unprocessable entity response has a 5xx status code
func (o *SetTenantLicenseUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this set tenant license unprocessable entity response a status code equal to that given
func (o *SetTenantLicenseUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the set tenant license unprocessable entity response
func (o *SetTenantLicenseUnprocessableEntity) Code() int {
	return 422
}

func (o *SetTenantLicenseUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SetTenantLicenseUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SetTenantLicenseUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetTenantLicenseUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetTenantLicenseTooManyRequests creates a SetTenantLicenseTooManyRequests with default headers values
func NewSetTenantLicenseTooManyRequests() *SetTenantLicenseTooManyRequests {
	return &SetTenantLicenseTooManyRequests{}
}

/*
SetTenantLicenseTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type SetTenantLicenseTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this set tenant license too many requests response has a 2xx status code
func (o *SetTenantLicenseTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set tenant license too many requests response has a 3xx status code
func (o *SetTenantLicenseTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set tenant license too many requests response has a 4xx status code
func (o *SetTenantLicenseTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this set tenant license too many requests response has a 5xx status code
func (o *SetTenantLicenseTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this set tenant license too many requests response a status code equal to that given
func (o *SetTenantLicenseTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the set tenant license too many requests response
func (o *SetTenantLicenseTooManyRequests) Code() int {
	return 429
}

func (o *SetTenantLicenseTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetTenantLicenseTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /api/admin/tenants/{tenantID}/license][%d] setTenantLicenseTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetTenantLicenseTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetTenantLicenseTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
