// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new licenses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new licenses API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new licenses API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for licenses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AdminGetTenantLicense(params *AdminGetTenantLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminGetTenantLicenseOK, error)

	AdminSetTenantLicense(params *AdminSetTenantLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminSetTenantLicenseNoContent, error)

	GetConfiguredLicenses(params *GetConfiguredLicensesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfiguredLicensesOK, error)

	SystemGetTenantLicense(params *SystemGetTenantLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemGetTenantLicenseOK, error)

	SystemSetTenantLicense(params *SystemSetTenantLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemSetTenantLicenseNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AdminGetTenantLicense gets tenant license

Get tenant license.
*/
func (a *Client) AdminGetTenantLicense(params *AdminGetTenantLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminGetTenantLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminGetTenantLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminGetTenantLicense",
		Method:             "GET",
		PathPattern:        "/api/admin/tenants/{tenantID}/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminGetTenantLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminGetTenantLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for adminGetTenantLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AdminSetTenantLicense sets tenant license
*/
func (a *Client) AdminSetTenantLicense(params *AdminSetTenantLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdminSetTenantLicenseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdminSetTenantLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adminSetTenantLicense",
		Method:             "PUT",
		PathPattern:        "/api/admin/tenants/{tenantID}/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AdminSetTenantLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdminSetTenantLicenseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for adminSetTenantLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfiguredLicenses gets defined licenses

Get defined licenses.
*/
func (a *Client) GetConfiguredLicenses(params *GetConfiguredLicensesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetConfiguredLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfiguredLicensesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getConfiguredLicenses",
		Method:             "GET",
		PathPattern:        "/api/admin/tenants/{tenantID}/licenses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfiguredLicensesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfiguredLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfiguredLicenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemGetTenantLicense gets tenant license

Get tenant license.
*/
func (a *Client) SystemGetTenantLicense(params *SystemGetTenantLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemGetTenantLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemGetTenantLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "systemGetTenantLicense",
		Method:             "GET",
		PathPattern:        "/api/system/tenants/{tenantID}/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemGetTenantLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemGetTenantLicenseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemGetTenantLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SystemSetTenantLicense sets tenant license
*/
func (a *Client) SystemSetTenantLicense(params *SystemSetTenantLicenseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SystemSetTenantLicenseNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemSetTenantLicenseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "systemSetTenantLicense",
		Method:             "PUT",
		PathPattern:        "/api/system/tenants/{tenantID}/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SystemSetTenantLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemSetTenantLicenseNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for systemSetTenantLicense: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
