// Code generated by go-swagger; DO NOT EDIT.

package quotas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetQuotaUsageParams creates a new GetQuotaUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetQuotaUsageParams() *GetQuotaUsageParams {
	return &GetQuotaUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetQuotaUsageParamsWithTimeout creates a new GetQuotaUsageParams object
// with the ability to set a timeout on a request.
func NewGetQuotaUsageParamsWithTimeout(timeout time.Duration) *GetQuotaUsageParams {
	return &GetQuotaUsageParams{
		timeout: timeout,
	}
}

// NewGetQuotaUsageParamsWithContext creates a new GetQuotaUsageParams object
// with the ability to set a context for a request.
func NewGetQuotaUsageParamsWithContext(ctx context.Context) *GetQuotaUsageParams {
	return &GetQuotaUsageParams{
		Context: ctx,
	}
}

// NewGetQuotaUsageParamsWithHTTPClient creates a new GetQuotaUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetQuotaUsageParamsWithHTTPClient(client *http.Client) *GetQuotaUsageParams {
	return &GetQuotaUsageParams{
		HTTPClient: client,
	}
}

/* GetQuotaUsageParams contains all the parameters to send to the API endpoint
   for the get quota usage operation.

   Typically these are written to a http.Request.
*/
type GetQuotaUsageParams struct {

	/* Current.

	   Current
	*/
	Current *bool

	/* Month.

	   Month

	   Format: int64
	*/
	Month int64

	/* Tid.

	   Tenant id

	   Default: "default"
	*/
	Tid string

	/* Year.

	   Year

	   Format: int64
	*/
	Year int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get quota usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQuotaUsageParams) WithDefaults() *GetQuotaUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get quota usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQuotaUsageParams) SetDefaults() {
	var (
		tidDefault = string("default")
	)

	val := GetQuotaUsageParams{
		Tid: tidDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get quota usage params
func (o *GetQuotaUsageParams) WithTimeout(timeout time.Duration) *GetQuotaUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quota usage params
func (o *GetQuotaUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quota usage params
func (o *GetQuotaUsageParams) WithContext(ctx context.Context) *GetQuotaUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quota usage params
func (o *GetQuotaUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quota usage params
func (o *GetQuotaUsageParams) WithHTTPClient(client *http.Client) *GetQuotaUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quota usage params
func (o *GetQuotaUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrent adds the current to the get quota usage params
func (o *GetQuotaUsageParams) WithCurrent(current *bool) *GetQuotaUsageParams {
	o.SetCurrent(current)
	return o
}

// SetCurrent adds the current to the get quota usage params
func (o *GetQuotaUsageParams) SetCurrent(current *bool) {
	o.Current = current
}

// WithMonth adds the month to the get quota usage params
func (o *GetQuotaUsageParams) WithMonth(month int64) *GetQuotaUsageParams {
	o.SetMonth(month)
	return o
}

// SetMonth adds the month to the get quota usage params
func (o *GetQuotaUsageParams) SetMonth(month int64) {
	o.Month = month
}

// WithTid adds the tid to the get quota usage params
func (o *GetQuotaUsageParams) WithTid(tid string) *GetQuotaUsageParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the get quota usage params
func (o *GetQuotaUsageParams) SetTid(tid string) {
	o.Tid = tid
}

// WithYear adds the year to the get quota usage params
func (o *GetQuotaUsageParams) WithYear(year int64) *GetQuotaUsageParams {
	o.SetYear(year)
	return o
}

// SetYear adds the year to the get quota usage params
func (o *GetQuotaUsageParams) SetYear(year int64) {
	o.Year = year
}

// WriteToRequest writes these params to a swagger request
func (o *GetQuotaUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Current != nil {

		// query param current
		var qrCurrent bool

		if o.Current != nil {
			qrCurrent = *o.Current
		}
		qCurrent := swag.FormatBool(qrCurrent)
		if qCurrent != "" {

			if err := r.SetQueryParam("current", qCurrent); err != nil {
				return err
			}
		}
	}

	// query param month
	qrMonth := o.Month
	qMonth := swag.FormatInt64(qrMonth)
	if qMonth != "" {

		if err := r.SetQueryParam("month", qMonth); err != nil {
			return err
		}
	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	// query param year
	qrYear := o.Year
	qYear := swag.FormatInt64(qrYear)
	if qYear != "" {

		if err := r.SetQueryParam("year", qYear); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
