// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/root/models"
)

// PatchConfigurationReader is a Reader for the PatchConfiguration structure.
type PatchConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPatchConfigurationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchConfigurationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchConfigurationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConfigurationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchConfigurationUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConfigurationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConfigurationNoContent creates a PatchConfigurationNoContent with default headers values
func NewPatchConfigurationNoContent() *PatchConfigurationNoContent {
	return &PatchConfigurationNoContent{}
}

/*
PatchConfigurationNoContent describes a response with status code 204, with default header values.

	patch applied
*/
type PatchConfigurationNoContent struct {
}

// IsSuccess returns true when this patch configuration no content response has a 2xx status code
func (o *PatchConfigurationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch configuration no content response has a 3xx status code
func (o *PatchConfigurationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch configuration no content response has a 4xx status code
func (o *PatchConfigurationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch configuration no content response has a 5xx status code
func (o *PatchConfigurationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this patch configuration no content response a status code equal to that given
func (o *PatchConfigurationNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *PatchConfigurationNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationNoContent ", 204)
}

func (o *PatchConfigurationNoContent) String() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationNoContent ", 204)
}

func (o *PatchConfigurationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchConfigurationBadRequest creates a PatchConfigurationBadRequest with default headers values
func NewPatchConfigurationBadRequest() *PatchConfigurationBadRequest {
	return &PatchConfigurationBadRequest{}
}

/*
PatchConfigurationBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type PatchConfigurationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch configuration bad request response has a 2xx status code
func (o *PatchConfigurationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch configuration bad request response has a 3xx status code
func (o *PatchConfigurationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch configuration bad request response has a 4xx status code
func (o *PatchConfigurationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch configuration bad request response has a 5xx status code
func (o *PatchConfigurationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch configuration bad request response a status code equal to that given
func (o *PatchConfigurationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchConfigurationBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConfigurationBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationBadRequest  %+v", 400, o.Payload)
}

func (o *PatchConfigurationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConfigurationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigurationUnauthorized creates a PatchConfigurationUnauthorized with default headers values
func NewPatchConfigurationUnauthorized() *PatchConfigurationUnauthorized {
	return &PatchConfigurationUnauthorized{}
}

/*
PatchConfigurationUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type PatchConfigurationUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch configuration unauthorized response has a 2xx status code
func (o *PatchConfigurationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch configuration unauthorized response has a 3xx status code
func (o *PatchConfigurationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch configuration unauthorized response has a 4xx status code
func (o *PatchConfigurationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch configuration unauthorized response has a 5xx status code
func (o *PatchConfigurationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch configuration unauthorized response a status code equal to that given
func (o *PatchConfigurationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConfigurationUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConfigurationUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConfigurationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConfigurationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigurationForbidden creates a PatchConfigurationForbidden with default headers values
func NewPatchConfigurationForbidden() *PatchConfigurationForbidden {
	return &PatchConfigurationForbidden{}
}

/*
PatchConfigurationForbidden describes a response with status code 403, with default header values.

HttpError
*/
type PatchConfigurationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch configuration forbidden response has a 2xx status code
func (o *PatchConfigurationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch configuration forbidden response has a 3xx status code
func (o *PatchConfigurationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch configuration forbidden response has a 4xx status code
func (o *PatchConfigurationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch configuration forbidden response has a 5xx status code
func (o *PatchConfigurationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch configuration forbidden response a status code equal to that given
func (o *PatchConfigurationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConfigurationForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConfigurationForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationForbidden  %+v", 403, o.Payload)
}

func (o *PatchConfigurationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConfigurationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigurationNotFound creates a PatchConfigurationNotFound with default headers values
func NewPatchConfigurationNotFound() *PatchConfigurationNotFound {
	return &PatchConfigurationNotFound{}
}

/*
PatchConfigurationNotFound describes a response with status code 404, with default header values.

HttpError
*/
type PatchConfigurationNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch configuration not found response has a 2xx status code
func (o *PatchConfigurationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch configuration not found response has a 3xx status code
func (o *PatchConfigurationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch configuration not found response has a 4xx status code
func (o *PatchConfigurationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch configuration not found response has a 5xx status code
func (o *PatchConfigurationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch configuration not found response a status code equal to that given
func (o *PatchConfigurationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConfigurationNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConfigurationNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationNotFound  %+v", 404, o.Payload)
}

func (o *PatchConfigurationNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigurationUnprocessableEntity creates a PatchConfigurationUnprocessableEntity with default headers values
func NewPatchConfigurationUnprocessableEntity() *PatchConfigurationUnprocessableEntity {
	return &PatchConfigurationUnprocessableEntity{}
}

/*
PatchConfigurationUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type PatchConfigurationUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch configuration unprocessable entity response has a 2xx status code
func (o *PatchConfigurationUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch configuration unprocessable entity response has a 3xx status code
func (o *PatchConfigurationUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch configuration unprocessable entity response has a 4xx status code
func (o *PatchConfigurationUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch configuration unprocessable entity response has a 5xx status code
func (o *PatchConfigurationUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this patch configuration unprocessable entity response a status code equal to that given
func (o *PatchConfigurationUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *PatchConfigurationUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchConfigurationUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchConfigurationUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConfigurationUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConfigurationTooManyRequests creates a PatchConfigurationTooManyRequests with default headers values
func NewPatchConfigurationTooManyRequests() *PatchConfigurationTooManyRequests {
	return &PatchConfigurationTooManyRequests{}
}

/*
PatchConfigurationTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type PatchConfigurationTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch configuration too many requests response has a 2xx status code
func (o *PatchConfigurationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch configuration too many requests response has a 3xx status code
func (o *PatchConfigurationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch configuration too many requests response has a 4xx status code
func (o *PatchConfigurationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch configuration too many requests response has a 5xx status code
func (o *PatchConfigurationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch configuration too many requests response a status code equal to that given
func (o *PatchConfigurationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConfigurationTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConfigurationTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /api/system/configuration][%d] patchConfigurationTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConfigurationTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConfigurationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
