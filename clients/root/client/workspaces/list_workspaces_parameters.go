// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListWorkspacesParams creates a new ListWorkspacesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListWorkspacesParams() *ListWorkspacesParams {
	return &ListWorkspacesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListWorkspacesParamsWithTimeout creates a new ListWorkspacesParams object
// with the ability to set a timeout on a request.
func NewListWorkspacesParamsWithTimeout(timeout time.Duration) *ListWorkspacesParams {
	return &ListWorkspacesParams{
		timeout: timeout,
	}
}

// NewListWorkspacesParamsWithContext creates a new ListWorkspacesParams object
// with the ability to set a context for a request.
func NewListWorkspacesParamsWithContext(ctx context.Context) *ListWorkspacesParams {
	return &ListWorkspacesParams{
		Context: ctx,
	}
}

// NewListWorkspacesParamsWithHTTPClient creates a new ListWorkspacesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListWorkspacesParamsWithHTTPClient(client *http.Client) *ListWorkspacesParams {
	return &ListWorkspacesParams{
		HTTPClient: client,
	}
}

/*
ListWorkspacesParams contains all the parameters to send to the API endpoint

	for the list workspaces operation.

	Typically these are written to a http.Request.
*/
type ListWorkspacesParams struct {

	/* AfterWorkspaceID.

	     optional list workspaces after given id
	AfterWorkspaceID
	*/
	AfterWorkspaceID *string

	/* BeforeWorkspaceID.

	     optional list workspaces before given id
	BeforeWorkspaceID
	*/
	BeforeWorkspaceID *string

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	/* Limit.

	     optional limit results
	Limit

	     Format: int64
	     Default: 20
	*/
	Limit *int64

	/* Order.

	     optional order workspaces by given direction
	Order
	*/
	Order *string

	/* SearchPhrase.

	     Optional search phrase: workspace id OR workspace name substring (case insensitive)
	SearchPhrase
	*/
	SearchPhrase *string

	/* Sort.

	     optional sort workspaces by given field
	Sort
	*/
	Sort *string

	/* Template.

	   optional flag to filter by template
	*/
	Template *bool

	/* TenantID.

	   Tenant ID

	   Default: "default"
	*/
	TenantID string

	/* ThemeID.

	   optional flag to filter by theme id
	*/
	ThemeID *string

	/* WorkspaceTypes.

	   comma separated workspace types that are to be filtered out

	   Default: "admin,developer,system,regular,organization"
	*/
	WorkspaceTypes *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list workspaces params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListWorkspacesParams) WithDefaults() *ListWorkspacesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list workspaces params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListWorkspacesParams) SetDefaults() {
	var (
		limitDefault = int64(20)

		tenantIDDefault = string("default")

		workspaceTypesDefault = string("admin,developer,system,regular,organization")
	)

	val := ListWorkspacesParams{
		Limit:          &limitDefault,
		TenantID:       tenantIDDefault,
		WorkspaceTypes: &workspaceTypesDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list workspaces params
func (o *ListWorkspacesParams) WithTimeout(timeout time.Duration) *ListWorkspacesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list workspaces params
func (o *ListWorkspacesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list workspaces params
func (o *ListWorkspacesParams) WithContext(ctx context.Context) *ListWorkspacesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list workspaces params
func (o *ListWorkspacesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list workspaces params
func (o *ListWorkspacesParams) WithHTTPClient(client *http.Client) *ListWorkspacesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list workspaces params
func (o *ListWorkspacesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterWorkspaceID adds the afterWorkspaceID to the list workspaces params
func (o *ListWorkspacesParams) WithAfterWorkspaceID(afterWorkspaceID *string) *ListWorkspacesParams {
	o.SetAfterWorkspaceID(afterWorkspaceID)
	return o
}

// SetAfterWorkspaceID adds the afterWorkspaceId to the list workspaces params
func (o *ListWorkspacesParams) SetAfterWorkspaceID(afterWorkspaceID *string) {
	o.AfterWorkspaceID = afterWorkspaceID
}

// WithBeforeWorkspaceID adds the beforeWorkspaceID to the list workspaces params
func (o *ListWorkspacesParams) WithBeforeWorkspaceID(beforeWorkspaceID *string) *ListWorkspacesParams {
	o.SetBeforeWorkspaceID(beforeWorkspaceID)
	return o
}

// SetBeforeWorkspaceID adds the beforeWorkspaceId to the list workspaces params
func (o *ListWorkspacesParams) SetBeforeWorkspaceID(beforeWorkspaceID *string) {
	o.BeforeWorkspaceID = beforeWorkspaceID
}

// WithIfMatch adds the ifMatch to the list workspaces params
func (o *ListWorkspacesParams) WithIfMatch(ifMatch *string) *ListWorkspacesParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the list workspaces params
func (o *ListWorkspacesParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithLimit adds the limit to the list workspaces params
func (o *ListWorkspacesParams) WithLimit(limit *int64) *ListWorkspacesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list workspaces params
func (o *ListWorkspacesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOrder adds the order to the list workspaces params
func (o *ListWorkspacesParams) WithOrder(order *string) *ListWorkspacesParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the list workspaces params
func (o *ListWorkspacesParams) SetOrder(order *string) {
	o.Order = order
}

// WithSearchPhrase adds the searchPhrase to the list workspaces params
func (o *ListWorkspacesParams) WithSearchPhrase(searchPhrase *string) *ListWorkspacesParams {
	o.SetSearchPhrase(searchPhrase)
	return o
}

// SetSearchPhrase adds the searchPhrase to the list workspaces params
func (o *ListWorkspacesParams) SetSearchPhrase(searchPhrase *string) {
	o.SearchPhrase = searchPhrase
}

// WithSort adds the sort to the list workspaces params
func (o *ListWorkspacesParams) WithSort(sort *string) *ListWorkspacesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list workspaces params
func (o *ListWorkspacesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTemplate adds the template to the list workspaces params
func (o *ListWorkspacesParams) WithTemplate(template *bool) *ListWorkspacesParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the list workspaces params
func (o *ListWorkspacesParams) SetTemplate(template *bool) {
	o.Template = template
}

// WithTenantID adds the tenantID to the list workspaces params
func (o *ListWorkspacesParams) WithTenantID(tenantID string) *ListWorkspacesParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the list workspaces params
func (o *ListWorkspacesParams) SetTenantID(tenantID string) {
	o.TenantID = tenantID
}

// WithThemeID adds the themeID to the list workspaces params
func (o *ListWorkspacesParams) WithThemeID(themeID *string) *ListWorkspacesParams {
	o.SetThemeID(themeID)
	return o
}

// SetThemeID adds the themeId to the list workspaces params
func (o *ListWorkspacesParams) SetThemeID(themeID *string) {
	o.ThemeID = themeID
}

// WithWorkspaceTypes adds the workspaceTypes to the list workspaces params
func (o *ListWorkspacesParams) WithWorkspaceTypes(workspaceTypes *string) *ListWorkspacesParams {
	o.SetWorkspaceTypes(workspaceTypes)
	return o
}

// SetWorkspaceTypes adds the workspaceTypes to the list workspaces params
func (o *ListWorkspacesParams) SetWorkspaceTypes(workspaceTypes *string) {
	o.WorkspaceTypes = workspaceTypes
}

// WriteToRequest writes these params to a swagger request
func (o *ListWorkspacesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterWorkspaceID != nil {

		// query param after_workspace_id
		var qrAfterWorkspaceID string

		if o.AfterWorkspaceID != nil {
			qrAfterWorkspaceID = *o.AfterWorkspaceID
		}
		qAfterWorkspaceID := qrAfterWorkspaceID
		if qAfterWorkspaceID != "" {

			if err := r.SetQueryParam("after_workspace_id", qAfterWorkspaceID); err != nil {
				return err
			}
		}
	}

	if o.BeforeWorkspaceID != nil {

		// query param before_workspace_id
		var qrBeforeWorkspaceID string

		if o.BeforeWorkspaceID != nil {
			qrBeforeWorkspaceID = *o.BeforeWorkspaceID
		}
		qBeforeWorkspaceID := qrBeforeWorkspaceID
		if qBeforeWorkspaceID != "" {

			if err := r.SetQueryParam("before_workspace_id", qBeforeWorkspaceID); err != nil {
				return err
			}
		}
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.SearchPhrase != nil {

		// query param search_phrase
		var qrSearchPhrase string

		if o.SearchPhrase != nil {
			qrSearchPhrase = *o.SearchPhrase
		}
		qSearchPhrase := qrSearchPhrase
		if qSearchPhrase != "" {

			if err := r.SetQueryParam("search_phrase", qSearchPhrase); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Template != nil {

		// query param template
		var qrTemplate bool

		if o.Template != nil {
			qrTemplate = *o.Template
		}
		qTemplate := swag.FormatBool(qrTemplate)
		if qTemplate != "" {

			if err := r.SetQueryParam("template", qTemplate); err != nil {
				return err
			}
		}
	}

	// path param tenantID
	if err := r.SetPathParam("tenantID", o.TenantID); err != nil {
		return err
	}

	if o.ThemeID != nil {

		// query param theme_id
		var qrThemeID string

		if o.ThemeID != nil {
			qrThemeID = *o.ThemeID
		}
		qThemeID := qrThemeID
		if qThemeID != "" {

			if err := r.SetQueryParam("theme_id", qThemeID); err != nil {
				return err
			}
		}
	}

	if o.WorkspaceTypes != nil {

		// query param workspace_types
		var qrWorkspaceTypes string

		if o.WorkspaceTypes != nil {
			qrWorkspaceTypes = *o.WorkspaceTypes
		}
		qWorkspaceTypes := qrWorkspaceTypes
		if qWorkspaceTypes != "" {

			if err := r.SetQueryParam("workspace_types", qWorkspaceTypes); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
