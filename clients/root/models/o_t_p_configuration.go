// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OTPConfiguration o t p configuration
//
// swagger:model OTPConfiguration
type OTPConfiguration struct {

	// The maximum time one-time code is valid.
	// Example: 5m
	// Required: true
	// Format: duration
	Expiration strfmt.Duration `json:"expiration" yaml:"expiration"`

	// The number of characters for one-time code.
	// Example: 6
	// Required: true
	// Maximum: 10
	// Minimum: 4
	Length int64 `json:"length" yaml:"length"`
}

// Validate validates this o t p configuration
func (m *OTPConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OTPConfiguration) validateExpiration(formats strfmt.Registry) error {

	if err := validate.Required("expiration", "body", strfmt.Duration(m.Expiration)); err != nil {
		return err
	}

	if err := validate.FormatOf("expiration", "body", "duration", m.Expiration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OTPConfiguration) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", int64(m.Length)); err != nil {
		return err
	}

	if err := validate.MinimumInt("length", "body", m.Length, 4, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("length", "body", m.Length, 10, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this o t p configuration based on context it is used
func (m *OTPConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OTPConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OTPConfiguration) UnmarshalBinary(b []byte) error {
	var res OTPConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
