// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubSettings GitHub IDP specific settings
//
// swagger:model GithubSettings
type GithubSettings struct {

	// Client ID of your OAuth application registered in GitHub
	//
	// You can find your client ID in GitHub > Settings > Developer Settings > OAuth Apps > Your Application
	// Example: client
	ClientID string `json:"client_id,omitempty" yaml:"client_id,omitempty"`

	// If enabled, the groups a user belongs to are collected
	//
	// If enabled, the `groups` attribute from the authentication context gets populated with the
	// user's groups and takes from of `organization_id.group name`
	FetchGroups bool `json:"fetch_groups,omitempty" yaml:"fetch_groups,omitempty"`

	// An array of allowed OAuth scopes which the client requests
	//
	// The following scopes can be configured for GitHub application:
	// `phone`, `email`, `openid`, `profile`.
	// Example: ["email","profile","openid"]
	Scopes []string `json:"scopes" yaml:"scopes"`

	// Whether to send the identifier as a `login_hint` parameter to the IDP
	SendLoginHint bool `json:"send_login_hint,omitempty" yaml:"send_login_hint,omitempty"`
}

// Validate validates this github settings
func (m *GithubSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this github settings based on context it is used
func (m *GithubSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GithubSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubSettings) UnmarshalBinary(b []byte) error {
	var res GithubSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
