// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Webhook Custom Branding Webhook
//
// swagger:model Webhook
type Webhook struct {

	// Active
	Active bool `json:"active,omitempty" yaml:"active,omitempty"`

	// API Key
	APIKey string `json:"api_key,omitempty" yaml:"api_key,omitempty"`

	// events
	Events map[string][]string `json:"events,omitempty" yaml:"events,omitempty"`

	// Insecure
	Insecure bool `json:"insecure,omitempty" yaml:"insecure,omitempty"`

	// ID of the server
	// Required: true
	ServerID string `json:"server_id" yaml:"server_id"`

	// ID of the tenant
	// Example: default
	// Required: true
	TenantID string `json:"tenant_id" yaml:"tenant_id"`

	// url of the Webhook
	URL string `json:"url,omitempty" yaml:"url,omitempty"`

	// ID to the Webhook
	// Required: true
	WebhookID string `json:"webhook_id" yaml:"webhook_id"`
}

// Validate validates this webhook
func (m *Webhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebhookID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Webhook) validateServerID(formats strfmt.Registry) error {

	if err := validate.RequiredString("server_id", "body", m.ServerID); err != nil {
		return err
	}

	return nil
}

func (m *Webhook) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *Webhook) validateWebhookID(formats strfmt.Registry) error {

	if err := validate.RequiredString("webhook_id", "body", m.WebhookID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this webhook based on context it is used
func (m *Webhook) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Webhook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Webhook) UnmarshalBinary(b []byte) error {
	var res Webhook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
