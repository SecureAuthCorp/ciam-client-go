// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Licenses licenses
//
// swagger:model Licenses
type Licenses struct {

	// DefaultLicenseDuration is the default license duration for new tenants, 0 means unlimited
	// Format: duration
	DefaultLicenseDuration strfmt.Duration `json:"default_license_duration,omitempty" yaml:"default_license_duration,omitempty"`

	// DefaultLicenseType is the default license type for new tenants
	// Enum: ["trial","enterprise"]
	DefaultLicenseType string `json:"default_license_type,omitempty" yaml:"default_license_type,omitempty"`

	// Is licensing mechanism enabled
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`

	// All available licenses with default capabilities
	Licenses []*LicenseTypeWithDefaultCapabilities `json:"licenses" yaml:"licenses"`
}

// Validate validates this licenses
func (m *Licenses) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultLicenseDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Licenses) validateDefaultLicenseDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultLicenseDuration) { // not required
		return nil
	}

	if err := validate.FormatOf("default_license_duration", "body", "duration", m.DefaultLicenseDuration.String(), formats); err != nil {
		return err
	}

	return nil
}

var licensesTypeDefaultLicenseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["trial","enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licensesTypeDefaultLicenseTypePropEnum = append(licensesTypeDefaultLicenseTypePropEnum, v)
	}
}

const (

	// LicensesDefaultLicenseTypeTrial captures enum value "trial"
	LicensesDefaultLicenseTypeTrial string = "trial"

	// LicensesDefaultLicenseTypeEnterprise captures enum value "enterprise"
	LicensesDefaultLicenseTypeEnterprise string = "enterprise"
)

// prop value enum
func (m *Licenses) validateDefaultLicenseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licensesTypeDefaultLicenseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Licenses) validateDefaultLicenseType(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultLicenseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDefaultLicenseTypeEnum("default_license_type", "body", m.DefaultLicenseType); err != nil {
		return err
	}

	return nil
}

func (m *Licenses) validateLicenses(formats strfmt.Registry) error {
	if swag.IsZero(m.Licenses) { // not required
		return nil
	}

	for i := 0; i < len(m.Licenses); i++ {
		if swag.IsZero(m.Licenses[i]) { // not required
			continue
		}

		if m.Licenses[i] != nil {
			if err := m.Licenses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this licenses based on the context it is used
func (m *Licenses) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLicenses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Licenses) contextValidateLicenses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Licenses); i++ {

		if m.Licenses[i] != nil {

			if swag.IsZero(m.Licenses[i]) { // not required
				return nil
			}

			if err := m.Licenses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("licenses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("licenses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Licenses) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Licenses) UnmarshalBinary(b []byte) error {
	var res Licenses
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
