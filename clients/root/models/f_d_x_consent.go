// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FDXConsent f d x consent
//
// swagger:model FDXConsent
type FDXConsent struct {

	// authorization server id
	AuthorizationServerID string `json:"authorization_server_id,omitempty"`

	// client id
	ClientID string `json:"client_id,omitempty"`

	// Time of consent creation
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"createdTime,omitempty"`

	// Consent duration, in days, from day of original grant.
	DurationPeriod int64 `json:"durationPeriod,omitempty"`

	// duration type
	DurationType DurationType `json:"durationType,omitempty"`

	// Time of consent expiration
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expirationTime,omitempty"`

	// id
	ID FDXConsentID `json:"id,omitempty"`

	// Period, in days, for which historical data may be requested; period is measured from request time, not grant time
	LookbackPeriod int64 `json:"lookbackPeriod,omitempty"`

	// A collection of parameters identifying the Parties (including the legal entity operating branded products or services)
	// in the data sharing chain. Descriptive information is collected during Data Recipient registration at Data Provider,
	// and populated during issuance by DataProvider from its registry;
	Parties []*FDXConsentGrantParty `json:"parties"`

	// Enumeration of the Clusters of data elements permissioned by this Consent Grant.
	// Data Clusters are described in FDX RFC 0167.
	Resources []*FDXGrantedResource `json:"resources"`

	// revocation reason
	RevocationReason *FDXConsentRevocation `json:"revocationReason,omitempty"`

	// status
	Status ConsentStatus `json:"status,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty"`

	// Time of last consent's status change
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updatedTime,omitempty"`
}

// Validate validates this f d x consent
func (m *FDXConsent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDurationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevocationReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FDXConsent) validateCreatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTime", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FDXConsent) validateDurationType(formats strfmt.Registry) error {
	if swag.IsZero(m.DurationType) { // not required
		return nil
	}

	if err := m.DurationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("durationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("durationType")
		}
		return err
	}

	return nil
}

func (m *FDXConsent) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationTime", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FDXConsent) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *FDXConsent) validateParties(formats strfmt.Registry) error {
	if swag.IsZero(m.Parties) { // not required
		return nil
	}

	for i := 0; i < len(m.Parties); i++ {
		if swag.IsZero(m.Parties[i]) { // not required
			continue
		}

		if m.Parties[i] != nil {
			if err := m.Parties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FDXConsent) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FDXConsent) validateRevocationReason(formats strfmt.Registry) error {
	if swag.IsZero(m.RevocationReason) { // not required
		return nil
	}

	if m.RevocationReason != nil {
		if err := m.RevocationReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revocationReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revocationReason")
			}
			return err
		}
	}

	return nil
}

func (m *FDXConsent) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *FDXConsent) validateUpdatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedTime", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this f d x consent based on the context it is used
func (m *FDXConsent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDurationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevocationReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FDXConsent) contextValidateDurationType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DurationType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("durationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("durationType")
		}
		return err
	}

	return nil
}

func (m *FDXConsent) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *FDXConsent) contextValidateParties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parties); i++ {

		if m.Parties[i] != nil {
			if err := m.Parties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FDXConsent) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FDXConsent) contextValidateRevocationReason(ctx context.Context, formats strfmt.Registry) error {

	if m.RevocationReason != nil {
		if err := m.RevocationReason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revocationReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revocationReason")
			}
			return err
		}
	}

	return nil
}

func (m *FDXConsent) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FDXConsent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FDXConsent) UnmarshalBinary(b []byte) error {
	var res FDXConsent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
