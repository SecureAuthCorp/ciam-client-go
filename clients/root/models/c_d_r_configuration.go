// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CDRConfiguration c d r configuration
//
// swagger:model CDRConfiguration
type CDRConfiguration struct {

	// Flag to enable / disable ADR validation
	// If enabled, register URL must be provided and point to a existing registry
	AdrValidationEnabled bool `json:"adr_validation_enabled,omitempty"`

	// brand id
	BrandID string `json:"brand_id,omitempty"`

	// industry
	Industry CDRIndustry `json:"industry,omitempty"`

	// register api version
	RegisterAPIVersion CDRRegisterAPIVersion `json:"register_api_version,omitempty"`

	// register url
	RegisterURL CDRRegisterURL `json:"register_url,omitempty"`
}

// Validate validates this c d r configuration
func (m *CDRConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndustry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisterAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisterURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CDRConfiguration) validateIndustry(formats strfmt.Registry) error {
	if swag.IsZero(m.Industry) { // not required
		return nil
	}

	if err := m.Industry.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("industry")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("industry")
		}
		return err
	}

	return nil
}

func (m *CDRConfiguration) validateRegisterAPIVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisterAPIVersion) { // not required
		return nil
	}

	if err := m.RegisterAPIVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("register_api_version")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("register_api_version")
		}
		return err
	}

	return nil
}

func (m *CDRConfiguration) validateRegisterURL(formats strfmt.Registry) error {
	if swag.IsZero(m.RegisterURL) { // not required
		return nil
	}

	if err := m.RegisterURL.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("register_url")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("register_url")
		}
		return err
	}

	return nil
}

// ContextValidate validate this c d r configuration based on the context it is used
func (m *CDRConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIndustry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisterAPIVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegisterURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CDRConfiguration) contextValidateIndustry(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Industry.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("industry")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("industry")
		}
		return err
	}

	return nil
}

func (m *CDRConfiguration) contextValidateRegisterAPIVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RegisterAPIVersion.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("register_api_version")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("register_api_version")
		}
		return err
	}

	return nil
}

func (m *CDRConfiguration) contextValidateRegisterURL(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RegisterURL.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("register_url")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("register_url")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CDRConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CDRConfiguration) UnmarshalBinary(b []byte) error {
	var res CDRConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
