// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPayload UserPayload user payload
//
// swagger:model UserPayload
type UserPayload struct {

	// address
	Address string `json:"address,omitempty" yaml:"address,omitempty"`

	// identifier
	Identifier string `json:"identifier,omitempty" yaml:"identifier,omitempty"`

	// identifiers
	Identifiers []string `json:"identifiers" yaml:"identifiers"`

	// payload
	Payload map[string]interface{} `json:"payload,omitempty" yaml:"payload,omitempty"`

	// status
	// Enum: ["active","inactive","deleted","new"]
	Status string `json:"status,omitempty" yaml:"status,omitempty"`

	// update details
	UpdateDetails string `json:"update_details,omitempty" yaml:"update_details,omitempty"`

	// user addresses
	UserAddresses []*EventAddress `json:"user_addresses" yaml:"user_addresses"`

	// user id
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`

	// user identifiers
	UserIdentifiers []*EventIdentifier `json:"user_identifiers" yaml:"user_identifiers"`
}

// Validate validates this user payload
func (m *UserPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userPayloadTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive","deleted","new"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userPayloadTypeStatusPropEnum = append(userPayloadTypeStatusPropEnum, v)
	}
}

const (

	// UserPayloadStatusActive captures enum value "active"
	UserPayloadStatusActive string = "active"

	// UserPayloadStatusInactive captures enum value "inactive"
	UserPayloadStatusInactive string = "inactive"

	// UserPayloadStatusDeleted captures enum value "deleted"
	UserPayloadStatusDeleted string = "deleted"

	// UserPayloadStatusNew captures enum value "new"
	UserPayloadStatusNew string = "new"
)

// prop value enum
func (m *UserPayload) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userPayloadTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserPayload) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *UserPayload) validateUserAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.UserAddresses); i++ {
		if swag.IsZero(m.UserAddresses[i]) { // not required
			continue
		}

		if m.UserAddresses[i] != nil {
			if err := m.UserAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPayload) validateUserIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.UserIdentifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.UserIdentifiers); i++ {
		if swag.IsZero(m.UserIdentifiers[i]) { // not required
			continue
		}

		if m.UserIdentifiers[i] != nil {
			if err := m.UserIdentifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_identifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user payload based on the context it is used
func (m *UserPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPayload) contextValidateUserAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserAddresses); i++ {

		if m.UserAddresses[i] != nil {

			if swag.IsZero(m.UserAddresses[i]) { // not required
				return nil
			}

			if err := m.UserAddresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserPayload) contextValidateUserIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserIdentifiers); i++ {

		if m.UserIdentifiers[i] != nil {

			if swag.IsZero(m.UserIdentifiers[i]) { // not required
				return nil
			}

			if err := m.UserIdentifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_identifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPayload) UnmarshalBinary(b []byte) error {
	var res UserPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
