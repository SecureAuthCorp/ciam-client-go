// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OktaV2Credentials OktaV2 IDP specific credentials
//
// swagger:model OktaV2Credentials
type OktaV2Credentials struct {

	// OAuth client application secret
	ClientSecret string `json:"client_secret,omitempty" yaml:"client_secret,omitempty"`

	// private key jwt
	PrivateKeyJwt *PrivateKeyJWTCredentials `json:"private_key_jwt,omitempty" yaml:"private_key_jwt,omitempty"`
}

// Validate validates this okta v2 credentials
func (m *OktaV2Credentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateKeyJwt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OktaV2Credentials) validatePrivateKeyJwt(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateKeyJwt) { // not required
		return nil
	}

	if m.PrivateKeyJwt != nil {
		if err := m.PrivateKeyJwt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_key_jwt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private_key_jwt")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this okta v2 credentials based on the context it is used
func (m *OktaV2Credentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrivateKeyJwt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OktaV2Credentials) contextValidatePrivateKeyJwt(ctx context.Context, formats strfmt.Registry) error {

	if m.PrivateKeyJwt != nil {

		if swag.IsZero(m.PrivateKeyJwt) { // not required
			return nil
		}

		if err := m.PrivateKeyJwt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_key_jwt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("private_key_jwt")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OktaV2Credentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OktaV2Credentials) UnmarshalBinary(b []byte) error {
	var res OktaV2Credentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
