// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantLicense tenant license
//
// swagger:model TenantLicense
type TenantLicense struct {

	// capabilities
	Capabilities Capabilities `json:"capabilities,omitempty" yaml:"capabilities,omitempty"`

	// License end date
	// Example: 2023-03-01T09:02:27.127932Z
	// Format: date-time
	EndDate strfmt.DateTime `json:"end_date,omitempty" yaml:"end_date,omitempty"`

	// License start date
	// Example: 2023-03-01T09:02:27.127932Z
	// Format: date-time
	StartDate strfmt.DateTime `json:"start_date,omitempty" yaml:"start_date,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty"`

	// Type of license
	// Example: trial
	// Enum: [trial enterprise]
	Type string `json:"type,omitempty" yaml:"type,omitempty"`
}

// Validate validates this tenant license
func (m *TenantLicense) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantLicense) validateCapabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	if m.Capabilities != nil {
		if err := m.Capabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capabilities")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capabilities")
			}
			return err
		}
	}

	return nil
}

func (m *TenantLicense) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TenantLicense) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var tenantLicenseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["trial","enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantLicenseTypeTypePropEnum = append(tenantLicenseTypeTypePropEnum, v)
	}
}

const (

	// TenantLicenseTypeTrial captures enum value "trial"
	TenantLicenseTypeTrial string = "trial"

	// TenantLicenseTypeEnterprise captures enum value "enterprise"
	TenantLicenseTypeEnterprise string = "enterprise"
)

// prop value enum
func (m *TenantLicense) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantLicenseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantLicense) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tenant license based on the context it is used
func (m *TenantLicense) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantLicense) contextValidateCapabilities(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Capabilities) { // not required
		return nil
	}

	if err := m.Capabilities.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("capabilities")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("capabilities")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantLicense) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantLicense) UnmarshalBinary(b []byte) error {
	var res TenantLicense
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
