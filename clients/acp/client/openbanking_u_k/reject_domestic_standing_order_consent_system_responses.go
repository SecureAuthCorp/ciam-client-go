// Code generated by go-swagger; DO NOT EDIT.

package openbanking_u_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/acp/models"
)

// RejectDomesticStandingOrderConsentSystemReader is a Reader for the RejectDomesticStandingOrderConsentSystem structure.
type RejectDomesticStandingOrderConsentSystemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectDomesticStandingOrderConsentSystemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectDomesticStandingOrderConsentSystemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRejectDomesticStandingOrderConsentSystemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRejectDomesticStandingOrderConsentSystemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectDomesticStandingOrderConsentSystemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRejectDomesticStandingOrderConsentSystemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRejectDomesticStandingOrderConsentSystemOK creates a RejectDomesticStandingOrderConsentSystemOK with default headers values
func NewRejectDomesticStandingOrderConsentSystemOK() *RejectDomesticStandingOrderConsentSystemOK {
	return &RejectDomesticStandingOrderConsentSystemOK{}
}

/* RejectDomesticStandingOrderConsentSystemOK describes a response with status code 200, with default header values.

ConsentRejected
*/
type RejectDomesticStandingOrderConsentSystemOK struct {
	Payload *models.ConsentRejected
}

func (o *RejectDomesticStandingOrderConsentSystemOK) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/domestic-standing-order-consent/{login}/reject][%d] rejectDomesticStandingOrderConsentSystemOK  %+v", 200, o.Payload)
}
func (o *RejectDomesticStandingOrderConsentSystemOK) GetPayload() *models.ConsentRejected {
	return o.Payload
}

func (o *RejectDomesticStandingOrderConsentSystemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentRejected)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectDomesticStandingOrderConsentSystemUnauthorized creates a RejectDomesticStandingOrderConsentSystemUnauthorized with default headers values
func NewRejectDomesticStandingOrderConsentSystemUnauthorized() *RejectDomesticStandingOrderConsentSystemUnauthorized {
	return &RejectDomesticStandingOrderConsentSystemUnauthorized{}
}

/* RejectDomesticStandingOrderConsentSystemUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type RejectDomesticStandingOrderConsentSystemUnauthorized struct {
	Payload *models.Error
}

func (o *RejectDomesticStandingOrderConsentSystemUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/domestic-standing-order-consent/{login}/reject][%d] rejectDomesticStandingOrderConsentSystemUnauthorized  %+v", 401, o.Payload)
}
func (o *RejectDomesticStandingOrderConsentSystemUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectDomesticStandingOrderConsentSystemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectDomesticStandingOrderConsentSystemForbidden creates a RejectDomesticStandingOrderConsentSystemForbidden with default headers values
func NewRejectDomesticStandingOrderConsentSystemForbidden() *RejectDomesticStandingOrderConsentSystemForbidden {
	return &RejectDomesticStandingOrderConsentSystemForbidden{}
}

/* RejectDomesticStandingOrderConsentSystemForbidden describes a response with status code 403, with default header values.

HttpError
*/
type RejectDomesticStandingOrderConsentSystemForbidden struct {
	Payload *models.Error
}

func (o *RejectDomesticStandingOrderConsentSystemForbidden) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/domestic-standing-order-consent/{login}/reject][%d] rejectDomesticStandingOrderConsentSystemForbidden  %+v", 403, o.Payload)
}
func (o *RejectDomesticStandingOrderConsentSystemForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectDomesticStandingOrderConsentSystemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectDomesticStandingOrderConsentSystemNotFound creates a RejectDomesticStandingOrderConsentSystemNotFound with default headers values
func NewRejectDomesticStandingOrderConsentSystemNotFound() *RejectDomesticStandingOrderConsentSystemNotFound {
	return &RejectDomesticStandingOrderConsentSystemNotFound{}
}

/* RejectDomesticStandingOrderConsentSystemNotFound describes a response with status code 404, with default header values.

HttpError
*/
type RejectDomesticStandingOrderConsentSystemNotFound struct {
	Payload *models.Error
}

func (o *RejectDomesticStandingOrderConsentSystemNotFound) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/domestic-standing-order-consent/{login}/reject][%d] rejectDomesticStandingOrderConsentSystemNotFound  %+v", 404, o.Payload)
}
func (o *RejectDomesticStandingOrderConsentSystemNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectDomesticStandingOrderConsentSystemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectDomesticStandingOrderConsentSystemTooManyRequests creates a RejectDomesticStandingOrderConsentSystemTooManyRequests with default headers values
func NewRejectDomesticStandingOrderConsentSystemTooManyRequests() *RejectDomesticStandingOrderConsentSystemTooManyRequests {
	return &RejectDomesticStandingOrderConsentSystemTooManyRequests{}
}

/* RejectDomesticStandingOrderConsentSystemTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type RejectDomesticStandingOrderConsentSystemTooManyRequests struct {
	Payload *models.Error
}

func (o *RejectDomesticStandingOrderConsentSystemTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/domestic-standing-order-consent/{login}/reject][%d] rejectDomesticStandingOrderConsentSystemTooManyRequests  %+v", 429, o.Payload)
}
func (o *RejectDomesticStandingOrderConsentSystemTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectDomesticStandingOrderConsentSystemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
