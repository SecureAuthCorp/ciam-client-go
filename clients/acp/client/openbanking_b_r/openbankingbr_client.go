// Code generated by go-swagger; DO NOT EDIT.

package openbanking_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new openbanking b r API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for openbanking b r API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptOBBRCustomerDataAccessConsentSystem(params *AcceptOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptOBBRCustomerDataAccessConsentSystemOK, error)

	AcceptOBBRCustomerPaymentConsentSystem(params *AcceptOBBRCustomerPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptOBBRCustomerPaymentConsentSystemOK, error)

	GetOBBRConsents(params *GetOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRConsentsOK, error)

	GetOBBRCustomerDataAccessConsentSystem(params *GetOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRCustomerDataAccessConsentSystemOK, error)

	GetOBBRCustomerPaymentConsentSystem(params *GetOBBRCustomerPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRCustomerPaymentConsentSystemOK, error)

	ListOBBRConsents(params *ListOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBBRConsentsOK, error)

	ObbrDataAccessConsentIntrospect(params *ObbrDataAccessConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrDataAccessConsentIntrospectOK, error)

	ObbrPaymentConsentIntrospect(params *ObbrPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectOK, error)

	RejectOBBRCustomerDataAccessConsentSystem(params *RejectOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectOBBRCustomerDataAccessConsentSystemOK, error)

	RejectOBBRCustomerPaymentConsentSystem(params *RejectOBBRCustomerPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectOBBRCustomerPaymentConsentSystemOK, error)

	RevokeOBBRConsents(params *RevokeOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBBRConsentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcceptOBBRCustomerDataAccessConsentSystem accepts customer data access consent

  This API can be used by a custom openbanking consent page to notify ACP that user granted consent to a customer data access.
*/
func (a *Client) AcceptOBBRCustomerDataAccessConsentSystem(params *AcceptOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptOBBRCustomerDataAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptOBBRCustomerDataAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptOBBRCustomerDataAccessConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptOBBRCustomerDataAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptOBBRCustomerDataAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptOBBRCustomerDataAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptOBBRCustomerPaymentConsentSystem accepts customer payment initiation consent

  This API can be used by a custom openbanking consent page to notify ACP that user granted consent for payment initiation.
*/
func (a *Client) AcceptOBBRCustomerPaymentConsentSystem(params *AcceptOBBRCustomerPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptOBBRCustomerPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptOBBRCustomerPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptOBBRCustomerPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/payment/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptOBBRCustomerPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptOBBRCustomerPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptOBBRCustomerPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOBBRConsents gets openbanking brasil consents

  This API returns the list of openbanking brasil consents.
You can narrow the list of returned consents using filters defined in query parameters.
See GetConsentsParams for details.
*/
func (a *Client) GetOBBRConsents(params *GetOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBBRConsents",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOBBRCustomerDataAccessConsentSystem gets customer data access consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetOBBRCustomerDataAccessConsentSystem(params *GetOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRCustomerDataAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBBRCustomerDataAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBBRCustomerDataAccessConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBBRCustomerDataAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBBRCustomerDataAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBBRCustomerDataAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOBBRCustomerPaymentConsentSystem gets customer payment initiation consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetOBBRCustomerPaymentConsentSystem(params *GetOBBRCustomerPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRCustomerPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBBRCustomerPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBBRCustomerPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/payment/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBBRCustomerPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBBRCustomerPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBBRCustomerPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListOBBRConsents lists openbanking brasil consents

  This API returns the list of openbanking brasil consents.
You can narrow the list of returned consents using filters defined in request body.
See ListConsentsParams for details.
*/
func (a *Client) ListOBBRConsents(params *ListOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOBBRConsents",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ObbrDataAccessConsentIntrospect introspects openbanking brasil data access consent

  Introspect openbanking brasil data access consent
*/
func (a *Client) ObbrDataAccessConsentIntrospect(params *ObbrDataAccessConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrDataAccessConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrDataAccessConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrDataAccessConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/consents/v1/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrDataAccessConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrDataAccessConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrDataAccessConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ObbrPaymentConsentIntrospect introspects openbanking brasil payment consent

  This endpoint takes an OAuth 2.0 token and, in addition to returning
meta information surrounding the token, returns the payment consent and
associated account ids.
*/
func (a *Client) ObbrPaymentConsentIntrospect(params *ObbrPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrPaymentConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrPaymentConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/payments/v1/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrPaymentConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrPaymentConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrPaymentConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectOBBRCustomerDataAccessConsentSystem rejects consent

  This API can be used by a custom openbanking consent page to notify ACP that user rejected access.
*/
func (a *Client) RejectOBBRCustomerDataAccessConsentSystem(params *RejectOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectOBBRCustomerDataAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectOBBRCustomerDataAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectOBBRCustomerDataAccessConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectOBBRCustomerDataAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectOBBRCustomerDataAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectOBBRCustomerDataAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectOBBRCustomerPaymentConsentSystem rejects consent

  This API can be used by a custom openbanking consent page to notify ACP that user rejected payment initiation.
*/
func (a *Client) RejectOBBRCustomerPaymentConsentSystem(params *RejectOBBRCustomerPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectOBBRCustomerPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectOBBRCustomerPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectOBBRCustomerPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/payment/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectOBBRCustomerPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectOBBRCustomerPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectOBBRCustomerPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeOBBRConsents revokes openbanking brasil consents

  This API revokes openbanking consents matching provided parameters.

Currently supporting removal by client id.
Use ?client_id={clientID} to remove all consents by a given client.

You can also optionally specify which consent should be removed by specifying consent type
example: ?client_id={clientID}&consent_type=account_access
*/
func (a *Client) RevokeOBBRConsents(params *RevokeOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOBBRConsents",
		Method:             "DELETE",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
