// Code generated by go-swagger; DO NOT EDIT.

package openbanking_common

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/acp/models"
)

// ConsumeOpenbankingConsentReader is a Reader for the ConsumeOpenbankingConsent structure.
type ConsumeOpenbankingConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConsumeOpenbankingConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConsumeOpenbankingConsentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConsumeOpenbankingConsentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewConsumeOpenbankingConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConsumeOpenbankingConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConsumeOpenbankingConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConsumeOpenbankingConsentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConsumeOpenbankingConsentOK creates a ConsumeOpenbankingConsentOK with default headers values
func NewConsumeOpenbankingConsentOK() *ConsumeOpenbankingConsentOK {
	return &ConsumeOpenbankingConsentOK{}
}

/* ConsumeOpenbankingConsentOK describes a response with status code 200, with default header values.

OBConsent
*/
type ConsumeOpenbankingConsentOK struct {
	Payload *models.OBConsent
}

func (o *ConsumeOpenbankingConsentOK) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/servers/{aid}/open-banking/consents/{consentID}/consume][%d] consumeOpenbankingConsentOK  %+v", 200, o.Payload)
}
func (o *ConsumeOpenbankingConsentOK) GetPayload() *models.OBConsent {
	return o.Payload
}

func (o *ConsumeOpenbankingConsentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBConsent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsumeOpenbankingConsentBadRequest creates a ConsumeOpenbankingConsentBadRequest with default headers values
func NewConsumeOpenbankingConsentBadRequest() *ConsumeOpenbankingConsentBadRequest {
	return &ConsumeOpenbankingConsentBadRequest{}
}

/* ConsumeOpenbankingConsentBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type ConsumeOpenbankingConsentBadRequest struct {
	Payload *models.Error
}

func (o *ConsumeOpenbankingConsentBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/servers/{aid}/open-banking/consents/{consentID}/consume][%d] consumeOpenbankingConsentBadRequest  %+v", 400, o.Payload)
}
func (o *ConsumeOpenbankingConsentBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConsumeOpenbankingConsentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsumeOpenbankingConsentUnauthorized creates a ConsumeOpenbankingConsentUnauthorized with default headers values
func NewConsumeOpenbankingConsentUnauthorized() *ConsumeOpenbankingConsentUnauthorized {
	return &ConsumeOpenbankingConsentUnauthorized{}
}

/* ConsumeOpenbankingConsentUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type ConsumeOpenbankingConsentUnauthorized struct {
	Payload *models.Error
}

func (o *ConsumeOpenbankingConsentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/servers/{aid}/open-banking/consents/{consentID}/consume][%d] consumeOpenbankingConsentUnauthorized  %+v", 401, o.Payload)
}
func (o *ConsumeOpenbankingConsentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConsumeOpenbankingConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsumeOpenbankingConsentForbidden creates a ConsumeOpenbankingConsentForbidden with default headers values
func NewConsumeOpenbankingConsentForbidden() *ConsumeOpenbankingConsentForbidden {
	return &ConsumeOpenbankingConsentForbidden{}
}

/* ConsumeOpenbankingConsentForbidden describes a response with status code 403, with default header values.

HttpError
*/
type ConsumeOpenbankingConsentForbidden struct {
	Payload *models.Error
}

func (o *ConsumeOpenbankingConsentForbidden) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/servers/{aid}/open-banking/consents/{consentID}/consume][%d] consumeOpenbankingConsentForbidden  %+v", 403, o.Payload)
}
func (o *ConsumeOpenbankingConsentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConsumeOpenbankingConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsumeOpenbankingConsentNotFound creates a ConsumeOpenbankingConsentNotFound with default headers values
func NewConsumeOpenbankingConsentNotFound() *ConsumeOpenbankingConsentNotFound {
	return &ConsumeOpenbankingConsentNotFound{}
}

/* ConsumeOpenbankingConsentNotFound describes a response with status code 404, with default header values.

HttpError
*/
type ConsumeOpenbankingConsentNotFound struct {
	Payload *models.Error
}

func (o *ConsumeOpenbankingConsentNotFound) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/servers/{aid}/open-banking/consents/{consentID}/consume][%d] consumeOpenbankingConsentNotFound  %+v", 404, o.Payload)
}
func (o *ConsumeOpenbankingConsentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConsumeOpenbankingConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsumeOpenbankingConsentTooManyRequests creates a ConsumeOpenbankingConsentTooManyRequests with default headers values
func NewConsumeOpenbankingConsentTooManyRequests() *ConsumeOpenbankingConsentTooManyRequests {
	return &ConsumeOpenbankingConsentTooManyRequests{}
}

/* ConsumeOpenbankingConsentTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type ConsumeOpenbankingConsentTooManyRequests struct {
	Payload *models.Error
}

func (o *ConsumeOpenbankingConsentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/servers/{aid}/open-banking/consents/{consentID}/consume][%d] consumeOpenbankingConsentTooManyRequests  %+v", 429, o.Payload)
}
func (o *ConsumeOpenbankingConsentTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ConsumeOpenbankingConsentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
