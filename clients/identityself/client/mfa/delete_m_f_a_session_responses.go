// Code generated by go-swagger; DO NOT EDIT.

package mfa

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identityself/models"
)

// DeleteMFASessionReader is a Reader for the DeleteMFASession structure.
type DeleteMFASessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMFASessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteMFASessionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteMFASessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteMFASessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteMFASessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteMFASessionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v2/self/mfa/sessions/{mfaSessionID}] deleteMFASession", response, response.Code())
	}
}

// NewDeleteMFASessionNoContent creates a DeleteMFASessionNoContent with default headers values
func NewDeleteMFASessionNoContent() *DeleteMFASessionNoContent {
	return &DeleteMFASessionNoContent{}
}

/*
DeleteMFASessionNoContent describes a response with status code 204, with default header values.

	MFA session has been deleted
*/
type DeleteMFASessionNoContent struct {
}

// IsSuccess returns true when this delete m f a session no content response has a 2xx status code
func (o *DeleteMFASessionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete m f a session no content response has a 3xx status code
func (o *DeleteMFASessionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a session no content response has a 4xx status code
func (o *DeleteMFASessionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete m f a session no content response has a 5xx status code
func (o *DeleteMFASessionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a session no content response a status code equal to that given
func (o *DeleteMFASessionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete m f a session no content response
func (o *DeleteMFASessionNoContent) Code() int {
	return 204
}

func (o *DeleteMFASessionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionNoContent ", 204)
}

func (o *DeleteMFASessionNoContent) String() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionNoContent ", 204)
}

func (o *DeleteMFASessionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMFASessionUnauthorized creates a DeleteMFASessionUnauthorized with default headers values
func NewDeleteMFASessionUnauthorized() *DeleteMFASessionUnauthorized {
	return &DeleteMFASessionUnauthorized{}
}

/*
DeleteMFASessionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteMFASessionUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete m f a session unauthorized response has a 2xx status code
func (o *DeleteMFASessionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete m f a session unauthorized response has a 3xx status code
func (o *DeleteMFASessionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a session unauthorized response has a 4xx status code
func (o *DeleteMFASessionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete m f a session unauthorized response has a 5xx status code
func (o *DeleteMFASessionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a session unauthorized response a status code equal to that given
func (o *DeleteMFASessionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete m f a session unauthorized response
func (o *DeleteMFASessionUnauthorized) Code() int {
	return 401
}

func (o *DeleteMFASessionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteMFASessionUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteMFASessionUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFASessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFASessionForbidden creates a DeleteMFASessionForbidden with default headers values
func NewDeleteMFASessionForbidden() *DeleteMFASessionForbidden {
	return &DeleteMFASessionForbidden{}
}

/*
DeleteMFASessionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteMFASessionForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete m f a session forbidden response has a 2xx status code
func (o *DeleteMFASessionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete m f a session forbidden response has a 3xx status code
func (o *DeleteMFASessionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a session forbidden response has a 4xx status code
func (o *DeleteMFASessionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete m f a session forbidden response has a 5xx status code
func (o *DeleteMFASessionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a session forbidden response a status code equal to that given
func (o *DeleteMFASessionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete m f a session forbidden response
func (o *DeleteMFASessionForbidden) Code() int {
	return 403
}

func (o *DeleteMFASessionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteMFASessionForbidden) String() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteMFASessionForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFASessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFASessionNotFound creates a DeleteMFASessionNotFound with default headers values
func NewDeleteMFASessionNotFound() *DeleteMFASessionNotFound {
	return &DeleteMFASessionNotFound{}
}

/*
DeleteMFASessionNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteMFASessionNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete m f a session not found response has a 2xx status code
func (o *DeleteMFASessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete m f a session not found response has a 3xx status code
func (o *DeleteMFASessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a session not found response has a 4xx status code
func (o *DeleteMFASessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete m f a session not found response has a 5xx status code
func (o *DeleteMFASessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a session not found response a status code equal to that given
func (o *DeleteMFASessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete m f a session not found response
func (o *DeleteMFASessionNotFound) Code() int {
	return 404
}

func (o *DeleteMFASessionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteMFASessionNotFound) String() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteMFASessionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFASessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFASessionTooManyRequests creates a DeleteMFASessionTooManyRequests with default headers values
func NewDeleteMFASessionTooManyRequests() *DeleteMFASessionTooManyRequests {
	return &DeleteMFASessionTooManyRequests{}
}

/*
DeleteMFASessionTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteMFASessionTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete m f a session too many requests response has a 2xx status code
func (o *DeleteMFASessionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete m f a session too many requests response has a 3xx status code
func (o *DeleteMFASessionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a session too many requests response has a 4xx status code
func (o *DeleteMFASessionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete m f a session too many requests response has a 5xx status code
func (o *DeleteMFASessionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a session too many requests response a status code equal to that given
func (o *DeleteMFASessionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete m f a session too many requests response
func (o *DeleteMFASessionTooManyRequests) Code() int {
	return 429
}

func (o *DeleteMFASessionTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteMFASessionTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /v2/self/mfa/sessions/{mfaSessionID}][%d] deleteMFASessionTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteMFASessionTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFASessionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
