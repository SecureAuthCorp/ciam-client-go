// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identityself/models"
)

// ChangePasswordV2Reader is a Reader for the ChangePasswordV2 structure.
type ChangePasswordV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewChangePasswordV2NoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChangePasswordV2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewChangePasswordV2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewChangePasswordV2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChangePasswordV2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewChangePasswordV2PreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewChangePasswordV2UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewChangePasswordV2TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v2/self/change-password] changePasswordV2", response, response.Code())
	}
}

// NewChangePasswordV2NoContent creates a ChangePasswordV2NoContent with default headers values
func NewChangePasswordV2NoContent() *ChangePasswordV2NoContent {
	return &ChangePasswordV2NoContent{}
}

/*
ChangePasswordV2NoContent describes a response with status code 204, with default header values.

Password has been changed
*/
type ChangePasswordV2NoContent struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string
}

// IsSuccess returns true when this change password v2 no content response has a 2xx status code
func (o *ChangePasswordV2NoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this change password v2 no content response has a 3xx status code
func (o *ChangePasswordV2NoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password v2 no content response has a 4xx status code
func (o *ChangePasswordV2NoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this change password v2 no content response has a 5xx status code
func (o *ChangePasswordV2NoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this change password v2 no content response a status code equal to that given
func (o *ChangePasswordV2NoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the change password v2 no content response
func (o *ChangePasswordV2NoContent) Code() int {
	return 204
}

func (o *ChangePasswordV2NoContent) Error() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2NoContent ", 204)
}

func (o *ChangePasswordV2NoContent) String() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2NoContent ", 204)
}

func (o *ChangePasswordV2NoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	return nil
}

// NewChangePasswordV2BadRequest creates a ChangePasswordV2BadRequest with default headers values
func NewChangePasswordV2BadRequest() *ChangePasswordV2BadRequest {
	return &ChangePasswordV2BadRequest{}
}

/*
ChangePasswordV2BadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ChangePasswordV2BadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this change password v2 bad request response has a 2xx status code
func (o *ChangePasswordV2BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password v2 bad request response has a 3xx status code
func (o *ChangePasswordV2BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password v2 bad request response has a 4xx status code
func (o *ChangePasswordV2BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password v2 bad request response has a 5xx status code
func (o *ChangePasswordV2BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this change password v2 bad request response a status code equal to that given
func (o *ChangePasswordV2BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the change password v2 bad request response
func (o *ChangePasswordV2BadRequest) Code() int {
	return 400
}

func (o *ChangePasswordV2BadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2BadRequest  %+v", 400, o.Payload)
}

func (o *ChangePasswordV2BadRequest) String() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2BadRequest  %+v", 400, o.Payload)
}

func (o *ChangePasswordV2BadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordV2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordV2Unauthorized creates a ChangePasswordV2Unauthorized with default headers values
func NewChangePasswordV2Unauthorized() *ChangePasswordV2Unauthorized {
	return &ChangePasswordV2Unauthorized{}
}

/*
ChangePasswordV2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ChangePasswordV2Unauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this change password v2 unauthorized response has a 2xx status code
func (o *ChangePasswordV2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password v2 unauthorized response has a 3xx status code
func (o *ChangePasswordV2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password v2 unauthorized response has a 4xx status code
func (o *ChangePasswordV2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password v2 unauthorized response has a 5xx status code
func (o *ChangePasswordV2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this change password v2 unauthorized response a status code equal to that given
func (o *ChangePasswordV2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the change password v2 unauthorized response
func (o *ChangePasswordV2Unauthorized) Code() int {
	return 401
}

func (o *ChangePasswordV2Unauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2Unauthorized  %+v", 401, o.Payload)
}

func (o *ChangePasswordV2Unauthorized) String() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2Unauthorized  %+v", 401, o.Payload)
}

func (o *ChangePasswordV2Unauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordV2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordV2Forbidden creates a ChangePasswordV2Forbidden with default headers values
func NewChangePasswordV2Forbidden() *ChangePasswordV2Forbidden {
	return &ChangePasswordV2Forbidden{}
}

/*
ChangePasswordV2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ChangePasswordV2Forbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this change password v2 forbidden response has a 2xx status code
func (o *ChangePasswordV2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password v2 forbidden response has a 3xx status code
func (o *ChangePasswordV2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password v2 forbidden response has a 4xx status code
func (o *ChangePasswordV2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password v2 forbidden response has a 5xx status code
func (o *ChangePasswordV2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this change password v2 forbidden response a status code equal to that given
func (o *ChangePasswordV2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the change password v2 forbidden response
func (o *ChangePasswordV2Forbidden) Code() int {
	return 403
}

func (o *ChangePasswordV2Forbidden) Error() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2Forbidden  %+v", 403, o.Payload)
}

func (o *ChangePasswordV2Forbidden) String() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2Forbidden  %+v", 403, o.Payload)
}

func (o *ChangePasswordV2Forbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordV2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordV2NotFound creates a ChangePasswordV2NotFound with default headers values
func NewChangePasswordV2NotFound() *ChangePasswordV2NotFound {
	return &ChangePasswordV2NotFound{}
}

/*
ChangePasswordV2NotFound describes a response with status code 404, with default header values.

Not found
*/
type ChangePasswordV2NotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this change password v2 not found response has a 2xx status code
func (o *ChangePasswordV2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password v2 not found response has a 3xx status code
func (o *ChangePasswordV2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password v2 not found response has a 4xx status code
func (o *ChangePasswordV2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password v2 not found response has a 5xx status code
func (o *ChangePasswordV2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this change password v2 not found response a status code equal to that given
func (o *ChangePasswordV2NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the change password v2 not found response
func (o *ChangePasswordV2NotFound) Code() int {
	return 404
}

func (o *ChangePasswordV2NotFound) Error() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2NotFound  %+v", 404, o.Payload)
}

func (o *ChangePasswordV2NotFound) String() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2NotFound  %+v", 404, o.Payload)
}

func (o *ChangePasswordV2NotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordV2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordV2PreconditionFailed creates a ChangePasswordV2PreconditionFailed with default headers values
func NewChangePasswordV2PreconditionFailed() *ChangePasswordV2PreconditionFailed {
	return &ChangePasswordV2PreconditionFailed{}
}

/*
ChangePasswordV2PreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type ChangePasswordV2PreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this change password v2 precondition failed response has a 2xx status code
func (o *ChangePasswordV2PreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password v2 precondition failed response has a 3xx status code
func (o *ChangePasswordV2PreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password v2 precondition failed response has a 4xx status code
func (o *ChangePasswordV2PreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password v2 precondition failed response has a 5xx status code
func (o *ChangePasswordV2PreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this change password v2 precondition failed response a status code equal to that given
func (o *ChangePasswordV2PreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the change password v2 precondition failed response
func (o *ChangePasswordV2PreconditionFailed) Code() int {
	return 412
}

func (o *ChangePasswordV2PreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2PreconditionFailed  %+v", 412, o.Payload)
}

func (o *ChangePasswordV2PreconditionFailed) String() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2PreconditionFailed  %+v", 412, o.Payload)
}

func (o *ChangePasswordV2PreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordV2PreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordV2UnprocessableEntity creates a ChangePasswordV2UnprocessableEntity with default headers values
func NewChangePasswordV2UnprocessableEntity() *ChangePasswordV2UnprocessableEntity {
	return &ChangePasswordV2UnprocessableEntity{}
}

/*
ChangePasswordV2UnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ChangePasswordV2UnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this change password v2 unprocessable entity response has a 2xx status code
func (o *ChangePasswordV2UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password v2 unprocessable entity response has a 3xx status code
func (o *ChangePasswordV2UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password v2 unprocessable entity response has a 4xx status code
func (o *ChangePasswordV2UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password v2 unprocessable entity response has a 5xx status code
func (o *ChangePasswordV2UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this change password v2 unprocessable entity response a status code equal to that given
func (o *ChangePasswordV2UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the change password v2 unprocessable entity response
func (o *ChangePasswordV2UnprocessableEntity) Code() int {
	return 422
}

func (o *ChangePasswordV2UnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ChangePasswordV2UnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ChangePasswordV2UnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordV2UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangePasswordV2TooManyRequests creates a ChangePasswordV2TooManyRequests with default headers values
func NewChangePasswordV2TooManyRequests() *ChangePasswordV2TooManyRequests {
	return &ChangePasswordV2TooManyRequests{}
}

/*
ChangePasswordV2TooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ChangePasswordV2TooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this change password v2 too many requests response has a 2xx status code
func (o *ChangePasswordV2TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this change password v2 too many requests response has a 3xx status code
func (o *ChangePasswordV2TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this change password v2 too many requests response has a 4xx status code
func (o *ChangePasswordV2TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this change password v2 too many requests response has a 5xx status code
func (o *ChangePasswordV2TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this change password v2 too many requests response a status code equal to that given
func (o *ChangePasswordV2TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the change password v2 too many requests response
func (o *ChangePasswordV2TooManyRequests) Code() int {
	return 429
}

func (o *ChangePasswordV2TooManyRequests) Error() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2TooManyRequests  %+v", 429, o.Payload)
}

func (o *ChangePasswordV2TooManyRequests) String() string {
	return fmt.Sprintf("[POST /v2/self/change-password][%d] changePasswordV2TooManyRequests  %+v", 429, o.Payload)
}

func (o *ChangePasswordV2TooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordV2TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
