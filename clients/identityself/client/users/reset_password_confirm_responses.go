// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identityself/models"
)

// ResetPasswordConfirmReader is a Reader for the ResetPasswordConfirm structure.
type ResetPasswordConfirmReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResetPasswordConfirmReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewResetPasswordConfirmNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewResetPasswordConfirmUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewResetPasswordConfirmPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewResetPasswordConfirmUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /public/pools/{ipID}/reset-password/confirm] resetPasswordConfirm", response, response.Code())
	}
}

// NewResetPasswordConfirmNoContent creates a ResetPasswordConfirmNoContent with default headers values
func NewResetPasswordConfirmNoContent() *ResetPasswordConfirmNoContent {
	return &ResetPasswordConfirmNoContent{}
}

/*
ResetPasswordConfirmNoContent describes a response with status code 204, with default header values.

Reset password confirmed
*/
type ResetPasswordConfirmNoContent struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string
}

// IsSuccess returns true when this reset password confirm no content response has a 2xx status code
func (o *ResetPasswordConfirmNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reset password confirm no content response has a 3xx status code
func (o *ResetPasswordConfirmNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password confirm no content response has a 4xx status code
func (o *ResetPasswordConfirmNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this reset password confirm no content response has a 5xx status code
func (o *ResetPasswordConfirmNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this reset password confirm no content response a status code equal to that given
func (o *ResetPasswordConfirmNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the reset password confirm no content response
func (o *ResetPasswordConfirmNoContent) Code() int {
	return 204
}

func (o *ResetPasswordConfirmNoContent) Error() string {
	return fmt.Sprintf("[POST /public/pools/{ipID}/reset-password/confirm][%d] resetPasswordConfirmNoContent ", 204)
}

func (o *ResetPasswordConfirmNoContent) String() string {
	return fmt.Sprintf("[POST /public/pools/{ipID}/reset-password/confirm][%d] resetPasswordConfirmNoContent ", 204)
}

func (o *ResetPasswordConfirmNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	return nil
}

// NewResetPasswordConfirmUnauthorized creates a ResetPasswordConfirmUnauthorized with default headers values
func NewResetPasswordConfirmUnauthorized() *ResetPasswordConfirmUnauthorized {
	return &ResetPasswordConfirmUnauthorized{}
}

/*
ResetPasswordConfirmUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ResetPasswordConfirmUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this reset password confirm unauthorized response has a 2xx status code
func (o *ResetPasswordConfirmUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset password confirm unauthorized response has a 3xx status code
func (o *ResetPasswordConfirmUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password confirm unauthorized response has a 4xx status code
func (o *ResetPasswordConfirmUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset password confirm unauthorized response has a 5xx status code
func (o *ResetPasswordConfirmUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this reset password confirm unauthorized response a status code equal to that given
func (o *ResetPasswordConfirmUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the reset password confirm unauthorized response
func (o *ResetPasswordConfirmUnauthorized) Code() int {
	return 401
}

func (o *ResetPasswordConfirmUnauthorized) Error() string {
	return fmt.Sprintf("[POST /public/pools/{ipID}/reset-password/confirm][%d] resetPasswordConfirmUnauthorized  %+v", 401, o.Payload)
}

func (o *ResetPasswordConfirmUnauthorized) String() string {
	return fmt.Sprintf("[POST /public/pools/{ipID}/reset-password/confirm][%d] resetPasswordConfirmUnauthorized  %+v", 401, o.Payload)
}

func (o *ResetPasswordConfirmUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResetPasswordConfirmUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetPasswordConfirmPreconditionFailed creates a ResetPasswordConfirmPreconditionFailed with default headers values
func NewResetPasswordConfirmPreconditionFailed() *ResetPasswordConfirmPreconditionFailed {
	return &ResetPasswordConfirmPreconditionFailed{}
}

/*
ResetPasswordConfirmPreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type ResetPasswordConfirmPreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this reset password confirm precondition failed response has a 2xx status code
func (o *ResetPasswordConfirmPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset password confirm precondition failed response has a 3xx status code
func (o *ResetPasswordConfirmPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password confirm precondition failed response has a 4xx status code
func (o *ResetPasswordConfirmPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset password confirm precondition failed response has a 5xx status code
func (o *ResetPasswordConfirmPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this reset password confirm precondition failed response a status code equal to that given
func (o *ResetPasswordConfirmPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the reset password confirm precondition failed response
func (o *ResetPasswordConfirmPreconditionFailed) Code() int {
	return 412
}

func (o *ResetPasswordConfirmPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /public/pools/{ipID}/reset-password/confirm][%d] resetPasswordConfirmPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ResetPasswordConfirmPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /public/pools/{ipID}/reset-password/confirm][%d] resetPasswordConfirmPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ResetPasswordConfirmPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResetPasswordConfirmPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetPasswordConfirmUnprocessableEntity creates a ResetPasswordConfirmUnprocessableEntity with default headers values
func NewResetPasswordConfirmUnprocessableEntity() *ResetPasswordConfirmUnprocessableEntity {
	return &ResetPasswordConfirmUnprocessableEntity{}
}

/*
ResetPasswordConfirmUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ResetPasswordConfirmUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this reset password confirm unprocessable entity response has a 2xx status code
func (o *ResetPasswordConfirmUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reset password confirm unprocessable entity response has a 3xx status code
func (o *ResetPasswordConfirmUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reset password confirm unprocessable entity response has a 4xx status code
func (o *ResetPasswordConfirmUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this reset password confirm unprocessable entity response has a 5xx status code
func (o *ResetPasswordConfirmUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this reset password confirm unprocessable entity response a status code equal to that given
func (o *ResetPasswordConfirmUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the reset password confirm unprocessable entity response
func (o *ResetPasswordConfirmUnprocessableEntity) Code() int {
	return 422
}

func (o *ResetPasswordConfirmUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /public/pools/{ipID}/reset-password/confirm][%d] resetPasswordConfirmUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ResetPasswordConfirmUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /public/pools/{ipID}/reset-password/confirm][%d] resetPasswordConfirmUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ResetPasswordConfirmUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ResetPasswordConfirmUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
