// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identityself/models"
)

// SetPasswordReader is a Reader for the SetPassword structure.
type SetPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSetPasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetPasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSetPasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetPasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetPasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewSetPasswordPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSetPasswordUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetPasswordTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v2/self/set-password] setPassword", response, response.Code())
	}
}

// NewSetPasswordNoContent creates a SetPasswordNoContent with default headers values
func NewSetPasswordNoContent() *SetPasswordNoContent {
	return &SetPasswordNoContent{}
}

/*
SetPasswordNoContent describes a response with status code 204, with default header values.

Password has been set
*/
type SetPasswordNoContent struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string
}

// IsSuccess returns true when this set password no content response has a 2xx status code
func (o *SetPasswordNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set password no content response has a 3xx status code
func (o *SetPasswordNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set password no content response has a 4xx status code
func (o *SetPasswordNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this set password no content response has a 5xx status code
func (o *SetPasswordNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this set password no content response a status code equal to that given
func (o *SetPasswordNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the set password no content response
func (o *SetPasswordNoContent) Code() int {
	return 204
}

func (o *SetPasswordNoContent) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordNoContent", 204)
}

func (o *SetPasswordNoContent) String() string {
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordNoContent", 204)
}

func (o *SetPasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	return nil
}

// NewSetPasswordBadRequest creates a SetPasswordBadRequest with default headers values
func NewSetPasswordBadRequest() *SetPasswordBadRequest {
	return &SetPasswordBadRequest{}
}

/*
SetPasswordBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SetPasswordBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this set password bad request response has a 2xx status code
func (o *SetPasswordBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set password bad request response has a 3xx status code
func (o *SetPasswordBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set password bad request response has a 4xx status code
func (o *SetPasswordBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set password bad request response has a 5xx status code
func (o *SetPasswordBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set password bad request response a status code equal to that given
func (o *SetPasswordBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set password bad request response
func (o *SetPasswordBadRequest) Code() int {
	return 400
}

func (o *SetPasswordBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordBadRequest %s", 400, payload)
}

func (o *SetPasswordBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordBadRequest %s", 400, payload)
}

func (o *SetPasswordBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetPasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPasswordUnauthorized creates a SetPasswordUnauthorized with default headers values
func NewSetPasswordUnauthorized() *SetPasswordUnauthorized {
	return &SetPasswordUnauthorized{}
}

/*
SetPasswordUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetPasswordUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this set password unauthorized response has a 2xx status code
func (o *SetPasswordUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set password unauthorized response has a 3xx status code
func (o *SetPasswordUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set password unauthorized response has a 4xx status code
func (o *SetPasswordUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set password unauthorized response has a 5xx status code
func (o *SetPasswordUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set password unauthorized response a status code equal to that given
func (o *SetPasswordUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set password unauthorized response
func (o *SetPasswordUnauthorized) Code() int {
	return 401
}

func (o *SetPasswordUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordUnauthorized %s", 401, payload)
}

func (o *SetPasswordUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordUnauthorized %s", 401, payload)
}

func (o *SetPasswordUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetPasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPasswordForbidden creates a SetPasswordForbidden with default headers values
func NewSetPasswordForbidden() *SetPasswordForbidden {
	return &SetPasswordForbidden{}
}

/*
SetPasswordForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetPasswordForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this set password forbidden response has a 2xx status code
func (o *SetPasswordForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set password forbidden response has a 3xx status code
func (o *SetPasswordForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set password forbidden response has a 4xx status code
func (o *SetPasswordForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set password forbidden response has a 5xx status code
func (o *SetPasswordForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set password forbidden response a status code equal to that given
func (o *SetPasswordForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set password forbidden response
func (o *SetPasswordForbidden) Code() int {
	return 403
}

func (o *SetPasswordForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordForbidden %s", 403, payload)
}

func (o *SetPasswordForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordForbidden %s", 403, payload)
}

func (o *SetPasswordForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetPasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPasswordNotFound creates a SetPasswordNotFound with default headers values
func NewSetPasswordNotFound() *SetPasswordNotFound {
	return &SetPasswordNotFound{}
}

/*
SetPasswordNotFound describes a response with status code 404, with default header values.

Not found
*/
type SetPasswordNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this set password not found response has a 2xx status code
func (o *SetPasswordNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set password not found response has a 3xx status code
func (o *SetPasswordNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set password not found response has a 4xx status code
func (o *SetPasswordNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set password not found response has a 5xx status code
func (o *SetPasswordNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set password not found response a status code equal to that given
func (o *SetPasswordNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set password not found response
func (o *SetPasswordNotFound) Code() int {
	return 404
}

func (o *SetPasswordNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordNotFound %s", 404, payload)
}

func (o *SetPasswordNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordNotFound %s", 404, payload)
}

func (o *SetPasswordNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetPasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPasswordPreconditionFailed creates a SetPasswordPreconditionFailed with default headers values
func NewSetPasswordPreconditionFailed() *SetPasswordPreconditionFailed {
	return &SetPasswordPreconditionFailed{}
}

/*
SetPasswordPreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type SetPasswordPreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this set password precondition failed response has a 2xx status code
func (o *SetPasswordPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set password precondition failed response has a 3xx status code
func (o *SetPasswordPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set password precondition failed response has a 4xx status code
func (o *SetPasswordPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this set password precondition failed response has a 5xx status code
func (o *SetPasswordPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this set password precondition failed response a status code equal to that given
func (o *SetPasswordPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the set password precondition failed response
func (o *SetPasswordPreconditionFailed) Code() int {
	return 412
}

func (o *SetPasswordPreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordPreconditionFailed %s", 412, payload)
}

func (o *SetPasswordPreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordPreconditionFailed %s", 412, payload)
}

func (o *SetPasswordPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetPasswordPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPasswordUnprocessableEntity creates a SetPasswordUnprocessableEntity with default headers values
func NewSetPasswordUnprocessableEntity() *SetPasswordUnprocessableEntity {
	return &SetPasswordUnprocessableEntity{}
}

/*
SetPasswordUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type SetPasswordUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this set password unprocessable entity response has a 2xx status code
func (o *SetPasswordUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set password unprocessable entity response has a 3xx status code
func (o *SetPasswordUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set password unprocessable entity response has a 4xx status code
func (o *SetPasswordUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this set password unprocessable entity response has a 5xx status code
func (o *SetPasswordUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this set password unprocessable entity response a status code equal to that given
func (o *SetPasswordUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the set password unprocessable entity response
func (o *SetPasswordUnprocessableEntity) Code() int {
	return 422
}

func (o *SetPasswordUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordUnprocessableEntity %s", 422, payload)
}

func (o *SetPasswordUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordUnprocessableEntity %s", 422, payload)
}

func (o *SetPasswordUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetPasswordUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPasswordTooManyRequests creates a SetPasswordTooManyRequests with default headers values
func NewSetPasswordTooManyRequests() *SetPasswordTooManyRequests {
	return &SetPasswordTooManyRequests{}
}

/*
SetPasswordTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type SetPasswordTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this set password too many requests response has a 2xx status code
func (o *SetPasswordTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set password too many requests response has a 3xx status code
func (o *SetPasswordTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set password too many requests response has a 4xx status code
func (o *SetPasswordTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this set password too many requests response has a 5xx status code
func (o *SetPasswordTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this set password too many requests response a status code equal to that given
func (o *SetPasswordTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the set password too many requests response
func (o *SetPasswordTooManyRequests) Code() int {
	return 429
}

func (o *SetPasswordTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordTooManyRequests %s", 429, payload)
}

func (o *SetPasswordTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/self/set-password][%d] setPasswordTooManyRequests %s", 429, payload)
}

func (o *SetPasswordTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetPasswordTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
