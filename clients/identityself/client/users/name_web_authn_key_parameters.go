// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identityself/models"
)

// NewNameWebAuthnKeyParams creates a new NameWebAuthnKeyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewNameWebAuthnKeyParams() *NameWebAuthnKeyParams {
	return &NameWebAuthnKeyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewNameWebAuthnKeyParamsWithTimeout creates a new NameWebAuthnKeyParams object
// with the ability to set a timeout on a request.
func NewNameWebAuthnKeyParamsWithTimeout(timeout time.Duration) *NameWebAuthnKeyParams {
	return &NameWebAuthnKeyParams{
		timeout: timeout,
	}
}

// NewNameWebAuthnKeyParamsWithContext creates a new NameWebAuthnKeyParams object
// with the ability to set a context for a request.
func NewNameWebAuthnKeyParamsWithContext(ctx context.Context) *NameWebAuthnKeyParams {
	return &NameWebAuthnKeyParams{
		Context: ctx,
	}
}

// NewNameWebAuthnKeyParamsWithHTTPClient creates a new NameWebAuthnKeyParams object
// with the ability to set a custom HTTPClient for a request.
func NewNameWebAuthnKeyParamsWithHTTPClient(client *http.Client) *NameWebAuthnKeyParams {
	return &NameWebAuthnKeyParams{
		HTTPClient: client,
	}
}

/*
NameWebAuthnKeyParams contains all the parameters to send to the API endpoint

	for the name web authn key operation.

	Typically these are written to a http.Request.
*/
type NameWebAuthnKeyParams struct {

	// NameWebAuthnKey.
	NameWebAuthnKey *models.NameWebAuthnKey

	/* WebAuthnCredentialID.

	   WebAuthn Credential ID

	   Default: "default"
	*/
	WebAuthnCredentialID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the name web authn key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NameWebAuthnKeyParams) WithDefaults() *NameWebAuthnKeyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the name web authn key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *NameWebAuthnKeyParams) SetDefaults() {
	var (
		webAuthnCredentialIDDefault = string("default")
	)

	val := NameWebAuthnKeyParams{
		WebAuthnCredentialID: webAuthnCredentialIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the name web authn key params
func (o *NameWebAuthnKeyParams) WithTimeout(timeout time.Duration) *NameWebAuthnKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the name web authn key params
func (o *NameWebAuthnKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the name web authn key params
func (o *NameWebAuthnKeyParams) WithContext(ctx context.Context) *NameWebAuthnKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the name web authn key params
func (o *NameWebAuthnKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the name web authn key params
func (o *NameWebAuthnKeyParams) WithHTTPClient(client *http.Client) *NameWebAuthnKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the name web authn key params
func (o *NameWebAuthnKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNameWebAuthnKey adds the nameWebAuthnKey to the name web authn key params
func (o *NameWebAuthnKeyParams) WithNameWebAuthnKey(nameWebAuthnKey *models.NameWebAuthnKey) *NameWebAuthnKeyParams {
	o.SetNameWebAuthnKey(nameWebAuthnKey)
	return o
}

// SetNameWebAuthnKey adds the nameWebAuthnKey to the name web authn key params
func (o *NameWebAuthnKeyParams) SetNameWebAuthnKey(nameWebAuthnKey *models.NameWebAuthnKey) {
	o.NameWebAuthnKey = nameWebAuthnKey
}

// WithWebAuthnCredentialID adds the webAuthnCredentialID to the name web authn key params
func (o *NameWebAuthnKeyParams) WithWebAuthnCredentialID(webAuthnCredentialID string) *NameWebAuthnKeyParams {
	o.SetWebAuthnCredentialID(webAuthnCredentialID)
	return o
}

// SetWebAuthnCredentialID adds the webAuthnCredentialId to the name web authn key params
func (o *NameWebAuthnKeyParams) SetWebAuthnCredentialID(webAuthnCredentialID string) {
	o.WebAuthnCredentialID = webAuthnCredentialID
}

// WriteToRequest writes these params to a swagger request
func (o *NameWebAuthnKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.NameWebAuthnKey != nil {
		if err := r.SetBodyParam(o.NameWebAuthnKey); err != nil {
			return err
		}
	}

	// path param webAuthnCredentialID
	if err := r.SetPathParam("webAuthnCredentialID", o.WebAuthnCredentialID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
