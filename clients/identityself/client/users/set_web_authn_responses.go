// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identityself/models"
)

// SetWebAuthnReader is a Reader for the SetWebAuthn structure.
type SetWebAuthnReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetWebAuthnReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSetWebAuthnNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetWebAuthnBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSetWebAuthnUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetWebAuthnForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetWebAuthnNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewSetWebAuthnPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSetWebAuthnUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetWebAuthnTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v2/self/set-webauthn] setWebAuthn", response, response.Code())
	}
}

// NewSetWebAuthnNoContent creates a SetWebAuthnNoContent with default headers values
func NewSetWebAuthnNoContent() *SetWebAuthnNoContent {
	return &SetWebAuthnNoContent{}
}

/*
SetWebAuthnNoContent describes a response with status code 204, with default header values.

	WebAuthn set successfully
*/
type SetWebAuthnNoContent struct {
}

// IsSuccess returns true when this set web authn no content response has a 2xx status code
func (o *SetWebAuthnNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set web authn no content response has a 3xx status code
func (o *SetWebAuthnNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set web authn no content response has a 4xx status code
func (o *SetWebAuthnNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this set web authn no content response has a 5xx status code
func (o *SetWebAuthnNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this set web authn no content response a status code equal to that given
func (o *SetWebAuthnNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the set web authn no content response
func (o *SetWebAuthnNoContent) Code() int {
	return 204
}

func (o *SetWebAuthnNoContent) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnNoContent ", 204)
}

func (o *SetWebAuthnNoContent) String() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnNoContent ", 204)
}

func (o *SetWebAuthnNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetWebAuthnBadRequest creates a SetWebAuthnBadRequest with default headers values
func NewSetWebAuthnBadRequest() *SetWebAuthnBadRequest {
	return &SetWebAuthnBadRequest{}
}

/*
SetWebAuthnBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SetWebAuthnBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this set web authn bad request response has a 2xx status code
func (o *SetWebAuthnBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set web authn bad request response has a 3xx status code
func (o *SetWebAuthnBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set web authn bad request response has a 4xx status code
func (o *SetWebAuthnBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set web authn bad request response has a 5xx status code
func (o *SetWebAuthnBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set web authn bad request response a status code equal to that given
func (o *SetWebAuthnBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set web authn bad request response
func (o *SetWebAuthnBadRequest) Code() int {
	return 400
}

func (o *SetWebAuthnBadRequest) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnBadRequest  %+v", 400, o.Payload)
}

func (o *SetWebAuthnBadRequest) String() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnBadRequest  %+v", 400, o.Payload)
}

func (o *SetWebAuthnBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetWebAuthnBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetWebAuthnUnauthorized creates a SetWebAuthnUnauthorized with default headers values
func NewSetWebAuthnUnauthorized() *SetWebAuthnUnauthorized {
	return &SetWebAuthnUnauthorized{}
}

/*
SetWebAuthnUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetWebAuthnUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this set web authn unauthorized response has a 2xx status code
func (o *SetWebAuthnUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set web authn unauthorized response has a 3xx status code
func (o *SetWebAuthnUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set web authn unauthorized response has a 4xx status code
func (o *SetWebAuthnUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set web authn unauthorized response has a 5xx status code
func (o *SetWebAuthnUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set web authn unauthorized response a status code equal to that given
func (o *SetWebAuthnUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set web authn unauthorized response
func (o *SetWebAuthnUnauthorized) Code() int {
	return 401
}

func (o *SetWebAuthnUnauthorized) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnUnauthorized  %+v", 401, o.Payload)
}

func (o *SetWebAuthnUnauthorized) String() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnUnauthorized  %+v", 401, o.Payload)
}

func (o *SetWebAuthnUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetWebAuthnUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetWebAuthnForbidden creates a SetWebAuthnForbidden with default headers values
func NewSetWebAuthnForbidden() *SetWebAuthnForbidden {
	return &SetWebAuthnForbidden{}
}

/*
SetWebAuthnForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetWebAuthnForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this set web authn forbidden response has a 2xx status code
func (o *SetWebAuthnForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set web authn forbidden response has a 3xx status code
func (o *SetWebAuthnForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set web authn forbidden response has a 4xx status code
func (o *SetWebAuthnForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set web authn forbidden response has a 5xx status code
func (o *SetWebAuthnForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set web authn forbidden response a status code equal to that given
func (o *SetWebAuthnForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set web authn forbidden response
func (o *SetWebAuthnForbidden) Code() int {
	return 403
}

func (o *SetWebAuthnForbidden) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnForbidden  %+v", 403, o.Payload)
}

func (o *SetWebAuthnForbidden) String() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnForbidden  %+v", 403, o.Payload)
}

func (o *SetWebAuthnForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetWebAuthnForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetWebAuthnNotFound creates a SetWebAuthnNotFound with default headers values
func NewSetWebAuthnNotFound() *SetWebAuthnNotFound {
	return &SetWebAuthnNotFound{}
}

/*
SetWebAuthnNotFound describes a response with status code 404, with default header values.

Not found
*/
type SetWebAuthnNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this set web authn not found response has a 2xx status code
func (o *SetWebAuthnNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set web authn not found response has a 3xx status code
func (o *SetWebAuthnNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set web authn not found response has a 4xx status code
func (o *SetWebAuthnNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set web authn not found response has a 5xx status code
func (o *SetWebAuthnNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set web authn not found response a status code equal to that given
func (o *SetWebAuthnNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set web authn not found response
func (o *SetWebAuthnNotFound) Code() int {
	return 404
}

func (o *SetWebAuthnNotFound) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnNotFound  %+v", 404, o.Payload)
}

func (o *SetWebAuthnNotFound) String() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnNotFound  %+v", 404, o.Payload)
}

func (o *SetWebAuthnNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetWebAuthnNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetWebAuthnPreconditionFailed creates a SetWebAuthnPreconditionFailed with default headers values
func NewSetWebAuthnPreconditionFailed() *SetWebAuthnPreconditionFailed {
	return &SetWebAuthnPreconditionFailed{}
}

/*
SetWebAuthnPreconditionFailed describes a response with status code 412, with default header values.

Payload too large
*/
type SetWebAuthnPreconditionFailed struct {
	Payload *models.Error
}

// IsSuccess returns true when this set web authn precondition failed response has a 2xx status code
func (o *SetWebAuthnPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set web authn precondition failed response has a 3xx status code
func (o *SetWebAuthnPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set web authn precondition failed response has a 4xx status code
func (o *SetWebAuthnPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this set web authn precondition failed response has a 5xx status code
func (o *SetWebAuthnPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this set web authn precondition failed response a status code equal to that given
func (o *SetWebAuthnPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the set web authn precondition failed response
func (o *SetWebAuthnPreconditionFailed) Code() int {
	return 412
}

func (o *SetWebAuthnPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnPreconditionFailed  %+v", 412, o.Payload)
}

func (o *SetWebAuthnPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnPreconditionFailed  %+v", 412, o.Payload)
}

func (o *SetWebAuthnPreconditionFailed) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetWebAuthnPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetWebAuthnUnprocessableEntity creates a SetWebAuthnUnprocessableEntity with default headers values
func NewSetWebAuthnUnprocessableEntity() *SetWebAuthnUnprocessableEntity {
	return &SetWebAuthnUnprocessableEntity{}
}

/*
SetWebAuthnUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type SetWebAuthnUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this set web authn unprocessable entity response has a 2xx status code
func (o *SetWebAuthnUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set web authn unprocessable entity response has a 3xx status code
func (o *SetWebAuthnUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set web authn unprocessable entity response has a 4xx status code
func (o *SetWebAuthnUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this set web authn unprocessable entity response has a 5xx status code
func (o *SetWebAuthnUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this set web authn unprocessable entity response a status code equal to that given
func (o *SetWebAuthnUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the set web authn unprocessable entity response
func (o *SetWebAuthnUnprocessableEntity) Code() int {
	return 422
}

func (o *SetWebAuthnUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SetWebAuthnUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SetWebAuthnUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetWebAuthnUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetWebAuthnTooManyRequests creates a SetWebAuthnTooManyRequests with default headers values
func NewSetWebAuthnTooManyRequests() *SetWebAuthnTooManyRequests {
	return &SetWebAuthnTooManyRequests{}
}

/*
SetWebAuthnTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type SetWebAuthnTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this set web authn too many requests response has a 2xx status code
func (o *SetWebAuthnTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set web authn too many requests response has a 3xx status code
func (o *SetWebAuthnTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set web authn too many requests response has a 4xx status code
func (o *SetWebAuthnTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this set web authn too many requests response has a 5xx status code
func (o *SetWebAuthnTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this set web authn too many requests response a status code equal to that given
func (o *SetWebAuthnTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the set web authn too many requests response
func (o *SetWebAuthnTooManyRequests) Code() int {
	return 429
}

func (o *SetWebAuthnTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetWebAuthnTooManyRequests) String() string {
	return fmt.Sprintf("[POST /v2/self/set-webauthn][%d] setWebAuthnTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetWebAuthnTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetWebAuthnTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
