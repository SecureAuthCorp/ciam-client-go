// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PublicKeyCredentialRequestOptions The PublicKeyCredentialRequestOptions dictionary supplies get() with the data it needs to generate an assertion.
// Its challenge member MUST be present, while its other members are OPTIONAL.
//
// WebAuthn Level 3: hints.
//
// Specification: ยง5.5. Options for Assertion Generation (https://www.w3.org/TR/webauthn/#dictionary-assertion-options)
//
// swagger:model PublicKeyCredentialRequestOptions
type PublicKeyCredentialRequestOptions struct {

	// allow credentials
	AllowCredentials []*CredentialDescriptor `json:"allowCredentials" yaml:"allowCredentials"`

	// challenge
	Challenge URLEncodedBase64 `json:"challenge,omitempty" yaml:"challenge,omitempty"`

	// extensions
	Extensions AuthenticationExtensions `json:"extensions,omitempty" yaml:"extensions,omitempty"`

	// hints
	Hints []PublicKeyCredentialHints `json:"hints" yaml:"hints"`

	// rp Id
	RpID string `json:"rpId,omitempty" yaml:"rpId,omitempty"`

	// timeout
	Timeout int64 `json:"timeout,omitempty" yaml:"timeout,omitempty"`

	// user verification
	UserVerification UserVerificationRequirement `json:"userVerification,omitempty" yaml:"userVerification,omitempty"`
}

// Validate validates this public key credential request options
func (m *PublicKeyCredentialRequestOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChallenge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicKeyCredentialRequestOptions) validateAllowCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.AllowCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowCredentials); i++ {
		if swag.IsZero(m.AllowCredentials[i]) { // not required
			continue
		}

		if m.AllowCredentials[i] != nil {
			if err := m.AllowCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allowCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicKeyCredentialRequestOptions) validateChallenge(formats strfmt.Registry) error {
	if swag.IsZero(m.Challenge) { // not required
		return nil
	}

	if err := m.Challenge.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("challenge")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("challenge")
		}
		return err
	}

	return nil
}

func (m *PublicKeyCredentialRequestOptions) validateExtensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if m.Extensions != nil {
		if err := m.Extensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("extensions")
			}
			return err
		}
	}

	return nil
}

func (m *PublicKeyCredentialRequestOptions) validateHints(formats strfmt.Registry) error {
	if swag.IsZero(m.Hints) { // not required
		return nil
	}

	for i := 0; i < len(m.Hints); i++ {

		if err := m.Hints[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hints" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hints" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PublicKeyCredentialRequestOptions) validateUserVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.UserVerification) { // not required
		return nil
	}

	if err := m.UserVerification.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userVerification")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("userVerification")
		}
		return err
	}

	return nil
}

// ContextValidate validate this public key credential request options based on the context it is used
func (m *PublicKeyCredentialRequestOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAllowCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChallenge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserVerification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicKeyCredentialRequestOptions) contextValidateAllowCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AllowCredentials); i++ {

		if m.AllowCredentials[i] != nil {

			if swag.IsZero(m.AllowCredentials[i]) { // not required
				return nil
			}

			if err := m.AllowCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("allowCredentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("allowCredentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PublicKeyCredentialRequestOptions) contextValidateChallenge(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Challenge.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("challenge")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("challenge")
		}
		return err
	}

	return nil
}

func (m *PublicKeyCredentialRequestOptions) contextValidateExtensions(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if err := m.Extensions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("extensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("extensions")
		}
		return err
	}

	return nil
}

func (m *PublicKeyCredentialRequestOptions) contextValidateHints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hints); i++ {

		if swag.IsZero(m.Hints[i]) { // not required
			return nil
		}

		if err := m.Hints[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hints" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hints" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PublicKeyCredentialRequestOptions) contextValidateUserVerification(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UserVerification) { // not required
		return nil
	}

	if err := m.UserVerification.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("userVerification")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("userVerification")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicKeyCredentialRequestOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicKeyCredentialRequestOptions) UnmarshalBinary(b []byte) error {
	var res PublicKeyCredentialRequestOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
