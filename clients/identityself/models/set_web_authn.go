// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetWebAuthn set web authn
//
// swagger:model SetWebAuthn
type SetWebAuthn struct {

	// new webauthn
	// Required: true
	NewWebauthn *Credential `json:"new_webauthn" yaml:"new_webauthn"`
}

// Validate validates this set web authn
func (m *SetWebAuthn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewWebauthn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetWebAuthn) validateNewWebauthn(formats strfmt.Registry) error {

	if err := validate.Required("new_webauthn", "body", m.NewWebauthn); err != nil {
		return err
	}

	if m.NewWebauthn != nil {
		if err := m.NewWebauthn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_webauthn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("new_webauthn")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this set web authn based on the context it is used
func (m *SetWebAuthn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewWebauthn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetWebAuthn) contextValidateNewWebauthn(ctx context.Context, formats strfmt.Registry) error {

	if m.NewWebauthn != nil {

		if err := m.NewWebauthn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_webauthn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("new_webauthn")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetWebAuthn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetWebAuthn) UnmarshalBinary(b []byte) error {
	var res SetWebAuthn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
