// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeviceAuthorizationParams creates a new DeviceAuthorizationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeviceAuthorizationParams() *DeviceAuthorizationParams {
	return &DeviceAuthorizationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeviceAuthorizationParamsWithTimeout creates a new DeviceAuthorizationParams object
// with the ability to set a timeout on a request.
func NewDeviceAuthorizationParamsWithTimeout(timeout time.Duration) *DeviceAuthorizationParams {
	return &DeviceAuthorizationParams{
		timeout: timeout,
	}
}

// NewDeviceAuthorizationParamsWithContext creates a new DeviceAuthorizationParams object
// with the ability to set a context for a request.
func NewDeviceAuthorizationParamsWithContext(ctx context.Context) *DeviceAuthorizationParams {
	return &DeviceAuthorizationParams{
		Context: ctx,
	}
}

// NewDeviceAuthorizationParamsWithHTTPClient creates a new DeviceAuthorizationParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeviceAuthorizationParamsWithHTTPClient(client *http.Client) *DeviceAuthorizationParams {
	return &DeviceAuthorizationParams{
		HTTPClient: client,
	}
}

/*
DeviceAuthorizationParams contains all the parameters to send to the API endpoint

	for the device authorization operation.

	Typically these are written to a http.Request.
*/
type DeviceAuthorizationParams struct {

	/* ClientID.

	   Client id
	*/
	ClientID string

	/* Scope.

	   Scope
	*/
	Scope *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the device authorization params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeviceAuthorizationParams) WithDefaults() *DeviceAuthorizationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the device authorization params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeviceAuthorizationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the device authorization params
func (o *DeviceAuthorizationParams) WithTimeout(timeout time.Duration) *DeviceAuthorizationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the device authorization params
func (o *DeviceAuthorizationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the device authorization params
func (o *DeviceAuthorizationParams) WithContext(ctx context.Context) *DeviceAuthorizationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the device authorization params
func (o *DeviceAuthorizationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the device authorization params
func (o *DeviceAuthorizationParams) WithHTTPClient(client *http.Client) *DeviceAuthorizationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the device authorization params
func (o *DeviceAuthorizationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the device authorization params
func (o *DeviceAuthorizationParams) WithClientID(clientID string) *DeviceAuthorizationParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the device authorization params
func (o *DeviceAuthorizationParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithScope adds the scope to the device authorization params
func (o *DeviceAuthorizationParams) WithScope(scope *string) *DeviceAuthorizationParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the device authorization params
func (o *DeviceAuthorizationParams) SetScope(scope *string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *DeviceAuthorizationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	if o.Scope != nil {

		// form param scope
		var frScope string
		if o.Scope != nil {
			frScope = *o.Scope
		}
		fScope := frScope
		if fScope != "" {
			if err := r.SetFormParam("scope", fScope); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
