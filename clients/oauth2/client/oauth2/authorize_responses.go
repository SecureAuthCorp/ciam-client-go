// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/oauth2/models"
)

// AuthorizeReader is a Reader for the Authorize structure.
type AuthorizeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AuthorizeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 302:
		result := NewAuthorizeFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAuthorizeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAuthorizeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAuthorizeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAuthorizeFound creates a AuthorizeFound with default headers values
func NewAuthorizeFound() *AuthorizeFound {
	return &AuthorizeFound{}
}

/*
AuthorizeFound describes a response with status code 302, with default header values.

Empty response
*/
type AuthorizeFound struct {
}

// IsSuccess returns true when this authorize found response has a 2xx status code
func (o *AuthorizeFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize found response has a 3xx status code
func (o *AuthorizeFound) IsRedirect() bool {
	return true
}

// IsClientError returns true when this authorize found response has a 4xx status code
func (o *AuthorizeFound) IsClientError() bool {
	return false
}

// IsServerError returns true when this authorize found response has a 5xx status code
func (o *AuthorizeFound) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize found response a status code equal to that given
func (o *AuthorizeFound) IsCode(code int) bool {
	return code == 302
}

func (o *AuthorizeFound) Error() string {
	return fmt.Sprintf("[GET /oauth2/authorize][%d] authorizeFound ", 302)
}

func (o *AuthorizeFound) String() string {
	return fmt.Sprintf("[GET /oauth2/authorize][%d] authorizeFound ", 302)
}

func (o *AuthorizeFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAuthorizeUnauthorized creates a AuthorizeUnauthorized with default headers values
func NewAuthorizeUnauthorized() *AuthorizeUnauthorized {
	return &AuthorizeUnauthorized{}
}

/*
AuthorizeUnauthorized describes a response with status code 401, with default header values.

ErrorResponse
*/
type AuthorizeUnauthorized struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this authorize unauthorized response has a 2xx status code
func (o *AuthorizeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize unauthorized response has a 3xx status code
func (o *AuthorizeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize unauthorized response has a 4xx status code
func (o *AuthorizeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize unauthorized response has a 5xx status code
func (o *AuthorizeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize unauthorized response a status code equal to that given
func (o *AuthorizeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AuthorizeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /oauth2/authorize][%d] authorizeUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthorizeUnauthorized) String() string {
	return fmt.Sprintf("[GET /oauth2/authorize][%d] authorizeUnauthorized  %+v", 401, o.Payload)
}

func (o *AuthorizeUnauthorized) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *AuthorizeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorizeNotFound creates a AuthorizeNotFound with default headers values
func NewAuthorizeNotFound() *AuthorizeNotFound {
	return &AuthorizeNotFound{}
}

/*
AuthorizeNotFound describes a response with status code 404, with default header values.

ErrorResponse
*/
type AuthorizeNotFound struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this authorize not found response has a 2xx status code
func (o *AuthorizeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize not found response has a 3xx status code
func (o *AuthorizeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize not found response has a 4xx status code
func (o *AuthorizeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize not found response has a 5xx status code
func (o *AuthorizeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize not found response a status code equal to that given
func (o *AuthorizeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AuthorizeNotFound) Error() string {
	return fmt.Sprintf("[GET /oauth2/authorize][%d] authorizeNotFound  %+v", 404, o.Payload)
}

func (o *AuthorizeNotFound) String() string {
	return fmt.Sprintf("[GET /oauth2/authorize][%d] authorizeNotFound  %+v", 404, o.Payload)
}

func (o *AuthorizeNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *AuthorizeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAuthorizeTooManyRequests creates a AuthorizeTooManyRequests with default headers values
func NewAuthorizeTooManyRequests() *AuthorizeTooManyRequests {
	return &AuthorizeTooManyRequests{}
}

/*
AuthorizeTooManyRequests describes a response with status code 429, with default header values.

ErrorResponse
*/
type AuthorizeTooManyRequests struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this authorize too many requests response has a 2xx status code
func (o *AuthorizeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this authorize too many requests response has a 3xx status code
func (o *AuthorizeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this authorize too many requests response has a 4xx status code
func (o *AuthorizeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this authorize too many requests response has a 5xx status code
func (o *AuthorizeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this authorize too many requests response a status code equal to that given
func (o *AuthorizeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *AuthorizeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /oauth2/authorize][%d] authorizeTooManyRequests  %+v", 429, o.Payload)
}

func (o *AuthorizeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /oauth2/authorize][%d] authorizeTooManyRequests  %+v", 429, o.Payload)
}

func (o *AuthorizeTooManyRequests) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *AuthorizeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
