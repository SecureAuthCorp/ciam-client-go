// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewAuthorizeParams creates a new AuthorizeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAuthorizeParams() *AuthorizeParams {
	return &AuthorizeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAuthorizeParamsWithTimeout creates a new AuthorizeParams object
// with the ability to set a timeout on a request.
func NewAuthorizeParamsWithTimeout(timeout time.Duration) *AuthorizeParams {
	return &AuthorizeParams{
		timeout: timeout,
	}
}

// NewAuthorizeParamsWithContext creates a new AuthorizeParams object
// with the ability to set a context for a request.
func NewAuthorizeParamsWithContext(ctx context.Context) *AuthorizeParams {
	return &AuthorizeParams{
		Context: ctx,
	}
}

// NewAuthorizeParamsWithHTTPClient creates a new AuthorizeParams object
// with the ability to set a custom HTTPClient for a request.
func NewAuthorizeParamsWithHTTPClient(client *http.Client) *AuthorizeParams {
	return &AuthorizeParams{
		HTTPClient: client,
	}
}

/*
AuthorizeParams contains all the parameters to send to the API endpoint

	for the authorize operation.

	Typically these are written to a http.Request.
*/
type AuthorizeParams struct {

	// Claims.
	Claims *string

	/* ClientID.

	     Client application identifier


	You can find the `client_id` value on the Settings page of the required client application.
	*/
	ClientID string

	// CodeChallenge.
	CodeChallenge *string

	// CodeChallengeMethod.
	CodeChallengeMethod *string

	/* DpopJkt.

	   Thumbprint of the DPoP public key
	*/
	DpopJkt *string

	// IdpHint.
	IdpHint *string

	// Nonce.
	Nonce *string

	// RedirectURI.
	RedirectURI *string

	// Request.
	Request *string

	// RequestURI.
	RequestURI *string

	// ResponseType.
	ResponseType string

	// Scope.
	Scope *string

	// State.
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the authorize params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthorizeParams) WithDefaults() *AuthorizeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the authorize params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AuthorizeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the authorize params
func (o *AuthorizeParams) WithTimeout(timeout time.Duration) *AuthorizeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the authorize params
func (o *AuthorizeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the authorize params
func (o *AuthorizeParams) WithContext(ctx context.Context) *AuthorizeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the authorize params
func (o *AuthorizeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the authorize params
func (o *AuthorizeParams) WithHTTPClient(client *http.Client) *AuthorizeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the authorize params
func (o *AuthorizeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClaims adds the claims to the authorize params
func (o *AuthorizeParams) WithClaims(claims *string) *AuthorizeParams {
	o.SetClaims(claims)
	return o
}

// SetClaims adds the claims to the authorize params
func (o *AuthorizeParams) SetClaims(claims *string) {
	o.Claims = claims
}

// WithClientID adds the clientID to the authorize params
func (o *AuthorizeParams) WithClientID(clientID string) *AuthorizeParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the authorize params
func (o *AuthorizeParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithCodeChallenge adds the codeChallenge to the authorize params
func (o *AuthorizeParams) WithCodeChallenge(codeChallenge *string) *AuthorizeParams {
	o.SetCodeChallenge(codeChallenge)
	return o
}

// SetCodeChallenge adds the codeChallenge to the authorize params
func (o *AuthorizeParams) SetCodeChallenge(codeChallenge *string) {
	o.CodeChallenge = codeChallenge
}

// WithCodeChallengeMethod adds the codeChallengeMethod to the authorize params
func (o *AuthorizeParams) WithCodeChallengeMethod(codeChallengeMethod *string) *AuthorizeParams {
	o.SetCodeChallengeMethod(codeChallengeMethod)
	return o
}

// SetCodeChallengeMethod adds the codeChallengeMethod to the authorize params
func (o *AuthorizeParams) SetCodeChallengeMethod(codeChallengeMethod *string) {
	o.CodeChallengeMethod = codeChallengeMethod
}

// WithDpopJkt adds the dpopJkt to the authorize params
func (o *AuthorizeParams) WithDpopJkt(dpopJkt *string) *AuthorizeParams {
	o.SetDpopJkt(dpopJkt)
	return o
}

// SetDpopJkt adds the dpopJkt to the authorize params
func (o *AuthorizeParams) SetDpopJkt(dpopJkt *string) {
	o.DpopJkt = dpopJkt
}

// WithIdpHint adds the idpHint to the authorize params
func (o *AuthorizeParams) WithIdpHint(idpHint *string) *AuthorizeParams {
	o.SetIdpHint(idpHint)
	return o
}

// SetIdpHint adds the idpHint to the authorize params
func (o *AuthorizeParams) SetIdpHint(idpHint *string) {
	o.IdpHint = idpHint
}

// WithNonce adds the nonce to the authorize params
func (o *AuthorizeParams) WithNonce(nonce *string) *AuthorizeParams {
	o.SetNonce(nonce)
	return o
}

// SetNonce adds the nonce to the authorize params
func (o *AuthorizeParams) SetNonce(nonce *string) {
	o.Nonce = nonce
}

// WithRedirectURI adds the redirectURI to the authorize params
func (o *AuthorizeParams) WithRedirectURI(redirectURI *string) *AuthorizeParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the authorize params
func (o *AuthorizeParams) SetRedirectURI(redirectURI *string) {
	o.RedirectURI = redirectURI
}

// WithRequest adds the request to the authorize params
func (o *AuthorizeParams) WithRequest(request *string) *AuthorizeParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the authorize params
func (o *AuthorizeParams) SetRequest(request *string) {
	o.Request = request
}

// WithRequestURI adds the requestURI to the authorize params
func (o *AuthorizeParams) WithRequestURI(requestURI *string) *AuthorizeParams {
	o.SetRequestURI(requestURI)
	return o
}

// SetRequestURI adds the requestUri to the authorize params
func (o *AuthorizeParams) SetRequestURI(requestURI *string) {
	o.RequestURI = requestURI
}

// WithResponseType adds the responseType to the authorize params
func (o *AuthorizeParams) WithResponseType(responseType string) *AuthorizeParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the authorize params
func (o *AuthorizeParams) SetResponseType(responseType string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the authorize params
func (o *AuthorizeParams) WithScope(scope *string) *AuthorizeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the authorize params
func (o *AuthorizeParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithState adds the state to the authorize params
func (o *AuthorizeParams) WithState(state *string) *AuthorizeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the authorize params
func (o *AuthorizeParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *AuthorizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Claims != nil {

		// query param claims
		var qrClaims string

		if o.Claims != nil {
			qrClaims = *o.Claims
		}
		qClaims := qrClaims
		if qClaims != "" {

			if err := r.SetQueryParam("claims", qClaims); err != nil {
				return err
			}
		}
	}

	// query param client_id
	qrClientID := o.ClientID
	qClientID := qrClientID
	if qClientID != "" {

		if err := r.SetQueryParam("client_id", qClientID); err != nil {
			return err
		}
	}

	if o.CodeChallenge != nil {

		// query param code_challenge
		var qrCodeChallenge string

		if o.CodeChallenge != nil {
			qrCodeChallenge = *o.CodeChallenge
		}
		qCodeChallenge := qrCodeChallenge
		if qCodeChallenge != "" {

			if err := r.SetQueryParam("code_challenge", qCodeChallenge); err != nil {
				return err
			}
		}
	}

	if o.CodeChallengeMethod != nil {

		// query param code_challenge_method
		var qrCodeChallengeMethod string

		if o.CodeChallengeMethod != nil {
			qrCodeChallengeMethod = *o.CodeChallengeMethod
		}
		qCodeChallengeMethod := qrCodeChallengeMethod
		if qCodeChallengeMethod != "" {

			if err := r.SetQueryParam("code_challenge_method", qCodeChallengeMethod); err != nil {
				return err
			}
		}
	}

	if o.DpopJkt != nil {

		// query param dpop_jkt
		var qrDpopJkt string

		if o.DpopJkt != nil {
			qrDpopJkt = *o.DpopJkt
		}
		qDpopJkt := qrDpopJkt
		if qDpopJkt != "" {

			if err := r.SetQueryParam("dpop_jkt", qDpopJkt); err != nil {
				return err
			}
		}
	}

	if o.IdpHint != nil {

		// query param idp_hint
		var qrIdpHint string

		if o.IdpHint != nil {
			qrIdpHint = *o.IdpHint
		}
		qIdpHint := qrIdpHint
		if qIdpHint != "" {

			if err := r.SetQueryParam("idp_hint", qIdpHint); err != nil {
				return err
			}
		}
	}

	if o.Nonce != nil {

		// query param nonce
		var qrNonce string

		if o.Nonce != nil {
			qrNonce = *o.Nonce
		}
		qNonce := qrNonce
		if qNonce != "" {

			if err := r.SetQueryParam("nonce", qNonce); err != nil {
				return err
			}
		}
	}

	if o.RedirectURI != nil {

		// query param redirect_uri
		var qrRedirectURI string

		if o.RedirectURI != nil {
			qrRedirectURI = *o.RedirectURI
		}
		qRedirectURI := qrRedirectURI
		if qRedirectURI != "" {

			if err := r.SetQueryParam("redirect_uri", qRedirectURI); err != nil {
				return err
			}
		}
	}

	if o.Request != nil {

		// query param request
		var qrRequest string

		if o.Request != nil {
			qrRequest = *o.Request
		}
		qRequest := qrRequest
		if qRequest != "" {

			if err := r.SetQueryParam("request", qRequest); err != nil {
				return err
			}
		}
	}

	if o.RequestURI != nil {

		// query param request_uri
		var qrRequestURI string

		if o.RequestURI != nil {
			qrRequestURI = *o.RequestURI
		}
		qRequestURI := qrRequestURI
		if qRequestURI != "" {

			if err := r.SetQueryParam("request_uri", qRequestURI); err != nil {
				return err
			}
		}
	}

	// query param response_type
	qrResponseType := o.ResponseType
	qResponseType := qrResponseType
	if qResponseType != "" {

		if err := r.SetQueryParam("response_type", qResponseType); err != nil {
			return err
		}
	}

	if o.Scope != nil {

		// query param scope
		var qrScope string

		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {

			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
