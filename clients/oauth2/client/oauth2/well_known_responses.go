// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/oauth2/models"
)

// WellKnownReader is a Reader for the WellKnown structure.
type WellKnownReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WellKnownReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWellKnownOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewWellKnownNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /.well-known/openid-configuration] wellKnown", response, response.Code())
	}
}

// NewWellKnownOK creates a WellKnownOK with default headers values
func NewWellKnownOK() *WellKnownOK {
	return &WellKnownOK{}
}

/*
WellKnownOK describes a response with status code 200, with default header values.

OpenID configuration
*/
type WellKnownOK struct {
	Payload *models.WellKnown
}

// IsSuccess returns true when this well known o k response has a 2xx status code
func (o *WellKnownOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this well known o k response has a 3xx status code
func (o *WellKnownOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this well known o k response has a 4xx status code
func (o *WellKnownOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this well known o k response has a 5xx status code
func (o *WellKnownOK) IsServerError() bool {
	return false
}

// IsCode returns true when this well known o k response a status code equal to that given
func (o *WellKnownOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the well known o k response
func (o *WellKnownOK) Code() int {
	return 200
}

func (o *WellKnownOK) Error() string {
	return fmt.Sprintf("[GET /.well-known/openid-configuration][%d] wellKnownOK  %+v", 200, o.Payload)
}

func (o *WellKnownOK) String() string {
	return fmt.Sprintf("[GET /.well-known/openid-configuration][%d] wellKnownOK  %+v", 200, o.Payload)
}

func (o *WellKnownOK) GetPayload() *models.WellKnown {
	return o.Payload
}

func (o *WellKnownOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.WellKnown)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWellKnownNotFound creates a WellKnownNotFound with default headers values
func NewWellKnownNotFound() *WellKnownNotFound {
	return &WellKnownNotFound{}
}

/*
WellKnownNotFound describes a response with status code 404, with default header values.

ErrorResponse
*/
type WellKnownNotFound struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this well known not found response has a 2xx status code
func (o *WellKnownNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this well known not found response has a 3xx status code
func (o *WellKnownNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this well known not found response has a 4xx status code
func (o *WellKnownNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this well known not found response has a 5xx status code
func (o *WellKnownNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this well known not found response a status code equal to that given
func (o *WellKnownNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the well known not found response
func (o *WellKnownNotFound) Code() int {
	return 404
}

func (o *WellKnownNotFound) Error() string {
	return fmt.Sprintf("[GET /.well-known/openid-configuration][%d] wellKnownNotFound  %+v", 404, o.Payload)
}

func (o *WellKnownNotFound) String() string {
	return fmt.Sprintf("[GET /.well-known/openid-configuration][%d] wellKnownNotFound  %+v", 404, o.Payload)
}

func (o *WellKnownNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *WellKnownNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
