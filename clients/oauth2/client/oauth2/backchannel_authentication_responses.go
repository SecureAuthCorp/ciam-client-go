// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/oauth2/models"
)

// BackchannelAuthenticationReader is a Reader for the BackchannelAuthentication structure.
type BackchannelAuthenticationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BackchannelAuthenticationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBackchannelAuthenticationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBackchannelAuthenticationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBackchannelAuthenticationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBackchannelAuthenticationOK creates a BackchannelAuthenticationOK with default headers values
func NewBackchannelAuthenticationOK() *BackchannelAuthenticationOK {
	return &BackchannelAuthenticationOK{}
}

/*
BackchannelAuthenticationOK describes a response with status code 200, with default header values.

Backchannel authentication response
*/
type BackchannelAuthenticationOK struct {
	Payload *models.BackchannelAuthenticationResponse
}

// IsSuccess returns true when this backchannel authentication o k response has a 2xx status code
func (o *BackchannelAuthenticationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this backchannel authentication o k response has a 3xx status code
func (o *BackchannelAuthenticationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backchannel authentication o k response has a 4xx status code
func (o *BackchannelAuthenticationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this backchannel authentication o k response has a 5xx status code
func (o *BackchannelAuthenticationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this backchannel authentication o k response a status code equal to that given
func (o *BackchannelAuthenticationOK) IsCode(code int) bool {
	return code == 200
}

func (o *BackchannelAuthenticationOK) Error() string {
	return fmt.Sprintf("[POST /backchannel/authentication][%d] backchannelAuthenticationOK  %+v", 200, o.Payload)
}

func (o *BackchannelAuthenticationOK) String() string {
	return fmt.Sprintf("[POST /backchannel/authentication][%d] backchannelAuthenticationOK  %+v", 200, o.Payload)
}

func (o *BackchannelAuthenticationOK) GetPayload() *models.BackchannelAuthenticationResponse {
	return o.Payload
}

func (o *BackchannelAuthenticationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BackchannelAuthenticationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackchannelAuthenticationBadRequest creates a BackchannelAuthenticationBadRequest with default headers values
func NewBackchannelAuthenticationBadRequest() *BackchannelAuthenticationBadRequest {
	return &BackchannelAuthenticationBadRequest{}
}

/*
BackchannelAuthenticationBadRequest describes a response with status code 400, with default header values.

Backchannel authentication error
*/
type BackchannelAuthenticationBadRequest struct {
	Payload *models.BackchannelAuthenticationError
}

// IsSuccess returns true when this backchannel authentication bad request response has a 2xx status code
func (o *BackchannelAuthenticationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this backchannel authentication bad request response has a 3xx status code
func (o *BackchannelAuthenticationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backchannel authentication bad request response has a 4xx status code
func (o *BackchannelAuthenticationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this backchannel authentication bad request response has a 5xx status code
func (o *BackchannelAuthenticationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this backchannel authentication bad request response a status code equal to that given
func (o *BackchannelAuthenticationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *BackchannelAuthenticationBadRequest) Error() string {
	return fmt.Sprintf("[POST /backchannel/authentication][%d] backchannelAuthenticationBadRequest  %+v", 400, o.Payload)
}

func (o *BackchannelAuthenticationBadRequest) String() string {
	return fmt.Sprintf("[POST /backchannel/authentication][%d] backchannelAuthenticationBadRequest  %+v", 400, o.Payload)
}

func (o *BackchannelAuthenticationBadRequest) GetPayload() *models.BackchannelAuthenticationError {
	return o.Payload
}

func (o *BackchannelAuthenticationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BackchannelAuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackchannelAuthenticationUnauthorized creates a BackchannelAuthenticationUnauthorized with default headers values
func NewBackchannelAuthenticationUnauthorized() *BackchannelAuthenticationUnauthorized {
	return &BackchannelAuthenticationUnauthorized{}
}

/*
BackchannelAuthenticationUnauthorized describes a response with status code 401, with default header values.

Backchannel authentication error
*/
type BackchannelAuthenticationUnauthorized struct {
	Payload *models.BackchannelAuthenticationError
}

// IsSuccess returns true when this backchannel authentication unauthorized response has a 2xx status code
func (o *BackchannelAuthenticationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this backchannel authentication unauthorized response has a 3xx status code
func (o *BackchannelAuthenticationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backchannel authentication unauthorized response has a 4xx status code
func (o *BackchannelAuthenticationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this backchannel authentication unauthorized response has a 5xx status code
func (o *BackchannelAuthenticationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this backchannel authentication unauthorized response a status code equal to that given
func (o *BackchannelAuthenticationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *BackchannelAuthenticationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /backchannel/authentication][%d] backchannelAuthenticationUnauthorized  %+v", 401, o.Payload)
}

func (o *BackchannelAuthenticationUnauthorized) String() string {
	return fmt.Sprintf("[POST /backchannel/authentication][%d] backchannelAuthenticationUnauthorized  %+v", 401, o.Payload)
}

func (o *BackchannelAuthenticationUnauthorized) GetPayload() *models.BackchannelAuthenticationError {
	return o.Payload
}

func (o *BackchannelAuthenticationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BackchannelAuthenticationError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
