// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPushedAuthorizationRequestParams creates a new PushedAuthorizationRequestParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPushedAuthorizationRequestParams() *PushedAuthorizationRequestParams {
	return &PushedAuthorizationRequestParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPushedAuthorizationRequestParamsWithTimeout creates a new PushedAuthorizationRequestParams object
// with the ability to set a timeout on a request.
func NewPushedAuthorizationRequestParamsWithTimeout(timeout time.Duration) *PushedAuthorizationRequestParams {
	return &PushedAuthorizationRequestParams{
		timeout: timeout,
	}
}

// NewPushedAuthorizationRequestParamsWithContext creates a new PushedAuthorizationRequestParams object
// with the ability to set a context for a request.
func NewPushedAuthorizationRequestParamsWithContext(ctx context.Context) *PushedAuthorizationRequestParams {
	return &PushedAuthorizationRequestParams{
		Context: ctx,
	}
}

// NewPushedAuthorizationRequestParamsWithHTTPClient creates a new PushedAuthorizationRequestParams object
// with the ability to set a custom HTTPClient for a request.
func NewPushedAuthorizationRequestParamsWithHTTPClient(client *http.Client) *PushedAuthorizationRequestParams {
	return &PushedAuthorizationRequestParams{
		HTTPClient: client,
	}
}

/*
PushedAuthorizationRequestParams contains all the parameters to send to the API endpoint

	for the pushed authorization request operation.

	Typically these are written to a http.Request.
*/
type PushedAuthorizationRequestParams struct {

	/* AcrValues.

	   Requested Authentication Context Class Reference values.
	*/
	AcrValues *string

	/* AuthorizationDetails.

	   Authorization details
	*/
	AuthorizationDetails *string

	/* ClientAssertion.

	   client assertion
	*/
	ClientAssertion *string

	/* ClientAssertionType.

	   client assertion type
	*/
	ClientAssertionType *string

	/* ClientID.

	   Client id
	*/
	ClientID string

	/* ClientSecret.

	   Client secret
	*/
	ClientSecret *string

	/* CodeChallenge.

	   Code challenge
	*/
	CodeChallenge *string

	/* CodeChallengeMethod.

	   Code challenge method
	*/
	CodeChallengeMethod *string

	/* Dpop.

	   DPoP proof
	*/
	Dpop *string

	/* DpopJkt.

	   Thumbprint of the DPoP public key
	*/
	DpopJkt *string

	/* RedirectURI.

	   Redirect uri
	*/
	RedirectURI string

	/* Request.

	   Request Object that holds authorization request parameters
	*/
	Request *string

	/* ResponseType.

	   Response type
	*/
	ResponseType string

	/* Scope.

	   Scope
	*/
	Scope *string

	/* State.

	   State
	*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pushed authorization request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PushedAuthorizationRequestParams) WithDefaults() *PushedAuthorizationRequestParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pushed authorization request params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PushedAuthorizationRequestParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithTimeout(timeout time.Duration) *PushedAuthorizationRequestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithContext(ctx context.Context) *PushedAuthorizationRequestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithHTTPClient(client *http.Client) *PushedAuthorizationRequestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcrValues adds the acrValues to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithAcrValues(acrValues *string) *PushedAuthorizationRequestParams {
	o.SetAcrValues(acrValues)
	return o
}

// SetAcrValues adds the acrValues to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetAcrValues(acrValues *string) {
	o.AcrValues = acrValues
}

// WithAuthorizationDetails adds the authorizationDetails to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithAuthorizationDetails(authorizationDetails *string) *PushedAuthorizationRequestParams {
	o.SetAuthorizationDetails(authorizationDetails)
	return o
}

// SetAuthorizationDetails adds the authorizationDetails to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetAuthorizationDetails(authorizationDetails *string) {
	o.AuthorizationDetails = authorizationDetails
}

// WithClientAssertion adds the clientAssertion to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithClientAssertion(clientAssertion *string) *PushedAuthorizationRequestParams {
	o.SetClientAssertion(clientAssertion)
	return o
}

// SetClientAssertion adds the clientAssertion to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetClientAssertion(clientAssertion *string) {
	o.ClientAssertion = clientAssertion
}

// WithClientAssertionType adds the clientAssertionType to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithClientAssertionType(clientAssertionType *string) *PushedAuthorizationRequestParams {
	o.SetClientAssertionType(clientAssertionType)
	return o
}

// SetClientAssertionType adds the clientAssertionType to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetClientAssertionType(clientAssertionType *string) {
	o.ClientAssertionType = clientAssertionType
}

// WithClientID adds the clientID to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithClientID(clientID string) *PushedAuthorizationRequestParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithClientSecret adds the clientSecret to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithClientSecret(clientSecret *string) *PushedAuthorizationRequestParams {
	o.SetClientSecret(clientSecret)
	return o
}

// SetClientSecret adds the clientSecret to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetClientSecret(clientSecret *string) {
	o.ClientSecret = clientSecret
}

// WithCodeChallenge adds the codeChallenge to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithCodeChallenge(codeChallenge *string) *PushedAuthorizationRequestParams {
	o.SetCodeChallenge(codeChallenge)
	return o
}

// SetCodeChallenge adds the codeChallenge to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetCodeChallenge(codeChallenge *string) {
	o.CodeChallenge = codeChallenge
}

// WithCodeChallengeMethod adds the codeChallengeMethod to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithCodeChallengeMethod(codeChallengeMethod *string) *PushedAuthorizationRequestParams {
	o.SetCodeChallengeMethod(codeChallengeMethod)
	return o
}

// SetCodeChallengeMethod adds the codeChallengeMethod to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetCodeChallengeMethod(codeChallengeMethod *string) {
	o.CodeChallengeMethod = codeChallengeMethod
}

// WithDpop adds the dpop to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithDpop(dpop *string) *PushedAuthorizationRequestParams {
	o.SetDpop(dpop)
	return o
}

// SetDpop adds the dpop to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetDpop(dpop *string) {
	o.Dpop = dpop
}

// WithDpopJkt adds the dpopJkt to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithDpopJkt(dpopJkt *string) *PushedAuthorizationRequestParams {
	o.SetDpopJkt(dpopJkt)
	return o
}

// SetDpopJkt adds the dpopJkt to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetDpopJkt(dpopJkt *string) {
	o.DpopJkt = dpopJkt
}

// WithRedirectURI adds the redirectURI to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithRedirectURI(redirectURI string) *PushedAuthorizationRequestParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetRedirectURI(redirectURI string) {
	o.RedirectURI = redirectURI
}

// WithRequest adds the request to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithRequest(request *string) *PushedAuthorizationRequestParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetRequest(request *string) {
	o.Request = request
}

// WithResponseType adds the responseType to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithResponseType(responseType string) *PushedAuthorizationRequestParams {
	o.SetResponseType(responseType)
	return o
}

// SetResponseType adds the responseType to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetResponseType(responseType string) {
	o.ResponseType = responseType
}

// WithScope adds the scope to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithScope(scope *string) *PushedAuthorizationRequestParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithState adds the state to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) WithState(state *string) *PushedAuthorizationRequestParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the pushed authorization request params
func (o *PushedAuthorizationRequestParams) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *PushedAuthorizationRequestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AcrValues != nil {

		// form param acr_values
		var frAcrValues string
		if o.AcrValues != nil {
			frAcrValues = *o.AcrValues
		}
		fAcrValues := frAcrValues
		if fAcrValues != "" {
			if err := r.SetFormParam("acr_values", fAcrValues); err != nil {
				return err
			}
		}
	}

	if o.AuthorizationDetails != nil {

		// form param authorization_details
		var frAuthorizationDetails string
		if o.AuthorizationDetails != nil {
			frAuthorizationDetails = *o.AuthorizationDetails
		}
		fAuthorizationDetails := frAuthorizationDetails
		if fAuthorizationDetails != "" {
			if err := r.SetFormParam("authorization_details", fAuthorizationDetails); err != nil {
				return err
			}
		}
	}

	if o.ClientAssertion != nil {

		// form param client_assertion
		var frClientAssertion string
		if o.ClientAssertion != nil {
			frClientAssertion = *o.ClientAssertion
		}
		fClientAssertion := frClientAssertion
		if fClientAssertion != "" {
			if err := r.SetFormParam("client_assertion", fClientAssertion); err != nil {
				return err
			}
		}
	}

	if o.ClientAssertionType != nil {

		// form param client_assertion_type
		var frClientAssertionType string
		if o.ClientAssertionType != nil {
			frClientAssertionType = *o.ClientAssertionType
		}
		fClientAssertionType := frClientAssertionType
		if fClientAssertionType != "" {
			if err := r.SetFormParam("client_assertion_type", fClientAssertionType); err != nil {
				return err
			}
		}
	}

	// form param client_id
	frClientID := o.ClientID
	fClientID := frClientID
	if fClientID != "" {
		if err := r.SetFormParam("client_id", fClientID); err != nil {
			return err
		}
	}

	if o.ClientSecret != nil {

		// form param client_secret
		var frClientSecret string
		if o.ClientSecret != nil {
			frClientSecret = *o.ClientSecret
		}
		fClientSecret := frClientSecret
		if fClientSecret != "" {
			if err := r.SetFormParam("client_secret", fClientSecret); err != nil {
				return err
			}
		}
	}

	if o.CodeChallenge != nil {

		// form param code_challenge
		var frCodeChallenge string
		if o.CodeChallenge != nil {
			frCodeChallenge = *o.CodeChallenge
		}
		fCodeChallenge := frCodeChallenge
		if fCodeChallenge != "" {
			if err := r.SetFormParam("code_challenge", fCodeChallenge); err != nil {
				return err
			}
		}
	}

	if o.CodeChallengeMethod != nil {

		// form param code_challenge_method
		var frCodeChallengeMethod string
		if o.CodeChallengeMethod != nil {
			frCodeChallengeMethod = *o.CodeChallengeMethod
		}
		fCodeChallengeMethod := frCodeChallengeMethod
		if fCodeChallengeMethod != "" {
			if err := r.SetFormParam("code_challenge_method", fCodeChallengeMethod); err != nil {
				return err
			}
		}
	}

	if o.Dpop != nil {

		// header param dpop
		if err := r.SetHeaderParam("dpop", *o.Dpop); err != nil {
			return err
		}
	}

	if o.DpopJkt != nil {

		// form param dpop_jkt
		var frDpopJkt string
		if o.DpopJkt != nil {
			frDpopJkt = *o.DpopJkt
		}
		fDpopJkt := frDpopJkt
		if fDpopJkt != "" {
			if err := r.SetFormParam("dpop_jkt", fDpopJkt); err != nil {
				return err
			}
		}
	}

	// form param redirect_uri
	frRedirectURI := o.RedirectURI
	fRedirectURI := frRedirectURI
	if fRedirectURI != "" {
		if err := r.SetFormParam("redirect_uri", fRedirectURI); err != nil {
			return err
		}
	}

	if o.Request != nil {

		// query param request
		var qrRequest string

		if o.Request != nil {
			qrRequest = *o.Request
		}
		qRequest := qrRequest
		if qRequest != "" {

			if err := r.SetQueryParam("request", qRequest); err != nil {
				return err
			}
		}
	}

	// form param response_type
	frResponseType := o.ResponseType
	fResponseType := frResponseType
	if fResponseType != "" {
		if err := r.SetFormParam("response_type", fResponseType); err != nil {
			return err
		}
	}

	if o.Scope != nil {

		// form param scope
		var frScope string
		if o.Scope != nil {
			frScope = *o.Scope
		}
		fScope := frScope
		if fScope != "" {
			if err := r.SetFormParam("scope", fScope); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// form param state
		var frState string
		if o.State != nil {
			frState = *o.State
		}
		fState := frState
		if fState != "" {
			if err := r.SetFormParam("state", fState); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
