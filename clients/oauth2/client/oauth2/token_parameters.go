// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewTokenParams creates a new TokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTokenParams() *TokenParams {
	return &TokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTokenParamsWithTimeout creates a new TokenParams object
// with the ability to set a timeout on a request.
func NewTokenParamsWithTimeout(timeout time.Duration) *TokenParams {
	return &TokenParams{
		timeout: timeout,
	}
}

// NewTokenParamsWithContext creates a new TokenParams object
// with the ability to set a context for a request.
func NewTokenParamsWithContext(ctx context.Context) *TokenParams {
	return &TokenParams{
		Context: ctx,
	}
}

// NewTokenParamsWithHTTPClient creates a new TokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewTokenParamsWithHTTPClient(client *http.Client) *TokenParams {
	return &TokenParams{
		HTTPClient: client,
	}
}

/* TokenParams contains all the parameters to send to the API endpoint
   for the token operation.

   Typically these are written to a http.Request.
*/
type TokenParams struct {

	// ClientID.
	ClientID *string

	// ClientSecret.
	ClientSecret *string

	// Code.
	Code *string

	// CodeVerifier.
	CodeVerifier *string

	// GrantType.
	GrantType string

	// Password.
	Password *string

	// RedirectURI.
	RedirectURI *string

	// RefreshToken.
	RefreshToken *string

	// RequestedTokenType.
	RequestedTokenType *string

	// Scope.
	Scope *string

	// SubjectToken.
	SubjectToken *string

	// SubjectTokenType.
	SubjectTokenType *string

	// Username.
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TokenParams) WithDefaults() *TokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TokenParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the token params
func (o *TokenParams) WithTimeout(timeout time.Duration) *TokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the token params
func (o *TokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the token params
func (o *TokenParams) WithContext(ctx context.Context) *TokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the token params
func (o *TokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the token params
func (o *TokenParams) WithHTTPClient(client *http.Client) *TokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the token params
func (o *TokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the token params
func (o *TokenParams) WithClientID(clientID *string) *TokenParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the token params
func (o *TokenParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithClientSecret adds the clientSecret to the token params
func (o *TokenParams) WithClientSecret(clientSecret *string) *TokenParams {
	o.SetClientSecret(clientSecret)
	return o
}

// SetClientSecret adds the clientSecret to the token params
func (o *TokenParams) SetClientSecret(clientSecret *string) {
	o.ClientSecret = clientSecret
}

// WithCode adds the code to the token params
func (o *TokenParams) WithCode(code *string) *TokenParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the token params
func (o *TokenParams) SetCode(code *string) {
	o.Code = code
}

// WithCodeVerifier adds the codeVerifier to the token params
func (o *TokenParams) WithCodeVerifier(codeVerifier *string) *TokenParams {
	o.SetCodeVerifier(codeVerifier)
	return o
}

// SetCodeVerifier adds the codeVerifier to the token params
func (o *TokenParams) SetCodeVerifier(codeVerifier *string) {
	o.CodeVerifier = codeVerifier
}

// WithGrantType adds the grantType to the token params
func (o *TokenParams) WithGrantType(grantType string) *TokenParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the token params
func (o *TokenParams) SetGrantType(grantType string) {
	o.GrantType = grantType
}

// WithPassword adds the password to the token params
func (o *TokenParams) WithPassword(password *string) *TokenParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the token params
func (o *TokenParams) SetPassword(password *string) {
	o.Password = password
}

// WithRedirectURI adds the redirectURI to the token params
func (o *TokenParams) WithRedirectURI(redirectURI *string) *TokenParams {
	o.SetRedirectURI(redirectURI)
	return o
}

// SetRedirectURI adds the redirectUri to the token params
func (o *TokenParams) SetRedirectURI(redirectURI *string) {
	o.RedirectURI = redirectURI
}

// WithRefreshToken adds the refreshToken to the token params
func (o *TokenParams) WithRefreshToken(refreshToken *string) *TokenParams {
	o.SetRefreshToken(refreshToken)
	return o
}

// SetRefreshToken adds the refreshToken to the token params
func (o *TokenParams) SetRefreshToken(refreshToken *string) {
	o.RefreshToken = refreshToken
}

// WithRequestedTokenType adds the requestedTokenType to the token params
func (o *TokenParams) WithRequestedTokenType(requestedTokenType *string) *TokenParams {
	o.SetRequestedTokenType(requestedTokenType)
	return o
}

// SetRequestedTokenType adds the requestedTokenType to the token params
func (o *TokenParams) SetRequestedTokenType(requestedTokenType *string) {
	o.RequestedTokenType = requestedTokenType
}

// WithScope adds the scope to the token params
func (o *TokenParams) WithScope(scope *string) *TokenParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the token params
func (o *TokenParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithSubjectToken adds the subjectToken to the token params
func (o *TokenParams) WithSubjectToken(subjectToken *string) *TokenParams {
	o.SetSubjectToken(subjectToken)
	return o
}

// SetSubjectToken adds the subjectToken to the token params
func (o *TokenParams) SetSubjectToken(subjectToken *string) {
	o.SubjectToken = subjectToken
}

// WithSubjectTokenType adds the subjectTokenType to the token params
func (o *TokenParams) WithSubjectTokenType(subjectTokenType *string) *TokenParams {
	o.SetSubjectTokenType(subjectTokenType)
	return o
}

// SetSubjectTokenType adds the subjectTokenType to the token params
func (o *TokenParams) SetSubjectTokenType(subjectTokenType *string) {
	o.SubjectTokenType = subjectTokenType
}

// WithUsername adds the username to the token params
func (o *TokenParams) WithUsername(username *string) *TokenParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the token params
func (o *TokenParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *TokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// form param client_id
		var frClientID string
		if o.ClientID != nil {
			frClientID = *o.ClientID
		}
		fClientID := frClientID
		if fClientID != "" {
			if err := r.SetFormParam("client_id", fClientID); err != nil {
				return err
			}
		}
	}

	if o.ClientSecret != nil {

		// form param client_secret
		var frClientSecret string
		if o.ClientSecret != nil {
			frClientSecret = *o.ClientSecret
		}
		fClientSecret := frClientSecret
		if fClientSecret != "" {
			if err := r.SetFormParam("client_secret", fClientSecret); err != nil {
				return err
			}
		}
	}

	if o.Code != nil {

		// form param code
		var frCode string
		if o.Code != nil {
			frCode = *o.Code
		}
		fCode := frCode
		if fCode != "" {
			if err := r.SetFormParam("code", fCode); err != nil {
				return err
			}
		}
	}

	if o.CodeVerifier != nil {

		// form param code_verifier
		var frCodeVerifier string
		if o.CodeVerifier != nil {
			frCodeVerifier = *o.CodeVerifier
		}
		fCodeVerifier := frCodeVerifier
		if fCodeVerifier != "" {
			if err := r.SetFormParam("code_verifier", fCodeVerifier); err != nil {
				return err
			}
		}
	}

	// form param grant_type
	frGrantType := o.GrantType
	fGrantType := frGrantType
	if fGrantType != "" {
		if err := r.SetFormParam("grant_type", fGrantType); err != nil {
			return err
		}
	}

	if o.Password != nil {

		// form param password
		var frPassword string
		if o.Password != nil {
			frPassword = *o.Password
		}
		fPassword := frPassword
		if fPassword != "" {
			if err := r.SetFormParam("password", fPassword); err != nil {
				return err
			}
		}
	}

	if o.RedirectURI != nil {

		// form param redirect_uri
		var frRedirectURI string
		if o.RedirectURI != nil {
			frRedirectURI = *o.RedirectURI
		}
		fRedirectURI := frRedirectURI
		if fRedirectURI != "" {
			if err := r.SetFormParam("redirect_uri", fRedirectURI); err != nil {
				return err
			}
		}
	}

	if o.RefreshToken != nil {

		// form param refresh_token
		var frRefreshToken string
		if o.RefreshToken != nil {
			frRefreshToken = *o.RefreshToken
		}
		fRefreshToken := frRefreshToken
		if fRefreshToken != "" {
			if err := r.SetFormParam("refresh_token", fRefreshToken); err != nil {
				return err
			}
		}
	}

	if o.RequestedTokenType != nil {

		// form param requested_token_type
		var frRequestedTokenType string
		if o.RequestedTokenType != nil {
			frRequestedTokenType = *o.RequestedTokenType
		}
		fRequestedTokenType := frRequestedTokenType
		if fRequestedTokenType != "" {
			if err := r.SetFormParam("requested_token_type", fRequestedTokenType); err != nil {
				return err
			}
		}
	}

	if o.Scope != nil {

		// form param scope
		var frScope string
		if o.Scope != nil {
			frScope = *o.Scope
		}
		fScope := frScope
		if fScope != "" {
			if err := r.SetFormParam("scope", fScope); err != nil {
				return err
			}
		}
	}

	if o.SubjectToken != nil {

		// form param subject_token
		var frSubjectToken string
		if o.SubjectToken != nil {
			frSubjectToken = *o.SubjectToken
		}
		fSubjectToken := frSubjectToken
		if fSubjectToken != "" {
			if err := r.SetFormParam("subject_token", fSubjectToken); err != nil {
				return err
			}
		}
	}

	if o.SubjectTokenType != nil {

		// form param subject_token_type
		var frSubjectTokenType string
		if o.SubjectTokenType != nil {
			frSubjectTokenType = *o.SubjectTokenType
		}
		fSubjectTokenType := frSubjectTokenType
		if fSubjectTokenType != "" {
			if err := r.SetFormParam("subject_token_type", fSubjectTokenType); err != nil {
				return err
			}
		}
	}

	if o.Username != nil {

		// form param username
		var frUsername string
		if o.Username != nil {
			frUsername = *o.Username
		}
		fUsername := frUsername
		if fUsername != "" {
			if err := r.SetFormParam("username", fUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
