// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/oauth2/models"
)

// TokenReader is a Reader for the Token structure.
type TokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTokenBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTokenUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTokenNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewTokenPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewTokenTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /oauth2/token] token", response, response.Code())
	}
}

// NewTokenOK creates a TokenOK with default headers values
func NewTokenOK() *TokenOK {
	return &TokenOK{}
}

/*
TokenOK describes a response with status code 200, with default header values.

Token
*/
type TokenOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.TokenResponse
}

// IsSuccess returns true when this token o k response has a 2xx status code
func (o *TokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this token o k response has a 3xx status code
func (o *TokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token o k response has a 4xx status code
func (o *TokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this token o k response has a 5xx status code
func (o *TokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this token o k response a status code equal to that given
func (o *TokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the token o k response
func (o *TokenOK) Code() int {
	return 200
}

func (o *TokenOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenOK %s", 200, payload)
}

func (o *TokenOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenOK %s", 200, payload)
}

func (o *TokenOK) GetPayload() *models.TokenResponse {
	return o.Payload
}

func (o *TokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.TokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenBadRequest creates a TokenBadRequest with default headers values
func NewTokenBadRequest() *TokenBadRequest {
	return &TokenBadRequest{}
}

/*
TokenBadRequest describes a response with status code 400, with default header values.

ErrorResponse
*/
type TokenBadRequest struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this token bad request response has a 2xx status code
func (o *TokenBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token bad request response has a 3xx status code
func (o *TokenBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token bad request response has a 4xx status code
func (o *TokenBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this token bad request response has a 5xx status code
func (o *TokenBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this token bad request response a status code equal to that given
func (o *TokenBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the token bad request response
func (o *TokenBadRequest) Code() int {
	return 400
}

func (o *TokenBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenBadRequest %s", 400, payload)
}

func (o *TokenBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenBadRequest %s", 400, payload)
}

func (o *TokenBadRequest) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *TokenBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenUnauthorized creates a TokenUnauthorized with default headers values
func NewTokenUnauthorized() *TokenUnauthorized {
	return &TokenUnauthorized{}
}

/*
TokenUnauthorized describes a response with status code 401, with default header values.

ErrorResponse
*/
type TokenUnauthorized struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this token unauthorized response has a 2xx status code
func (o *TokenUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token unauthorized response has a 3xx status code
func (o *TokenUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token unauthorized response has a 4xx status code
func (o *TokenUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this token unauthorized response has a 5xx status code
func (o *TokenUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this token unauthorized response a status code equal to that given
func (o *TokenUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the token unauthorized response
func (o *TokenUnauthorized) Code() int {
	return 401
}

func (o *TokenUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenUnauthorized %s", 401, payload)
}

func (o *TokenUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenUnauthorized %s", 401, payload)
}

func (o *TokenUnauthorized) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *TokenUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenNotFound creates a TokenNotFound with default headers values
func NewTokenNotFound() *TokenNotFound {
	return &TokenNotFound{}
}

/*
TokenNotFound describes a response with status code 404, with default header values.

ErrorResponse
*/
type TokenNotFound struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this token not found response has a 2xx status code
func (o *TokenNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token not found response has a 3xx status code
func (o *TokenNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token not found response has a 4xx status code
func (o *TokenNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this token not found response has a 5xx status code
func (o *TokenNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this token not found response a status code equal to that given
func (o *TokenNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the token not found response
func (o *TokenNotFound) Code() int {
	return 404
}

func (o *TokenNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenNotFound %s", 404, payload)
}

func (o *TokenNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenNotFound %s", 404, payload)
}

func (o *TokenNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *TokenNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenPreconditionFailed creates a TokenPreconditionFailed with default headers values
func NewTokenPreconditionFailed() *TokenPreconditionFailed {
	return &TokenPreconditionFailed{}
}

/*
TokenPreconditionFailed describes a response with status code 412, with default header values.

ErrorResponse
*/
type TokenPreconditionFailed struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this token precondition failed response has a 2xx status code
func (o *TokenPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token precondition failed response has a 3xx status code
func (o *TokenPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token precondition failed response has a 4xx status code
func (o *TokenPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this token precondition failed response has a 5xx status code
func (o *TokenPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this token precondition failed response a status code equal to that given
func (o *TokenPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

// Code gets the status code for the token precondition failed response
func (o *TokenPreconditionFailed) Code() int {
	return 412
}

func (o *TokenPreconditionFailed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenPreconditionFailed %s", 412, payload)
}

func (o *TokenPreconditionFailed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenPreconditionFailed %s", 412, payload)
}

func (o *TokenPreconditionFailed) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *TokenPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenTooManyRequests creates a TokenTooManyRequests with default headers values
func NewTokenTooManyRequests() *TokenTooManyRequests {
	return &TokenTooManyRequests{}
}

/*
TokenTooManyRequests describes a response with status code 429, with default header values.

ErrorResponse
*/
type TokenTooManyRequests struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this token too many requests response has a 2xx status code
func (o *TokenTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this token too many requests response has a 3xx status code
func (o *TokenTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this token too many requests response has a 4xx status code
func (o *TokenTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this token too many requests response has a 5xx status code
func (o *TokenTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this token too many requests response a status code equal to that given
func (o *TokenTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the token too many requests response
func (o *TokenTooManyRequests) Code() int {
	return 429
}

func (o *TokenTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenTooManyRequests %s", 429, payload)
}

func (o *TokenTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /oauth2/token][%d] tokenTooManyRequests %s", 429, payload)
}

func (o *TokenTooManyRequests) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *TokenTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
