// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/oauth2/models"
)

// PushedAuthorizationRequestReader is a Reader for the PushedAuthorizationRequest structure.
type PushedAuthorizationRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PushedAuthorizationRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPushedAuthorizationRequestCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPushedAuthorizationRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPushedAuthorizationRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPushedAuthorizationRequestMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPushedAuthorizationRequestRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPushedAuthorizationRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /par] pushedAuthorizationRequest", response, response.Code())
	}
}

// NewPushedAuthorizationRequestCreated creates a PushedAuthorizationRequestCreated with default headers values
func NewPushedAuthorizationRequestCreated() *PushedAuthorizationRequestCreated {
	return &PushedAuthorizationRequestCreated{}
}

/*
PushedAuthorizationRequestCreated describes a response with status code 201, with default header values.

Pushed Authorization Response
*/
type PushedAuthorizationRequestCreated struct {
	Payload *models.PARResponse
}

// IsSuccess returns true when this pushed authorization request created response has a 2xx status code
func (o *PushedAuthorizationRequestCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pushed authorization request created response has a 3xx status code
func (o *PushedAuthorizationRequestCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pushed authorization request created response has a 4xx status code
func (o *PushedAuthorizationRequestCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this pushed authorization request created response has a 5xx status code
func (o *PushedAuthorizationRequestCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this pushed authorization request created response a status code equal to that given
func (o *PushedAuthorizationRequestCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the pushed authorization request created response
func (o *PushedAuthorizationRequestCreated) Code() int {
	return 201
}

func (o *PushedAuthorizationRequestCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestCreated %s", 201, payload)
}

func (o *PushedAuthorizationRequestCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestCreated %s", 201, payload)
}

func (o *PushedAuthorizationRequestCreated) GetPayload() *models.PARResponse {
	return o.Payload
}

func (o *PushedAuthorizationRequestCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PARResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushedAuthorizationRequestBadRequest creates a PushedAuthorizationRequestBadRequest with default headers values
func NewPushedAuthorizationRequestBadRequest() *PushedAuthorizationRequestBadRequest {
	return &PushedAuthorizationRequestBadRequest{}
}

/*
PushedAuthorizationRequestBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PushedAuthorizationRequestBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this pushed authorization request bad request response has a 2xx status code
func (o *PushedAuthorizationRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pushed authorization request bad request response has a 3xx status code
func (o *PushedAuthorizationRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pushed authorization request bad request response has a 4xx status code
func (o *PushedAuthorizationRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pushed authorization request bad request response has a 5xx status code
func (o *PushedAuthorizationRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pushed authorization request bad request response a status code equal to that given
func (o *PushedAuthorizationRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the pushed authorization request bad request response
func (o *PushedAuthorizationRequestBadRequest) Code() int {
	return 400
}

func (o *PushedAuthorizationRequestBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestBadRequest %s", 400, payload)
}

func (o *PushedAuthorizationRequestBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestBadRequest %s", 400, payload)
}

func (o *PushedAuthorizationRequestBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *PushedAuthorizationRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushedAuthorizationRequestUnauthorized creates a PushedAuthorizationRequestUnauthorized with default headers values
func NewPushedAuthorizationRequestUnauthorized() *PushedAuthorizationRequestUnauthorized {
	return &PushedAuthorizationRequestUnauthorized{}
}

/*
PushedAuthorizationRequestUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PushedAuthorizationRequestUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this pushed authorization request unauthorized response has a 2xx status code
func (o *PushedAuthorizationRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pushed authorization request unauthorized response has a 3xx status code
func (o *PushedAuthorizationRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pushed authorization request unauthorized response has a 4xx status code
func (o *PushedAuthorizationRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pushed authorization request unauthorized response has a 5xx status code
func (o *PushedAuthorizationRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pushed authorization request unauthorized response a status code equal to that given
func (o *PushedAuthorizationRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the pushed authorization request unauthorized response
func (o *PushedAuthorizationRequestUnauthorized) Code() int {
	return 401
}

func (o *PushedAuthorizationRequestUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestUnauthorized %s", 401, payload)
}

func (o *PushedAuthorizationRequestUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestUnauthorized %s", 401, payload)
}

func (o *PushedAuthorizationRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PushedAuthorizationRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushedAuthorizationRequestMethodNotAllowed creates a PushedAuthorizationRequestMethodNotAllowed with default headers values
func NewPushedAuthorizationRequestMethodNotAllowed() *PushedAuthorizationRequestMethodNotAllowed {
	return &PushedAuthorizationRequestMethodNotAllowed{}
}

/*
PushedAuthorizationRequestMethodNotAllowed describes a response with status code 405, with default header values.

Method not allowed
*/
type PushedAuthorizationRequestMethodNotAllowed struct {
	Payload *models.Error
}

// IsSuccess returns true when this pushed authorization request method not allowed response has a 2xx status code
func (o *PushedAuthorizationRequestMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pushed authorization request method not allowed response has a 3xx status code
func (o *PushedAuthorizationRequestMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pushed authorization request method not allowed response has a 4xx status code
func (o *PushedAuthorizationRequestMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this pushed authorization request method not allowed response has a 5xx status code
func (o *PushedAuthorizationRequestMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this pushed authorization request method not allowed response a status code equal to that given
func (o *PushedAuthorizationRequestMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the pushed authorization request method not allowed response
func (o *PushedAuthorizationRequestMethodNotAllowed) Code() int {
	return 405
}

func (o *PushedAuthorizationRequestMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestMethodNotAllowed %s", 405, payload)
}

func (o *PushedAuthorizationRequestMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestMethodNotAllowed %s", 405, payload)
}

func (o *PushedAuthorizationRequestMethodNotAllowed) GetPayload() *models.Error {
	return o.Payload
}

func (o *PushedAuthorizationRequestMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushedAuthorizationRequestRequestEntityTooLarge creates a PushedAuthorizationRequestRequestEntityTooLarge with default headers values
func NewPushedAuthorizationRequestRequestEntityTooLarge() *PushedAuthorizationRequestRequestEntityTooLarge {
	return &PushedAuthorizationRequestRequestEntityTooLarge{}
}

/*
PushedAuthorizationRequestRequestEntityTooLarge describes a response with status code 413, with default header values.

Payload too large
*/
type PushedAuthorizationRequestRequestEntityTooLarge struct {
	Payload *models.Error
}

// IsSuccess returns true when this pushed authorization request request entity too large response has a 2xx status code
func (o *PushedAuthorizationRequestRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pushed authorization request request entity too large response has a 3xx status code
func (o *PushedAuthorizationRequestRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pushed authorization request request entity too large response has a 4xx status code
func (o *PushedAuthorizationRequestRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this pushed authorization request request entity too large response has a 5xx status code
func (o *PushedAuthorizationRequestRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this pushed authorization request request entity too large response a status code equal to that given
func (o *PushedAuthorizationRequestRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

// Code gets the status code for the pushed authorization request request entity too large response
func (o *PushedAuthorizationRequestRequestEntityTooLarge) Code() int {
	return 413
}

func (o *PushedAuthorizationRequestRequestEntityTooLarge) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestRequestEntityTooLarge %s", 413, payload)
}

func (o *PushedAuthorizationRequestRequestEntityTooLarge) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestRequestEntityTooLarge %s", 413, payload)
}

func (o *PushedAuthorizationRequestRequestEntityTooLarge) GetPayload() *models.Error {
	return o.Payload
}

func (o *PushedAuthorizationRequestRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushedAuthorizationRequestTooManyRequests creates a PushedAuthorizationRequestTooManyRequests with default headers values
func NewPushedAuthorizationRequestTooManyRequests() *PushedAuthorizationRequestTooManyRequests {
	return &PushedAuthorizationRequestTooManyRequests{}
}

/*
PushedAuthorizationRequestTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type PushedAuthorizationRequestTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this pushed authorization request too many requests response has a 2xx status code
func (o *PushedAuthorizationRequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pushed authorization request too many requests response has a 3xx status code
func (o *PushedAuthorizationRequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pushed authorization request too many requests response has a 4xx status code
func (o *PushedAuthorizationRequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this pushed authorization request too many requests response has a 5xx status code
func (o *PushedAuthorizationRequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this pushed authorization request too many requests response a status code equal to that given
func (o *PushedAuthorizationRequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the pushed authorization request too many requests response
func (o *PushedAuthorizationRequestTooManyRequests) Code() int {
	return 429
}

func (o *PushedAuthorizationRequestTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestTooManyRequests %s", 429, payload)
}

func (o *PushedAuthorizationRequestTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /par][%d] pushedAuthorizationRequestTooManyRequests %s", 429, payload)
}

func (o *PushedAuthorizationRequestTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *PushedAuthorizationRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
