// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackchannelAuthenticationError CIBA error response
// https://openid.net/specs/openidclientinitiatedbackchannelauthenticationcore1_0.html#rfc.section.13
//
// swagger:model BackchannelAuthenticationError
type BackchannelAuthenticationError struct {

	// REQUIRED. A single ASCII error code from one present in the list below.
	Error string `json:"error,omitempty" yaml:"error,omitempty"`

	// OPTIONAL. Humanreadable ASCII [USASCII] text providing additional information, used to assist the client developer in understanding
	// the error that occurred. Values for the "error_description" parameter MUST NOT include characters outside the set %x2021 / %x235B / %x5D7E.
	ErrorDescription string `json:"error_description,omitempty" yaml:"error_description,omitempty"`

	// OPTIONAL. A URI identifying a humanreadable web page with information about the error to provide the client developer with additional information.
	// Values for the "error_uri" parameter MUST conform to the URIreference syntax and thus MUST NOT include characters outside the set %x21 / %x235B / %x5D7E.
	ErrorURI string `json:"error_uri,omitempty" yaml:"error_uri,omitempty"`
}

// Validate validates this backchannel authentication error
func (m *BackchannelAuthenticationError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this backchannel authentication error based on context it is used
func (m *BackchannelAuthenticationError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BackchannelAuthenticationError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackchannelAuthenticationError) UnmarshalBinary(b []byte) error {
	var res BackchannelAuthenticationError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
