// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/licensingroot/models"
)

// AdminGetTenantLicenseReader is a Reader for the AdminGetTenantLicense structure.
type AdminGetTenantLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminGetTenantLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAdminGetTenantLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAdminGetTenantLicenseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAdminGetTenantLicenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAdminGetTenantLicenseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAdminGetTenantLicenseTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /admin/tenants/{tenantID}/license] adminGetTenantLicense", response, response.Code())
	}
}

// NewAdminGetTenantLicenseOK creates a AdminGetTenantLicenseOK with default headers values
func NewAdminGetTenantLicenseOK() *AdminGetTenantLicenseOK {
	return &AdminGetTenantLicenseOK{}
}

/*
AdminGetTenantLicenseOK describes a response with status code 200, with default header values.

License
*/
type AdminGetTenantLicenseOK struct {
	Payload *models.License
}

// IsSuccess returns true when this admin get tenant license o k response has a 2xx status code
func (o *AdminGetTenantLicenseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this admin get tenant license o k response has a 3xx status code
func (o *AdminGetTenantLicenseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin get tenant license o k response has a 4xx status code
func (o *AdminGetTenantLicenseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this admin get tenant license o k response has a 5xx status code
func (o *AdminGetTenantLicenseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this admin get tenant license o k response a status code equal to that given
func (o *AdminGetTenantLicenseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the admin get tenant license o k response
func (o *AdminGetTenantLicenseOK) Code() int {
	return 200
}

func (o *AdminGetTenantLicenseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseOK %s", 200, payload)
}

func (o *AdminGetTenantLicenseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseOK %s", 200, payload)
}

func (o *AdminGetTenantLicenseOK) GetPayload() *models.License {
	return o.Payload
}

func (o *AdminGetTenantLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.License)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminGetTenantLicenseUnauthorized creates a AdminGetTenantLicenseUnauthorized with default headers values
func NewAdminGetTenantLicenseUnauthorized() *AdminGetTenantLicenseUnauthorized {
	return &AdminGetTenantLicenseUnauthorized{}
}

/*
AdminGetTenantLicenseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AdminGetTenantLicenseUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin get tenant license unauthorized response has a 2xx status code
func (o *AdminGetTenantLicenseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin get tenant license unauthorized response has a 3xx status code
func (o *AdminGetTenantLicenseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin get tenant license unauthorized response has a 4xx status code
func (o *AdminGetTenantLicenseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin get tenant license unauthorized response has a 5xx status code
func (o *AdminGetTenantLicenseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this admin get tenant license unauthorized response a status code equal to that given
func (o *AdminGetTenantLicenseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the admin get tenant license unauthorized response
func (o *AdminGetTenantLicenseUnauthorized) Code() int {
	return 401
}

func (o *AdminGetTenantLicenseUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseUnauthorized %s", 401, payload)
}

func (o *AdminGetTenantLicenseUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseUnauthorized %s", 401, payload)
}

func (o *AdminGetTenantLicenseUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminGetTenantLicenseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminGetTenantLicenseForbidden creates a AdminGetTenantLicenseForbidden with default headers values
func NewAdminGetTenantLicenseForbidden() *AdminGetTenantLicenseForbidden {
	return &AdminGetTenantLicenseForbidden{}
}

/*
AdminGetTenantLicenseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AdminGetTenantLicenseForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin get tenant license forbidden response has a 2xx status code
func (o *AdminGetTenantLicenseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin get tenant license forbidden response has a 3xx status code
func (o *AdminGetTenantLicenseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin get tenant license forbidden response has a 4xx status code
func (o *AdminGetTenantLicenseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin get tenant license forbidden response has a 5xx status code
func (o *AdminGetTenantLicenseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this admin get tenant license forbidden response a status code equal to that given
func (o *AdminGetTenantLicenseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the admin get tenant license forbidden response
func (o *AdminGetTenantLicenseForbidden) Code() int {
	return 403
}

func (o *AdminGetTenantLicenseForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseForbidden %s", 403, payload)
}

func (o *AdminGetTenantLicenseForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseForbidden %s", 403, payload)
}

func (o *AdminGetTenantLicenseForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminGetTenantLicenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminGetTenantLicenseNotFound creates a AdminGetTenantLicenseNotFound with default headers values
func NewAdminGetTenantLicenseNotFound() *AdminGetTenantLicenseNotFound {
	return &AdminGetTenantLicenseNotFound{}
}

/*
AdminGetTenantLicenseNotFound describes a response with status code 404, with default header values.

Not found
*/
type AdminGetTenantLicenseNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin get tenant license not found response has a 2xx status code
func (o *AdminGetTenantLicenseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin get tenant license not found response has a 3xx status code
func (o *AdminGetTenantLicenseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin get tenant license not found response has a 4xx status code
func (o *AdminGetTenantLicenseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin get tenant license not found response has a 5xx status code
func (o *AdminGetTenantLicenseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this admin get tenant license not found response a status code equal to that given
func (o *AdminGetTenantLicenseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the admin get tenant license not found response
func (o *AdminGetTenantLicenseNotFound) Code() int {
	return 404
}

func (o *AdminGetTenantLicenseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseNotFound %s", 404, payload)
}

func (o *AdminGetTenantLicenseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseNotFound %s", 404, payload)
}

func (o *AdminGetTenantLicenseNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminGetTenantLicenseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminGetTenantLicenseTooManyRequests creates a AdminGetTenantLicenseTooManyRequests with default headers values
func NewAdminGetTenantLicenseTooManyRequests() *AdminGetTenantLicenseTooManyRequests {
	return &AdminGetTenantLicenseTooManyRequests{}
}

/*
AdminGetTenantLicenseTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type AdminGetTenantLicenseTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this admin get tenant license too many requests response has a 2xx status code
func (o *AdminGetTenantLicenseTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this admin get tenant license too many requests response has a 3xx status code
func (o *AdminGetTenantLicenseTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this admin get tenant license too many requests response has a 4xx status code
func (o *AdminGetTenantLicenseTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this admin get tenant license too many requests response has a 5xx status code
func (o *AdminGetTenantLicenseTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this admin get tenant license too many requests response a status code equal to that given
func (o *AdminGetTenantLicenseTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the admin get tenant license too many requests response
func (o *AdminGetTenantLicenseTooManyRequests) Code() int {
	return 429
}

func (o *AdminGetTenantLicenseTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseTooManyRequests %s", 429, payload)
}

func (o *AdminGetTenantLicenseTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /admin/tenants/{tenantID}/license][%d] adminGetTenantLicenseTooManyRequests %s", 429, payload)
}

func (o *AdminGetTenantLicenseTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *AdminGetTenantLicenseTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
