// Code generated by go-swagger; DO NOT EDIT.

package licenses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/licensingroot/models"
)

// NewAdminSetTenantLicenseParams creates a new AdminSetTenantLicenseParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAdminSetTenantLicenseParams() *AdminSetTenantLicenseParams {
	return &AdminSetTenantLicenseParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAdminSetTenantLicenseParamsWithTimeout creates a new AdminSetTenantLicenseParams object
// with the ability to set a timeout on a request.
func NewAdminSetTenantLicenseParamsWithTimeout(timeout time.Duration) *AdminSetTenantLicenseParams {
	return &AdminSetTenantLicenseParams{
		timeout: timeout,
	}
}

// NewAdminSetTenantLicenseParamsWithContext creates a new AdminSetTenantLicenseParams object
// with the ability to set a context for a request.
func NewAdminSetTenantLicenseParamsWithContext(ctx context.Context) *AdminSetTenantLicenseParams {
	return &AdminSetTenantLicenseParams{
		Context: ctx,
	}
}

// NewAdminSetTenantLicenseParamsWithHTTPClient creates a new AdminSetTenantLicenseParams object
// with the ability to set a custom HTTPClient for a request.
func NewAdminSetTenantLicenseParamsWithHTTPClient(client *http.Client) *AdminSetTenantLicenseParams {
	return &AdminSetTenantLicenseParams{
		HTTPClient: client,
	}
}

/*
AdminSetTenantLicenseParams contains all the parameters to send to the API endpoint

	for the admin set tenant license operation.

	Typically these are written to a http.Request.
*/
type AdminSetTenantLicenseParams struct {

	// License.
	License *models.License

	/* TenantID.

	   Tenant id

	   Default: "default"
	*/
	TenantID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the admin set tenant license params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AdminSetTenantLicenseParams) WithDefaults() *AdminSetTenantLicenseParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the admin set tenant license params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AdminSetTenantLicenseParams) SetDefaults() {
	var (
		tenantIDDefault = string("default")
	)

	val := AdminSetTenantLicenseParams{
		TenantID: tenantIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) WithTimeout(timeout time.Duration) *AdminSetTenantLicenseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) WithContext(ctx context.Context) *AdminSetTenantLicenseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) WithHTTPClient(client *http.Client) *AdminSetTenantLicenseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLicense adds the license to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) WithLicense(license *models.License) *AdminSetTenantLicenseParams {
	o.SetLicense(license)
	return o
}

// SetLicense adds the license to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) SetLicense(license *models.License) {
	o.License = license
}

// WithTenantID adds the tenantID to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) WithTenantID(tenantID string) *AdminSetTenantLicenseParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the admin set tenant license params
func (o *AdminSetTenantLicenseParams) SetTenantID(tenantID string) {
	o.TenantID = tenantID
}

// WriteToRequest writes these params to a swagger request
func (o *AdminSetTenantLicenseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.License != nil {
		if err := r.SetBodyParam(o.License); err != nil {
			return err
		}
	}

	// path param tenantID
	if err := r.SetPathParam("tenantID", o.TenantID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
