// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FDXDynamicClientRegistrationResponse f d x dynamic client registration response
//
// swagger:model FDXDynamicClientRegistrationResponse
type FDXDynamicClientRegistrationResponse struct {

	// String represented type of a client application
	//
	// Client applications can be either of a `web` or `native` types.
	//
	// Web applications include clients like server web applications or service apps.
	//
	// Native applications include single-page applications (SPAs) and mobile or desktop
	// applications.
	//
	// Depending on the type of your application remember to choose appropriate security measures.
	// Example: web
	ApplicationType string `json:"application_type,omitempty"`

	// An array of dynamically calculated application types that can be used for filtering
	// Example: ["single_page","server_web","mobile_desktop","service","legacy","dcr"]
	// Read Only: true
	ApplicationTypes []string `json:"application_types"`

	// Identity of the intended recipients (the audience)
	//
	// Typically, the audience may be a single resources server or a list of resource servers.
	// It is considered a good practice to limit the audience of the token for security purposes.
	Audience []string `json:"audience"`

	// Algorithm used for encrypting authorization responses.
	// If both signing and encryption are requested, the response will be signed then encrypted,
	// with the result being a Nested JWT, as defined in JWT [RFC7519].
	// The default, if omitted, is that no encryption is performed.
	// Example: RSA-OAEP-256
	// Enum: [RSA-OAEP RSA-OAEP-256]
	AuthorizationEncryptedResponseAlg string `json:"authorization_encrypted_response_alg,omitempty"`

	// Algorithm used for encrypting authorization responses.
	// If authorization_encrypted_response_alg is specified, the default for this value is A128CBC-HS256.
	// When authorization_encrypted_response_enc is included, authorization_encrypted_response_alg
	// MUST also be provided.
	// Example: A128CBC-HS256
	// Enum: [A256GCM A128CBC-HS256]
	AuthorizationEncryptedResponseEnc string `json:"authorization_encrypted_response_enc,omitempty"`

	// Algorithm used for signing authorization responses.
	// If this is specified, the response will be signed using JWS and the configured algorithm.
	// The algorithm none is not allowed.
	// Example: RS256
	AuthorizationSignedResponseAlg string `json:"authorization_signed_response_alg,omitempty"`

	// OPTIONAL. The JWS algorithm alg value that the Client will use for signing authentication requests.
	// When omitted, the Client will not send signed authentication requests.
	BackchannelAuthenticationRequestSigningAlg string `json:"backchannel_authentication_request_signing_alg,omitempty"`

	// REQUIRED if the token delivery mode is set to ping or push.
	// This is the endpoint to which the OP will post a notification after a successful or failed end-user authentication.
	// It MUST be an HTTPS URL.
	BackchannelClientNotificationEndpoint string `json:"backchannel_client_notification_endpoint,omitempty"`

	// REQUIRED. One of the following values: poll, ping, or push.
	BackchannelTokenDeliveryMode string `json:"backchannel_token_delivery_mode,omitempty"`

	// OPTIONAL. Boolean value specifying whether the Client supports the user_code parameter.
	// If omitted, the default value is false.
	// This parameter only applies when OP parameter backchannel_user_code_parameter_supported is true.
	BackchannelUserCodeParameter bool `json:"backchannel_user_code_parameter,omitempty"`

	// OAuth client application identifier
	//
	// If not provided, a random client ID is generated.
	ClientID string `json:"client_id,omitempty"`

	// Time at which the client identifier was issued.
	//
	// The time is represented as the number of seconds from
	// 1970-01-01T00:00:00Z as measured in UTC until the date/time of issuance.
	ClientIDIssuedAt int64 `json:"client_id_issued_at,omitempty"`

	// Human readable name of a client application
	// Example: My app
	ClientName string `json:"client_name,omitempty"`

	// The `client_secret_expires_at` holds an integer that defines the time at which the client
	// secret expires
	//
	// If the client secret does not expire, the value should be set to `0`.
	ClientSecretExpiresAt int64 `json:"client_secret_expires_at,omitempty"`

	// URI of a client application
	ClientURI string `json:"client_uri,omitempty"`

	// Date when the client was created
	// Example: 2022-04-07T19:17:31.323187Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Description of a client application
	Description string `json:"description,omitempty"`

	// dynamically registered
	DynamicallyRegistered bool `json:"dynamically_registered,omitempty"`

	// An array of allowed OAuth client grant types
	//
	// The `grantTypes` array stores OAuth flows that are allowed for a given client application.
	//
	// To know more about OAuth grant flows, see the
	// [ACP grant flows documentation](https://docs.authorization.cloudentity.com/features/oauth/grant_flows/).
	// Example: ["password","refresh_token","client_credentials","implicit","authorization_code"]
	GrantTypes []string `json:"grant_types"`

	// JWE alg algorithm for encrypting the ID Token issued to this Client
	// Enum: [RSA-OAEP RSA-OAEP-256]
	IDTokenEncryptedResponseAlg string `json:"id_token_encrypted_response_alg,omitempty"`

	// JWE enc algorithm for encrypting the ID Token issued to this Client
	// Enum: [A256GCM A128CBC-HS256]
	IDTokenEncryptedResponseEnc string `json:"id_token_encrypted_response_enc,omitempty"`

	// Algorithm for signing ID tokens issued for a client application
	//
	// The default value depends on authorization server configuration.
	// Example: ES256
	// Enum: [RS256 ES256 PS256]
	IDTokenSignedResponseAlg string `json:"id_token_signed_response_alg,omitempty"`

	// Introspection endpoint authentication method configured for a client application
	// If empty, the token_endpoint_auth_method will be used
	//
	// ACP supports the following client authentication methods:
	// client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt,
	// self_signed_tls_client_auth, tls_client_auth, none.
	//
	// To learn more, see the [ACP client authentication documentation](https://docs.authorization.cloudentity.com/features/oauth/client_auth/)
	// Example: client_secret_basic
	// Enum: [client_secret_basic client_secret_post client_secret_jwt private_key_jwt self_signed_tls_client_auth tls_client_auth none]
	IntrospectionEndpointAuthMethod string `json:"introspection_endpoint_auth_method,omitempty"`

	// jwks
	Jwks *ClientJWKs `json:"jwks,omitempty"`

	// URL of JSON Web Key Set containing the public keys used by a client application to authenticate itself
	// with ACP
	JwksURI string `json:"jwks_uri,omitempty"`

	// Logo URI
	LogoURI string `json:"logo_uri,omitempty"`

	// External organisation ID
	//
	// This field is used as an aud for message signing
	// Example: 5647fe90-f6bc-11eb-9a03-0242ac130003
	OrganisationID string `json:"organisation_id,omitempty"`

	// Policy URL to read about how the profile data is used
	PolicyURI string `json:"policy_uri,omitempty"`

	// privacy
	Privacy *ClientPrivacy `json:"privacy,omitempty"`

	// redirect uris
	RedirectUris RedirectURIs `json:"redirect_uris,omitempty"`

	// Optional JWE alg algorithm the client is declaring that it may use for encrypting Request Objects
	// Example: RSA-OAEP
	// Enum: [RSA-OAEP RSA-OAEP-256]
	RequestObjectEncryptionAlg string `json:"request_object_encryption_alg,omitempty"`

	// Optional JWE enc algorithm the client is declaring that it may use for encrypting Request Objects
	// When request_object_encryption_enc is included, request_object_encryption_alg MUST also be provided.
	// Example: A256GCM
	// Enum: [A256GCM A128CBC-HS256]
	RequestObjectEncryptionEnc string `json:"request_object_encryption_enc,omitempty"`

	// Request object signing algorithm for the token endpoint
	//
	// ACP supports signing tokens using the RS256, ES256, and PS256 algorithms. If you do not want
	// to use a signing algorithm, the value of the parameter should be set to `none`.
	// Example: none
	// Enum: [any none RS256 ES256 PS256]
	RequestObjectSigningAlg string `json:"request_object_signing_alg,omitempty"`

	// Array of absolute URIs that points to the Request Object that holds authorization request parameters.
	RequestUris []string `json:"request_uris"`

	// Boolean parameter indicating whether the only means of initiating an authorization request the client is allowed to use is PAR.
	RequirePushedAuthorizationRequests bool `json:"require_pushed_authorization_requests,omitempty"`

	// response types
	ResponseTypes ResponseTypes `json:"response_types,omitempty"`

	// Revocation endpoint authentication method configured for a client application
	// If empty, the token_endpoint_auth_method will be used
	//
	// ACP supports the following client authentication methods:
	// client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt,
	// self_signed_tls_client_auth, tls_client_auth, none.
	//
	// To learn more, see the [ACP client authentication documentation](https://docs.authorization.cloudentity.com/features/oauth/client_auth/)
	// Example: client_secret_basic
	// Enum: [client_secret_basic client_secret_post client_secret_jwt private_key_jwt self_signed_tls_client_auth tls_client_auth none]
	RevocationEndpointAuthMethod string `json:"revocation_endpoint_auth_method,omitempty"`

	// Space separated scopes for compatibility with OAuth specification
	// Example: email offline_access openid
	Scope string `json:"scope,omitempty"`

	// An array of string represented scopes assigned to a client application
	// Example: ["email","offline_access","openid"]
	Scopes []string `json:"scopes"`

	// URL using the HTTPS scheme to be used in calculating Pseudonymous Identifiers by the OpenID Provider. The URL references a
	// file with a single JSON array of redirect_uri values.
	// Example: https://api.jsonbin.io/b/5db6ef08688fed59d2841f1e
	SectorIdentifierURI string `json:"sector_identifier_uri,omitempty"`

	// A unique identifier string (e.g., a Universally Unique Identifier
	// (UUID)) assigned by the client developer or software publisher
	// The "software_id" SHOULD remain the same across
	// multiple updates or versions of the same piece of software.  The
	// value of this field is not intended to be human readable and is
	// usually opaque to the client and authorization server.
	SoftwareID string `json:"software_id,omitempty"`

	// software statement
	SoftwareStatement string `json:"software_statement,omitempty"`

	// A version identifier string for the client software identified by
	// "software_id".  The value of the "software_version" SHOULD change
	// on any update to the client software identified by the same
	// "software_id".
	SoftwareVersion string `json:"software_version,omitempty"`

	// Subject identifier type
	//
	// Stores information if the subject identifier is of the `public` or the `pairwise` type.
	//
	// Subject identifiers are locally unique and never reassigned identifiers within the Issuer
	// for the end-user and are inteded to be consumed by client applications. There are two types
	// of subject identifiers: `public` and `pairwise`.
	//
	// For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.
	//
	// For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
	// Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
	// activity without their permission.
	// Example: public
	// Enum: [public pairwise]
	SubjectType string `json:"subject_type,omitempty"`

	// A string containing the value of an expected dNSName SAN entry in the certificate.
	TLSClientAuthSanDNS string `json:"tls_client_auth_san_dns,omitempty"`

	// A string containing the value of an expected rfc822Name SAN entry in the certificate.
	TLSClientAuthSanEmail string `json:"tls_client_auth_san_email,omitempty"`

	// A string representation of an IP address in either dotted decimal notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined in [RFC5952]) that is expected to be present as an iPAddress SAN entry in the certificate.
	TLSClientAuthSanIP string `json:"tls_client_auth_san_ip,omitempty"`

	// A string containing the value of an expected uniformResourceIdentifier SAN entry in the certificate.
	TLSClientAuthSanURI string `json:"tls_client_auth_san_uri,omitempty"`

	// An [RFC4514] string representation of the expected subject distinguished name of the certificate.
	TLSClientAuthSubjectDn string `json:"tls_client_auth_subject_dn,omitempty"`

	// Boolean value indicating server support for mutual TLS client certificate-bound access tokens. If omitted, the default value is "false".
	TLSClientCertificateBoundAccessTokens bool `json:"tls_client_certificate_bound_access_tokens,omitempty"`

	// Token endpoint authentication method configured for a client application
	//
	// ACP supports the following client authentication methods:
	// client_secret_basic, client_secret_post, client_secret_jwt, private_key_jwt,
	// self_signed_tls_client_auth, tls_client_auth, none.
	//
	// To learn more, see the [ACP client authentication documentation](https://docs.authorization.cloudentity.com/features/oauth/client_auth/)
	// Example: client_secret_basic
	// Enum: [client_secret_basic client_secret_post client_secret_jwt private_key_jwt self_signed_tls_client_auth tls_client_auth none]
	TokenEndpointAuthMethod string `json:"token_endpoint_auth_method,omitempty"`

	// Signing algorithm for the token endpoint
	//
	// ACP supports signing tokens using the RS256, ES256, PS256, and HS256 algorithms.
	//
	// If your token endpoint authentication is set to the `private_key_jwt` method, the
	// `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.
	//
	// If your token endpoint authentication is set to the `client_secret_jwt` method,
	// the `token_endpoint_auth_signing_alg` parameter must be HS256.
	// Example: none
	// Enum: [none RS256 ES256 PS256 HS256]
	TokenEndpointAuthSigningAlg string `json:"token_endpoint_auth_signing_alg,omitempty"`

	// token exchange
	TokenExchange *ClientTokenExchangeConfiguration `json:"token_exchange,omitempty"`

	// Terms of Service URL
	TosURI string `json:"tos_uri,omitempty"`

	// Date when the client was updated
	// Example: 2022-05-08T01:11:51.1262916Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// JWS alg algorithm REQUIRED for signing UserInfo Responses.
	//
	// If specified, the response is JWT
	// [JWT] serialized, and signed using JWS.
	//
	// If omitted, the default behavior is for the UserInfo Response to return the Claims
	// as an UTF-8 encoded JSON object using the application/json content-type.
	// Example: none
	// Enum: [none RS256 ES256]
	UserinfoSignedResponseAlg string `json:"userinfo_signed_response_alg,omitempty"`
}

// Validate validates this f d x dynamic client registration response
func (m *FDXDynamicClientRegistrationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationEncryptedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationEncryptedResponseEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenEncryptedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenEncryptedResponseEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenSignedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntrospectionEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectUris(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectEncryptionAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectEncryptionEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectSigningAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevocationEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpointAuthSigningAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserinfoSignedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fDXDynamicClientRegistrationResponseApplicationTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["single_page","server_web","mobile_desktop","service","legacy","dcr"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseApplicationTypesItemsEnum = append(fDXDynamicClientRegistrationResponseApplicationTypesItemsEnum, v)
	}
}

func (m *FDXDynamicClientRegistrationResponse) validateApplicationTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseApplicationTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateApplicationTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationTypes); i++ {

		// value enum
		if err := m.validateApplicationTypesItemsEnum("application_types"+"."+strconv.Itoa(i), "body", m.ApplicationTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeAuthorizationEncryptedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeAuthorizationEncryptedResponseAlgPropEnum = append(fDXDynamicClientRegistrationResponseTypeAuthorizationEncryptedResponseAlgPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseAuthorizationEncryptedResponseAlgRSADashOAEP captures enum value "RSA-OAEP"
	FDXDynamicClientRegistrationResponseAuthorizationEncryptedResponseAlgRSADashOAEP string = "RSA-OAEP"

	// FDXDynamicClientRegistrationResponseAuthorizationEncryptedResponseAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	FDXDynamicClientRegistrationResponseAuthorizationEncryptedResponseAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateAuthorizationEncryptedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeAuthorizationEncryptedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateAuthorizationEncryptedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationEncryptedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationEncryptedResponseAlgEnum("authorization_encrypted_response_alg", "body", m.AuthorizationEncryptedResponseAlg); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeAuthorizationEncryptedResponseEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeAuthorizationEncryptedResponseEncPropEnum = append(fDXDynamicClientRegistrationResponseTypeAuthorizationEncryptedResponseEncPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseAuthorizationEncryptedResponseEncA256GCM captures enum value "A256GCM"
	FDXDynamicClientRegistrationResponseAuthorizationEncryptedResponseEncA256GCM string = "A256GCM"

	// FDXDynamicClientRegistrationResponseAuthorizationEncryptedResponseEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	FDXDynamicClientRegistrationResponseAuthorizationEncryptedResponseEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateAuthorizationEncryptedResponseEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeAuthorizationEncryptedResponseEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateAuthorizationEncryptedResponseEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationEncryptedResponseEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationEncryptedResponseEncEnum("authorization_encrypted_response_enc", "body", m.AuthorizationEncryptedResponseEnc); err != nil {
		return err
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseGrantTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authorization_code","implicit","client_credentials","refresh_token","password","urn:ietf:params:oauth:grant-type:jwt-bearer","urn:openid:params:grant-type:ciba","urn:ietf:params:oauth:grant-type:token-exchange","urn:ietf:params:oauth:grant-type:device_code"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseGrantTypesItemsEnum = append(fDXDynamicClientRegistrationResponseGrantTypesItemsEnum, v)
	}
}

func (m *FDXDynamicClientRegistrationResponse) validateGrantTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseGrantTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateGrantTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.GrantTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.GrantTypes); i++ {

		// value enum
		if err := m.validateGrantTypesItemsEnum("grant_types"+"."+strconv.Itoa(i), "body", m.GrantTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeIDTokenEncryptedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeIDTokenEncryptedResponseAlgPropEnum = append(fDXDynamicClientRegistrationResponseTypeIDTokenEncryptedResponseAlgPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseIDTokenEncryptedResponseAlgRSADashOAEP captures enum value "RSA-OAEP"
	FDXDynamicClientRegistrationResponseIDTokenEncryptedResponseAlgRSADashOAEP string = "RSA-OAEP"

	// FDXDynamicClientRegistrationResponseIDTokenEncryptedResponseAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	FDXDynamicClientRegistrationResponseIDTokenEncryptedResponseAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateIDTokenEncryptedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeIDTokenEncryptedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateIDTokenEncryptedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenEncryptedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenEncryptedResponseAlgEnum("id_token_encrypted_response_alg", "body", m.IDTokenEncryptedResponseAlg); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeIDTokenEncryptedResponseEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeIDTokenEncryptedResponseEncPropEnum = append(fDXDynamicClientRegistrationResponseTypeIDTokenEncryptedResponseEncPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseIDTokenEncryptedResponseEncA256GCM captures enum value "A256GCM"
	FDXDynamicClientRegistrationResponseIDTokenEncryptedResponseEncA256GCM string = "A256GCM"

	// FDXDynamicClientRegistrationResponseIDTokenEncryptedResponseEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	FDXDynamicClientRegistrationResponseIDTokenEncryptedResponseEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateIDTokenEncryptedResponseEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeIDTokenEncryptedResponseEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateIDTokenEncryptedResponseEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenEncryptedResponseEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenEncryptedResponseEncEnum("id_token_encrypted_response_enc", "body", m.IDTokenEncryptedResponseEnc); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeIDTokenSignedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RS256","ES256","PS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeIDTokenSignedResponseAlgPropEnum = append(fDXDynamicClientRegistrationResponseTypeIDTokenSignedResponseAlgPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseIDTokenSignedResponseAlgRS256 captures enum value "RS256"
	FDXDynamicClientRegistrationResponseIDTokenSignedResponseAlgRS256 string = "RS256"

	// FDXDynamicClientRegistrationResponseIDTokenSignedResponseAlgES256 captures enum value "ES256"
	FDXDynamicClientRegistrationResponseIDTokenSignedResponseAlgES256 string = "ES256"

	// FDXDynamicClientRegistrationResponseIDTokenSignedResponseAlgPS256 captures enum value "PS256"
	FDXDynamicClientRegistrationResponseIDTokenSignedResponseAlgPS256 string = "PS256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateIDTokenSignedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeIDTokenSignedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateIDTokenSignedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenSignedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenSignedResponseAlgEnum("id_token_signed_response_alg", "body", m.IDTokenSignedResponseAlg); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeIntrospectionEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeIntrospectionEndpointAuthMethodPropEnum = append(fDXDynamicClientRegistrationResponseTypeIntrospectionEndpointAuthMethodPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodNone captures enum value "none"
	FDXDynamicClientRegistrationResponseIntrospectionEndpointAuthMethodNone string = "none"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateIntrospectionEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeIntrospectionEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateIntrospectionEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.IntrospectionEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntrospectionEndpointAuthMethodEnum("introspection_endpoint_auth_method", "body", m.IntrospectionEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateJwks(formats strfmt.Registry) error {
	if swag.IsZero(m.Jwks) { // not required
		return nil
	}

	if m.Jwks != nil {
		if err := m.Jwks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwks")
			}
			return err
		}
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validatePrivacy(formats strfmt.Registry) error {
	if swag.IsZero(m.Privacy) { // not required
		return nil
	}

	if m.Privacy != nil {
		if err := m.Privacy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privacy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privacy")
			}
			return err
		}
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateRedirectUris(formats strfmt.Registry) error {
	if swag.IsZero(m.RedirectUris) { // not required
		return nil
	}

	if err := m.RedirectUris.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("redirect_uris")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("redirect_uris")
		}
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeRequestObjectEncryptionAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeRequestObjectEncryptionAlgPropEnum = append(fDXDynamicClientRegistrationResponseTypeRequestObjectEncryptionAlgPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseRequestObjectEncryptionAlgRSADashOAEP captures enum value "RSA-OAEP"
	FDXDynamicClientRegistrationResponseRequestObjectEncryptionAlgRSADashOAEP string = "RSA-OAEP"

	// FDXDynamicClientRegistrationResponseRequestObjectEncryptionAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	FDXDynamicClientRegistrationResponseRequestObjectEncryptionAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateRequestObjectEncryptionAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeRequestObjectEncryptionAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateRequestObjectEncryptionAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectEncryptionAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectEncryptionAlgEnum("request_object_encryption_alg", "body", m.RequestObjectEncryptionAlg); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeRequestObjectEncryptionEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeRequestObjectEncryptionEncPropEnum = append(fDXDynamicClientRegistrationResponseTypeRequestObjectEncryptionEncPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseRequestObjectEncryptionEncA256GCM captures enum value "A256GCM"
	FDXDynamicClientRegistrationResponseRequestObjectEncryptionEncA256GCM string = "A256GCM"

	// FDXDynamicClientRegistrationResponseRequestObjectEncryptionEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	FDXDynamicClientRegistrationResponseRequestObjectEncryptionEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateRequestObjectEncryptionEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeRequestObjectEncryptionEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateRequestObjectEncryptionEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectEncryptionEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectEncryptionEncEnum("request_object_encryption_enc", "body", m.RequestObjectEncryptionEnc); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeRequestObjectSigningAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","none","RS256","ES256","PS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeRequestObjectSigningAlgPropEnum = append(fDXDynamicClientRegistrationResponseTypeRequestObjectSigningAlgPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseRequestObjectSigningAlgAny captures enum value "any"
	FDXDynamicClientRegistrationResponseRequestObjectSigningAlgAny string = "any"

	// FDXDynamicClientRegistrationResponseRequestObjectSigningAlgNone captures enum value "none"
	FDXDynamicClientRegistrationResponseRequestObjectSigningAlgNone string = "none"

	// FDXDynamicClientRegistrationResponseRequestObjectSigningAlgRS256 captures enum value "RS256"
	FDXDynamicClientRegistrationResponseRequestObjectSigningAlgRS256 string = "RS256"

	// FDXDynamicClientRegistrationResponseRequestObjectSigningAlgES256 captures enum value "ES256"
	FDXDynamicClientRegistrationResponseRequestObjectSigningAlgES256 string = "ES256"

	// FDXDynamicClientRegistrationResponseRequestObjectSigningAlgPS256 captures enum value "PS256"
	FDXDynamicClientRegistrationResponseRequestObjectSigningAlgPS256 string = "PS256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateRequestObjectSigningAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeRequestObjectSigningAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateRequestObjectSigningAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectSigningAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectSigningAlgEnum("request_object_signing_alg", "body", m.RequestObjectSigningAlg); err != nil {
		return err
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateResponseTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseTypes) { // not required
		return nil
	}

	if err := m.ResponseTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("response_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("response_types")
		}
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeRevocationEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeRevocationEndpointAuthMethodPropEnum = append(fDXDynamicClientRegistrationResponseTypeRevocationEndpointAuthMethodPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodNone captures enum value "none"
	FDXDynamicClientRegistrationResponseRevocationEndpointAuthMethodNone string = "none"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateRevocationEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeRevocationEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateRevocationEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.RevocationEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateRevocationEndpointAuthMethodEnum("revocation_endpoint_auth_method", "body", m.RevocationEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeSubjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","pairwise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeSubjectTypePropEnum = append(fDXDynamicClientRegistrationResponseTypeSubjectTypePropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseSubjectTypePublic captures enum value "public"
	FDXDynamicClientRegistrationResponseSubjectTypePublic string = "public"

	// FDXDynamicClientRegistrationResponseSubjectTypePairwise captures enum value "pairwise"
	FDXDynamicClientRegistrationResponseSubjectTypePairwise string = "pairwise"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateSubjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeSubjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateSubjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubjectTypeEnum("subject_type", "body", m.SubjectType); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeTokenEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeTokenEndpointAuthMethodPropEnum = append(fDXDynamicClientRegistrationResponseTypeTokenEndpointAuthMethodPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodNone captures enum value "none"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthMethodNone string = "none"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateTokenEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeTokenEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateTokenEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenEndpointAuthMethodEnum("token_endpoint_auth_method", "body", m.TokenEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeTokenEndpointAuthSigningAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","RS256","ES256","PS256","HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeTokenEndpointAuthSigningAlgPropEnum = append(fDXDynamicClientRegistrationResponseTypeTokenEndpointAuthSigningAlgPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgNone captures enum value "none"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgNone string = "none"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgRS256 captures enum value "RS256"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgRS256 string = "RS256"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgES256 captures enum value "ES256"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgES256 string = "ES256"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgPS256 captures enum value "PS256"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgPS256 string = "PS256"

	// FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgHS256 captures enum value "HS256"
	FDXDynamicClientRegistrationResponseTokenEndpointAuthSigningAlgHS256 string = "HS256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateTokenEndpointAuthSigningAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeTokenEndpointAuthSigningAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateTokenEndpointAuthSigningAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenEndpointAuthSigningAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenEndpointAuthSigningAlgEnum("token_endpoint_auth_signing_alg", "body", m.TokenEndpointAuthSigningAlg); err != nil {
		return err
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateTokenExchange(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenExchange) { // not required
		return nil
	}

	if m.TokenExchange != nil {
		if err := m.TokenExchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_exchange")
			}
			return err
		}
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var fDXDynamicClientRegistrationResponseTypeUserinfoSignedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","RS256","ES256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXDynamicClientRegistrationResponseTypeUserinfoSignedResponseAlgPropEnum = append(fDXDynamicClientRegistrationResponseTypeUserinfoSignedResponseAlgPropEnum, v)
	}
}

const (

	// FDXDynamicClientRegistrationResponseUserinfoSignedResponseAlgNone captures enum value "none"
	FDXDynamicClientRegistrationResponseUserinfoSignedResponseAlgNone string = "none"

	// FDXDynamicClientRegistrationResponseUserinfoSignedResponseAlgRS256 captures enum value "RS256"
	FDXDynamicClientRegistrationResponseUserinfoSignedResponseAlgRS256 string = "RS256"

	// FDXDynamicClientRegistrationResponseUserinfoSignedResponseAlgES256 captures enum value "ES256"
	FDXDynamicClientRegistrationResponseUserinfoSignedResponseAlgES256 string = "ES256"
)

// prop value enum
func (m *FDXDynamicClientRegistrationResponse) validateUserinfoSignedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXDynamicClientRegistrationResponseTypeUserinfoSignedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) validateUserinfoSignedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.UserinfoSignedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserinfoSignedResponseAlgEnum("userinfo_signed_response_alg", "body", m.UserinfoSignedResponseAlg); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this f d x dynamic client registration response based on the context it is used
func (m *FDXDynamicClientRegistrationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJwks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivacy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedirectUris(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenExchange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FDXDynamicClientRegistrationResponse) contextValidateApplicationTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "application_types", "body", []string(m.ApplicationTypes)); err != nil {
		return err
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) contextValidateJwks(ctx context.Context, formats strfmt.Registry) error {

	if m.Jwks != nil {
		if err := m.Jwks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwks")
			}
			return err
		}
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) contextValidatePrivacy(ctx context.Context, formats strfmt.Registry) error {

	if m.Privacy != nil {
		if err := m.Privacy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privacy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privacy")
			}
			return err
		}
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) contextValidateRedirectUris(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RedirectUris.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("redirect_uris")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("redirect_uris")
		}
		return err
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) contextValidateResponseTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ResponseTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("response_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("response_types")
		}
		return err
	}

	return nil
}

func (m *FDXDynamicClientRegistrationResponse) contextValidateTokenExchange(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenExchange != nil {
		if err := m.TokenExchange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_exchange")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FDXDynamicClientRegistrationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FDXDynamicClientRegistrationResponse) UnmarshalBinary(b []byte) error {
	var res FDXDynamicClientRegistrationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
