// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FDXConsentsRequest f d x consents request
//
// swagger:model FDXConsentsRequest
type FDXConsentsRequest struct {

	// optional list consents after given id
	// AfterConsentID
	AfterConsentID string `json:"after_consent_id,omitempty"`

	// optional list consents before given id
	// BeforeConsentID
	BeforeConsentID string `json:"before_consent_id,omitempty"`

	// Optional client id
	// ClientID
	ClientID string `json:"client_id,omitempty"`

	// optional limit results
	// Limit
	// Maximum: 100
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// optional sort consents by given fields
	// Order
	Order string `json:"order,omitempty"`

	// resource
	Resource *Resource `json:"resource,omitempty"`

	// optional sort consents by given fields
	// Sort
	Sort string `json:"sort,omitempty"`

	// Optional status
	// Status
	Status []string `json:"status"`

	// Optional type
	// Types
	// in:query
	Types []string `json:"types"`
}

// Validate validates this f d x consents request
func (m *FDXConsentsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FDXConsentsRequest) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", m.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "body", m.Limit, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *FDXConsentsRequest) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this f d x consents request based on the context it is used
func (m *FDXConsentsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FDXConsentsRequest) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {
		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FDXConsentsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FDXConsentsRequest) UnmarshalBinary(b []byte) error {
	var res FDXConsentsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
