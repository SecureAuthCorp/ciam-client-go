// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AttributeValue AttributeValue represents the SAML element AttributeValue.
//
// See http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf ยง2.7.3.1.1
//
// swagger:model AttributeValue
type AttributeValue struct {

	// name ID
	NameID *NameID `json:"NameID,omitempty"`

	// type
	Type string `json:"Type,omitempty"`

	// value
	Value string `json:"Value,omitempty"`
}

// Validate validates this attribute value
func (m *AttributeValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNameID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttributeValue) validateNameID(formats strfmt.Registry) error {
	if swag.IsZero(m.NameID) { // not required
		return nil
	}

	if m.NameID != nil {
		if err := m.NameID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NameID")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NameID")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this attribute value based on the context it is used
func (m *AttributeValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNameID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttributeValue) contextValidateNameID(ctx context.Context, formats strfmt.Registry) error {

	if m.NameID != nil {
		if err := m.NameID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NameID")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NameID")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttributeValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttributeValue) UnmarshalBinary(b []byte) error {
	var res AttributeValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
