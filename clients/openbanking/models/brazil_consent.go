// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BrazilConsent brazil consent
//
// swagger:model BrazilConsent
type BrazilConsent struct {

	// account ids
	AccountIds []string `json:"account_ids"`

	// client id
	ClientID string `json:"client_id,omitempty"`

	// cnpj
	Cnpj string `json:"cnpj,omitempty"`

	// consent id
	ConsentID string `json:"consent_id,omitempty"`

	// cpf
	Cpf string `json:"cpf,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// customer data access consent
	CustomerDataAccessConsent *BrazilCustomerDataAccessConsent `json:"customer_data_access_consent,omitempty"`

	// customer payment consent
	CustomerPaymentConsent *BrazilCustomerPaymentConsent `json:"customer_payment_consent,omitempty"`

	// idempotency key
	IdempotencyKey string `json:"idempotency_key,omitempty"`

	// request hash
	RequestHash string `json:"request_hash,omitempty"`

	// server id
	ServerID string `json:"server_id,omitempty"`

	// spec
	Spec string `json:"spec,omitempty"`

	// spec version
	SpecVersion string `json:"spec_version,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty"`

	// type
	Type ConsentType `json:"type,omitempty"`
}

// Validate validates this brazil consent
func (m *BrazilConsent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerDataAccessConsent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerPaymentConsent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrazilConsent) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BrazilConsent) validateCustomerDataAccessConsent(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerDataAccessConsent) { // not required
		return nil
	}

	if m.CustomerDataAccessConsent != nil {
		if err := m.CustomerDataAccessConsent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer_data_access_consent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer_data_access_consent")
			}
			return err
		}
	}

	return nil
}

func (m *BrazilConsent) validateCustomerPaymentConsent(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerPaymentConsent) { // not required
		return nil
	}

	if m.CustomerPaymentConsent != nil {
		if err := m.CustomerPaymentConsent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer_payment_consent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer_payment_consent")
			}
			return err
		}
	}

	return nil
}

func (m *BrazilConsent) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this brazil consent based on the context it is used
func (m *BrazilConsent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomerDataAccessConsent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerPaymentConsent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrazilConsent) contextValidateCustomerDataAccessConsent(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerDataAccessConsent != nil {
		if err := m.CustomerDataAccessConsent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer_data_access_consent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer_data_access_consent")
			}
			return err
		}
	}

	return nil
}

func (m *BrazilConsent) contextValidateCustomerPaymentConsent(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerPaymentConsent != nil {
		if err := m.CustomerPaymentConsent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer_payment_consent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer_payment_consent")
			}
			return err
		}
	}

	return nil
}

func (m *BrazilConsent) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrazilConsent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrazilConsent) UnmarshalBinary(b []byte) error {
	var res BrazilConsent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
