// Code generated by go-swagger; DO NOT EDIT.

package f_d_x

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/openbanking/models"
)

// AcceptFDXConsentSystemReader is a Reader for the AcceptFDXConsentSystem structure.
type AcceptFDXConsentSystemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptFDXConsentSystemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptFDXConsentSystemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAcceptFDXConsentSystemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAcceptFDXConsentSystemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptFDXConsentSystemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAcceptFDXConsentSystemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAcceptFDXConsentSystemOK creates a AcceptFDXConsentSystemOK with default headers values
func NewAcceptFDXConsentSystemOK() *AcceptFDXConsentSystemOK {
	return &AcceptFDXConsentSystemOK{}
}

/*
AcceptFDXConsentSystemOK describes a response with status code 200, with default header values.

Consent accepted
*/
type AcceptFDXConsentSystemOK struct {
	Payload *models.ConsentAccepted
}

// IsSuccess returns true when this accept f d x consent system o k response has a 2xx status code
func (o *AcceptFDXConsentSystemOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this accept f d x consent system o k response has a 3xx status code
func (o *AcceptFDXConsentSystemOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept f d x consent system o k response has a 4xx status code
func (o *AcceptFDXConsentSystemOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this accept f d x consent system o k response has a 5xx status code
func (o *AcceptFDXConsentSystemOK) IsServerError() bool {
	return false
}

// IsCode returns true when this accept f d x consent system o k response a status code equal to that given
func (o *AcceptFDXConsentSystemOK) IsCode(code int) bool {
	return code == 200
}

func (o *AcceptFDXConsentSystemOK) Error() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemOK  %+v", 200, o.Payload)
}

func (o *AcceptFDXConsentSystemOK) String() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemOK  %+v", 200, o.Payload)
}

func (o *AcceptFDXConsentSystemOK) GetPayload() *models.ConsentAccepted {
	return o.Payload
}

func (o *AcceptFDXConsentSystemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentAccepted)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptFDXConsentSystemUnauthorized creates a AcceptFDXConsentSystemUnauthorized with default headers values
func NewAcceptFDXConsentSystemUnauthorized() *AcceptFDXConsentSystemUnauthorized {
	return &AcceptFDXConsentSystemUnauthorized{}
}

/*
AcceptFDXConsentSystemUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type AcceptFDXConsentSystemUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept f d x consent system unauthorized response has a 2xx status code
func (o *AcceptFDXConsentSystemUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept f d x consent system unauthorized response has a 3xx status code
func (o *AcceptFDXConsentSystemUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept f d x consent system unauthorized response has a 4xx status code
func (o *AcceptFDXConsentSystemUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept f d x consent system unauthorized response has a 5xx status code
func (o *AcceptFDXConsentSystemUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this accept f d x consent system unauthorized response a status code equal to that given
func (o *AcceptFDXConsentSystemUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AcceptFDXConsentSystemUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemUnauthorized  %+v", 401, o.Payload)
}

func (o *AcceptFDXConsentSystemUnauthorized) String() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemUnauthorized  %+v", 401, o.Payload)
}

func (o *AcceptFDXConsentSystemUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptFDXConsentSystemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptFDXConsentSystemForbidden creates a AcceptFDXConsentSystemForbidden with default headers values
func NewAcceptFDXConsentSystemForbidden() *AcceptFDXConsentSystemForbidden {
	return &AcceptFDXConsentSystemForbidden{}
}

/*
AcceptFDXConsentSystemForbidden describes a response with status code 403, with default header values.

HttpError
*/
type AcceptFDXConsentSystemForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept f d x consent system forbidden response has a 2xx status code
func (o *AcceptFDXConsentSystemForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept f d x consent system forbidden response has a 3xx status code
func (o *AcceptFDXConsentSystemForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept f d x consent system forbidden response has a 4xx status code
func (o *AcceptFDXConsentSystemForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept f d x consent system forbidden response has a 5xx status code
func (o *AcceptFDXConsentSystemForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this accept f d x consent system forbidden response a status code equal to that given
func (o *AcceptFDXConsentSystemForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AcceptFDXConsentSystemForbidden) Error() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemForbidden  %+v", 403, o.Payload)
}

func (o *AcceptFDXConsentSystemForbidden) String() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemForbidden  %+v", 403, o.Payload)
}

func (o *AcceptFDXConsentSystemForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptFDXConsentSystemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptFDXConsentSystemNotFound creates a AcceptFDXConsentSystemNotFound with default headers values
func NewAcceptFDXConsentSystemNotFound() *AcceptFDXConsentSystemNotFound {
	return &AcceptFDXConsentSystemNotFound{}
}

/*
AcceptFDXConsentSystemNotFound describes a response with status code 404, with default header values.

HttpError
*/
type AcceptFDXConsentSystemNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept f d x consent system not found response has a 2xx status code
func (o *AcceptFDXConsentSystemNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept f d x consent system not found response has a 3xx status code
func (o *AcceptFDXConsentSystemNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept f d x consent system not found response has a 4xx status code
func (o *AcceptFDXConsentSystemNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept f d x consent system not found response has a 5xx status code
func (o *AcceptFDXConsentSystemNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this accept f d x consent system not found response a status code equal to that given
func (o *AcceptFDXConsentSystemNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AcceptFDXConsentSystemNotFound) Error() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemNotFound  %+v", 404, o.Payload)
}

func (o *AcceptFDXConsentSystemNotFound) String() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemNotFound  %+v", 404, o.Payload)
}

func (o *AcceptFDXConsentSystemNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptFDXConsentSystemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptFDXConsentSystemTooManyRequests creates a AcceptFDXConsentSystemTooManyRequests with default headers values
func NewAcceptFDXConsentSystemTooManyRequests() *AcceptFDXConsentSystemTooManyRequests {
	return &AcceptFDXConsentSystemTooManyRequests{}
}

/*
AcceptFDXConsentSystemTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type AcceptFDXConsentSystemTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this accept f d x consent system too many requests response has a 2xx status code
func (o *AcceptFDXConsentSystemTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this accept f d x consent system too many requests response has a 3xx status code
func (o *AcceptFDXConsentSystemTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this accept f d x consent system too many requests response has a 4xx status code
func (o *AcceptFDXConsentSystemTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this accept f d x consent system too many requests response has a 5xx status code
func (o *AcceptFDXConsentSystemTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this accept f d x consent system too many requests response a status code equal to that given
func (o *AcceptFDXConsentSystemTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *AcceptFDXConsentSystemTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemTooManyRequests  %+v", 429, o.Payload)
}

func (o *AcceptFDXConsentSystemTooManyRequests) String() string {
	return fmt.Sprintf("[POST /fdx/fdx/{login}/accept][%d] acceptFDXConsentSystemTooManyRequests  %+v", 429, o.Payload)
}

func (o *AcceptFDXConsentSystemTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptFDXConsentSystemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
