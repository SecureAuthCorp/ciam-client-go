// Code generated by go-swagger; DO NOT EDIT.

package c_d_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new c d r API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for c d r API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptCDRArrangementSystem(params *AcceptCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptCDRArrangementSystemOK, error)

	CdrConsentIntrospect(params *CdrConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CdrConsentIntrospectOK, error)

	GetCDRArrangement(params *GetCDRArrangementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementOK, error)

	GetCDRArrangementSystem(params *GetCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementSystemOK, error)

	GetCDRArrangements(params *GetCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementsOK, error)

	ListCDRArrangements(params *ListCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCDRArrangementsOK, error)

	ListCDRCustomerArrangements(params *ListCDRCustomerArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCDRCustomerArrangementsOK, error)

	ListCustomerClients(params *ListCustomerClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomerClientsOK, error)

	RefreshMetadata(params *RefreshMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshMetadataOK, error)

	RejectCDRArrangementSystem(params *RejectCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectCDRArrangementSystemOK, error)

	RevokeCDRArrangement(params *RevokeCDRArrangementParams, opts ...ClientOption) (*RevokeCDRArrangementNoContent, error)

	RevokeCDRArrangementByID(params *RevokeCDRArrangementByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRArrangementByIDNoContent, error)

	RevokeCDRArrangements(params *RevokeCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRArrangementsOK, error)

	RevokeCDRCustomerArrangements(params *RevokeCDRCustomerArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRCustomerArrangementsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	AcceptCDRArrangementSystem accepts c d r arrangement

	Notify Cloudentity that the user has authorized the client application to access their resources on their own behalf.

It's sent once the user gives consent on the consent page.

This request includes a list of the permitted accounts along with the access scopes granted, user identifier,
and the additional parameter to prevent CSRF.
*/
func (a *Client) AcceptCDRArrangementSystem(params *AcceptCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptCDRArrangementSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptCDRArrangementSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptCDRArrangementSystem",
		Method:             "POST",
		PathPattern:        "/cdr/cdr-arrangement/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptCDRArrangementSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptCDRArrangementSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptCDRArrangementSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CdrConsentIntrospect introspects c d r arrangement

	This endpoint takes an OAuth 2.0 refresh token and, in addition to returning

meta information surrounding the token, returns the cdr arrangement consent.

Note that as per CDR regulations it's not possible to introspect Access Tokens nor ID Tokens.

The response contains:

`active` flag indicating wheather the token is currently active
`exp` - token expiration timestamp (number of seconds from 1970-01-01T00:00:00Z)
`scope` - space separated list of scopes associated with the token
`cdr_arrangement_id` - unique arrangement identifier
`cdr_arrangement` - object containing arrangement details
`cdr_register_client_metadata` - metadata from CDR Register including Data Recipient and Software Product statuses
*/
func (a *Client) CdrConsentIntrospect(params *CdrConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CdrConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCdrConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cdrConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/cdr/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CdrConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CdrConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cdrConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCDRArrangement gets c d r arrangement

This API retrieves CDR arrangement by ID.
*/
func (a *Client) GetCDRArrangement(params *GetCDRArrangementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDRArrangementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCDRArrangement",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/cdr/arrangements/{arrangementID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCDRArrangementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCDRArrangementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCDRArrangement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCDRArrangementSystem gets c d r request

	Returns all data necessary to build the consent page.

The response contains details about the arrangement, client, requested scopes, and authenticated user.
*/
func (a *Client) GetCDRArrangementSystem(params *GetCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDRArrangementSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCDRArrangementSystem",
		Method:             "GET",
		PathPattern:        "/cdr/cdr-arrangement/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCDRArrangementSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCDRArrangementSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCDRArrangementSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCDRArrangements lists c d r arrangements

	This API returns the list of CDR arrangements.

You can narrow the list of returned arrangements using filters defined in request parameters.
See getCDRArrangements for details.
*/
func (a *Client) GetCDRArrangements(params *GetCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDRArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCDRArrangements",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/cdr/arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCDRArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCDRArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCDRArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListCDRArrangements lists c d r arrangements

	This API returns the list of CDR arrangements.

You can narrow the list of returned arrangements using filters defined in request body.
See listCDRArrangements for details.
*/
func (a *Client) ListCDRArrangements(params *ListCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCDRArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCDRArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCDRArrangements",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/cdr/arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCDRArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCDRArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCDRArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListCDRCustomerArrangements lists c d r customer arrangements

	This API returns the list of CDR arrangements for a given customer.

Customer must passed as customer_id claim in the access token.
You can narrow the list of returned arrangements using filters defined in request body.
See ListCDRCustomerArrangementsFilter for details.
*/
func (a *Client) ListCDRCustomerArrangements(params *ListCDRCustomerArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCDRCustomerArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCDRCustomerArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCDRCustomerArrangements",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/cdr/customer-arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCDRCustomerArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCDRCustomerArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCDRCustomerArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListCustomerClients lists c d r customer clients

	This API returns clients that currently have arrangements assigned to them.

Customer must passed as customer_id claim in the access token.
*/
func (a *Client) ListCustomerClients(params *ListCustomerClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomerClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomerClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCustomerClients",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/cdr/customer-clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomerClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomerClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCustomerClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RefreshMetadata refreshes a d r metadata

	This API is used by the CDR registry to indicate that a critical update to the metadata

for Accredited Data Recipients has been made and should be obtained.'
Supported version(s) of this endpoint: [1]
*/
func (a *Client) RefreshMetadata(params *RefreshMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshMetadata",
		Method:             "POST",
		PathPattern:        "/admin/register/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refreshMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RejectCDRArrangementSystem rejects c d r arrangement

	Notify Cloudentity that the client application isn't authorized to access user resources. It's sent when the user

hasn't provided consent on the consent page.

The request includes the error message along with the rejection reasons, HTTP status code, and the additional
parameter to prevent CSRF.
*/
func (a *Client) RejectCDRArrangementSystem(params *RejectCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectCDRArrangementSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectCDRArrangementSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectCDRArrangementSystem",
		Method:             "POST",
		PathPattern:        "/cdr/cdr-arrangement/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectCDRArrangementSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectCDRArrangementSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectCDRArrangementSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeCDRArrangement revokes c d r arrangement

	Allows a client to withdraw consent for an arrangement in compliance with the

revocation endpoint defined by the Consumer Data Standards specification.
This endpoint requires inline private key jwt authentication.
*/
func (a *Client) RevokeCDRArrangement(params *RevokeCDRArrangementParams, opts ...ClientOption) (*RevokeCDRArrangementNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeCDRArrangementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCDRArrangement",
		Method:             "POST",
		PathPattern:        "/arrangements/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeCDRArrangementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeCDRArrangementNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCDRArrangement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeCDRArrangementByID revokes c d r arrangement

This API revokes a single CDR Arrangement with the matching arrangement id
*/
func (a *Client) RevokeCDRArrangementByID(params *RevokeCDRArrangementByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRArrangementByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeCDRArrangementByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCDRArrangementByID",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/cdr/arrangements/{arrangementID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeCDRArrangementByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeCDRArrangementByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCDRArrangementByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeCDRArrangements revokes c d r arrangements

	This API revokes CDR arrangements matching provided parameters.

Currently supporting removal by client id.
Use ?client_id={clientID} to remove all arrangements by a given client.
*/
func (a *Client) RevokeCDRArrangements(params *RevokeCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeCDRArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCDRArrangements",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/cdr/arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeCDRArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeCDRArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCDRArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeCDRCustomerArrangements revokes c d r customer arrangements

	This API revokes CDR arrangements, access tokens, and refresh tokens for a given customer.

Customer must passed as customer_id claim in the access token.
*/
func (a *Client) RevokeCDRCustomerArrangements(params *RevokeCDRCustomerArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRCustomerArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeCDRCustomerArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCDRCustomerArrangements",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/cdr/customer-arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeCDRCustomerArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeCDRCustomerArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCDRCustomerArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
