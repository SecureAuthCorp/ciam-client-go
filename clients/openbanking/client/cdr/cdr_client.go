// Code generated by go-swagger; DO NOT EDIT.

package cdr

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cdr API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cdr API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptCDRArrangementSystem(params *AcceptCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptCDRArrangementSystemOK, error)

	GetCDRArrangementSystem(params *GetCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementSystemOK, error)

	RejectCDRArrangementSystem(params *RejectCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectCDRArrangementSystemOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcceptCDRArrangementSystem rejects consent

  This API can be used by a custom openbanking consent page to notify ACP that user accepted access.
*/
func (a *Client) AcceptCDRArrangementSystem(params *AcceptCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptCDRArrangementSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptCDRArrangementSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptCDRArrangementSystem",
		Method:             "POST",
		PathPattern:        "/cdr/cdr-arrangement/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptCDRArrangementSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptCDRArrangementSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptCDRArrangementSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCDRArrangementSystem gets cdr arrangement

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetCDRArrangementSystem(params *GetCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDRArrangementSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCDRArrangementSystem",
		Method:             "GET",
		PathPattern:        "/cdr/cdr-arrangement/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCDRArrangementSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCDRArrangementSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCDRArrangementSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectCDRArrangementSystem rejects consent

  This API can be used by a custom openbanking consent page to notify ACP that user rejected access.
*/
func (a *Client) RejectCDRArrangementSystem(params *RejectCDRArrangementSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectCDRArrangementSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectCDRArrangementSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectCDRArrangementSystem",
		Method:             "POST",
		PathPattern:        "/cdr/cdr-arrangement/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectCDRArrangementSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectCDRArrangementSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectCDRArrangementSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
