// Code generated by go-swagger; DO NOT EDIT.

package openbanking_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/openbanking/models"
)

// PatchPaymentConsentReader is a Reader for the PatchPaymentConsent structure.
type PatchPaymentConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchPaymentConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchPaymentConsentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchPaymentConsentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchPaymentConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchPaymentConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPatchPaymentConsentMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewPatchPaymentConsentNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchPaymentConsentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchPaymentConsentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchPaymentConsentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchPaymentConsentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchPaymentConsentOK creates a PatchPaymentConsentOK with default headers values
func NewPatchPaymentConsentOK() *PatchPaymentConsentOK {
	return &PatchPaymentConsentOK{}
}

/* PatchPaymentConsentOK describes a response with status code 200, with default header values.

Customer payment consent
*/
type PatchPaymentConsentOK struct {
	Payload *models.BrazilCustomerPaymentConsentResponse
}

func (o *PatchPaymentConsentOK) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentOK  %+v", 200, o.Payload)
}
func (o *PatchPaymentConsentOK) GetPayload() *models.BrazilCustomerPaymentConsentResponse {
	return o.Payload
}

func (o *PatchPaymentConsentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BrazilCustomerPaymentConsentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentBadRequest creates a PatchPaymentConsentBadRequest with default headers values
func NewPatchPaymentConsentBadRequest() *PatchPaymentConsentBadRequest {
	return &PatchPaymentConsentBadRequest{}
}

/* PatchPaymentConsentBadRequest describes a response with status code 400, with default header values.

Error
*/
type PatchPaymentConsentBadRequest struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentBadRequest  %+v", 400, o.Payload)
}
func (o *PatchPaymentConsentBadRequest) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentUnauthorized creates a PatchPaymentConsentUnauthorized with default headers values
func NewPatchPaymentConsentUnauthorized() *PatchPaymentConsentUnauthorized {
	return &PatchPaymentConsentUnauthorized{}
}

/* PatchPaymentConsentUnauthorized describes a response with status code 401, with default header values.

Error
*/
type PatchPaymentConsentUnauthorized struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentUnauthorized  %+v", 401, o.Payload)
}
func (o *PatchPaymentConsentUnauthorized) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentForbidden creates a PatchPaymentConsentForbidden with default headers values
func NewPatchPaymentConsentForbidden() *PatchPaymentConsentForbidden {
	return &PatchPaymentConsentForbidden{}
}

/* PatchPaymentConsentForbidden describes a response with status code 403, with default header values.

Error
*/
type PatchPaymentConsentForbidden struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentForbidden) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentForbidden  %+v", 403, o.Payload)
}
func (o *PatchPaymentConsentForbidden) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentMethodNotAllowed creates a PatchPaymentConsentMethodNotAllowed with default headers values
func NewPatchPaymentConsentMethodNotAllowed() *PatchPaymentConsentMethodNotAllowed {
	return &PatchPaymentConsentMethodNotAllowed{}
}

/* PatchPaymentConsentMethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type PatchPaymentConsentMethodNotAllowed struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentMethodNotAllowed  %+v", 405, o.Payload)
}
func (o *PatchPaymentConsentMethodNotAllowed) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentNotAcceptable creates a PatchPaymentConsentNotAcceptable with default headers values
func NewPatchPaymentConsentNotAcceptable() *PatchPaymentConsentNotAcceptable {
	return &PatchPaymentConsentNotAcceptable{}
}

/* PatchPaymentConsentNotAcceptable describes a response with status code 406, with default header values.

Error
*/
type PatchPaymentConsentNotAcceptable struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentNotAcceptable) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentNotAcceptable  %+v", 406, o.Payload)
}
func (o *PatchPaymentConsentNotAcceptable) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentUnsupportedMediaType creates a PatchPaymentConsentUnsupportedMediaType with default headers values
func NewPatchPaymentConsentUnsupportedMediaType() *PatchPaymentConsentUnsupportedMediaType {
	return &PatchPaymentConsentUnsupportedMediaType{}
}

/* PatchPaymentConsentUnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type PatchPaymentConsentUnsupportedMediaType struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *PatchPaymentConsentUnsupportedMediaType) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentUnprocessableEntity creates a PatchPaymentConsentUnprocessableEntity with default headers values
func NewPatchPaymentConsentUnprocessableEntity() *PatchPaymentConsentUnprocessableEntity {
	return &PatchPaymentConsentUnprocessableEntity{}
}

/* PatchPaymentConsentUnprocessableEntity describes a response with status code 422, with default header values.

Error
*/
type PatchPaymentConsentUnprocessableEntity struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PatchPaymentConsentUnprocessableEntity) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentTooManyRequests creates a PatchPaymentConsentTooManyRequests with default headers values
func NewPatchPaymentConsentTooManyRequests() *PatchPaymentConsentTooManyRequests {
	return &PatchPaymentConsentTooManyRequests{}
}

/* PatchPaymentConsentTooManyRequests describes a response with status code 429, with default header values.

Error
*/
type PatchPaymentConsentTooManyRequests struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentTooManyRequests  %+v", 429, o.Payload)
}
func (o *PatchPaymentConsentTooManyRequests) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchPaymentConsentInternalServerError creates a PatchPaymentConsentInternalServerError with default headers values
func NewPatchPaymentConsentInternalServerError() *PatchPaymentConsentInternalServerError {
	return &PatchPaymentConsentInternalServerError{}
}

/* PatchPaymentConsentInternalServerError describes a response with status code 500, with default header values.

Error
*/
type PatchPaymentConsentInternalServerError struct {
	Payload *models.OBBRErrorResponse
}

func (o *PatchPaymentConsentInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/payments/v1/consents/{consentID}][%d] patchPaymentConsentInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchPaymentConsentInternalServerError) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchPaymentConsentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
