// Code generated by go-swagger; DO NOT EDIT.

package openbanking_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/openbanking/models"
)

// NewAcceptOBBRCustomerDataAccessConsentSystemParams creates a new AcceptOBBRCustomerDataAccessConsentSystemParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAcceptOBBRCustomerDataAccessConsentSystemParams() *AcceptOBBRCustomerDataAccessConsentSystemParams {
	return &AcceptOBBRCustomerDataAccessConsentSystemParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAcceptOBBRCustomerDataAccessConsentSystemParamsWithTimeout creates a new AcceptOBBRCustomerDataAccessConsentSystemParams object
// with the ability to set a timeout on a request.
func NewAcceptOBBRCustomerDataAccessConsentSystemParamsWithTimeout(timeout time.Duration) *AcceptOBBRCustomerDataAccessConsentSystemParams {
	return &AcceptOBBRCustomerDataAccessConsentSystemParams{
		timeout: timeout,
	}
}

// NewAcceptOBBRCustomerDataAccessConsentSystemParamsWithContext creates a new AcceptOBBRCustomerDataAccessConsentSystemParams object
// with the ability to set a context for a request.
func NewAcceptOBBRCustomerDataAccessConsentSystemParamsWithContext(ctx context.Context) *AcceptOBBRCustomerDataAccessConsentSystemParams {
	return &AcceptOBBRCustomerDataAccessConsentSystemParams{
		Context: ctx,
	}
}

// NewAcceptOBBRCustomerDataAccessConsentSystemParamsWithHTTPClient creates a new AcceptOBBRCustomerDataAccessConsentSystemParams object
// with the ability to set a custom HTTPClient for a request.
func NewAcceptOBBRCustomerDataAccessConsentSystemParamsWithHTTPClient(client *http.Client) *AcceptOBBRCustomerDataAccessConsentSystemParams {
	return &AcceptOBBRCustomerDataAccessConsentSystemParams{
		HTTPClient: client,
	}
}

/* AcceptOBBRCustomerDataAccessConsentSystemParams contains all the parameters to send to the API endpoint
   for the accept o b b r customer data access consent system operation.

   Typically these are written to a http.Request.
*/
type AcceptOBBRCustomerDataAccessConsentSystemParams struct {

	// AcceptConsent.
	AcceptConsent *models.AcceptConsentRequest

	// Login.
	Login string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the accept o b b r customer data access consent system params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) WithDefaults() *AcceptOBBRCustomerDataAccessConsentSystemParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the accept o b b r customer data access consent system params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) WithTimeout(timeout time.Duration) *AcceptOBBRCustomerDataAccessConsentSystemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) WithContext(ctx context.Context) *AcceptOBBRCustomerDataAccessConsentSystemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) WithHTTPClient(client *http.Client) *AcceptOBBRCustomerDataAccessConsentSystemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAcceptConsent adds the acceptConsent to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) WithAcceptConsent(acceptConsent *models.AcceptConsentRequest) *AcceptOBBRCustomerDataAccessConsentSystemParams {
	o.SetAcceptConsent(acceptConsent)
	return o
}

// SetAcceptConsent adds the acceptConsent to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) SetAcceptConsent(acceptConsent *models.AcceptConsentRequest) {
	o.AcceptConsent = acceptConsent
}

// WithLogin adds the login to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) WithLogin(login string) *AcceptOBBRCustomerDataAccessConsentSystemParams {
	o.SetLogin(login)
	return o
}

// SetLogin adds the login to the accept o b b r customer data access consent system params
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) SetLogin(login string) {
	o.Login = login
}

// WriteToRequest writes these params to a swagger request
func (o *AcceptOBBRCustomerDataAccessConsentSystemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.AcceptConsent != nil {
		if err := r.SetBodyParam(o.AcceptConsent); err != nil {
			return err
		}
	}

	// path param login
	if err := r.SetPathParam("login", o.Login); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
