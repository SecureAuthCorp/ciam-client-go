// Code generated by go-swagger; DO NOT EDIT.

package openbanking_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/openbanking/models"
)

// NewRejectOBBRCustomerPaymentConsentSystemParams creates a new RejectOBBRCustomerPaymentConsentSystemParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRejectOBBRCustomerPaymentConsentSystemParams() *RejectOBBRCustomerPaymentConsentSystemParams {
	return &RejectOBBRCustomerPaymentConsentSystemParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRejectOBBRCustomerPaymentConsentSystemParamsWithTimeout creates a new RejectOBBRCustomerPaymentConsentSystemParams object
// with the ability to set a timeout on a request.
func NewRejectOBBRCustomerPaymentConsentSystemParamsWithTimeout(timeout time.Duration) *RejectOBBRCustomerPaymentConsentSystemParams {
	return &RejectOBBRCustomerPaymentConsentSystemParams{
		timeout: timeout,
	}
}

// NewRejectOBBRCustomerPaymentConsentSystemParamsWithContext creates a new RejectOBBRCustomerPaymentConsentSystemParams object
// with the ability to set a context for a request.
func NewRejectOBBRCustomerPaymentConsentSystemParamsWithContext(ctx context.Context) *RejectOBBRCustomerPaymentConsentSystemParams {
	return &RejectOBBRCustomerPaymentConsentSystemParams{
		Context: ctx,
	}
}

// NewRejectOBBRCustomerPaymentConsentSystemParamsWithHTTPClient creates a new RejectOBBRCustomerPaymentConsentSystemParams object
// with the ability to set a custom HTTPClient for a request.
func NewRejectOBBRCustomerPaymentConsentSystemParamsWithHTTPClient(client *http.Client) *RejectOBBRCustomerPaymentConsentSystemParams {
	return &RejectOBBRCustomerPaymentConsentSystemParams{
		HTTPClient: client,
	}
}

/* RejectOBBRCustomerPaymentConsentSystemParams contains all the parameters to send to the API endpoint
   for the reject o b b r customer payment consent system operation.

   Typically these are written to a http.Request.
*/
type RejectOBBRCustomerPaymentConsentSystemParams struct {

	// RejectConsent.
	RejectConsent *models.RejectConsentRequest

	// Login.
	Login string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the reject o b b r customer payment consent system params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RejectOBBRCustomerPaymentConsentSystemParams) WithDefaults() *RejectOBBRCustomerPaymentConsentSystemParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the reject o b b r customer payment consent system params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RejectOBBRCustomerPaymentConsentSystemParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) WithTimeout(timeout time.Duration) *RejectOBBRCustomerPaymentConsentSystemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) WithContext(ctx context.Context) *RejectOBBRCustomerPaymentConsentSystemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) WithHTTPClient(client *http.Client) *RejectOBBRCustomerPaymentConsentSystemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRejectConsent adds the rejectConsent to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) WithRejectConsent(rejectConsent *models.RejectConsentRequest) *RejectOBBRCustomerPaymentConsentSystemParams {
	o.SetRejectConsent(rejectConsent)
	return o
}

// SetRejectConsent adds the rejectConsent to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) SetRejectConsent(rejectConsent *models.RejectConsentRequest) {
	o.RejectConsent = rejectConsent
}

// WithLogin adds the login to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) WithLogin(login string) *RejectOBBRCustomerPaymentConsentSystemParams {
	o.SetLogin(login)
	return o
}

// SetLogin adds the login to the reject o b b r customer payment consent system params
func (o *RejectOBBRCustomerPaymentConsentSystemParams) SetLogin(login string) {
	o.Login = login
}

// WriteToRequest writes these params to a swagger request
func (o *RejectOBBRCustomerPaymentConsentSystemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.RejectConsent != nil {
		if err := r.SetBodyParam(o.RejectConsent); err != nil {
			return err
		}
	}

	// path param login
	if err := r.SetPathParam("login", o.Login); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
