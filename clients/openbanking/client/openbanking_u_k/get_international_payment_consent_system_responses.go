// Code generated by go-swagger; DO NOT EDIT.

package openbanking_u_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/openbanking/models"
)

// GetInternationalPaymentConsentSystemReader is a Reader for the GetInternationalPaymentConsentSystem structure.
type GetInternationalPaymentConsentSystemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInternationalPaymentConsentSystemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInternationalPaymentConsentSystemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetInternationalPaymentConsentSystemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInternationalPaymentConsentSystemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInternationalPaymentConsentSystemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInternationalPaymentConsentSystemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInternationalPaymentConsentSystemOK creates a GetInternationalPaymentConsentSystemOK with default headers values
func NewGetInternationalPaymentConsentSystemOK() *GetInternationalPaymentConsentSystemOK {
	return &GetInternationalPaymentConsentSystemOK{}
}

/*
GetInternationalPaymentConsentSystemOK describes a response with status code 200, with default header values.

GetInternationalPaymentConsentResponse
*/
type GetInternationalPaymentConsentSystemOK struct {
	Payload *models.GetInternationalPaymentConsentResponse
}

// IsSuccess returns true when this get international payment consent system o k response has a 2xx status code
func (o *GetInternationalPaymentConsentSystemOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get international payment consent system o k response has a 3xx status code
func (o *GetInternationalPaymentConsentSystemOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consent system o k response has a 4xx status code
func (o *GetInternationalPaymentConsentSystemOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get international payment consent system o k response has a 5xx status code
func (o *GetInternationalPaymentConsentSystemOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consent system o k response a status code equal to that given
func (o *GetInternationalPaymentConsentSystemOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInternationalPaymentConsentSystemOK) Error() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemOK  %+v", 200, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemOK) String() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemOK  %+v", 200, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemOK) GetPayload() *models.GetInternationalPaymentConsentResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentSystemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetInternationalPaymentConsentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentSystemUnauthorized creates a GetInternationalPaymentConsentSystemUnauthorized with default headers values
func NewGetInternationalPaymentConsentSystemUnauthorized() *GetInternationalPaymentConsentSystemUnauthorized {
	return &GetInternationalPaymentConsentSystemUnauthorized{}
}

/*
GetInternationalPaymentConsentSystemUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type GetInternationalPaymentConsentSystemUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get international payment consent system unauthorized response has a 2xx status code
func (o *GetInternationalPaymentConsentSystemUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consent system unauthorized response has a 3xx status code
func (o *GetInternationalPaymentConsentSystemUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consent system unauthorized response has a 4xx status code
func (o *GetInternationalPaymentConsentSystemUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consent system unauthorized response has a 5xx status code
func (o *GetInternationalPaymentConsentSystemUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consent system unauthorized response a status code equal to that given
func (o *GetInternationalPaymentConsentSystemUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetInternationalPaymentConsentSystemUnauthorized) Error() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemUnauthorized) String() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetInternationalPaymentConsentSystemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentSystemForbidden creates a GetInternationalPaymentConsentSystemForbidden with default headers values
func NewGetInternationalPaymentConsentSystemForbidden() *GetInternationalPaymentConsentSystemForbidden {
	return &GetInternationalPaymentConsentSystemForbidden{}
}

/*
GetInternationalPaymentConsentSystemForbidden describes a response with status code 403, with default header values.

HttpError
*/
type GetInternationalPaymentConsentSystemForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get international payment consent system forbidden response has a 2xx status code
func (o *GetInternationalPaymentConsentSystemForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consent system forbidden response has a 3xx status code
func (o *GetInternationalPaymentConsentSystemForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consent system forbidden response has a 4xx status code
func (o *GetInternationalPaymentConsentSystemForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consent system forbidden response has a 5xx status code
func (o *GetInternationalPaymentConsentSystemForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consent system forbidden response a status code equal to that given
func (o *GetInternationalPaymentConsentSystemForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInternationalPaymentConsentSystemForbidden) Error() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemForbidden  %+v", 403, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemForbidden) String() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemForbidden  %+v", 403, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetInternationalPaymentConsentSystemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentSystemNotFound creates a GetInternationalPaymentConsentSystemNotFound with default headers values
func NewGetInternationalPaymentConsentSystemNotFound() *GetInternationalPaymentConsentSystemNotFound {
	return &GetInternationalPaymentConsentSystemNotFound{}
}

/*
GetInternationalPaymentConsentSystemNotFound describes a response with status code 404, with default header values.

HttpError
*/
type GetInternationalPaymentConsentSystemNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get international payment consent system not found response has a 2xx status code
func (o *GetInternationalPaymentConsentSystemNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consent system not found response has a 3xx status code
func (o *GetInternationalPaymentConsentSystemNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consent system not found response has a 4xx status code
func (o *GetInternationalPaymentConsentSystemNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consent system not found response has a 5xx status code
func (o *GetInternationalPaymentConsentSystemNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consent system not found response a status code equal to that given
func (o *GetInternationalPaymentConsentSystemNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInternationalPaymentConsentSystemNotFound) Error() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemNotFound  %+v", 404, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemNotFound) String() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemNotFound  %+v", 404, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetInternationalPaymentConsentSystemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentSystemTooManyRequests creates a GetInternationalPaymentConsentSystemTooManyRequests with default headers values
func NewGetInternationalPaymentConsentSystemTooManyRequests() *GetInternationalPaymentConsentSystemTooManyRequests {
	return &GetInternationalPaymentConsentSystemTooManyRequests{}
}

/*
GetInternationalPaymentConsentSystemTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type GetInternationalPaymentConsentSystemTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get international payment consent system too many requests response has a 2xx status code
func (o *GetInternationalPaymentConsentSystemTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get international payment consent system too many requests response has a 3xx status code
func (o *GetInternationalPaymentConsentSystemTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get international payment consent system too many requests response has a 4xx status code
func (o *GetInternationalPaymentConsentSystemTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get international payment consent system too many requests response has a 5xx status code
func (o *GetInternationalPaymentConsentSystemTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get international payment consent system too many requests response a status code equal to that given
func (o *GetInternationalPaymentConsentSystemTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInternationalPaymentConsentSystemTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemTooManyRequests) String() string {
	return fmt.Sprintf("[GET /open-banking/international-payment-consent/{login}][%d] getInternationalPaymentConsentSystemTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInternationalPaymentConsentSystemTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetInternationalPaymentConsentSystemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
