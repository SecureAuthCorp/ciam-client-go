// Code generated by go-swagger; DO NOT EDIT.

package openbanking_u_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/openbanking/models"
)

// GetInternationalPaymentConsentRequestReader is a Reader for the GetInternationalPaymentConsentRequest structure.
type GetInternationalPaymentConsentRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInternationalPaymentConsentRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInternationalPaymentConsentRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInternationalPaymentConsentRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInternationalPaymentConsentRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInternationalPaymentConsentRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetInternationalPaymentConsentRequestMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetInternationalPaymentConsentRequestNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInternationalPaymentConsentRequestUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInternationalPaymentConsentRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInternationalPaymentConsentRequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInternationalPaymentConsentRequestOK creates a GetInternationalPaymentConsentRequestOK with default headers values
func NewGetInternationalPaymentConsentRequestOK() *GetInternationalPaymentConsentRequestOK {
	return &GetInternationalPaymentConsentRequestOK{}
}

/* GetInternationalPaymentConsentRequestOK describes a response with status code 200, with default header values.

International payment consent
*/
type GetInternationalPaymentConsentRequestOK struct {
	Payload *models.InternationalPaymentConsentResponse
}

func (o *GetInternationalPaymentConsentRequestOK) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestOK  %+v", 200, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestOK) GetPayload() *models.InternationalPaymentConsentResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InternationalPaymentConsentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentRequestBadRequest creates a GetInternationalPaymentConsentRequestBadRequest with default headers values
func NewGetInternationalPaymentConsentRequestBadRequest() *GetInternationalPaymentConsentRequestBadRequest {
	return &GetInternationalPaymentConsentRequestBadRequest{}
}

/* GetInternationalPaymentConsentRequestBadRequest describes a response with status code 400, with default header values.

Error
*/
type GetInternationalPaymentConsentRequestBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *GetInternationalPaymentConsentRequestBadRequest) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestBadRequest  %+v", 400, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentRequestUnauthorized creates a GetInternationalPaymentConsentRequestUnauthorized with default headers values
func NewGetInternationalPaymentConsentRequestUnauthorized() *GetInternationalPaymentConsentRequestUnauthorized {
	return &GetInternationalPaymentConsentRequestUnauthorized{}
}

/* GetInternationalPaymentConsentRequestUnauthorized describes a response with status code 401, with default header values.

Error
*/
type GetInternationalPaymentConsentRequestUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *GetInternationalPaymentConsentRequestUnauthorized) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestUnauthorized  %+v", 401, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentRequestForbidden creates a GetInternationalPaymentConsentRequestForbidden with default headers values
func NewGetInternationalPaymentConsentRequestForbidden() *GetInternationalPaymentConsentRequestForbidden {
	return &GetInternationalPaymentConsentRequestForbidden{}
}

/* GetInternationalPaymentConsentRequestForbidden describes a response with status code 403, with default header values.

Error
*/
type GetInternationalPaymentConsentRequestForbidden struct {
	Payload *models.ErrorResponse
}

func (o *GetInternationalPaymentConsentRequestForbidden) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestForbidden  %+v", 403, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentRequestMethodNotAllowed creates a GetInternationalPaymentConsentRequestMethodNotAllowed with default headers values
func NewGetInternationalPaymentConsentRequestMethodNotAllowed() *GetInternationalPaymentConsentRequestMethodNotAllowed {
	return &GetInternationalPaymentConsentRequestMethodNotAllowed{}
}

/* GetInternationalPaymentConsentRequestMethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type GetInternationalPaymentConsentRequestMethodNotAllowed struct {
	Payload *models.ErrorResponse
}

func (o *GetInternationalPaymentConsentRequestMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestMethodNotAllowed  %+v", 405, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestMethodNotAllowed) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentRequestNotAcceptable creates a GetInternationalPaymentConsentRequestNotAcceptable with default headers values
func NewGetInternationalPaymentConsentRequestNotAcceptable() *GetInternationalPaymentConsentRequestNotAcceptable {
	return &GetInternationalPaymentConsentRequestNotAcceptable{}
}

/* GetInternationalPaymentConsentRequestNotAcceptable describes a response with status code 406, with default header values.

Error
*/
type GetInternationalPaymentConsentRequestNotAcceptable struct {
	Payload *models.ErrorResponse
}

func (o *GetInternationalPaymentConsentRequestNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestNotAcceptable  %+v", 406, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestNotAcceptable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentRequestUnsupportedMediaType creates a GetInternationalPaymentConsentRequestUnsupportedMediaType with default headers values
func NewGetInternationalPaymentConsentRequestUnsupportedMediaType() *GetInternationalPaymentConsentRequestUnsupportedMediaType {
	return &GetInternationalPaymentConsentRequestUnsupportedMediaType{}
}

/* GetInternationalPaymentConsentRequestUnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type GetInternationalPaymentConsentRequestUnsupportedMediaType struct {
	Payload *models.ErrorResponse
}

func (o *GetInternationalPaymentConsentRequestUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestUnsupportedMediaType) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentRequestTooManyRequests creates a GetInternationalPaymentConsentRequestTooManyRequests with default headers values
func NewGetInternationalPaymentConsentRequestTooManyRequests() *GetInternationalPaymentConsentRequestTooManyRequests {
	return &GetInternationalPaymentConsentRequestTooManyRequests{}
}

/* GetInternationalPaymentConsentRequestTooManyRequests describes a response with status code 429, with default header values.

Error
*/
type GetInternationalPaymentConsentRequestTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *GetInternationalPaymentConsentRequestTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInternationalPaymentConsentRequestInternalServerError creates a GetInternationalPaymentConsentRequestInternalServerError with default headers values
func NewGetInternationalPaymentConsentRequestInternalServerError() *GetInternationalPaymentConsentRequestInternalServerError {
	return &GetInternationalPaymentConsentRequestInternalServerError{}
}

/* GetInternationalPaymentConsentRequestInternalServerError describes a response with status code 500, with default header values.

Error
*/
type GetInternationalPaymentConsentRequestInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *GetInternationalPaymentConsentRequestInternalServerError) Error() string {
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/international-payment-consents/{consentID}][%d] getInternationalPaymentConsentRequestInternalServerError  %+v", 500, o.Payload)
}
func (o *GetInternationalPaymentConsentRequestInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetInternationalPaymentConsentRequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
