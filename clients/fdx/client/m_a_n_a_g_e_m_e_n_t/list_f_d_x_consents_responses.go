// Code generated by go-swagger; DO NOT EDIT.

package m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/fdx/models"
)

// ListFDXConsentsReader is a Reader for the ListFDXConsents structure.
type ListFDXConsentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListFDXConsentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListFDXConsentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListFDXConsentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListFDXConsentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListFDXConsentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListFDXConsentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewListFDXConsentsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListFDXConsentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{wid}/fdx/consents] listFDXConsents", response, response.Code())
	}
}

// NewListFDXConsentsOK creates a ListFDXConsentsOK with default headers values
func NewListFDXConsentsOK() *ListFDXConsentsOK {
	return &ListFDXConsentsOK{}
}

/*
ListFDXConsentsOK describes a response with status code 200, with default header values.

FDXConsents
*/
type ListFDXConsentsOK struct {
	Payload *models.FDXConsents
}

// IsSuccess returns true when this list f d x consents o k response has a 2xx status code
func (o *ListFDXConsentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list f d x consents o k response has a 3xx status code
func (o *ListFDXConsentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list f d x consents o k response has a 4xx status code
func (o *ListFDXConsentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list f d x consents o k response has a 5xx status code
func (o *ListFDXConsentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list f d x consents o k response a status code equal to that given
func (o *ListFDXConsentsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list f d x consents o k response
func (o *ListFDXConsentsOK) Code() int {
	return 200
}

func (o *ListFDXConsentsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsOK %s", 200, payload)
}

func (o *ListFDXConsentsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsOK %s", 200, payload)
}

func (o *ListFDXConsentsOK) GetPayload() *models.FDXConsents {
	return o.Payload
}

func (o *ListFDXConsentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FDXConsents)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFDXConsentsBadRequest creates a ListFDXConsentsBadRequest with default headers values
func NewListFDXConsentsBadRequest() *ListFDXConsentsBadRequest {
	return &ListFDXConsentsBadRequest{}
}

/*
ListFDXConsentsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ListFDXConsentsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this list f d x consents bad request response has a 2xx status code
func (o *ListFDXConsentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list f d x consents bad request response has a 3xx status code
func (o *ListFDXConsentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list f d x consents bad request response has a 4xx status code
func (o *ListFDXConsentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list f d x consents bad request response has a 5xx status code
func (o *ListFDXConsentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list f d x consents bad request response a status code equal to that given
func (o *ListFDXConsentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list f d x consents bad request response
func (o *ListFDXConsentsBadRequest) Code() int {
	return 400
}

func (o *ListFDXConsentsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsBadRequest %s", 400, payload)
}

func (o *ListFDXConsentsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsBadRequest %s", 400, payload)
}

func (o *ListFDXConsentsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListFDXConsentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFDXConsentsUnauthorized creates a ListFDXConsentsUnauthorized with default headers values
func NewListFDXConsentsUnauthorized() *ListFDXConsentsUnauthorized {
	return &ListFDXConsentsUnauthorized{}
}

/*
ListFDXConsentsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListFDXConsentsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list f d x consents unauthorized response has a 2xx status code
func (o *ListFDXConsentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list f d x consents unauthorized response has a 3xx status code
func (o *ListFDXConsentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list f d x consents unauthorized response has a 4xx status code
func (o *ListFDXConsentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list f d x consents unauthorized response has a 5xx status code
func (o *ListFDXConsentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list f d x consents unauthorized response a status code equal to that given
func (o *ListFDXConsentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list f d x consents unauthorized response
func (o *ListFDXConsentsUnauthorized) Code() int {
	return 401
}

func (o *ListFDXConsentsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsUnauthorized %s", 401, payload)
}

func (o *ListFDXConsentsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsUnauthorized %s", 401, payload)
}

func (o *ListFDXConsentsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListFDXConsentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFDXConsentsForbidden creates a ListFDXConsentsForbidden with default headers values
func NewListFDXConsentsForbidden() *ListFDXConsentsForbidden {
	return &ListFDXConsentsForbidden{}
}

/*
ListFDXConsentsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListFDXConsentsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list f d x consents forbidden response has a 2xx status code
func (o *ListFDXConsentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list f d x consents forbidden response has a 3xx status code
func (o *ListFDXConsentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list f d x consents forbidden response has a 4xx status code
func (o *ListFDXConsentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list f d x consents forbidden response has a 5xx status code
func (o *ListFDXConsentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list f d x consents forbidden response a status code equal to that given
func (o *ListFDXConsentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list f d x consents forbidden response
func (o *ListFDXConsentsForbidden) Code() int {
	return 403
}

func (o *ListFDXConsentsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsForbidden %s", 403, payload)
}

func (o *ListFDXConsentsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsForbidden %s", 403, payload)
}

func (o *ListFDXConsentsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListFDXConsentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFDXConsentsNotFound creates a ListFDXConsentsNotFound with default headers values
func NewListFDXConsentsNotFound() *ListFDXConsentsNotFound {
	return &ListFDXConsentsNotFound{}
}

/*
ListFDXConsentsNotFound describes a response with status code 404, with default header values.

Not found
*/
type ListFDXConsentsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this list f d x consents not found response has a 2xx status code
func (o *ListFDXConsentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list f d x consents not found response has a 3xx status code
func (o *ListFDXConsentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list f d x consents not found response has a 4xx status code
func (o *ListFDXConsentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list f d x consents not found response has a 5xx status code
func (o *ListFDXConsentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list f d x consents not found response a status code equal to that given
func (o *ListFDXConsentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list f d x consents not found response
func (o *ListFDXConsentsNotFound) Code() int {
	return 404
}

func (o *ListFDXConsentsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsNotFound %s", 404, payload)
}

func (o *ListFDXConsentsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsNotFound %s", 404, payload)
}

func (o *ListFDXConsentsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListFDXConsentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFDXConsentsUnprocessableEntity creates a ListFDXConsentsUnprocessableEntity with default headers values
func NewListFDXConsentsUnprocessableEntity() *ListFDXConsentsUnprocessableEntity {
	return &ListFDXConsentsUnprocessableEntity{}
}

/*
ListFDXConsentsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ListFDXConsentsUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this list f d x consents unprocessable entity response has a 2xx status code
func (o *ListFDXConsentsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list f d x consents unprocessable entity response has a 3xx status code
func (o *ListFDXConsentsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list f d x consents unprocessable entity response has a 4xx status code
func (o *ListFDXConsentsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this list f d x consents unprocessable entity response has a 5xx status code
func (o *ListFDXConsentsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this list f d x consents unprocessable entity response a status code equal to that given
func (o *ListFDXConsentsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the list f d x consents unprocessable entity response
func (o *ListFDXConsentsUnprocessableEntity) Code() int {
	return 422
}

func (o *ListFDXConsentsUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsUnprocessableEntity %s", 422, payload)
}

func (o *ListFDXConsentsUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsUnprocessableEntity %s", 422, payload)
}

func (o *ListFDXConsentsUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListFDXConsentsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFDXConsentsTooManyRequests creates a ListFDXConsentsTooManyRequests with default headers values
func NewListFDXConsentsTooManyRequests() *ListFDXConsentsTooManyRequests {
	return &ListFDXConsentsTooManyRequests{}
}

/*
ListFDXConsentsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListFDXConsentsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list f d x consents too many requests response has a 2xx status code
func (o *ListFDXConsentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list f d x consents too many requests response has a 3xx status code
func (o *ListFDXConsentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list f d x consents too many requests response has a 4xx status code
func (o *ListFDXConsentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list f d x consents too many requests response has a 5xx status code
func (o *ListFDXConsentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list f d x consents too many requests response a status code equal to that given
func (o *ListFDXConsentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list f d x consents too many requests response
func (o *ListFDXConsentsTooManyRequests) Code() int {
	return 429
}

func (o *ListFDXConsentsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsTooManyRequests %s", 429, payload)
}

func (o *ListFDXConsentsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/fdx/consents][%d] listFDXConsentsTooManyRequests %s", 429, payload)
}

func (o *ListFDXConsentsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListFDXConsentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
