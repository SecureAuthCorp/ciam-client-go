// Code generated by go-swagger; DO NOT EDIT.

package m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new m a n a g e m e n t API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for m a n a g e m e n t API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ListFDXConsents(params *ListFDXConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFDXConsentsOK, error)

	RevokeFDXConsentByID(params *RevokeFDXConsentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeFDXConsentByIDNoContent, error)

	RevokeFDXConsents(params *RevokeFDXConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeFDXConsentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ListFDXConsents lists f d x consents

	Obtain the list of FDX consents.

To narrow down the list, define the required parameters in the request body.

Authorization: Bearer token.
*/
func (a *Client) ListFDXConsents(params *ListFDXConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListFDXConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFDXConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listFDXConsents",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/fdx/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListFDXConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFDXConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listFDXConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeFDXConsentByID revokes f d x consent

This API revokes a single FDX Consent with the matching consent id
*/
func (a *Client) RevokeFDXConsentByID(params *RevokeFDXConsentByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeFDXConsentByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeFDXConsentByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeFDXConsentByID",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/fdx/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeFDXConsentByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeFDXConsentByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeFDXConsentByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeFDXConsents revokes f d x consents

	This API revokes FDX consents matching provided parameters.

Currently supporting removal by client id.
RevocationDetails also have to be provided.
*/
func (a *Client) RevokeFDXConsents(params *RevokeFDXConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeFDXConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeFDXConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeFDXConsents",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/fdx/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeFDXConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeFDXConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeFDXConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
