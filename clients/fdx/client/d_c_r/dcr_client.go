// Code generated by go-swagger; DO NOT EDIT.

package d_c_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new d c r API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d c r API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FDXDynamicClientRegistration(params *FDXDynamicClientRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXDynamicClientRegistrationCreated, error)

	FDXDynamicClientRegistrationDelete(params *FDXDynamicClientRegistrationDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXDynamicClientRegistrationDeleteNoContent, error)

	FDXDynamicClientRegistrationGet(params *FDXDynamicClientRegistrationGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXDynamicClientRegistrationGetOK, error)

	FDXDynamicClientRegistrationPut(params *FDXDynamicClientRegistrationPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXDynamicClientRegistrationPutOK, error)

	FDXUpdateClientStatus(params *FDXUpdateClientStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXUpdateClientStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	FDXDynamicClientRegistration dynamics client registration

	Register a new client application dynamically.

Authorization: Bearer token.
*/
func (a *Client) FDXDynamicClientRegistration(params *FDXDynamicClientRegistrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXDynamicClientRegistrationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFDXDynamicClientRegistrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FDXDynamicClientRegistration",
		Method:             "POST",
		PathPattern:        "/fdx/dcr/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FDXDynamicClientRegistrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FDXDynamicClientRegistrationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FDXDynamicClientRegistration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	FDXDynamicClientRegistrationDelete deletes client

	Delete the registered client application details.

Pass the `Authorization: Bearer` header with a token as the bearer value. To obtain the token,
apply the [Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/)
grant type.
*/
func (a *Client) FDXDynamicClientRegistrationDelete(params *FDXDynamicClientRegistrationDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXDynamicClientRegistrationDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFDXDynamicClientRegistrationDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FDXDynamicClientRegistrationDelete",
		Method:             "DELETE",
		PathPattern:        "/fdx/dcr/register/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FDXDynamicClientRegistrationDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FDXDynamicClientRegistrationDeleteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FDXDynamicClientRegistrationDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	FDXDynamicClientRegistrationGet gets client endpoint

	Retrieve the details about a registered client application by the client identifier.

Pass the `Authorization: Bearer` header with a token as the bearer value for authorization.
To obtain the token, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/)
grant type.
*/
func (a *Client) FDXDynamicClientRegistrationGet(params *FDXDynamicClientRegistrationGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXDynamicClientRegistrationGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFDXDynamicClientRegistrationGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FDXDynamicClientRegistrationGet",
		Method:             "GET",
		PathPattern:        "/fdx/dcr/register/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FDXDynamicClientRegistrationGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FDXDynamicClientRegistrationGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FDXDynamicClientRegistrationGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	FDXDynamicClientRegistrationPut updates f d x client details

	Modify the registered client application details.

Pass the `Authorization: Bearer` header with a token as the bearer value. To obtain the token, apply
the [Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/)
grant type.
*/
func (a *Client) FDXDynamicClientRegistrationPut(params *FDXDynamicClientRegistrationPutParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXDynamicClientRegistrationPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFDXDynamicClientRegistrationPutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FDXDynamicClientRegistrationPut",
		Method:             "PUT",
		PathPattern:        "/fdx/dcr/register/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FDXDynamicClientRegistrationPutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FDXDynamicClientRegistrationPutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FDXDynamicClientRegistrationPut: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	FDXUpdateClientStatus updates f d x client status

	Update an FDX client application status.

Pass the `Authorization: Bearer` header with a token as the bearer value. To obtain the token, apply
the [Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/)
grant type.
*/
func (a *Client) FDXUpdateClientStatus(params *FDXUpdateClientStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FDXUpdateClientStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFDXUpdateClientStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "FDXUpdateClientStatus",
		Method:             "PUT",
		PathPattern:        "/fdx/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FDXUpdateClientStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FDXUpdateClientStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for FDXUpdateClientStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
