// Code generated by go-swagger; DO NOT EDIT.

package f_d_x

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/fdx/models"
)

// GetFDXConsentReader is a Reader for the GetFDXConsent structure.
type GetFDXConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFDXConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFDXConsentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFDXConsentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFDXConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFDXConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /consents/{consentID}] getFDXConsent", response, response.Code())
	}
}

// NewGetFDXConsentOK creates a GetFDXConsentOK with default headers values
func NewGetFDXConsentOK() *GetFDXConsentOK {
	return &GetFDXConsentOK{}
}

/*
GetFDXConsentOK describes a response with status code 200, with default header values.

GetFDXConsent
*/
type GetFDXConsentOK struct {
	Payload *models.GetFDXConsent
}

// IsSuccess returns true when this get f d x consent o k response has a 2xx status code
func (o *GetFDXConsentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get f d x consent o k response has a 3xx status code
func (o *GetFDXConsentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get f d x consent o k response has a 4xx status code
func (o *GetFDXConsentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get f d x consent o k response has a 5xx status code
func (o *GetFDXConsentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get f d x consent o k response a status code equal to that given
func (o *GetFDXConsentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get f d x consent o k response
func (o *GetFDXConsentOK) Code() int {
	return 200
}

func (o *GetFDXConsentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consentID}][%d] getFDXConsentOK %s", 200, payload)
}

func (o *GetFDXConsentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consentID}][%d] getFDXConsentOK %s", 200, payload)
}

func (o *GetFDXConsentOK) GetPayload() *models.GetFDXConsent {
	return o.Payload
}

func (o *GetFDXConsentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetFDXConsent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFDXConsentBadRequest creates a GetFDXConsentBadRequest with default headers values
func NewGetFDXConsentBadRequest() *GetFDXConsentBadRequest {
	return &GetFDXConsentBadRequest{}
}

/*
GetFDXConsentBadRequest describes a response with status code 400, with default header values.

FDX Error
*/
type GetFDXConsentBadRequest struct {
	Payload *models.FDXErrorResponse
}

// IsSuccess returns true when this get f d x consent bad request response has a 2xx status code
func (o *GetFDXConsentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get f d x consent bad request response has a 3xx status code
func (o *GetFDXConsentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get f d x consent bad request response has a 4xx status code
func (o *GetFDXConsentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get f d x consent bad request response has a 5xx status code
func (o *GetFDXConsentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get f d x consent bad request response a status code equal to that given
func (o *GetFDXConsentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get f d x consent bad request response
func (o *GetFDXConsentBadRequest) Code() int {
	return 400
}

func (o *GetFDXConsentBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consentID}][%d] getFDXConsentBadRequest %s", 400, payload)
}

func (o *GetFDXConsentBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consentID}][%d] getFDXConsentBadRequest %s", 400, payload)
}

func (o *GetFDXConsentBadRequest) GetPayload() *models.FDXErrorResponse {
	return o.Payload
}

func (o *GetFDXConsentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FDXErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFDXConsentUnauthorized creates a GetFDXConsentUnauthorized with default headers values
func NewGetFDXConsentUnauthorized() *GetFDXConsentUnauthorized {
	return &GetFDXConsentUnauthorized{}
}

/*
GetFDXConsentUnauthorized describes a response with status code 401, with default header values.

FDX Error
*/
type GetFDXConsentUnauthorized struct {
	Payload *models.FDXErrorResponse
}

// IsSuccess returns true when this get f d x consent unauthorized response has a 2xx status code
func (o *GetFDXConsentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get f d x consent unauthorized response has a 3xx status code
func (o *GetFDXConsentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get f d x consent unauthorized response has a 4xx status code
func (o *GetFDXConsentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get f d x consent unauthorized response has a 5xx status code
func (o *GetFDXConsentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get f d x consent unauthorized response a status code equal to that given
func (o *GetFDXConsentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get f d x consent unauthorized response
func (o *GetFDXConsentUnauthorized) Code() int {
	return 401
}

func (o *GetFDXConsentUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consentID}][%d] getFDXConsentUnauthorized %s", 401, payload)
}

func (o *GetFDXConsentUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consentID}][%d] getFDXConsentUnauthorized %s", 401, payload)
}

func (o *GetFDXConsentUnauthorized) GetPayload() *models.FDXErrorResponse {
	return o.Payload
}

func (o *GetFDXConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FDXErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFDXConsentNotFound creates a GetFDXConsentNotFound with default headers values
func NewGetFDXConsentNotFound() *GetFDXConsentNotFound {
	return &GetFDXConsentNotFound{}
}

/*
GetFDXConsentNotFound describes a response with status code 404, with default header values.

FDX Error
*/
type GetFDXConsentNotFound struct {
	Payload *models.FDXErrorResponse
}

// IsSuccess returns true when this get f d x consent not found response has a 2xx status code
func (o *GetFDXConsentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get f d x consent not found response has a 3xx status code
func (o *GetFDXConsentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get f d x consent not found response has a 4xx status code
func (o *GetFDXConsentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get f d x consent not found response has a 5xx status code
func (o *GetFDXConsentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get f d x consent not found response a status code equal to that given
func (o *GetFDXConsentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get f d x consent not found response
func (o *GetFDXConsentNotFound) Code() int {
	return 404
}

func (o *GetFDXConsentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consentID}][%d] getFDXConsentNotFound %s", 404, payload)
}

func (o *GetFDXConsentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consentID}][%d] getFDXConsentNotFound %s", 404, payload)
}

func (o *GetFDXConsentNotFound) GetPayload() *models.FDXErrorResponse {
	return o.Payload
}

func (o *GetFDXConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FDXErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
