// Code generated by go-swagger; DO NOT EDIT.

package f_d_x

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFDXConsentRevocationParams creates a new GetFDXConsentRevocationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFDXConsentRevocationParams() *GetFDXConsentRevocationParams {
	return &GetFDXConsentRevocationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFDXConsentRevocationParamsWithTimeout creates a new GetFDXConsentRevocationParams object
// with the ability to set a timeout on a request.
func NewGetFDXConsentRevocationParamsWithTimeout(timeout time.Duration) *GetFDXConsentRevocationParams {
	return &GetFDXConsentRevocationParams{
		timeout: timeout,
	}
}

// NewGetFDXConsentRevocationParamsWithContext creates a new GetFDXConsentRevocationParams object
// with the ability to set a context for a request.
func NewGetFDXConsentRevocationParamsWithContext(ctx context.Context) *GetFDXConsentRevocationParams {
	return &GetFDXConsentRevocationParams{
		Context: ctx,
	}
}

// NewGetFDXConsentRevocationParamsWithHTTPClient creates a new GetFDXConsentRevocationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFDXConsentRevocationParamsWithHTTPClient(client *http.Client) *GetFDXConsentRevocationParams {
	return &GetFDXConsentRevocationParams{
		HTTPClient: client,
	}
}

/*
GetFDXConsentRevocationParams contains all the parameters to send to the API endpoint

	for the get f d x consent revocation operation.

	Typically these are written to a http.Request.
*/
type GetFDXConsentRevocationParams struct {

	/* ConsentID.

	   Consent id

	   Default: "default"
	*/
	ConsentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get f d x consent revocation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFDXConsentRevocationParams) WithDefaults() *GetFDXConsentRevocationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get f d x consent revocation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFDXConsentRevocationParams) SetDefaults() {
	var (
		consentIDDefault = string("default")
	)

	val := GetFDXConsentRevocationParams{
		ConsentID: consentIDDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get f d x consent revocation params
func (o *GetFDXConsentRevocationParams) WithTimeout(timeout time.Duration) *GetFDXConsentRevocationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get f d x consent revocation params
func (o *GetFDXConsentRevocationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get f d x consent revocation params
func (o *GetFDXConsentRevocationParams) WithContext(ctx context.Context) *GetFDXConsentRevocationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get f d x consent revocation params
func (o *GetFDXConsentRevocationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get f d x consent revocation params
func (o *GetFDXConsentRevocationParams) WithHTTPClient(client *http.Client) *GetFDXConsentRevocationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get f d x consent revocation params
func (o *GetFDXConsentRevocationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConsentID adds the consentID to the get f d x consent revocation params
func (o *GetFDXConsentRevocationParams) WithConsentID(consentID string) *GetFDXConsentRevocationParams {
	o.SetConsentID(consentID)
	return o
}

// SetConsentID adds the consentId to the get f d x consent revocation params
func (o *GetFDXConsentRevocationParams) SetConsentID(consentID string) {
	o.ConsentID = consentID
}

// WriteToRequest writes these params to a swagger request
func (o *GetFDXConsentRevocationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param consentID
	if err := r.SetPathParam("consentID", o.ConsentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
