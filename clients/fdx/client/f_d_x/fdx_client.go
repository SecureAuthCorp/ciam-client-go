// Code generated by go-swagger; DO NOT EDIT.

package f_d_x

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new f d x API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for f d x API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	FdxConsentIntrospect(params *FdxConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FdxConsentIntrospectOK, error)

	GetFDXConsent(params *GetFDXConsentParams, opts ...ClientOption) (*GetFDXConsentOK, error)

	GetFDXConsentRevocation(params *GetFDXConsentRevocationParams, opts ...ClientOption) (*GetFDXConsentRevocationOK, error)

	RevokeFDXConsent(params *RevokeFDXConsentParams, opts ...ClientOption) (*RevokeFDXConsentNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	FdxConsentIntrospect introspects f d x consent

	Accepts an OAuth 2.0 token and returns meta information surrounding the token along with the FDX consent.

Authorization: Bearer token.
*/
func (a *Client) FdxConsentIntrospect(params *FdxConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FdxConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFdxConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fdxConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/fdx/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FdxConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FdxConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fdxConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFDXConsent gets a consent grant

Get a Consent Grant
*/
func (a *Client) GetFDXConsent(params *GetFDXConsentParams, opts ...ClientOption) (*GetFDXConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFDXConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFDXConsent",
		Method:             "GET",
		PathPattern:        "/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFDXConsentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFDXConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFDXConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetFDXConsentRevocation retrieves consent revocation record

	This API can be used used to get information about consent revocation.

404 response code is returned in two cases:
when consent does not exists or consent is not revoked
*/
func (a *Client) GetFDXConsentRevocation(params *GetFDXConsentRevocationParams, opts ...ClientOption) (*GetFDXConsentRevocationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFDXConsentRevocationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFDXConsentRevocation",
		Method:             "GET",
		PathPattern:        "/consents/{consentID}/revocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFDXConsentRevocationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFDXConsentRevocationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFDXConsentRevocation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeFDXConsent revokes a consent

	This API can be used used to revoke user's consent.

As a result consent's state is changed to REVOKED
and revocation reason and initiator passed in request body are saved.
*/
func (a *Client) RevokeFDXConsent(params *RevokeFDXConsentParams, opts ...ClientOption) (*RevokeFDXConsentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeFDXConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeFDXConsent",
		Method:             "PUT",
		PathPattern:        "/consents/{consentID}/revocation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeFDXConsentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeFDXConsentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeFDXConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
