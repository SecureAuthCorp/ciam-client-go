// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AcceptFDXConsentRequest accept f d x consent request
//
// swagger:model AcceptFDXConsentRequest
type AcceptFDXConsentRequest struct {

	// granted scopes
	GrantedScopes GrantedScopes `json:"granted_scopes,omitempty"`

	// login state
	LoginState string `json:"login_state,omitempty"`

	// resources
	Resources []*FDXResource `json:"resources"`
}

// Validate validates this accept f d x consent request
func (m *AcceptFDXConsentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGrantedScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcceptFDXConsentRequest) validateGrantedScopes(formats strfmt.Registry) error {
	if swag.IsZero(m.GrantedScopes) { // not required
		return nil
	}

	if err := m.GrantedScopes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("granted_scopes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("granted_scopes")
		}
		return err
	}

	return nil
}

func (m *AcceptFDXConsentRequest) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this accept f d x consent request based on the context it is used
func (m *AcceptFDXConsentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGrantedScopes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcceptFDXConsentRequest) contextValidateGrantedScopes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GrantedScopes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("granted_scopes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("granted_scopes")
		}
		return err
	}

	return nil
}

func (m *AcceptFDXConsentRequest) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {

			if swag.IsZero(m.Resources[i]) { // not required
				return nil
			}

			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AcceptFDXConsentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AcceptFDXConsentRequest) UnmarshalBinary(b []byte) error {
	var res AcceptFDXConsentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
