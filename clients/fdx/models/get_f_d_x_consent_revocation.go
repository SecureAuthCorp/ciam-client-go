// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFDXConsentRevocation get f d x consent revocation
//
// swagger:model GetFDXConsentRevocation
type GetFDXConsentRevocation struct {

	// Consent revocation initiator
	// Example: DATA_RECIPIENT
	// Enum: [DATA_ACCESS_PLATFORM DATA_PROVIDER DATA_RECIPIENT INDIVIDUAL MERCHANT VENDOR]
	Initiator string `json:"initiator,omitempty" yaml:"initiator,omitempty"`

	// Consent revocation reason
	// Example: BUSINESS_RULE
	// Enum: [BUSINESS_RULE USER_ACTION]
	Reason string `json:"reason,omitempty" yaml:"reason,omitempty"`

	// status
	Status FDXConsentGrantStatus `json:"status,omitempty" yaml:"status,omitempty"`

	// Time of last consent's status change
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updatedTime,omitempty" yaml:"updatedTime,omitempty"`
}

// Validate validates this get f d x consent revocation
func (m *GetFDXConsentRevocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getFDXConsentRevocationTypeInitiatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DATA_ACCESS_PLATFORM","DATA_PROVIDER","DATA_RECIPIENT","INDIVIDUAL","MERCHANT","VENDOR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getFDXConsentRevocationTypeInitiatorPropEnum = append(getFDXConsentRevocationTypeInitiatorPropEnum, v)
	}
}

const (

	// GetFDXConsentRevocationInitiatorDATAACCESSPLATFORM captures enum value "DATA_ACCESS_PLATFORM"
	GetFDXConsentRevocationInitiatorDATAACCESSPLATFORM string = "DATA_ACCESS_PLATFORM"

	// GetFDXConsentRevocationInitiatorDATAPROVIDER captures enum value "DATA_PROVIDER"
	GetFDXConsentRevocationInitiatorDATAPROVIDER string = "DATA_PROVIDER"

	// GetFDXConsentRevocationInitiatorDATARECIPIENT captures enum value "DATA_RECIPIENT"
	GetFDXConsentRevocationInitiatorDATARECIPIENT string = "DATA_RECIPIENT"

	// GetFDXConsentRevocationInitiatorINDIVIDUAL captures enum value "INDIVIDUAL"
	GetFDXConsentRevocationInitiatorINDIVIDUAL string = "INDIVIDUAL"

	// GetFDXConsentRevocationInitiatorMERCHANT captures enum value "MERCHANT"
	GetFDXConsentRevocationInitiatorMERCHANT string = "MERCHANT"

	// GetFDXConsentRevocationInitiatorVENDOR captures enum value "VENDOR"
	GetFDXConsentRevocationInitiatorVENDOR string = "VENDOR"
)

// prop value enum
func (m *GetFDXConsentRevocation) validateInitiatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getFDXConsentRevocationTypeInitiatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetFDXConsentRevocation) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	// value enum
	if err := m.validateInitiatorEnum("initiator", "body", m.Initiator); err != nil {
		return err
	}

	return nil
}

var getFDXConsentRevocationTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUSINESS_RULE","USER_ACTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getFDXConsentRevocationTypeReasonPropEnum = append(getFDXConsentRevocationTypeReasonPropEnum, v)
	}
}

const (

	// GetFDXConsentRevocationReasonBUSINESSRULE captures enum value "BUSINESS_RULE"
	GetFDXConsentRevocationReasonBUSINESSRULE string = "BUSINESS_RULE"

	// GetFDXConsentRevocationReasonUSERACTION captures enum value "USER_ACTION"
	GetFDXConsentRevocationReasonUSERACTION string = "USER_ACTION"
)

// prop value enum
func (m *GetFDXConsentRevocation) validateReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getFDXConsentRevocationTypeReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetFDXConsentRevocation) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

func (m *GetFDXConsentRevocation) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *GetFDXConsentRevocation) validateUpdatedTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedTime", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get f d x consent revocation based on the context it is used
func (m *GetFDXConsentRevocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFDXConsentRevocation) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetFDXConsentRevocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetFDXConsentRevocation) UnmarshalBinary(b []byte) error {
	var res GetFDXConsentRevocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
