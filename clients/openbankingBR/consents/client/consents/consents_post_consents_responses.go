// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/openbankingBR/consents/models"
)

// ConsentsPostConsentsReader is a Reader for the ConsentsPostConsents structure.
type ConsentsPostConsentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConsentsPostConsentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewConsentsPostConsentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConsentsPostConsentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewConsentsPostConsentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConsentsPostConsentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConsentsPostConsentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewConsentsPostConsentsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewConsentsPostConsentsNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConsentsPostConsentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewConsentsPostConsentsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConsentsPostConsentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConsentsPostConsentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewConsentsPostConsentsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewConsentsPostConsentsCreated creates a ConsentsPostConsentsCreated with default headers values
func NewConsentsPostConsentsCreated() *ConsentsPostConsentsCreated {
	var (
		// initialize headers with default values
		xFapiInteractionIDDefault = string("73cac523-d3ae-2289-b106-330a6218710d")
	)

	return &ConsentsPostConsentsCreated{

		XFapiInteractionID: xFapiInteractionIDDefault,
	}
}

/*
ConsentsPostConsentsCreated describes a response with status code 201, with default header values.

Consentimento criado com sucesso.
*/
type ConsentsPostConsentsCreated struct {

	/* Um UID [RFC4122](https://tools.ietf.org/html/rfc4122) usado como um ID de correlao.
	Se fornecido, o transmissor deve "reproduzir" esse valor no cabealho de resposta.


	     Default: "73cac523-d3ae-2289-b106-330a6218710d"
	*/
	XFapiInteractionID string

	Payload *models.ResponseConsent
}

// IsSuccess returns true when this consents post consents created response has a 2xx status code
func (o *ConsentsPostConsentsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this consents post consents created response has a 3xx status code
func (o *ConsentsPostConsentsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents created response has a 4xx status code
func (o *ConsentsPostConsentsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this consents post consents created response has a 5xx status code
func (o *ConsentsPostConsentsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents created response a status code equal to that given
func (o *ConsentsPostConsentsCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the consents post consents created response
func (o *ConsentsPostConsentsCreated) Code() int {
	return 201
}

func (o *ConsentsPostConsentsCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsCreated %s", 201, payload)
}

func (o *ConsentsPostConsentsCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsCreated %s", 201, payload)
}

func (o *ConsentsPostConsentsCreated) GetPayload() *models.ResponseConsent {
	return o.Payload
}

func (o *ConsentsPostConsentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-fapi-interaction-id
	hdrXFapiInteractionID := response.GetHeader("x-fapi-interaction-id")

	if hdrXFapiInteractionID != "" {
		o.XFapiInteractionID = hdrXFapiInteractionID
	}

	o.Payload = new(models.ResponseConsent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsBadRequest creates a ConsentsPostConsentsBadRequest with default headers values
func NewConsentsPostConsentsBadRequest() *ConsentsPostConsentsBadRequest {
	return &ConsentsPostConsentsBadRequest{}
}

/*
ConsentsPostConsentsBadRequest describes a response with status code 400, with default header values.

A requisio foi malformada, omitindo atributos obrigatrios, seja no payload ou atravs de atributos na URL.
*/
type ConsentsPostConsentsBadRequest struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents bad request response has a 2xx status code
func (o *ConsentsPostConsentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents bad request response has a 3xx status code
func (o *ConsentsPostConsentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents bad request response has a 4xx status code
func (o *ConsentsPostConsentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents bad request response has a 5xx status code
func (o *ConsentsPostConsentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents bad request response a status code equal to that given
func (o *ConsentsPostConsentsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the consents post consents bad request response
func (o *ConsentsPostConsentsBadRequest) Code() int {
	return 400
}

func (o *ConsentsPostConsentsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsBadRequest %s", 400, payload)
}

func (o *ConsentsPostConsentsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsBadRequest %s", 400, payload)
}

func (o *ConsentsPostConsentsBadRequest) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsUnauthorized creates a ConsentsPostConsentsUnauthorized with default headers values
func NewConsentsPostConsentsUnauthorized() *ConsentsPostConsentsUnauthorized {
	return &ConsentsPostConsentsUnauthorized{}
}

/*
ConsentsPostConsentsUnauthorized describes a response with status code 401, with default header values.

Cabealho de autenticao ausente/invlido ou token invlido
*/
type ConsentsPostConsentsUnauthorized struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents unauthorized response has a 2xx status code
func (o *ConsentsPostConsentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents unauthorized response has a 3xx status code
func (o *ConsentsPostConsentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents unauthorized response has a 4xx status code
func (o *ConsentsPostConsentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents unauthorized response has a 5xx status code
func (o *ConsentsPostConsentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents unauthorized response a status code equal to that given
func (o *ConsentsPostConsentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the consents post consents unauthorized response
func (o *ConsentsPostConsentsUnauthorized) Code() int {
	return 401
}

func (o *ConsentsPostConsentsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnauthorized %s", 401, payload)
}

func (o *ConsentsPostConsentsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnauthorized %s", 401, payload)
}

func (o *ConsentsPostConsentsUnauthorized) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsForbidden creates a ConsentsPostConsentsForbidden with default headers values
func NewConsentsPostConsentsForbidden() *ConsentsPostConsentsForbidden {
	return &ConsentsPostConsentsForbidden{}
}

/*
ConsentsPostConsentsForbidden describes a response with status code 403, with default header values.

O token tem escopo incorreto ou uma poltica de segurana foi violada
*/
type ConsentsPostConsentsForbidden struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents forbidden response has a 2xx status code
func (o *ConsentsPostConsentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents forbidden response has a 3xx status code
func (o *ConsentsPostConsentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents forbidden response has a 4xx status code
func (o *ConsentsPostConsentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents forbidden response has a 5xx status code
func (o *ConsentsPostConsentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents forbidden response a status code equal to that given
func (o *ConsentsPostConsentsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the consents post consents forbidden response
func (o *ConsentsPostConsentsForbidden) Code() int {
	return 403
}

func (o *ConsentsPostConsentsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsForbidden %s", 403, payload)
}

func (o *ConsentsPostConsentsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsForbidden %s", 403, payload)
}

func (o *ConsentsPostConsentsForbidden) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsNotFound creates a ConsentsPostConsentsNotFound with default headers values
func NewConsentsPostConsentsNotFound() *ConsentsPostConsentsNotFound {
	return &ConsentsPostConsentsNotFound{}
}

/*
ConsentsPostConsentsNotFound describes a response with status code 404, with default header values.

O recurso solicitado no existe ou no foi implementado
*/
type ConsentsPostConsentsNotFound struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents not found response has a 2xx status code
func (o *ConsentsPostConsentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents not found response has a 3xx status code
func (o *ConsentsPostConsentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents not found response has a 4xx status code
func (o *ConsentsPostConsentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents not found response has a 5xx status code
func (o *ConsentsPostConsentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents not found response a status code equal to that given
func (o *ConsentsPostConsentsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the consents post consents not found response
func (o *ConsentsPostConsentsNotFound) Code() int {
	return 404
}

func (o *ConsentsPostConsentsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsNotFound %s", 404, payload)
}

func (o *ConsentsPostConsentsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsNotFound %s", 404, payload)
}

func (o *ConsentsPostConsentsNotFound) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsMethodNotAllowed creates a ConsentsPostConsentsMethodNotAllowed with default headers values
func NewConsentsPostConsentsMethodNotAllowed() *ConsentsPostConsentsMethodNotAllowed {
	return &ConsentsPostConsentsMethodNotAllowed{}
}

/*
ConsentsPostConsentsMethodNotAllowed describes a response with status code 405, with default header values.

O consumidor tentou acessar o recurso com um mtodo no suportado
*/
type ConsentsPostConsentsMethodNotAllowed struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents method not allowed response has a 2xx status code
func (o *ConsentsPostConsentsMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents method not allowed response has a 3xx status code
func (o *ConsentsPostConsentsMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents method not allowed response has a 4xx status code
func (o *ConsentsPostConsentsMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents method not allowed response has a 5xx status code
func (o *ConsentsPostConsentsMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents method not allowed response a status code equal to that given
func (o *ConsentsPostConsentsMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the consents post consents method not allowed response
func (o *ConsentsPostConsentsMethodNotAllowed) Code() int {
	return 405
}

func (o *ConsentsPostConsentsMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsMethodNotAllowed %s", 405, payload)
}

func (o *ConsentsPostConsentsMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsMethodNotAllowed %s", 405, payload)
}

func (o *ConsentsPostConsentsMethodNotAllowed) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsNotAcceptable creates a ConsentsPostConsentsNotAcceptable with default headers values
func NewConsentsPostConsentsNotAcceptable() *ConsentsPostConsentsNotAcceptable {
	return &ConsentsPostConsentsNotAcceptable{}
}

/*
ConsentsPostConsentsNotAcceptable describes a response with status code 406, with default header values.

A solicitao continha um cabealho Accept diferente dos tipos de mdia permitidos ou um conjunto de caracteres diferente de UTF-8
*/
type ConsentsPostConsentsNotAcceptable struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents not acceptable response has a 2xx status code
func (o *ConsentsPostConsentsNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents not acceptable response has a 3xx status code
func (o *ConsentsPostConsentsNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents not acceptable response has a 4xx status code
func (o *ConsentsPostConsentsNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents not acceptable response has a 5xx status code
func (o *ConsentsPostConsentsNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents not acceptable response a status code equal to that given
func (o *ConsentsPostConsentsNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the consents post consents not acceptable response
func (o *ConsentsPostConsentsNotAcceptable) Code() int {
	return 406
}

func (o *ConsentsPostConsentsNotAcceptable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsNotAcceptable %s", 406, payload)
}

func (o *ConsentsPostConsentsNotAcceptable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsNotAcceptable %s", 406, payload)
}

func (o *ConsentsPostConsentsNotAcceptable) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsUnsupportedMediaType creates a ConsentsPostConsentsUnsupportedMediaType with default headers values
func NewConsentsPostConsentsUnsupportedMediaType() *ConsentsPostConsentsUnsupportedMediaType {
	return &ConsentsPostConsentsUnsupportedMediaType{}
}

/*
ConsentsPostConsentsUnsupportedMediaType describes a response with status code 415, with default header values.

O formato do payload no  um formato suportado.
*/
type ConsentsPostConsentsUnsupportedMediaType struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents unsupported media type response has a 2xx status code
func (o *ConsentsPostConsentsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents unsupported media type response has a 3xx status code
func (o *ConsentsPostConsentsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents unsupported media type response has a 4xx status code
func (o *ConsentsPostConsentsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents unsupported media type response has a 5xx status code
func (o *ConsentsPostConsentsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents unsupported media type response a status code equal to that given
func (o *ConsentsPostConsentsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the consents post consents unsupported media type response
func (o *ConsentsPostConsentsUnsupportedMediaType) Code() int {
	return 415
}

func (o *ConsentsPostConsentsUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnsupportedMediaType %s", 415, payload)
}

func (o *ConsentsPostConsentsUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnsupportedMediaType %s", 415, payload)
}

func (o *ConsentsPostConsentsUnsupportedMediaType) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsUnprocessableEntity creates a ConsentsPostConsentsUnprocessableEntity with default headers values
func NewConsentsPostConsentsUnprocessableEntity() *ConsentsPostConsentsUnprocessableEntity {
	return &ConsentsPostConsentsUnprocessableEntity{}
}

/*
ConsentsPostConsentsUnprocessableEntity describes a response with status code 422, with default header values.

A sintaxe da requisio esta correta, mas no foi possvel processar as instrues presentes.
*/
type ConsentsPostConsentsUnprocessableEntity struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents unprocessable entity response has a 2xx status code
func (o *ConsentsPostConsentsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents unprocessable entity response has a 3xx status code
func (o *ConsentsPostConsentsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents unprocessable entity response has a 4xx status code
func (o *ConsentsPostConsentsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents unprocessable entity response has a 5xx status code
func (o *ConsentsPostConsentsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents unprocessable entity response a status code equal to that given
func (o *ConsentsPostConsentsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the consents post consents unprocessable entity response
func (o *ConsentsPostConsentsUnprocessableEntity) Code() int {
	return 422
}

func (o *ConsentsPostConsentsUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnprocessableEntity %s", 422, payload)
}

func (o *ConsentsPostConsentsUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsUnprocessableEntity %s", 422, payload)
}

func (o *ConsentsPostConsentsUnprocessableEntity) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsTooManyRequests creates a ConsentsPostConsentsTooManyRequests with default headers values
func NewConsentsPostConsentsTooManyRequests() *ConsentsPostConsentsTooManyRequests {
	return &ConsentsPostConsentsTooManyRequests{}
}

/*
ConsentsPostConsentsTooManyRequests describes a response with status code 429, with default header values.

A operao foi recusada, pois muitas solicitaes foram feitas dentro de um determinado perodo ou o limite global de requisies concorrentes foi atingido
*/
type ConsentsPostConsentsTooManyRequests struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents too many requests response has a 2xx status code
func (o *ConsentsPostConsentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents too many requests response has a 3xx status code
func (o *ConsentsPostConsentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents too many requests response has a 4xx status code
func (o *ConsentsPostConsentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this consents post consents too many requests response has a 5xx status code
func (o *ConsentsPostConsentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this consents post consents too many requests response a status code equal to that given
func (o *ConsentsPostConsentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the consents post consents too many requests response
func (o *ConsentsPostConsentsTooManyRequests) Code() int {
	return 429
}

func (o *ConsentsPostConsentsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsTooManyRequests %s", 429, payload)
}

func (o *ConsentsPostConsentsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsTooManyRequests %s", 429, payload)
}

func (o *ConsentsPostConsentsTooManyRequests) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsInternalServerError creates a ConsentsPostConsentsInternalServerError with default headers values
func NewConsentsPostConsentsInternalServerError() *ConsentsPostConsentsInternalServerError {
	return &ConsentsPostConsentsInternalServerError{}
}

/*
ConsentsPostConsentsInternalServerError describes a response with status code 500, with default header values.

Ocorreu um erro no gateway da API ou no microsservio
*/
type ConsentsPostConsentsInternalServerError struct {
	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents internal server error response has a 2xx status code
func (o *ConsentsPostConsentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this consents post consents internal server error response has a 3xx status code
func (o *ConsentsPostConsentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this consents post consents internal server error response has a 4xx status code
func (o *ConsentsPostConsentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this consents post consents internal server error response has a 5xx status code
func (o *ConsentsPostConsentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this consents post consents internal server error response a status code equal to that given
func (o *ConsentsPostConsentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the consents post consents internal server error response
func (o *ConsentsPostConsentsInternalServerError) Code() int {
	return 500
}

func (o *ConsentsPostConsentsInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsInternalServerError %s", 500, payload)
}

func (o *ConsentsPostConsentsInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsentsInternalServerError %s", 500, payload)
}

func (o *ConsentsPostConsentsInternalServerError) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsPostConsentsDefault creates a ConsentsPostConsentsDefault with default headers values
func NewConsentsPostConsentsDefault(code int) *ConsentsPostConsentsDefault {
	return &ConsentsPostConsentsDefault{
		_statusCode: code,
	}
}

/*
ConsentsPostConsentsDefault describes a response with status code -1, with default header values.

Erro inesperado.
*/
type ConsentsPostConsentsDefault struct {
	_statusCode int

	Payload *models.ResponseError
}

// IsSuccess returns true when this consents post consents default response has a 2xx status code
func (o *ConsentsPostConsentsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this consents post consents default response has a 3xx status code
func (o *ConsentsPostConsentsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this consents post consents default response has a 4xx status code
func (o *ConsentsPostConsentsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this consents post consents default response has a 5xx status code
func (o *ConsentsPostConsentsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this consents post consents default response a status code equal to that given
func (o *ConsentsPostConsentsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the consents post consents default response
func (o *ConsentsPostConsentsDefault) Code() int {
	return o._statusCode
}

func (o *ConsentsPostConsentsDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsents default %s", o._statusCode, payload)
}

func (o *ConsentsPostConsentsDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] consentsPostConsents default %s", o._statusCode, payload)
}

func (o *ConsentsPostConsentsDefault) GetPayload() *models.ResponseError {
	return o.Payload
}

func (o *ConsentsPostConsentsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
