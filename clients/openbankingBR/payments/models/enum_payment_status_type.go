// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EnumPaymentStatusType EnumPaymentStatusType
//
// Estado atual da iniciao de pagamento. O estado evolui na seguinte ordem:
// 1. PDNG (PENDING) - Iniciao de pagamento ou transao de pagamento est pendente. Checagens adicionais em realizao.
// 2. PART (PARTIALLY ACCEPTED) - Aguardando autorizao mltipla alada.
// 3. ACSP (ACCEPTED_SETTLEMENT_IN_PROCESS) - Iniciao de pagamento aceita e processamento do pagamento foi iniciado.
// 4. ACSC (ACCEPTED_SETTLEMENT_COMPLETED_DEBITOR_ACCOUNT) - Dbito realizado na conta do pagador.
// 5. ACCC (ACCEPTED_SETTLEMENT_COMPLETED) - Crdito realizado na instituio de destino.
// Em caso insucesso:
// RJCT (REJECTED) - Instruo de pagamento rejeitada.
//
// swagger:model EnumPaymentStatusType
type EnumPaymentStatusType string

func NewEnumPaymentStatusType(value EnumPaymentStatusType) *EnumPaymentStatusType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EnumPaymentStatusType.
func (m EnumPaymentStatusType) Pointer() *EnumPaymentStatusType {
	return &m
}

const (

	// EnumPaymentStatusTypePDNG captures enum value "PDNG"
	EnumPaymentStatusTypePDNG EnumPaymentStatusType = "PDNG"

	// EnumPaymentStatusTypePART captures enum value "PART"
	EnumPaymentStatusTypePART EnumPaymentStatusType = "PART"

	// EnumPaymentStatusTypeACSP captures enum value "ACSP"
	EnumPaymentStatusTypeACSP EnumPaymentStatusType = "ACSP"

	// EnumPaymentStatusTypeACSC captures enum value "ACSC"
	EnumPaymentStatusTypeACSC EnumPaymentStatusType = "ACSC"

	// EnumPaymentStatusTypeACCC captures enum value "ACCC"
	EnumPaymentStatusTypeACCC EnumPaymentStatusType = "ACCC"

	// EnumPaymentStatusTypeRJCT captures enum value "RJCT"
	EnumPaymentStatusTypeRJCT EnumPaymentStatusType = "RJCT"
)

// for schema
var enumPaymentStatusTypeEnum []interface{}

func init() {
	var res []EnumPaymentStatusType
	if err := json.Unmarshal([]byte(`["PDNG","PART","ACSP","ACSC","ACCC","RJCT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enumPaymentStatusTypeEnum = append(enumPaymentStatusTypeEnum, v)
	}
}

func (m EnumPaymentStatusType) validateEnumPaymentStatusTypeEnum(path, location string, value EnumPaymentStatusType) error {
	if err := validate.EnumCase(path, location, value, enumPaymentStatusTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this enum payment status type
func (m EnumPaymentStatusType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEnumPaymentStatusTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this enum payment status type based on context it is used
func (m EnumPaymentStatusType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
