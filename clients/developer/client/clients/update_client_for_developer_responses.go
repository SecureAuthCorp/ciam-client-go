// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/developer/models"
)

// UpdateClientForDeveloperReader is a Reader for the UpdateClientForDeveloper structure.
type UpdateClientForDeveloperReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateClientForDeveloperReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateClientForDeveloperOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateClientForDeveloperBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateClientForDeveloperUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateClientForDeveloperForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateClientForDeveloperNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateClientForDeveloperUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateClientForDeveloperTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /clients/{cid}] updateClientForDeveloper", response, response.Code())
	}
}

// NewUpdateClientForDeveloperOK creates a UpdateClientForDeveloperOK with default headers values
func NewUpdateClientForDeveloperOK() *UpdateClientForDeveloperOK {
	return &UpdateClientForDeveloperOK{}
}

/*
UpdateClientForDeveloperOK describes a response with status code 200, with default header values.

Update client
*/
type UpdateClientForDeveloperOK struct {
	Payload *models.ClientDeveloperResponse
}

// IsSuccess returns true when this update client for developer o k response has a 2xx status code
func (o *UpdateClientForDeveloperOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update client for developer o k response has a 3xx status code
func (o *UpdateClientForDeveloperOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client for developer o k response has a 4xx status code
func (o *UpdateClientForDeveloperOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update client for developer o k response has a 5xx status code
func (o *UpdateClientForDeveloperOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update client for developer o k response a status code equal to that given
func (o *UpdateClientForDeveloperOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update client for developer o k response
func (o *UpdateClientForDeveloperOK) Code() int {
	return 200
}

func (o *UpdateClientForDeveloperOK) Error() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperOK  %+v", 200, o.Payload)
}

func (o *UpdateClientForDeveloperOK) String() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperOK  %+v", 200, o.Payload)
}

func (o *UpdateClientForDeveloperOK) GetPayload() *models.ClientDeveloperResponse {
	return o.Payload
}

func (o *UpdateClientForDeveloperOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClientDeveloperResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperBadRequest creates a UpdateClientForDeveloperBadRequest with default headers values
func NewUpdateClientForDeveloperBadRequest() *UpdateClientForDeveloperBadRequest {
	return &UpdateClientForDeveloperBadRequest{}
}

/*
UpdateClientForDeveloperBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateClientForDeveloperBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client for developer bad request response has a 2xx status code
func (o *UpdateClientForDeveloperBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client for developer bad request response has a 3xx status code
func (o *UpdateClientForDeveloperBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client for developer bad request response has a 4xx status code
func (o *UpdateClientForDeveloperBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client for developer bad request response has a 5xx status code
func (o *UpdateClientForDeveloperBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update client for developer bad request response a status code equal to that given
func (o *UpdateClientForDeveloperBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update client for developer bad request response
func (o *UpdateClientForDeveloperBadRequest) Code() int {
	return 400
}

func (o *UpdateClientForDeveloperBadRequest) Error() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateClientForDeveloperBadRequest) String() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateClientForDeveloperBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperUnauthorized creates a UpdateClientForDeveloperUnauthorized with default headers values
func NewUpdateClientForDeveloperUnauthorized() *UpdateClientForDeveloperUnauthorized {
	return &UpdateClientForDeveloperUnauthorized{}
}

/*
UpdateClientForDeveloperUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateClientForDeveloperUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client for developer unauthorized response has a 2xx status code
func (o *UpdateClientForDeveloperUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client for developer unauthorized response has a 3xx status code
func (o *UpdateClientForDeveloperUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client for developer unauthorized response has a 4xx status code
func (o *UpdateClientForDeveloperUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client for developer unauthorized response has a 5xx status code
func (o *UpdateClientForDeveloperUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update client for developer unauthorized response a status code equal to that given
func (o *UpdateClientForDeveloperUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update client for developer unauthorized response
func (o *UpdateClientForDeveloperUnauthorized) Code() int {
	return 401
}

func (o *UpdateClientForDeveloperUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateClientForDeveloperUnauthorized) String() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateClientForDeveloperUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperForbidden creates a UpdateClientForDeveloperForbidden with default headers values
func NewUpdateClientForDeveloperForbidden() *UpdateClientForDeveloperForbidden {
	return &UpdateClientForDeveloperForbidden{}
}

/*
UpdateClientForDeveloperForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateClientForDeveloperForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client for developer forbidden response has a 2xx status code
func (o *UpdateClientForDeveloperForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client for developer forbidden response has a 3xx status code
func (o *UpdateClientForDeveloperForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client for developer forbidden response has a 4xx status code
func (o *UpdateClientForDeveloperForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client for developer forbidden response has a 5xx status code
func (o *UpdateClientForDeveloperForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update client for developer forbidden response a status code equal to that given
func (o *UpdateClientForDeveloperForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update client for developer forbidden response
func (o *UpdateClientForDeveloperForbidden) Code() int {
	return 403
}

func (o *UpdateClientForDeveloperForbidden) Error() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperForbidden  %+v", 403, o.Payload)
}

func (o *UpdateClientForDeveloperForbidden) String() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperForbidden  %+v", 403, o.Payload)
}

func (o *UpdateClientForDeveloperForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperNotFound creates a UpdateClientForDeveloperNotFound with default headers values
func NewUpdateClientForDeveloperNotFound() *UpdateClientForDeveloperNotFound {
	return &UpdateClientForDeveloperNotFound{}
}

/*
UpdateClientForDeveloperNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateClientForDeveloperNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client for developer not found response has a 2xx status code
func (o *UpdateClientForDeveloperNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client for developer not found response has a 3xx status code
func (o *UpdateClientForDeveloperNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client for developer not found response has a 4xx status code
func (o *UpdateClientForDeveloperNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client for developer not found response has a 5xx status code
func (o *UpdateClientForDeveloperNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update client for developer not found response a status code equal to that given
func (o *UpdateClientForDeveloperNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update client for developer not found response
func (o *UpdateClientForDeveloperNotFound) Code() int {
	return 404
}

func (o *UpdateClientForDeveloperNotFound) Error() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperNotFound  %+v", 404, o.Payload)
}

func (o *UpdateClientForDeveloperNotFound) String() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperNotFound  %+v", 404, o.Payload)
}

func (o *UpdateClientForDeveloperNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperUnprocessableEntity creates a UpdateClientForDeveloperUnprocessableEntity with default headers values
func NewUpdateClientForDeveloperUnprocessableEntity() *UpdateClientForDeveloperUnprocessableEntity {
	return &UpdateClientForDeveloperUnprocessableEntity{}
}

/*
UpdateClientForDeveloperUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateClientForDeveloperUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client for developer unprocessable entity response has a 2xx status code
func (o *UpdateClientForDeveloperUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client for developer unprocessable entity response has a 3xx status code
func (o *UpdateClientForDeveloperUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client for developer unprocessable entity response has a 4xx status code
func (o *UpdateClientForDeveloperUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client for developer unprocessable entity response has a 5xx status code
func (o *UpdateClientForDeveloperUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update client for developer unprocessable entity response a status code equal to that given
func (o *UpdateClientForDeveloperUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update client for developer unprocessable entity response
func (o *UpdateClientForDeveloperUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateClientForDeveloperUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateClientForDeveloperUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateClientForDeveloperUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateClientForDeveloperTooManyRequests creates a UpdateClientForDeveloperTooManyRequests with default headers values
func NewUpdateClientForDeveloperTooManyRequests() *UpdateClientForDeveloperTooManyRequests {
	return &UpdateClientForDeveloperTooManyRequests{}
}

/*
UpdateClientForDeveloperTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateClientForDeveloperTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update client for developer too many requests response has a 2xx status code
func (o *UpdateClientForDeveloperTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update client for developer too many requests response has a 3xx status code
func (o *UpdateClientForDeveloperTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update client for developer too many requests response has a 4xx status code
func (o *UpdateClientForDeveloperTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update client for developer too many requests response has a 5xx status code
func (o *UpdateClientForDeveloperTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update client for developer too many requests response a status code equal to that given
func (o *UpdateClientForDeveloperTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update client for developer too many requests response
func (o *UpdateClientForDeveloperTooManyRequests) Code() int {
	return 429
}

func (o *UpdateClientForDeveloperTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateClientForDeveloperTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /clients/{cid}][%d] updateClientForDeveloperTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateClientForDeveloperTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateClientForDeveloperTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
