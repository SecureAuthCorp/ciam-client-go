// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/developer/models"
)

// RotateClientSecretAsDeveloperReader is a Reader for the RotateClientSecretAsDeveloper structure.
type RotateClientSecretAsDeveloperReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RotateClientSecretAsDeveloperReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRotateClientSecretAsDeveloperOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRotateClientSecretAsDeveloperUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRotateClientSecretAsDeveloperForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRotateClientSecretAsDeveloperNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRotateClientSecretAsDeveloperTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /clients/{cid}/rotateSecret] rotateClientSecretAsDeveloper", response, response.Code())
	}
}

// NewRotateClientSecretAsDeveloperOK creates a RotateClientSecretAsDeveloperOK with default headers values
func NewRotateClientSecretAsDeveloperOK() *RotateClientSecretAsDeveloperOK {
	return &RotateClientSecretAsDeveloperOK{}
}

/*
RotateClientSecretAsDeveloperOK describes a response with status code 200, with default header values.

Rotate client secret
*/
type RotateClientSecretAsDeveloperOK struct {
	Payload *models.RotateClientSecretDeveloperResponse
}

// IsSuccess returns true when this rotate client secret as developer o k response has a 2xx status code
func (o *RotateClientSecretAsDeveloperOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rotate client secret as developer o k response has a 3xx status code
func (o *RotateClientSecretAsDeveloperOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate client secret as developer o k response has a 4xx status code
func (o *RotateClientSecretAsDeveloperOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this rotate client secret as developer o k response has a 5xx status code
func (o *RotateClientSecretAsDeveloperOK) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate client secret as developer o k response a status code equal to that given
func (o *RotateClientSecretAsDeveloperOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the rotate client secret as developer o k response
func (o *RotateClientSecretAsDeveloperOK) Code() int {
	return 200
}

func (o *RotateClientSecretAsDeveloperOK) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperOK  %+v", 200, o.Payload)
}

func (o *RotateClientSecretAsDeveloperOK) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperOK  %+v", 200, o.Payload)
}

func (o *RotateClientSecretAsDeveloperOK) GetPayload() *models.RotateClientSecretDeveloperResponse {
	return o.Payload
}

func (o *RotateClientSecretAsDeveloperOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RotateClientSecretDeveloperResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateClientSecretAsDeveloperUnauthorized creates a RotateClientSecretAsDeveloperUnauthorized with default headers values
func NewRotateClientSecretAsDeveloperUnauthorized() *RotateClientSecretAsDeveloperUnauthorized {
	return &RotateClientSecretAsDeveloperUnauthorized{}
}

/*
RotateClientSecretAsDeveloperUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RotateClientSecretAsDeveloperUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this rotate client secret as developer unauthorized response has a 2xx status code
func (o *RotateClientSecretAsDeveloperUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate client secret as developer unauthorized response has a 3xx status code
func (o *RotateClientSecretAsDeveloperUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate client secret as developer unauthorized response has a 4xx status code
func (o *RotateClientSecretAsDeveloperUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate client secret as developer unauthorized response has a 5xx status code
func (o *RotateClientSecretAsDeveloperUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate client secret as developer unauthorized response a status code equal to that given
func (o *RotateClientSecretAsDeveloperUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the rotate client secret as developer unauthorized response
func (o *RotateClientSecretAsDeveloperUnauthorized) Code() int {
	return 401
}

func (o *RotateClientSecretAsDeveloperUnauthorized) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperUnauthorized  %+v", 401, o.Payload)
}

func (o *RotateClientSecretAsDeveloperUnauthorized) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperUnauthorized  %+v", 401, o.Payload)
}

func (o *RotateClientSecretAsDeveloperUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RotateClientSecretAsDeveloperUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateClientSecretAsDeveloperForbidden creates a RotateClientSecretAsDeveloperForbidden with default headers values
func NewRotateClientSecretAsDeveloperForbidden() *RotateClientSecretAsDeveloperForbidden {
	return &RotateClientSecretAsDeveloperForbidden{}
}

/*
RotateClientSecretAsDeveloperForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RotateClientSecretAsDeveloperForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this rotate client secret as developer forbidden response has a 2xx status code
func (o *RotateClientSecretAsDeveloperForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate client secret as developer forbidden response has a 3xx status code
func (o *RotateClientSecretAsDeveloperForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate client secret as developer forbidden response has a 4xx status code
func (o *RotateClientSecretAsDeveloperForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate client secret as developer forbidden response has a 5xx status code
func (o *RotateClientSecretAsDeveloperForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate client secret as developer forbidden response a status code equal to that given
func (o *RotateClientSecretAsDeveloperForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the rotate client secret as developer forbidden response
func (o *RotateClientSecretAsDeveloperForbidden) Code() int {
	return 403
}

func (o *RotateClientSecretAsDeveloperForbidden) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperForbidden  %+v", 403, o.Payload)
}

func (o *RotateClientSecretAsDeveloperForbidden) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperForbidden  %+v", 403, o.Payload)
}

func (o *RotateClientSecretAsDeveloperForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RotateClientSecretAsDeveloperForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateClientSecretAsDeveloperNotFound creates a RotateClientSecretAsDeveloperNotFound with default headers values
func NewRotateClientSecretAsDeveloperNotFound() *RotateClientSecretAsDeveloperNotFound {
	return &RotateClientSecretAsDeveloperNotFound{}
}

/*
RotateClientSecretAsDeveloperNotFound describes a response with status code 404, with default header values.

Not found
*/
type RotateClientSecretAsDeveloperNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this rotate client secret as developer not found response has a 2xx status code
func (o *RotateClientSecretAsDeveloperNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate client secret as developer not found response has a 3xx status code
func (o *RotateClientSecretAsDeveloperNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate client secret as developer not found response has a 4xx status code
func (o *RotateClientSecretAsDeveloperNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate client secret as developer not found response has a 5xx status code
func (o *RotateClientSecretAsDeveloperNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate client secret as developer not found response a status code equal to that given
func (o *RotateClientSecretAsDeveloperNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the rotate client secret as developer not found response
func (o *RotateClientSecretAsDeveloperNotFound) Code() int {
	return 404
}

func (o *RotateClientSecretAsDeveloperNotFound) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperNotFound  %+v", 404, o.Payload)
}

func (o *RotateClientSecretAsDeveloperNotFound) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperNotFound  %+v", 404, o.Payload)
}

func (o *RotateClientSecretAsDeveloperNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RotateClientSecretAsDeveloperNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateClientSecretAsDeveloperTooManyRequests creates a RotateClientSecretAsDeveloperTooManyRequests with default headers values
func NewRotateClientSecretAsDeveloperTooManyRequests() *RotateClientSecretAsDeveloperTooManyRequests {
	return &RotateClientSecretAsDeveloperTooManyRequests{}
}

/*
RotateClientSecretAsDeveloperTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type RotateClientSecretAsDeveloperTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this rotate client secret as developer too many requests response has a 2xx status code
func (o *RotateClientSecretAsDeveloperTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate client secret as developer too many requests response has a 3xx status code
func (o *RotateClientSecretAsDeveloperTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate client secret as developer too many requests response has a 4xx status code
func (o *RotateClientSecretAsDeveloperTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate client secret as developer too many requests response has a 5xx status code
func (o *RotateClientSecretAsDeveloperTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate client secret as developer too many requests response a status code equal to that given
func (o *RotateClientSecretAsDeveloperTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the rotate client secret as developer too many requests response
func (o *RotateClientSecretAsDeveloperTooManyRequests) Code() int {
	return 429
}

func (o *RotateClientSecretAsDeveloperTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperTooManyRequests  %+v", 429, o.Payload)
}

func (o *RotateClientSecretAsDeveloperTooManyRequests) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/rotateSecret][%d] rotateClientSecretAsDeveloperTooManyRequests  %+v", 429, o.Payload)
}

func (o *RotateClientSecretAsDeveloperTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *RotateClientSecretAsDeveloperTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
