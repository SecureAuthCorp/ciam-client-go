// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new clients API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new clients API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new clients API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for clients API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClientForDeveloper(params *CreateClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClientForDeveloperCreated, error)

	DeleteClientForDeveloper(params *DeleteClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClientForDeveloperNoContent, error)

	GetClientForDeveloper(params *GetClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientForDeveloperOK, error)

	ListClientsForDeveloper(params *ListClientsForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListClientsForDeveloperOK, error)

	RevokeRotatedClientSecretsAsDeveloper(params *RevokeRotatedClientSecretsAsDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeRotatedClientSecretsAsDeveloperNoContent, error)

	RotateClientSecretAsDeveloper(params *RotateClientSecretAsDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RotateClientSecretAsDeveloperOK, error)

	UpdateClientForDeveloper(params *UpdateClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClientForDeveloperOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateClientForDeveloper creates new o auth client

	Client must be created under existing tenant and authorization server.

Authorization server id where client should be assigned must be provided in the request body.

Client can't be created in a system authorization server.

Client id and secret are generated upon creation.

If grant type is not set, client will get authorization code grant type assigned with code as response type.

Default token authentication method is client_secret_basic.

It might happen that it won't be possible to create a client with specified scopes.
Scopes assignment can be protected by policies defined by administrator.
*/
func (a *Client) CreateClientForDeveloper(params *CreateClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClientForDeveloperCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClientForDeveloperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClientForDeveloper",
		Method:             "POST",
		PathPattern:        "/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClientForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClientForDeveloperCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createClientForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClientForDeveloper deletes client

Delete client owned by developer.
*/
func (a *Client) DeleteClientForDeveloper(params *DeleteClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClientForDeveloperNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClientForDeveloperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClientForDeveloper",
		Method:             "DELETE",
		PathPattern:        "/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClientForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClientForDeveloperNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClientForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetClientForDeveloper gets client

Get client owned by developer.
*/
func (a *Client) GetClientForDeveloper(params *GetClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetClientForDeveloperOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClientForDeveloperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getClientForDeveloper",
		Method:             "GET",
		PathPattern:        "/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetClientForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetClientForDeveloperOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getClientForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListClientsForDeveloper lists clients

List clients owner by developer.
*/
func (a *Client) ListClientsForDeveloper(params *ListClientsForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListClientsForDeveloperOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClientsForDeveloperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listClientsForDeveloper",
		Method:             "GET",
		PathPattern:        "/clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClientsForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClientsForDeveloperOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClientsForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeRotatedClientSecretsAsDeveloper revokes rotated secrets

Revoke all rotated client's secrets.
*/
func (a *Client) RevokeRotatedClientSecretsAsDeveloper(params *RevokeRotatedClientSecretsAsDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeRotatedClientSecretsAsDeveloperNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeRotatedClientSecretsAsDeveloperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeRotatedClientSecretsAsDeveloper",
		Method:             "POST",
		PathPattern:        "/clients/{cid}/revokeRotatedSecrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeRotatedClientSecretsAsDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeRotatedClientSecretsAsDeveloperNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeRotatedClientSecretsAsDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RotateClientSecretAsDeveloper rotates client s secret

	Generate a new client secret, move old secret to rotated secrets list and return

new client secret as a response. The max number of client rotated secrets is 2.
The rotated secrets over the limit are dropped.
*/
func (a *Client) RotateClientSecretAsDeveloper(params *RotateClientSecretAsDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RotateClientSecretAsDeveloperOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateClientSecretAsDeveloperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rotateClientSecretAsDeveloper",
		Method:             "POST",
		PathPattern:        "/clients/{cid}/rotateSecret",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RotateClientSecretAsDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RotateClientSecretAsDeveloperOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rotateClientSecretAsDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClientForDeveloper updates client

The entire client object must be send for update.
*/
func (a *Client) UpdateClientForDeveloper(params *UpdateClientForDeveloperParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClientForDeveloperOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClientForDeveloperParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClientForDeveloper",
		Method:             "PUT",
		PathPattern:        "/clients/{cid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClientForDeveloperReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClientForDeveloperOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClientForDeveloper: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
