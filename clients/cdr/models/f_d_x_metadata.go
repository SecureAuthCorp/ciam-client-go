// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FDXMetadata f d x metadata
//
// swagger:model FDXMetadata
type FDXMetadata struct {

	// Contact information of individuals responsible for the Data Recipient application.
	Contacts []string `json:"contacts"`

	// The time window the end-user grants the consent for. Used when `duration_type`=`TIME_BOUND`.
	DurationPeriod int64 `json:"duration_period,omitempty"`

	// The rule of consent granting by the end-user to indicate whether they must take action
	// to revoke access or the consent will be revoked automatically.
	//
	// The acceptable values: "ONE_TIME", "PERSISTENT", "TIME_BOUND"
	// Example: \"ONE_TIME\
	DurationType []DurationType `json:"duration_type"`

	// An array of the intermediaries for this Data Recipient.
	Intermediaries []*Intermediary `json:"intermediaries"`

	// The maximum number of days allowed for Data Recipient consumers to obtain in transaction history, effective from
	// the current date
	LookbackPeriod int64 `json:"lookback_period,omitempty"`

	// The list of external registries where the Data Recipient is registered. It comprises the following details:
	// name, identifier, and the `registry` string with any additional info.
	RegistryReferences []*RegistryReference `json:"registry_references"`

	// status
	Status FDXClientStatus `json:"status,omitempty"`
}

// Validate validates this f d x metadata
func (m *FDXMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDurationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntermediaries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistryReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FDXMetadata) validateDurationType(formats strfmt.Registry) error {
	if swag.IsZero(m.DurationType) { // not required
		return nil
	}

	for i := 0; i < len(m.DurationType); i++ {

		if err := m.DurationType[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration_type" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("duration_type" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FDXMetadata) validateIntermediaries(formats strfmt.Registry) error {
	if swag.IsZero(m.Intermediaries) { // not required
		return nil
	}

	for i := 0; i < len(m.Intermediaries); i++ {
		if swag.IsZero(m.Intermediaries[i]) { // not required
			continue
		}

		if m.Intermediaries[i] != nil {
			if err := m.Intermediaries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intermediaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intermediaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FDXMetadata) validateRegistryReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistryReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.RegistryReferences); i++ {
		if swag.IsZero(m.RegistryReferences[i]) { // not required
			continue
		}

		if m.RegistryReferences[i] != nil {
			if err := m.RegistryReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registry_references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registry_references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FDXMetadata) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this f d x metadata based on the context it is used
func (m *FDXMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDurationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntermediaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistryReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FDXMetadata) contextValidateDurationType(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DurationType); i++ {

		if err := m.DurationType[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration_type" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("duration_type" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FDXMetadata) contextValidateIntermediaries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Intermediaries); i++ {

		if m.Intermediaries[i] != nil {
			if err := m.Intermediaries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intermediaries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("intermediaries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FDXMetadata) contextValidateRegistryReferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RegistryReferences); i++ {

		if m.RegistryReferences[i] != nil {
			if err := m.RegistryReferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("registry_references" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("registry_references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FDXMetadata) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FDXMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FDXMetadata) UnmarshalBinary(b []byte) error {
	var res FDXMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
