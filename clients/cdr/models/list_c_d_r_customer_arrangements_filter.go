// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListCDRCustomerArrangementsFilter list c d r customer arrangements filter
//
// swagger:model ListCDRCustomerArrangementsFilter
type ListCDRCustomerArrangementsFilter struct {

	// List of accounts.
	//
	// It can refer to user bank accounts the client application is allowed to access.
	Accounts []string `json:"accounts"`

	// A consent identifier.
	//
	// Use it to navigate through the request pagination when the number of consents is greater than
	// the `limit` set for results in the response.
	//
	// With `after_consent_id`, the list you obtain starts from the subsequent consent after the specified one. Also,
	// the response depends on the `sort` and `order` parameters, if any are passed.
	AfterConsentID string `json:"after_consent_id,omitempty"`

	// A consent identifier.
	//
	// Use it to navigate through the request pagination when the number of consents is greater than
	// the limit set for results in the response.
	//
	// With `before_consent_id`, the list you obtain comprises consents up to the specified one. The specified consent
	// isn't included. Also, the response depends on the `sort` and `order` parameters, if any are passed.
	BeforeConsentID string `json:"before_consent_id,omitempty"`

	// A client identifier.
	ClientID string `json:"client_id,omitempty"`

	// Limit the number of results returned in the response.
	// Maximum: 100
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// Input: `acs` or `desc`.
	//
	// Set the order of results returned in the response.
	Order string `json:"order,omitempty"`

	// Sort results returned in the response.
	Sort string `json:"sort,omitempty"`

	// List of the consent statuses.
	Status []string `json:"status"`

	// Consent types.
	//
	// in:query
	Types []string `json:"types"`

	// Optional User id
	// UserID
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this list c d r customer arrangements filter
func (m *ListCDRCustomerArrangementsFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListCDRCustomerArrangementsFilter) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", m.Limit, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("limit", "body", m.Limit, 100, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this list c d r customer arrangements filter based on context it is used
func (m *ListCDRCustomerArrangementsFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListCDRCustomerArrangementsFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListCDRCustomerArrangementsFilter) UnmarshalBinary(b []byte) error {
	var res ListCDRCustomerArrangementsFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
