// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScopeGrant scope grant
//
// swagger:model ScopeGrant
type ScopeGrant struct {

	// Identifier of a client application that is granted with the scope.
	// Example: bugkgm23g9kregtu051g
	ClientID string `json:"client_id,omitempty" yaml:"client_id,omitempty"`

	// Time when the scope was granted
	// Format: date-time
	GivenAt strfmt.DateTime `json:"given_at,omitempty" yaml:"given_at,omitempty"`

	// The scope name with its actual value
	// Example: accounts.read.own
	GrantedScopeName string `json:"granted_scope_name,omitempty" yaml:"granted_scope_name,omitempty"`

	// Language
	Language string `json:"language,omitempty" yaml:"language,omitempty"`

	// pool id of a user who granted the scope
	PoolID string `json:"pool_id,omitempty" yaml:"pool_id,omitempty"`

	// The scope name as it's set initially. This parameter supports dynamic scope syntax, thus can include a scope
	// root—a fixed core of the dynamic scope name supplemented with a wildcard—a symbol representing
	// an adjustable extension to the scope root allowing to retrieve a specific requested scope.
	//
	// The basic dynamic scope template is as follows: `[scope-root.*]` where `*` is a wildcard.
	// Example: accounts.read.*
	ScopeName string `json:"scope_name,omitempty" yaml:"scope_name,omitempty"`

	// Identifier of a server where the client app is hosted.
	// Example: my-server
	ServerID string `json:"server_id,omitempty" yaml:"server_id,omitempty"`

	// Identifier of a user who granted the scope.
	Subject string `json:"subject,omitempty" yaml:"subject,omitempty"`

	// Identifier of the tenant where the client app is hosted.
	// Example: my-company
	TenantID string `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty"`

	// user id of a user who granted the scope
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// Validate validates this scope grant
func (m *ScopeGrant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGivenAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScopeGrant) validateGivenAt(formats strfmt.Registry) error {
	if swag.IsZero(m.GivenAt) { // not required
		return nil
	}

	if err := validate.FormatOf("given_at", "body", "date-time", m.GivenAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this scope grant based on context it is used
func (m *ScopeGrant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScopeGrant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScopeGrant) UnmarshalBinary(b []byte) error {
	var res ScopeGrant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
