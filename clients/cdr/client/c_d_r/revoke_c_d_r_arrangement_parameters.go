// Code generated by go-swagger; DO NOT EDIT.

package c_d_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRevokeCDRArrangementParams creates a new RevokeCDRArrangementParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRevokeCDRArrangementParams() *RevokeCDRArrangementParams {
	return &RevokeCDRArrangementParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRevokeCDRArrangementParamsWithTimeout creates a new RevokeCDRArrangementParams object
// with the ability to set a timeout on a request.
func NewRevokeCDRArrangementParamsWithTimeout(timeout time.Duration) *RevokeCDRArrangementParams {
	return &RevokeCDRArrangementParams{
		timeout: timeout,
	}
}

// NewRevokeCDRArrangementParamsWithContext creates a new RevokeCDRArrangementParams object
// with the ability to set a context for a request.
func NewRevokeCDRArrangementParamsWithContext(ctx context.Context) *RevokeCDRArrangementParams {
	return &RevokeCDRArrangementParams{
		Context: ctx,
	}
}

// NewRevokeCDRArrangementParamsWithHTTPClient creates a new RevokeCDRArrangementParams object
// with the ability to set a custom HTTPClient for a request.
func NewRevokeCDRArrangementParamsWithHTTPClient(client *http.Client) *RevokeCDRArrangementParams {
	return &RevokeCDRArrangementParams{
		HTTPClient: client,
	}
}

/*
RevokeCDRArrangementParams contains all the parameters to send to the API endpoint

	for the revoke c d r arrangement operation.

	Typically these are written to a http.Request.
*/
type RevokeCDRArrangementParams struct {

	// CdrArrangementID.
	CdrArrangementID *string

	// ClientAssertion.
	ClientAssertion *string

	// ClientAssertionType.
	//
	// Default: "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
	ClientAssertionType *string

	// ClientID.
	ClientID *string

	/* RevocationChannel.

	   Stores the channel that was used to revoke the arrangement

	   Default: "online"
	*/
	RevocationChannel *string

	/* RevocationReason.

	   Stores the reason why the arrangement was revoked
	*/
	RevocationReason *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the revoke c d r arrangement params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RevokeCDRArrangementParams) WithDefaults() *RevokeCDRArrangementParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the revoke c d r arrangement params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RevokeCDRArrangementParams) SetDefaults() {
	var (
		clientAssertionTypeDefault = string("urn:ietf:params:oauth:client-assertion-type:jwt-bearer")

		revocationChannelDefault = string("online")
	)

	val := RevokeCDRArrangementParams{
		ClientAssertionType: &clientAssertionTypeDefault,
		RevocationChannel:   &revocationChannelDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithTimeout(timeout time.Duration) *RevokeCDRArrangementParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithContext(ctx context.Context) *RevokeCDRArrangementParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithHTTPClient(client *http.Client) *RevokeCDRArrangementParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCdrArrangementID adds the cdrArrangementID to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithCdrArrangementID(cdrArrangementID *string) *RevokeCDRArrangementParams {
	o.SetCdrArrangementID(cdrArrangementID)
	return o
}

// SetCdrArrangementID adds the cdrArrangementId to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetCdrArrangementID(cdrArrangementID *string) {
	o.CdrArrangementID = cdrArrangementID
}

// WithClientAssertion adds the clientAssertion to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithClientAssertion(clientAssertion *string) *RevokeCDRArrangementParams {
	o.SetClientAssertion(clientAssertion)
	return o
}

// SetClientAssertion adds the clientAssertion to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetClientAssertion(clientAssertion *string) {
	o.ClientAssertion = clientAssertion
}

// WithClientAssertionType adds the clientAssertionType to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithClientAssertionType(clientAssertionType *string) *RevokeCDRArrangementParams {
	o.SetClientAssertionType(clientAssertionType)
	return o
}

// SetClientAssertionType adds the clientAssertionType to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetClientAssertionType(clientAssertionType *string) {
	o.ClientAssertionType = clientAssertionType
}

// WithClientID adds the clientID to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithClientID(clientID *string) *RevokeCDRArrangementParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithRevocationChannel adds the revocationChannel to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithRevocationChannel(revocationChannel *string) *RevokeCDRArrangementParams {
	o.SetRevocationChannel(revocationChannel)
	return o
}

// SetRevocationChannel adds the revocationChannel to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetRevocationChannel(revocationChannel *string) {
	o.RevocationChannel = revocationChannel
}

// WithRevocationReason adds the revocationReason to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) WithRevocationReason(revocationReason *string) *RevokeCDRArrangementParams {
	o.SetRevocationReason(revocationReason)
	return o
}

// SetRevocationReason adds the revocationReason to the revoke c d r arrangement params
func (o *RevokeCDRArrangementParams) SetRevocationReason(revocationReason *string) {
	o.RevocationReason = revocationReason
}

// WriteToRequest writes these params to a swagger request
func (o *RevokeCDRArrangementParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CdrArrangementID != nil {

		// form param cdr_arrangement_id
		var frCdrArrangementID string
		if o.CdrArrangementID != nil {
			frCdrArrangementID = *o.CdrArrangementID
		}
		fCdrArrangementID := frCdrArrangementID
		if fCdrArrangementID != "" {
			if err := r.SetFormParam("cdr_arrangement_id", fCdrArrangementID); err != nil {
				return err
			}
		}
	}

	if o.ClientAssertion != nil {

		// form param client_assertion
		var frClientAssertion string
		if o.ClientAssertion != nil {
			frClientAssertion = *o.ClientAssertion
		}
		fClientAssertion := frClientAssertion
		if fClientAssertion != "" {
			if err := r.SetFormParam("client_assertion", fClientAssertion); err != nil {
				return err
			}
		}
	}

	if o.ClientAssertionType != nil {

		// form param client_assertion_type
		var frClientAssertionType string
		if o.ClientAssertionType != nil {
			frClientAssertionType = *o.ClientAssertionType
		}
		fClientAssertionType := frClientAssertionType
		if fClientAssertionType != "" {
			if err := r.SetFormParam("client_assertion_type", fClientAssertionType); err != nil {
				return err
			}
		}
	}

	if o.ClientID != nil {

		// form param client_id
		var frClientID string
		if o.ClientID != nil {
			frClientID = *o.ClientID
		}
		fClientID := frClientID
		if fClientID != "" {
			if err := r.SetFormParam("client_id", fClientID); err != nil {
				return err
			}
		}
	}

	if o.RevocationChannel != nil {

		// query param revocation_channel
		var qrRevocationChannel string

		if o.RevocationChannel != nil {
			qrRevocationChannel = *o.RevocationChannel
		}
		qRevocationChannel := qrRevocationChannel
		if qRevocationChannel != "" {

			if err := r.SetQueryParam("revocation_channel", qRevocationChannel); err != nil {
				return err
			}
		}
	}

	if o.RevocationReason != nil {

		// query param revocation_reason
		var qrRevocationReason string

		if o.RevocationReason != nil {
			qrRevocationReason = *o.RevocationReason
		}
		qRevocationReason := qrRevocationReason
		if qRevocationReason != "" {

			if err := r.SetQueryParam("revocation_reason", qRevocationReason); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
