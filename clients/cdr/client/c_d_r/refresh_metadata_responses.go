// Code generated by go-swagger; DO NOT EDIT.

package c_d_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/cdr/models"
)

// RefreshMetadataReader is a Reader for the RefreshMetadata structure.
type RefreshMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefreshMetadataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRefreshMetadataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewRefreshMetadataNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 424:
		result := NewRefreshMetadataFailedDependency()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRefreshMetadataOK creates a RefreshMetadataOK with default headers values
func NewRefreshMetadataOK() *RefreshMetadataOK {
	return &RefreshMetadataOK{}
}

/*
RefreshMetadataOK describes a response with status code 200, with default header values.

	Register refreshed
*/
type RefreshMetadataOK struct {
}

// IsSuccess returns true when this refresh metadata o k response has a 2xx status code
func (o *RefreshMetadataOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refresh metadata o k response has a 3xx status code
func (o *RefreshMetadataOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh metadata o k response has a 4xx status code
func (o *RefreshMetadataOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this refresh metadata o k response has a 5xx status code
func (o *RefreshMetadataOK) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh metadata o k response a status code equal to that given
func (o *RefreshMetadataOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the refresh metadata o k response
func (o *RefreshMetadataOK) Code() int {
	return 200
}

func (o *RefreshMetadataOK) Error() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataOK ", 200)
}

func (o *RefreshMetadataOK) String() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataOK ", 200)
}

func (o *RefreshMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshMetadataBadRequest creates a RefreshMetadataBadRequest with default headers values
func NewRefreshMetadataBadRequest() *RefreshMetadataBadRequest {
	return &RefreshMetadataBadRequest{}
}

/*
RefreshMetadataBadRequest describes a response with status code 400, with default header values.

CDR Error
*/
type RefreshMetadataBadRequest struct {
	Payload *models.CDRErrorResponse
}

// IsSuccess returns true when this refresh metadata bad request response has a 2xx status code
func (o *RefreshMetadataBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh metadata bad request response has a 3xx status code
func (o *RefreshMetadataBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh metadata bad request response has a 4xx status code
func (o *RefreshMetadataBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh metadata bad request response has a 5xx status code
func (o *RefreshMetadataBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh metadata bad request response a status code equal to that given
func (o *RefreshMetadataBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the refresh metadata bad request response
func (o *RefreshMetadataBadRequest) Code() int {
	return 400
}

func (o *RefreshMetadataBadRequest) Error() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *RefreshMetadataBadRequest) String() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataBadRequest  %+v", 400, o.Payload)
}

func (o *RefreshMetadataBadRequest) GetPayload() *models.CDRErrorResponse {
	return o.Payload
}

func (o *RefreshMetadataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CDRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshMetadataUnauthorized creates a RefreshMetadataUnauthorized with default headers values
func NewRefreshMetadataUnauthorized() *RefreshMetadataUnauthorized {
	return &RefreshMetadataUnauthorized{}
}

/*
RefreshMetadataUnauthorized describes a response with status code 401, with default header values.

CDR Error
*/
type RefreshMetadataUnauthorized struct {
	Payload *models.CDRErrorResponse
}

// IsSuccess returns true when this refresh metadata unauthorized response has a 2xx status code
func (o *RefreshMetadataUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh metadata unauthorized response has a 3xx status code
func (o *RefreshMetadataUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh metadata unauthorized response has a 4xx status code
func (o *RefreshMetadataUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh metadata unauthorized response has a 5xx status code
func (o *RefreshMetadataUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh metadata unauthorized response a status code equal to that given
func (o *RefreshMetadataUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the refresh metadata unauthorized response
func (o *RefreshMetadataUnauthorized) Code() int {
	return 401
}

func (o *RefreshMetadataUnauthorized) Error() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *RefreshMetadataUnauthorized) String() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataUnauthorized  %+v", 401, o.Payload)
}

func (o *RefreshMetadataUnauthorized) GetPayload() *models.CDRErrorResponse {
	return o.Payload
}

func (o *RefreshMetadataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CDRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshMetadataNotAcceptable creates a RefreshMetadataNotAcceptable with default headers values
func NewRefreshMetadataNotAcceptable() *RefreshMetadataNotAcceptable {
	return &RefreshMetadataNotAcceptable{}
}

/*
RefreshMetadataNotAcceptable describes a response with status code 406, with default header values.

CDR Error
*/
type RefreshMetadataNotAcceptable struct {
	Payload *models.CDRErrorResponse
}

// IsSuccess returns true when this refresh metadata not acceptable response has a 2xx status code
func (o *RefreshMetadataNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh metadata not acceptable response has a 3xx status code
func (o *RefreshMetadataNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh metadata not acceptable response has a 4xx status code
func (o *RefreshMetadataNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh metadata not acceptable response has a 5xx status code
func (o *RefreshMetadataNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh metadata not acceptable response a status code equal to that given
func (o *RefreshMetadataNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the refresh metadata not acceptable response
func (o *RefreshMetadataNotAcceptable) Code() int {
	return 406
}

func (o *RefreshMetadataNotAcceptable) Error() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataNotAcceptable  %+v", 406, o.Payload)
}

func (o *RefreshMetadataNotAcceptable) String() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataNotAcceptable  %+v", 406, o.Payload)
}

func (o *RefreshMetadataNotAcceptable) GetPayload() *models.CDRErrorResponse {
	return o.Payload
}

func (o *RefreshMetadataNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CDRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshMetadataFailedDependency creates a RefreshMetadataFailedDependency with default headers values
func NewRefreshMetadataFailedDependency() *RefreshMetadataFailedDependency {
	return &RefreshMetadataFailedDependency{}
}

/*
RefreshMetadataFailedDependency describes a response with status code 424, with default header values.

CDR Error
*/
type RefreshMetadataFailedDependency struct {
	Payload *models.CDRErrorResponse
}

// IsSuccess returns true when this refresh metadata failed dependency response has a 2xx status code
func (o *RefreshMetadataFailedDependency) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refresh metadata failed dependency response has a 3xx status code
func (o *RefreshMetadataFailedDependency) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refresh metadata failed dependency response has a 4xx status code
func (o *RefreshMetadataFailedDependency) IsClientError() bool {
	return true
}

// IsServerError returns true when this refresh metadata failed dependency response has a 5xx status code
func (o *RefreshMetadataFailedDependency) IsServerError() bool {
	return false
}

// IsCode returns true when this refresh metadata failed dependency response a status code equal to that given
func (o *RefreshMetadataFailedDependency) IsCode(code int) bool {
	return code == 424
}

// Code gets the status code for the refresh metadata failed dependency response
func (o *RefreshMetadataFailedDependency) Code() int {
	return 424
}

func (o *RefreshMetadataFailedDependency) Error() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataFailedDependency  %+v", 424, o.Payload)
}

func (o *RefreshMetadataFailedDependency) String() string {
	return fmt.Sprintf("[POST /admin/register/metadata][%d] refreshMetadataFailedDependency  %+v", 424, o.Payload)
}

func (o *RefreshMetadataFailedDependency) GetPayload() *models.CDRErrorResponse {
	return o.Payload
}

func (o *RefreshMetadataFailedDependency) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CDRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
