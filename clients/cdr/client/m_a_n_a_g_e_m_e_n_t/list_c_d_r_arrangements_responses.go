// Code generated by go-swagger; DO NOT EDIT.

package m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/cdr/models"
)

// ListCDRArrangementsReader is a Reader for the ListCDRArrangements structure.
type ListCDRArrangementsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListCDRArrangementsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListCDRArrangementsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListCDRArrangementsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListCDRArrangementsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListCDRArrangementsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListCDRArrangementsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewListCDRArrangementsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListCDRArrangementsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{wid}/cdr/arrangements] listCDRArrangements", response, response.Code())
	}
}

// NewListCDRArrangementsOK creates a ListCDRArrangementsOK with default headers values
func NewListCDRArrangementsOK() *ListCDRArrangementsOK {
	return &ListCDRArrangementsOK{}
}

/*
ListCDRArrangementsOK describes a response with status code 200, with default header values.

CDRArrangements
*/
type ListCDRArrangementsOK struct {
	Payload *models.CDRArrangements
}

// IsSuccess returns true when this list c d r arrangements o k response has a 2xx status code
func (o *ListCDRArrangementsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list c d r arrangements o k response has a 3xx status code
func (o *ListCDRArrangementsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list c d r arrangements o k response has a 4xx status code
func (o *ListCDRArrangementsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list c d r arrangements o k response has a 5xx status code
func (o *ListCDRArrangementsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list c d r arrangements o k response a status code equal to that given
func (o *ListCDRArrangementsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list c d r arrangements o k response
func (o *ListCDRArrangementsOK) Code() int {
	return 200
}

func (o *ListCDRArrangementsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsOK %s", 200, payload)
}

func (o *ListCDRArrangementsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsOK %s", 200, payload)
}

func (o *ListCDRArrangementsOK) GetPayload() *models.CDRArrangements {
	return o.Payload
}

func (o *ListCDRArrangementsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CDRArrangements)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCDRArrangementsBadRequest creates a ListCDRArrangementsBadRequest with default headers values
func NewListCDRArrangementsBadRequest() *ListCDRArrangementsBadRequest {
	return &ListCDRArrangementsBadRequest{}
}

/*
ListCDRArrangementsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ListCDRArrangementsBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this list c d r arrangements bad request response has a 2xx status code
func (o *ListCDRArrangementsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list c d r arrangements bad request response has a 3xx status code
func (o *ListCDRArrangementsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list c d r arrangements bad request response has a 4xx status code
func (o *ListCDRArrangementsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list c d r arrangements bad request response has a 5xx status code
func (o *ListCDRArrangementsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list c d r arrangements bad request response a status code equal to that given
func (o *ListCDRArrangementsBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the list c d r arrangements bad request response
func (o *ListCDRArrangementsBadRequest) Code() int {
	return 400
}

func (o *ListCDRArrangementsBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsBadRequest %s", 400, payload)
}

func (o *ListCDRArrangementsBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsBadRequest %s", 400, payload)
}

func (o *ListCDRArrangementsBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListCDRArrangementsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCDRArrangementsUnauthorized creates a ListCDRArrangementsUnauthorized with default headers values
func NewListCDRArrangementsUnauthorized() *ListCDRArrangementsUnauthorized {
	return &ListCDRArrangementsUnauthorized{}
}

/*
ListCDRArrangementsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListCDRArrangementsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list c d r arrangements unauthorized response has a 2xx status code
func (o *ListCDRArrangementsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list c d r arrangements unauthorized response has a 3xx status code
func (o *ListCDRArrangementsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list c d r arrangements unauthorized response has a 4xx status code
func (o *ListCDRArrangementsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list c d r arrangements unauthorized response has a 5xx status code
func (o *ListCDRArrangementsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list c d r arrangements unauthorized response a status code equal to that given
func (o *ListCDRArrangementsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list c d r arrangements unauthorized response
func (o *ListCDRArrangementsUnauthorized) Code() int {
	return 401
}

func (o *ListCDRArrangementsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsUnauthorized %s", 401, payload)
}

func (o *ListCDRArrangementsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsUnauthorized %s", 401, payload)
}

func (o *ListCDRArrangementsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListCDRArrangementsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCDRArrangementsForbidden creates a ListCDRArrangementsForbidden with default headers values
func NewListCDRArrangementsForbidden() *ListCDRArrangementsForbidden {
	return &ListCDRArrangementsForbidden{}
}

/*
ListCDRArrangementsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListCDRArrangementsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list c d r arrangements forbidden response has a 2xx status code
func (o *ListCDRArrangementsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list c d r arrangements forbidden response has a 3xx status code
func (o *ListCDRArrangementsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list c d r arrangements forbidden response has a 4xx status code
func (o *ListCDRArrangementsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list c d r arrangements forbidden response has a 5xx status code
func (o *ListCDRArrangementsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list c d r arrangements forbidden response a status code equal to that given
func (o *ListCDRArrangementsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list c d r arrangements forbidden response
func (o *ListCDRArrangementsForbidden) Code() int {
	return 403
}

func (o *ListCDRArrangementsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsForbidden %s", 403, payload)
}

func (o *ListCDRArrangementsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsForbidden %s", 403, payload)
}

func (o *ListCDRArrangementsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListCDRArrangementsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCDRArrangementsNotFound creates a ListCDRArrangementsNotFound with default headers values
func NewListCDRArrangementsNotFound() *ListCDRArrangementsNotFound {
	return &ListCDRArrangementsNotFound{}
}

/*
ListCDRArrangementsNotFound describes a response with status code 404, with default header values.

Not found
*/
type ListCDRArrangementsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this list c d r arrangements not found response has a 2xx status code
func (o *ListCDRArrangementsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list c d r arrangements not found response has a 3xx status code
func (o *ListCDRArrangementsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list c d r arrangements not found response has a 4xx status code
func (o *ListCDRArrangementsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list c d r arrangements not found response has a 5xx status code
func (o *ListCDRArrangementsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list c d r arrangements not found response a status code equal to that given
func (o *ListCDRArrangementsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list c d r arrangements not found response
func (o *ListCDRArrangementsNotFound) Code() int {
	return 404
}

func (o *ListCDRArrangementsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsNotFound %s", 404, payload)
}

func (o *ListCDRArrangementsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsNotFound %s", 404, payload)
}

func (o *ListCDRArrangementsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListCDRArrangementsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCDRArrangementsUnprocessableEntity creates a ListCDRArrangementsUnprocessableEntity with default headers values
func NewListCDRArrangementsUnprocessableEntity() *ListCDRArrangementsUnprocessableEntity {
	return &ListCDRArrangementsUnprocessableEntity{}
}

/*
ListCDRArrangementsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ListCDRArrangementsUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this list c d r arrangements unprocessable entity response has a 2xx status code
func (o *ListCDRArrangementsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list c d r arrangements unprocessable entity response has a 3xx status code
func (o *ListCDRArrangementsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list c d r arrangements unprocessable entity response has a 4xx status code
func (o *ListCDRArrangementsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this list c d r arrangements unprocessable entity response has a 5xx status code
func (o *ListCDRArrangementsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this list c d r arrangements unprocessable entity response a status code equal to that given
func (o *ListCDRArrangementsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the list c d r arrangements unprocessable entity response
func (o *ListCDRArrangementsUnprocessableEntity) Code() int {
	return 422
}

func (o *ListCDRArrangementsUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsUnprocessableEntity %s", 422, payload)
}

func (o *ListCDRArrangementsUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsUnprocessableEntity %s", 422, payload)
}

func (o *ListCDRArrangementsUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListCDRArrangementsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListCDRArrangementsTooManyRequests creates a ListCDRArrangementsTooManyRequests with default headers values
func NewListCDRArrangementsTooManyRequests() *ListCDRArrangementsTooManyRequests {
	return &ListCDRArrangementsTooManyRequests{}
}

/*
ListCDRArrangementsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListCDRArrangementsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list c d r arrangements too many requests response has a 2xx status code
func (o *ListCDRArrangementsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list c d r arrangements too many requests response has a 3xx status code
func (o *ListCDRArrangementsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list c d r arrangements too many requests response has a 4xx status code
func (o *ListCDRArrangementsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list c d r arrangements too many requests response has a 5xx status code
func (o *ListCDRArrangementsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list c d r arrangements too many requests response a status code equal to that given
func (o *ListCDRArrangementsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list c d r arrangements too many requests response
func (o *ListCDRArrangementsTooManyRequests) Code() int {
	return 429
}

func (o *ListCDRArrangementsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsTooManyRequests %s", 429, payload)
}

func (o *ListCDRArrangementsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/cdr/arrangements][%d] listCDRArrangementsTooManyRequests %s", 429, payload)
}

func (o *ListCDRArrangementsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListCDRArrangementsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
