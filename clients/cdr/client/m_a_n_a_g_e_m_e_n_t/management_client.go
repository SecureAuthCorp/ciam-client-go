// Code generated by go-swagger; DO NOT EDIT.

package m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new m a n a g e m e n t API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new m a n a g e m e n t API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new m a n a g e m e n t API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for m a n a g e m e n t API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCDRArrangement(params *GetCDRArrangementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementOK, error)

	GetCDRArrangements(params *GetCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementsOK, error)

	ListCDRArrangements(params *ListCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCDRArrangementsOK, error)

	ListCDRCustomerArrangements(params *ListCDRCustomerArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCDRCustomerArrangementsOK, error)

	ListCustomerClients(params *ListCustomerClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomerClientsOK, error)

	RevokeCDRArrangementByID(params *RevokeCDRArrangementByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRArrangementByIDNoContent, error)

	RevokeCDRArrangements(params *RevokeCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRArrangementsOK, error)

	RevokeCDRCustomerArrangements(params *RevokeCDRCustomerArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRCustomerArrangementsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetCDRArrangement gets c d r arrangement

	Retrieve CDR arrangement by its ID.

Call this endpoint to get the details of an arrangement within the specified workspace.
*/
func (a *Client) GetCDRArrangement(params *GetCDRArrangementParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDRArrangementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCDRArrangement",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/cdr/arrangements/{arrangementID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCDRArrangementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCDRArrangementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCDRArrangement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCDRArrangements lists c d r arrangements

	Returns the detailed list of all CDR arrangements available for a workspace.

To narrow the list down, use the request body parameters.
*/
func (a *Client) GetCDRArrangements(params *GetCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCDRArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCDRArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCDRArrangements",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/cdr/arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCDRArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCDRArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCDRArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListCDRArrangements lists c d r arrangements

	Returns the detailed list of all CDR arrangements available for a workspace.

To narrow the list down, use the request body parameters.
*/
func (a *Client) ListCDRArrangements(params *ListCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCDRArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCDRArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCDRArrangements",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/cdr/arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCDRArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCDRArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCDRArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListCDRCustomerArrangements lists c d r customer arrangements

	Returns the detailed list of CDR arrangements for a given customer.

This endpoint requires the `customer_id` value passed as a claim in an access token using the
[JWT Bearer flow](https://cloudentity.com/developers/basics/oauth-grant-types/using-jwt-profile-for-authorization-flows/).

To narrow the list down, use the request body parameters.
*/
func (a *Client) ListCDRCustomerArrangements(params *ListCDRCustomerArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCDRCustomerArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCDRCustomerArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCDRCustomerArrangements",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/cdr/customer-arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCDRCustomerArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCDRCustomerArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCDRCustomerArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListCustomerClients lists c d r customer clients

	Returns clients that currently have arrangements assigned to them.

The response must be filtered either by `customer_id` or `account_ids` value passed as claims in an access token
using the [JWT Bearer flow](https://cloudentity.com/developers/basics/oauth-grant-types/using-jwt-profile-for-authorization-flows/).

You can pass `account_ids` as an array of maximum 10 identifiers at once.
*/
func (a *Client) ListCustomerClients(params *ListCustomerClientsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListCustomerClientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCustomerClientsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listCustomerClients",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/cdr/customer-clients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCustomerClientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCustomerClientsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listCustomerClients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeCDRArrangementByID revokes c d r arrangement

Revoke a CDR arrangement. Specify the required arrangement with its identifier passed as the path parameter.
*/
func (a *Client) RevokeCDRArrangementByID(params *RevokeCDRArrangementByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRArrangementByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeCDRArrangementByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCDRArrangementByID",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/cdr/arrangements/{arrangementID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeCDRArrangementByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeCDRArrangementByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCDRArrangementByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeCDRArrangements revokes c d r arrangements

	Revoke CDR arrangements by parameters passed.

Currently, this endpoint supports revocation by the `client id` parameter.

To revoke all arrangements for a given client application, specify its identifier in the query.
*/
func (a *Client) RevokeCDRArrangements(params *RevokeCDRArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeCDRArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCDRArrangements",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/cdr/arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeCDRArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeCDRArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCDRArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeCDRCustomerArrangements revokes c d r customer arrangements

	Revoke CDR arrangements, access tokens, and refresh tokens for a given customer.

This endpoint requires the `customer_id` value passed as a claim in an access token using the
[JWT Bearer flow](https://cloudentity.com/developers/basics/oauth-grant-types/using-jwt-profile-for-authorization-flows/).
*/
func (a *Client) RevokeCDRCustomerArrangements(params *RevokeCDRCustomerArrangementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeCDRCustomerArrangementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeCDRCustomerArrangementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCDRCustomerArrangements",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/cdr/customer-arrangements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeCDRCustomerArrangementsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeCDRCustomerArrangementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCDRCustomerArrangements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
