// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResponseTypes An array of allowed response types
//
// The array may consist of the following arguments:
//
// `code` - when supplied as the value for the `response_type` parameter, a successful
// response includes an authorization code
//
// `code token` - when supplied as the value for the `response_type` parameter, a successful
// response includes an access token, an access token type, and an authorization code
//
// `id_token token` - when supplied as the value for the `response_type` parameter, a successful
// response includes an access token, an access token type, and an ID token
//
// `code id_token token` - when supplied as the value for the `response_type` parameter, a successful
// response includes an authorization code, an ID token, an access token, and an access token
// type.
//
// `token` - when supplied as the value for the `response_type` parameter, a successful
// response includes an access token and its type. This argument is used for the implicit grant
// flow, but is not recommended. Instead, you should use either the authorization code grant
// flow with PKCE or client authentication set to `none` and with the use of PKCE.
//
// example: ["token", "id_token", "code"]
// default: ["code"]
//
// swagger:model ResponseTypes
type ResponseTypes []string

var responseTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["token","id_token","code","code id_token","token id_token","token code","token id_token code","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseTypesItemsEnum = append(responseTypesItemsEnum, v)
	}
}

func (m *ResponseTypes) validateResponseTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, responseTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this response types
func (m ResponseTypes) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		// value enum
		if err := m.validateResponseTypesItemsEnum(strconv.Itoa(i), "body", m[i]); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this response types based on context it is used
func (m ResponseTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
