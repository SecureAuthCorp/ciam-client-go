// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBWriteDomesticScheduledConsentResponse5Data OBWriteDomesticScheduledConsentResponse5Data o b write domestic scheduled consent response5 data
//
// swagger:model OBWriteDomesticScheduledConsentResponse5Data
type OBWriteDomesticScheduledConsentResponse5Data struct {

	// authorisation
	Authorisation *OBWriteDomesticScheduledConsentResponse5DataAuthorisation `json:"Authorisation,omitempty" yaml:"Authorisation,omitempty"`

	// charges
	Charges []*OBWriteDomesticScheduledConsentResponse5DataChargesItems0 `json:"Charges" yaml:"Charges"`

	// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
	// Required: true
	// Max Length: 128
	// Min Length: 1
	ConsentID string `json:"ConsentId" yaml:"ConsentId"`

	// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Required: true
	// Format: date-time
	CreationDateTime strfmt.DateTime `json:"CreationDateTime" yaml:"CreationDateTime"`

	// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	// Format: date-time
	CutOffDateTime strfmt.DateTime `json:"CutOffDateTime,omitempty" yaml:"CutOffDateTime,omitempty"`

	// debtor
	Debtor *OBDebtorIdentification1 `json:"Debtor,omitempty" yaml:"Debtor,omitempty"`

	// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	// Format: date-time
	ExpectedExecutionDateTime strfmt.DateTime `json:"ExpectedExecutionDateTime,omitempty" yaml:"ExpectedExecutionDateTime,omitempty"`

	// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Format: date-time
	// Format: date-time
	ExpectedSettlementDateTime strfmt.DateTime `json:"ExpectedSettlementDateTime,omitempty" yaml:"ExpectedSettlementDateTime,omitempty"`

	// initiation
	// Required: true
	Initiation *OBWriteDomesticScheduledConsentResponse5DataInitiation `json:"Initiation" yaml:"Initiation"`

	// Specifies the Open Banking service request types.
	// Required: true
	// Enum: ["Create"]
	Permission string `json:"Permission" yaml:"Permission"`

	// Specifies to share the refund account details with PISP
	// Enum: ["No","Yes"]
	ReadRefundAccount string `json:"ReadRefundAccount,omitempty" yaml:"ReadRefundAccount,omitempty"`

	// s c a support data
	SCASupportData *OBWriteDomesticScheduledConsentResponse5DataSCASupportData `json:"SCASupportData,omitempty" yaml:"SCASupportData,omitempty"`

	// Specifies the status of consent resource in code form.
	// Required: true
	// Enum: ["Authorised","AwaitingAuthorisation","Consumed","Rejected"]
	Status string `json:"Status" yaml:"Status"`

	// Date and time at which the consent resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format.
	// All date-time fields in responses must include the timezone. An example is below:
	// 2017-04-05T10:43:07+00:00
	// Required: true
	// Format: date-time
	StatusUpdateDateTime strfmt.DateTime `json:"StatusUpdateDateTime" yaml:"StatusUpdateDateTime"`
}

// Validate validates this o b write domestic scheduled consent response5 data
func (m *OBWriteDomesticScheduledConsentResponse5Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorisation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCutOffDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedExecutionDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedSettlementDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadRefundAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSCASupportData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusUpdateDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateAuthorisation(formats strfmt.Registry) error {
	if swag.IsZero(m.Authorisation) { // not required
		return nil
	}

	if m.Authorisation != nil {
		if err := m.Authorisation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Authorisation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Authorisation")
			}
			return err
		}
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.Charges) { // not required
		return nil
	}

	for i := 0; i < len(m.Charges); i++ {
		if swag.IsZero(m.Charges[i]) { // not required
			continue
		}

		if m.Charges[i] != nil {
			if err := m.Charges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Charges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Charges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateConsentID(formats strfmt.Registry) error {

	if err := validate.RequiredString("ConsentId", "body", m.ConsentID); err != nil {
		return err
	}

	if err := validate.MinLength("ConsentId", "body", m.ConsentID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ConsentId", "body", m.ConsentID, 128); err != nil {
		return err
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateCreationDateTime(formats strfmt.Registry) error {

	if err := validate.Required("CreationDateTime", "body", strfmt.DateTime(m.CreationDateTime)); err != nil {
		return err
	}

	if err := validate.FormatOf("CreationDateTime", "body", "date-time", m.CreationDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateCutOffDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CutOffDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CutOffDateTime", "body", "date-time", m.CutOffDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateDebtor(formats strfmt.Registry) error {
	if swag.IsZero(m.Debtor) { // not required
		return nil
	}

	if m.Debtor != nil {
		if err := m.Debtor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Debtor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Debtor")
			}
			return err
		}
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateExpectedExecutionDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpectedExecutionDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpectedExecutionDateTime", "body", "date-time", m.ExpectedExecutionDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateExpectedSettlementDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpectedSettlementDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("ExpectedSettlementDateTime", "body", "date-time", m.ExpectedSettlementDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateInitiation(formats strfmt.Registry) error {

	if err := validate.Required("Initiation", "body", m.Initiation); err != nil {
		return err
	}

	if m.Initiation != nil {
		if err := m.Initiation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiation")
			}
			return err
		}
	}

	return nil
}

var oBWriteDomesticScheduledConsentResponse5DataTypePermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Create"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBWriteDomesticScheduledConsentResponse5DataTypePermissionPropEnum = append(oBWriteDomesticScheduledConsentResponse5DataTypePermissionPropEnum, v)
	}
}

const (

	// OBWriteDomesticScheduledConsentResponse5DataPermissionCreate captures enum value "Create"
	OBWriteDomesticScheduledConsentResponse5DataPermissionCreate string = "Create"
)

// prop value enum
func (m *OBWriteDomesticScheduledConsentResponse5Data) validatePermissionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBWriteDomesticScheduledConsentResponse5DataTypePermissionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validatePermission(formats strfmt.Registry) error {

	if err := validate.RequiredString("Permission", "body", m.Permission); err != nil {
		return err
	}

	// value enum
	if err := m.validatePermissionEnum("Permission", "body", m.Permission); err != nil {
		return err
	}

	return nil
}

var oBWriteDomesticScheduledConsentResponse5DataTypeReadRefundAccountPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["No","Yes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBWriteDomesticScheduledConsentResponse5DataTypeReadRefundAccountPropEnum = append(oBWriteDomesticScheduledConsentResponse5DataTypeReadRefundAccountPropEnum, v)
	}
}

const (

	// OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountNo captures enum value "No"
	OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountNo string = "No"

	// OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountYes captures enum value "Yes"
	OBWriteDomesticScheduledConsentResponse5DataReadRefundAccountYes string = "Yes"
)

// prop value enum
func (m *OBWriteDomesticScheduledConsentResponse5Data) validateReadRefundAccountEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBWriteDomesticScheduledConsentResponse5DataTypeReadRefundAccountPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateReadRefundAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadRefundAccount) { // not required
		return nil
	}

	// value enum
	if err := m.validateReadRefundAccountEnum("ReadRefundAccount", "body", m.ReadRefundAccount); err != nil {
		return err
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateSCASupportData(formats strfmt.Registry) error {
	if swag.IsZero(m.SCASupportData) { // not required
		return nil
	}

	if m.SCASupportData != nil {
		if err := m.SCASupportData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SCASupportData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SCASupportData")
			}
			return err
		}
	}

	return nil
}

var oBWriteDomesticScheduledConsentResponse5DataTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Authorised","AwaitingAuthorisation","Consumed","Rejected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oBWriteDomesticScheduledConsentResponse5DataTypeStatusPropEnum = append(oBWriteDomesticScheduledConsentResponse5DataTypeStatusPropEnum, v)
	}
}

const (

	// OBWriteDomesticScheduledConsentResponse5DataStatusAuthorised captures enum value "Authorised"
	OBWriteDomesticScheduledConsentResponse5DataStatusAuthorised string = "Authorised"

	// OBWriteDomesticScheduledConsentResponse5DataStatusAwaitingAuthorisation captures enum value "AwaitingAuthorisation"
	OBWriteDomesticScheduledConsentResponse5DataStatusAwaitingAuthorisation string = "AwaitingAuthorisation"

	// OBWriteDomesticScheduledConsentResponse5DataStatusConsumed captures enum value "Consumed"
	OBWriteDomesticScheduledConsentResponse5DataStatusConsumed string = "Consumed"

	// OBWriteDomesticScheduledConsentResponse5DataStatusRejected captures enum value "Rejected"
	OBWriteDomesticScheduledConsentResponse5DataStatusRejected string = "Rejected"
)

// prop value enum
func (m *OBWriteDomesticScheduledConsentResponse5Data) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oBWriteDomesticScheduledConsentResponse5DataTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("Status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) validateStatusUpdateDateTime(formats strfmt.Registry) error {

	if err := validate.Required("StatusUpdateDateTime", "body", strfmt.DateTime(m.StatusUpdateDateTime)); err != nil {
		return err
	}

	if err := validate.FormatOf("StatusUpdateDateTime", "body", "date-time", m.StatusUpdateDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this o b write domestic scheduled consent response5 data based on the context it is used
func (m *OBWriteDomesticScheduledConsentResponse5Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorisation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDebtor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitiation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSCASupportData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) contextValidateAuthorisation(ctx context.Context, formats strfmt.Registry) error {

	if m.Authorisation != nil {

		if swag.IsZero(m.Authorisation) { // not required
			return nil
		}

		if err := m.Authorisation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Authorisation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Authorisation")
			}
			return err
		}
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) contextValidateCharges(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Charges); i++ {

		if m.Charges[i] != nil {

			if swag.IsZero(m.Charges[i]) { // not required
				return nil
			}

			if err := m.Charges[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Charges" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Charges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) contextValidateDebtor(ctx context.Context, formats strfmt.Registry) error {

	if m.Debtor != nil {

		if swag.IsZero(m.Debtor) { // not required
			return nil
		}

		if err := m.Debtor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Debtor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Debtor")
			}
			return err
		}
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) contextValidateInitiation(ctx context.Context, formats strfmt.Registry) error {

	if m.Initiation != nil {

		if err := m.Initiation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Initiation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Initiation")
			}
			return err
		}
	}

	return nil
}

func (m *OBWriteDomesticScheduledConsentResponse5Data) contextValidateSCASupportData(ctx context.Context, formats strfmt.Registry) error {

	if m.SCASupportData != nil {

		if swag.IsZero(m.SCASupportData) { // not required
			return nil
		}

		if err := m.SCASupportData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SCASupportData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SCASupportData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBWriteDomesticScheduledConsentResponse5Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBWriteDomesticScheduledConsentResponse5Data) UnmarshalBinary(b []byte) error {
	var res OBWriteDomesticScheduledConsentResponse5Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
