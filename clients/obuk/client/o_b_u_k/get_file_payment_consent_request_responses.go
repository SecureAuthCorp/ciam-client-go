// Code generated by go-swagger; DO NOT EDIT.

package o_b_u_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obuk/models"
)

// GetFilePaymentConsentRequestReader is a Reader for the GetFilePaymentConsentRequest structure.
type GetFilePaymentConsentRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFilePaymentConsentRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFilePaymentConsentRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFilePaymentConsentRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFilePaymentConsentRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFilePaymentConsentRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetFilePaymentConsentRequestMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetFilePaymentConsentRequestNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetFilePaymentConsentRequestUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetFilePaymentConsentRequestTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFilePaymentConsentRequestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}] getFilePaymentConsentRequest", response, response.Code())
	}
}

// NewGetFilePaymentConsentRequestOK creates a GetFilePaymentConsentRequestOK with default headers values
func NewGetFilePaymentConsentRequestOK() *GetFilePaymentConsentRequestOK {
	return &GetFilePaymentConsentRequestOK{}
}

/*
GetFilePaymentConsentRequestOK describes a response with status code 200, with default header values.

File payment consent
*/
type GetFilePaymentConsentRequestOK struct {
	Payload *models.FilePaymentConsentResponse
}

// IsSuccess returns true when this get file payment consent request o k response has a 2xx status code
func (o *GetFilePaymentConsentRequestOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get file payment consent request o k response has a 3xx status code
func (o *GetFilePaymentConsentRequestOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request o k response has a 4xx status code
func (o *GetFilePaymentConsentRequestOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get file payment consent request o k response has a 5xx status code
func (o *GetFilePaymentConsentRequestOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get file payment consent request o k response a status code equal to that given
func (o *GetFilePaymentConsentRequestOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get file payment consent request o k response
func (o *GetFilePaymentConsentRequestOK) Code() int {
	return 200
}

func (o *GetFilePaymentConsentRequestOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestOK %s", 200, payload)
}

func (o *GetFilePaymentConsentRequestOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestOK %s", 200, payload)
}

func (o *GetFilePaymentConsentRequestOK) GetPayload() *models.FilePaymentConsentResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FilePaymentConsentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilePaymentConsentRequestBadRequest creates a GetFilePaymentConsentRequestBadRequest with default headers values
func NewGetFilePaymentConsentRequestBadRequest() *GetFilePaymentConsentRequestBadRequest {
	return &GetFilePaymentConsentRequestBadRequest{}
}

/*
GetFilePaymentConsentRequestBadRequest describes a response with status code 400, with default header values.

Error
*/
type GetFilePaymentConsentRequestBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get file payment consent request bad request response has a 2xx status code
func (o *GetFilePaymentConsentRequestBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get file payment consent request bad request response has a 3xx status code
func (o *GetFilePaymentConsentRequestBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request bad request response has a 4xx status code
func (o *GetFilePaymentConsentRequestBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get file payment consent request bad request response has a 5xx status code
func (o *GetFilePaymentConsentRequestBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get file payment consent request bad request response a status code equal to that given
func (o *GetFilePaymentConsentRequestBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get file payment consent request bad request response
func (o *GetFilePaymentConsentRequestBadRequest) Code() int {
	return 400
}

func (o *GetFilePaymentConsentRequestBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestBadRequest %s", 400, payload)
}

func (o *GetFilePaymentConsentRequestBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestBadRequest %s", 400, payload)
}

func (o *GetFilePaymentConsentRequestBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilePaymentConsentRequestUnauthorized creates a GetFilePaymentConsentRequestUnauthorized with default headers values
func NewGetFilePaymentConsentRequestUnauthorized() *GetFilePaymentConsentRequestUnauthorized {
	return &GetFilePaymentConsentRequestUnauthorized{}
}

/*
GetFilePaymentConsentRequestUnauthorized describes a response with status code 401, with default header values.

Error
*/
type GetFilePaymentConsentRequestUnauthorized struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get file payment consent request unauthorized response has a 2xx status code
func (o *GetFilePaymentConsentRequestUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get file payment consent request unauthorized response has a 3xx status code
func (o *GetFilePaymentConsentRequestUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request unauthorized response has a 4xx status code
func (o *GetFilePaymentConsentRequestUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get file payment consent request unauthorized response has a 5xx status code
func (o *GetFilePaymentConsentRequestUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get file payment consent request unauthorized response a status code equal to that given
func (o *GetFilePaymentConsentRequestUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get file payment consent request unauthorized response
func (o *GetFilePaymentConsentRequestUnauthorized) Code() int {
	return 401
}

func (o *GetFilePaymentConsentRequestUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestUnauthorized %s", 401, payload)
}

func (o *GetFilePaymentConsentRequestUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestUnauthorized %s", 401, payload)
}

func (o *GetFilePaymentConsentRequestUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilePaymentConsentRequestForbidden creates a GetFilePaymentConsentRequestForbidden with default headers values
func NewGetFilePaymentConsentRequestForbidden() *GetFilePaymentConsentRequestForbidden {
	return &GetFilePaymentConsentRequestForbidden{}
}

/*
GetFilePaymentConsentRequestForbidden describes a response with status code 403, with default header values.

Error
*/
type GetFilePaymentConsentRequestForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get file payment consent request forbidden response has a 2xx status code
func (o *GetFilePaymentConsentRequestForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get file payment consent request forbidden response has a 3xx status code
func (o *GetFilePaymentConsentRequestForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request forbidden response has a 4xx status code
func (o *GetFilePaymentConsentRequestForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get file payment consent request forbidden response has a 5xx status code
func (o *GetFilePaymentConsentRequestForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get file payment consent request forbidden response a status code equal to that given
func (o *GetFilePaymentConsentRequestForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get file payment consent request forbidden response
func (o *GetFilePaymentConsentRequestForbidden) Code() int {
	return 403
}

func (o *GetFilePaymentConsentRequestForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestForbidden %s", 403, payload)
}

func (o *GetFilePaymentConsentRequestForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestForbidden %s", 403, payload)
}

func (o *GetFilePaymentConsentRequestForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilePaymentConsentRequestMethodNotAllowed creates a GetFilePaymentConsentRequestMethodNotAllowed with default headers values
func NewGetFilePaymentConsentRequestMethodNotAllowed() *GetFilePaymentConsentRequestMethodNotAllowed {
	return &GetFilePaymentConsentRequestMethodNotAllowed{}
}

/*
GetFilePaymentConsentRequestMethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type GetFilePaymentConsentRequestMethodNotAllowed struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get file payment consent request method not allowed response has a 2xx status code
func (o *GetFilePaymentConsentRequestMethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get file payment consent request method not allowed response has a 3xx status code
func (o *GetFilePaymentConsentRequestMethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request method not allowed response has a 4xx status code
func (o *GetFilePaymentConsentRequestMethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get file payment consent request method not allowed response has a 5xx status code
func (o *GetFilePaymentConsentRequestMethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get file payment consent request method not allowed response a status code equal to that given
func (o *GetFilePaymentConsentRequestMethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get file payment consent request method not allowed response
func (o *GetFilePaymentConsentRequestMethodNotAllowed) Code() int {
	return 405
}

func (o *GetFilePaymentConsentRequestMethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestMethodNotAllowed %s", 405, payload)
}

func (o *GetFilePaymentConsentRequestMethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestMethodNotAllowed %s", 405, payload)
}

func (o *GetFilePaymentConsentRequestMethodNotAllowed) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilePaymentConsentRequestNotAcceptable creates a GetFilePaymentConsentRequestNotAcceptable with default headers values
func NewGetFilePaymentConsentRequestNotAcceptable() *GetFilePaymentConsentRequestNotAcceptable {
	return &GetFilePaymentConsentRequestNotAcceptable{}
}

/*
GetFilePaymentConsentRequestNotAcceptable describes a response with status code 406, with default header values.

Error
*/
type GetFilePaymentConsentRequestNotAcceptable struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get file payment consent request not acceptable response has a 2xx status code
func (o *GetFilePaymentConsentRequestNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get file payment consent request not acceptable response has a 3xx status code
func (o *GetFilePaymentConsentRequestNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request not acceptable response has a 4xx status code
func (o *GetFilePaymentConsentRequestNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get file payment consent request not acceptable response has a 5xx status code
func (o *GetFilePaymentConsentRequestNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get file payment consent request not acceptable response a status code equal to that given
func (o *GetFilePaymentConsentRequestNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the get file payment consent request not acceptable response
func (o *GetFilePaymentConsentRequestNotAcceptable) Code() int {
	return 406
}

func (o *GetFilePaymentConsentRequestNotAcceptable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestNotAcceptable %s", 406, payload)
}

func (o *GetFilePaymentConsentRequestNotAcceptable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestNotAcceptable %s", 406, payload)
}

func (o *GetFilePaymentConsentRequestNotAcceptable) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilePaymentConsentRequestUnsupportedMediaType creates a GetFilePaymentConsentRequestUnsupportedMediaType with default headers values
func NewGetFilePaymentConsentRequestUnsupportedMediaType() *GetFilePaymentConsentRequestUnsupportedMediaType {
	return &GetFilePaymentConsentRequestUnsupportedMediaType{}
}

/*
GetFilePaymentConsentRequestUnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type GetFilePaymentConsentRequestUnsupportedMediaType struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get file payment consent request unsupported media type response has a 2xx status code
func (o *GetFilePaymentConsentRequestUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get file payment consent request unsupported media type response has a 3xx status code
func (o *GetFilePaymentConsentRequestUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request unsupported media type response has a 4xx status code
func (o *GetFilePaymentConsentRequestUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get file payment consent request unsupported media type response has a 5xx status code
func (o *GetFilePaymentConsentRequestUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get file payment consent request unsupported media type response a status code equal to that given
func (o *GetFilePaymentConsentRequestUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the get file payment consent request unsupported media type response
func (o *GetFilePaymentConsentRequestUnsupportedMediaType) Code() int {
	return 415
}

func (o *GetFilePaymentConsentRequestUnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestUnsupportedMediaType %s", 415, payload)
}

func (o *GetFilePaymentConsentRequestUnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestUnsupportedMediaType %s", 415, payload)
}

func (o *GetFilePaymentConsentRequestUnsupportedMediaType) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilePaymentConsentRequestTooManyRequests creates a GetFilePaymentConsentRequestTooManyRequests with default headers values
func NewGetFilePaymentConsentRequestTooManyRequests() *GetFilePaymentConsentRequestTooManyRequests {
	return &GetFilePaymentConsentRequestTooManyRequests{}
}

/*
GetFilePaymentConsentRequestTooManyRequests describes a response with status code 429, with default header values.

Error
*/
type GetFilePaymentConsentRequestTooManyRequests struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get file payment consent request too many requests response has a 2xx status code
func (o *GetFilePaymentConsentRequestTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get file payment consent request too many requests response has a 3xx status code
func (o *GetFilePaymentConsentRequestTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request too many requests response has a 4xx status code
func (o *GetFilePaymentConsentRequestTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get file payment consent request too many requests response has a 5xx status code
func (o *GetFilePaymentConsentRequestTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get file payment consent request too many requests response a status code equal to that given
func (o *GetFilePaymentConsentRequestTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get file payment consent request too many requests response
func (o *GetFilePaymentConsentRequestTooManyRequests) Code() int {
	return 429
}

func (o *GetFilePaymentConsentRequestTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestTooManyRequests %s", 429, payload)
}

func (o *GetFilePaymentConsentRequestTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestTooManyRequests %s", 429, payload)
}

func (o *GetFilePaymentConsentRequestTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilePaymentConsentRequestInternalServerError creates a GetFilePaymentConsentRequestInternalServerError with default headers values
func NewGetFilePaymentConsentRequestInternalServerError() *GetFilePaymentConsentRequestInternalServerError {
	return &GetFilePaymentConsentRequestInternalServerError{}
}

/*
GetFilePaymentConsentRequestInternalServerError describes a response with status code 500, with default header values.

Error
*/
type GetFilePaymentConsentRequestInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get file payment consent request internal server error response has a 2xx status code
func (o *GetFilePaymentConsentRequestInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get file payment consent request internal server error response has a 3xx status code
func (o *GetFilePaymentConsentRequestInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get file payment consent request internal server error response has a 4xx status code
func (o *GetFilePaymentConsentRequestInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get file payment consent request internal server error response has a 5xx status code
func (o *GetFilePaymentConsentRequestInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get file payment consent request internal server error response a status code equal to that given
func (o *GetFilePaymentConsentRequestInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get file payment consent request internal server error response
func (o *GetFilePaymentConsentRequestInternalServerError) Code() int {
	return 500
}

func (o *GetFilePaymentConsentRequestInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestInternalServerError %s", 500, payload)
}

func (o *GetFilePaymentConsentRequestInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/v3.1/pisp/file-payment-consents/{consentID}][%d] getFilePaymentConsentRequestInternalServerError %s", 500, payload)
}

func (o *GetFilePaymentConsentRequestInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetFilePaymentConsentRequestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
