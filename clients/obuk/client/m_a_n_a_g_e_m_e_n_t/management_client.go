// Code generated by go-swagger; DO NOT EDIT.

package m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new m a n a g e m e n t API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new m a n a g e m e n t API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new m a n a g e m e n t API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for m a n a g e m e n t API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConsumeOBUKConsent(params *ConsumeOBUKConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConsumeOBUKConsentOK, error)

	GetOBConsents(params *GetOBConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBConsentsOK, error)

	ListOBConsents(params *ListOBConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBConsentsOK, error)

	RevokeOBUKConsent(params *RevokeOBUKConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBUKConsentNoContent, error)

	RevokeOBUKConsents(params *RevokeOBUKConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBUKConsentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ConsumeOBUKConsent consumes openbanking consent by ID

	This API consumes openbanking consent by consent id.

For backwards compatibility it can also be used to consume OBBR consents and in that case returns BrazilConsent (deprecated)
*/
func (a *Client) ConsumeOBUKConsent(params *ConsumeOBUKConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConsumeOBUKConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsumeOBUKConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "consumeOBUKConsent",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/open-banking/consents/{consentID}/consume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConsumeOBUKConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsumeOBUKConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for consumeOBUKConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOBConsents gets openbanking consents

	This API returns the list of openbanking consents.

You can narrow the list of returned consents using filters defined in query parameters.
See GetConsentsParams for details.
*/
func (a *Client) GetOBConsents(params *GetOBConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBConsents",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/open-banking/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListOBConsents lists openbanking consents

	This API returns the list of openbanking consents.

You can narrow the list of returned consents using filters defined in request body.
See ListConsentsParams for details.
*/
func (a *Client) ListOBConsents(params *ListOBConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOBConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOBConsents",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/open-banking/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOBConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOBConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOBConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeOBUKConsent revokes openbanking consent by ID

	This API revokes openbanking consent by consent id.

For backwards compatibility it can also be used to revoke OBBR consents (deprecated)
*/
func (a *Client) RevokeOBUKConsent(params *RevokeOBUKConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBUKConsentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOBUKConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOBUKConsent",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/open-banking/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeOBUKConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOBUKConsentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOBUKConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeOBUKConsents revokes openbanking consents

	This API revokes openbanking consents matching provided parameters.

Currently supporting removal by client id.
Use ?client_id={clientID} to remove all consents by a given client.

You can also optionally specify which consent should be removed by specifying consent type
example: ?client_id={clientID}&consent_type=account_access
*/
func (a *Client) RevokeOBUKConsents(params *RevokeOBUKConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBUKConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOBUKConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOBUKConsents",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/open-banking/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeOBUKConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOBUKConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOBUKConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
