// Code generated by go-swagger; DO NOT EDIT.

package c_o_n_s_e_n_t_p_a_g_e

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new c o n s e n t p a g e API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new c o n s e n t p a g e API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new c o n s e n t p a g e API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for c o n s e n t p a g e API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptAccountAccessConsentSystem(params *AcceptAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptAccountAccessConsentSystemOK, error)

	AcceptDomesticPaymentConsentSystem(params *AcceptDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticPaymentConsentSystemOK, error)

	AcceptDomesticScheduledPaymentConsentSystem(params *AcceptDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticScheduledPaymentConsentSystemOK, error)

	AcceptDomesticStandingOrderConsentSystem(params *AcceptDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticStandingOrderConsentSystemOK, error)

	AcceptFilePaymentConsentSystem(params *AcceptFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptFilePaymentConsentSystemOK, error)

	AcceptInternationalPaymentConsentSystem(params *AcceptInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalPaymentConsentSystemOK, error)

	AcceptInternationalScheduledPaymentConsentSystem(params *AcceptInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalScheduledPaymentConsentSystemOK, error)

	AcceptInternationalStandingOrderConsentSystem(params *AcceptInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalStandingOrderConsentSystemOK, error)

	GetAccountAccessConsentSystem(params *GetAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountAccessConsentSystemOK, error)

	GetDomesticPaymentConsentSystem(params *GetDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticPaymentConsentSystemOK, error)

	GetDomesticScheduledPaymentConsentSystem(params *GetDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticScheduledPaymentConsentSystemOK, error)

	GetDomesticStandingOrderConsentSystem(params *GetDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticStandingOrderConsentSystemOK, error)

	GetFilePaymentConsentSystem(params *GetFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentConsentSystemOK, error)

	GetInternationalPaymentConsentSystem(params *GetInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalPaymentConsentSystemOK, error)

	GetInternationalScheduledPaymentConsentSystem(params *GetInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalScheduledPaymentConsentSystemOK, error)

	GetInternationalStandingOrderConsentSystem(params *GetInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalStandingOrderConsentSystemOK, error)

	RejectAccountAccessConsentSystem(params *RejectAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectAccountAccessConsentSystemOK, error)

	RejectDomesticPaymentConsentSystem(params *RejectDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticPaymentConsentSystemOK, error)

	RejectDomesticScheduledPaymentConsentSystem(params *RejectDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticScheduledPaymentConsentSystemOK, error)

	RejectDomesticStandingOrderConsentSystem(params *RejectDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticStandingOrderConsentSystemOK, error)

	RejectFilePaymentConsentSystem(params *RejectFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectFilePaymentConsentSystemOK, error)

	RejectInternationalPaymentConsentSystem(params *RejectInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalPaymentConsentSystemOK, error)

	RejectInternationalScheduledPaymentConsentSystem(params *RejectInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalScheduledPaymentConsentSystemOK, error)

	RejectInternationalStandingOrderConsentSystem(params *RejectInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalStandingOrderConsentSystemOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AcceptAccountAccessConsentSystem accepts account access consent

This API can be used to notify ACP that user granted consent to a account-access.
*/
func (a *Client) AcceptAccountAccessConsentSystem(params *AcceptAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptAccountAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptAccountAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptAccountAccessConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/account-access-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptAccountAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptAccountAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptAccountAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AcceptDomesticPaymentConsentSystem accepts domestic payment consent

This API can be used to notify ACP that user granted consent to a domestic-payment.
*/
func (a *Client) AcceptDomesticPaymentConsentSystem(params *AcceptDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptDomesticPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptDomesticPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/domestic-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptDomesticPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptDomesticPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptDomesticPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AcceptDomesticScheduledPaymentConsentSystem accepts domestic scheduled payment consent

This API can be used to notify ACP that user granted consent to a domestic-scheduled-payment.
*/
func (a *Client) AcceptDomesticScheduledPaymentConsentSystem(params *AcceptDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptDomesticScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptDomesticScheduledPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/domestic-scheduled-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptDomesticScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptDomesticScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptDomesticScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AcceptDomesticStandingOrderConsentSystem accepts domestic standing order consent

This API can be used to notify ACP that user granted consent to a domestic-standing-order.
*/
func (a *Client) AcceptDomesticStandingOrderConsentSystem(params *AcceptDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptDomesticStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptDomesticStandingOrderConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/domestic-standing-order-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptDomesticStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptDomesticStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptDomesticStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AcceptFilePaymentConsentSystem accepts file payment consent

This API can be used to notify ACP that user granted consent to a file-payment.
*/
func (a *Client) AcceptFilePaymentConsentSystem(params *AcceptFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptFilePaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptFilePaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptFilePaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/file-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptFilePaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptFilePaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptFilePaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AcceptInternationalPaymentConsentSystem accepts international payment consent

This API can be used to notify ACP that user granted consent to a international-payment.
*/
func (a *Client) AcceptInternationalPaymentConsentSystem(params *AcceptInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptInternationalPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptInternationalPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/international-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptInternationalPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptInternationalPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptInternationalPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AcceptInternationalScheduledPaymentConsentSystem accepts international scheduled payment consent

This API can be used to notify ACP that user granted consent to a international-scheduled-payment.
*/
func (a *Client) AcceptInternationalScheduledPaymentConsentSystem(params *AcceptInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptInternationalScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptInternationalScheduledPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/international-scheduled-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptInternationalScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptInternationalScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptInternationalScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AcceptInternationalStandingOrderConsentSystem accepts international standing order consent

This API can be used to notify ACP that user granted consent to a international-standing-order.
*/
func (a *Client) AcceptInternationalStandingOrderConsentSystem(params *AcceptInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptInternationalStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptInternationalStandingOrderConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/international-standing-order-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptInternationalStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptInternationalStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptInternationalStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAccountAccessConsentSystem gets account access consent

	This API can be used by a custom openbanking consent page.

The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetAccountAccessConsentSystem(params *GetAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountAccessConsentSystem",
		Method:             "GET",
		PathPattern:        "/open-banking/account-access-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDomesticPaymentConsentSystem gets domestic payment consent

	This API can be used by a custom openbanking consent page.

The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetDomesticPaymentConsentSystem(params *GetDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/open-banking/domestic-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDomesticScheduledPaymentConsentSystem gets domestic scheduled payment consent

	This API can be used by a custom openbanking consent page.

The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetDomesticScheduledPaymentConsentSystem(params *GetDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticScheduledPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/open-banking/domestic-scheduled-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDomesticStandingOrderConsentSystem gets domestic standing order consent

	This API can be used by a custom openbanking consent page.

The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetDomesticStandingOrderConsentSystem(params *GetDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticStandingOrderConsentSystem",
		Method:             "GET",
		PathPattern:        "/open-banking/domestic-standing-order-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetFilePaymentConsentSystem gets file payment consent

	This API can be used by a custom openbanking consent page.

The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetFilePaymentConsentSystem(params *GetFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilePaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/open-banking/file-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilePaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetInternationalPaymentConsentSystem gets international payment consent

	This API can be used by a custom openbanking consent page.

The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetInternationalPaymentConsentSystem(params *GetInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/open-banking/international-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetInternationalScheduledPaymentConsentSystem gets international scheduled payment consent

	This API can be used by a custom openbanking consent page.

The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetInternationalScheduledPaymentConsentSystem(params *GetInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalScheduledPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/open-banking/international-scheduled-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetInternationalStandingOrderConsentSystem gets international standing order consent

	This API can be used by a custom openbanking consent page.

The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetInternationalStandingOrderConsentSystem(params *GetInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalStandingOrderConsentSystem",
		Method:             "GET",
		PathPattern:        "/open-banking/international-standing-order-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectAccountAccessConsentSystem rejects account access consent

This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectAccountAccessConsentSystem(params *RejectAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectAccountAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectAccountAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectAccountAccessConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/account-access-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectAccountAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectAccountAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectAccountAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectDomesticPaymentConsentSystem rejects domestic payment consent

This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectDomesticPaymentConsentSystem(params *RejectDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectDomesticPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectDomesticPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/domestic-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectDomesticPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectDomesticPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectDomesticPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectDomesticScheduledPaymentConsentSystem rejects domestic scheduled payment consent

This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectDomesticScheduledPaymentConsentSystem(params *RejectDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectDomesticScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectDomesticScheduledPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/domestic-scheduled-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectDomesticScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectDomesticScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectDomesticScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectDomesticStandingOrderConsentSystem rejects domestic standing order consent

This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectDomesticStandingOrderConsentSystem(params *RejectDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectDomesticStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectDomesticStandingOrderConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/domestic-standing-order-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectDomesticStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectDomesticStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectDomesticStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectFilePaymentConsentSystem rejects file payment consent

This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectFilePaymentConsentSystem(params *RejectFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectFilePaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectFilePaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectFilePaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/file-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectFilePaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectFilePaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectFilePaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectInternationalPaymentConsentSystem rejects international payment consent

This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectInternationalPaymentConsentSystem(params *RejectInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectInternationalPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectInternationalPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/international-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectInternationalPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectInternationalPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectInternationalPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectInternationalScheduledPaymentConsentSystem rejects international scheduled payment consent

This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectInternationalScheduledPaymentConsentSystem(params *RejectInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectInternationalScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectInternationalScheduledPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/international-scheduled-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectInternationalScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectInternationalScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectInternationalScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RejectInternationalStandingOrderConsentSystem rejects international standing order consent

This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectInternationalStandingOrderConsentSystem(params *RejectInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectInternationalStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectInternationalStandingOrderConsentSystem",
		Method:             "POST",
		PathPattern:        "/open-banking/international-standing-order-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectInternationalStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectInternationalStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectInternationalStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
