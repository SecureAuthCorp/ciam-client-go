// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RequestCode request code
//
// swagger:model RequestCode
type RequestCode struct {

	// address
	Address string `json:"address,omitempty"`

	// identifier
	Identifier string `json:"identifier,omitempty"`

	// type
	// Required: true
	// Enum: [activation reset_password challenge verify_address authentication]
	Type string `json:"type"`
}

// Validate validates this request code
func (m *RequestCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var requestCodeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["activation","reset_password","challenge","verify_address","authentication"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestCodeTypeTypePropEnum = append(requestCodeTypeTypePropEnum, v)
	}
}

const (

	// RequestCodeTypeActivation captures enum value "activation"
	RequestCodeTypeActivation string = "activation"

	// RequestCodeTypeResetPassword captures enum value "reset_password"
	RequestCodeTypeResetPassword string = "reset_password"

	// RequestCodeTypeChallenge captures enum value "challenge"
	RequestCodeTypeChallenge string = "challenge"

	// RequestCodeTypeVerifyAddress captures enum value "verify_address"
	RequestCodeTypeVerifyAddress string = "verify_address"

	// RequestCodeTypeAuthentication captures enum value "authentication"
	RequestCodeTypeAuthentication string = "authentication"
)

// prop value enum
func (m *RequestCode) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, requestCodeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RequestCode) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this request code based on context it is used
func (m *RequestCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RequestCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequestCode) UnmarshalBinary(b []byte) error {
	var res RequestCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
