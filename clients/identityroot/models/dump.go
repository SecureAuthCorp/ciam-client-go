// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Dump dump
//
// swagger:model Dump
type Dump struct {

	// codes
	Codes []*Code `json:"codes"`

	// pools
	Pools []*Pool `json:"pools"`

	// schemas
	Schemas []*Schema `json:"schemas"`

	// user credentials
	UserCredentials []*UserCredential `json:"user_credentials"`

	// user identifiers
	UserIdentifiers []*UserIdentifier `json:"user_identifiers"`

	// user verifiable addresses
	UserVerifiableAddresses []*UserVerifiableAddress `json:"user_verifiable_addresses"`

	// users
	Users []*User `json:"users"`
}

// Validate validates this dump
func (m *Dump) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserVerifiableAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dump) validateCodes(formats strfmt.Registry) error {
	if swag.IsZero(m.Codes) { // not required
		return nil
	}

	for i := 0; i < len(m.Codes); i++ {
		if swag.IsZero(m.Codes[i]) { // not required
			continue
		}

		if m.Codes[i] != nil {
			if err := m.Codes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("codes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("codes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validatePools(formats strfmt.Registry) error {
	if swag.IsZero(m.Pools) { // not required
		return nil
	}

	for i := 0; i < len(m.Pools); i++ {
		if swag.IsZero(m.Pools[i]) { // not required
			continue
		}

		if m.Pools[i] != nil {
			if err := m.Pools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateSchemas(formats strfmt.Registry) error {
	if swag.IsZero(m.Schemas) { // not required
		return nil
	}

	for i := 0; i < len(m.Schemas); i++ {
		if swag.IsZero(m.Schemas[i]) { // not required
			continue
		}

		if m.Schemas[i] != nil {
			if err := m.Schemas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schemas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateUserCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.UserCredentials) { // not required
		return nil
	}

	for i := 0; i < len(m.UserCredentials); i++ {
		if swag.IsZero(m.UserCredentials[i]) { // not required
			continue
		}

		if m.UserCredentials[i] != nil {
			if err := m.UserCredentials[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateUserIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.UserIdentifiers) { // not required
		return nil
	}

	for i := 0; i < len(m.UserIdentifiers); i++ {
		if swag.IsZero(m.UserIdentifiers[i]) { // not required
			continue
		}

		if m.UserIdentifiers[i] != nil {
			if err := m.UserIdentifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_identifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateUserVerifiableAddresses(formats strfmt.Registry) error {
	if swag.IsZero(m.UserVerifiableAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.UserVerifiableAddresses); i++ {
		if swag.IsZero(m.UserVerifiableAddresses[i]) { // not required
			continue
		}

		if m.UserVerifiableAddresses[i] != nil {
			if err := m.UserVerifiableAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_verifiable_addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_verifiable_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) validateUsers(formats strfmt.Registry) error {
	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dump based on the context it is used
func (m *Dump) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePools(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserVerifiableAddresses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dump) contextValidateCodes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Codes); i++ {

		if m.Codes[i] != nil {
			if err := m.Codes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("codes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("codes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidatePools(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pools); i++ {

		if m.Pools[i] != nil {
			if err := m.Pools[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pools" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateSchemas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Schemas); i++ {

		if m.Schemas[i] != nil {
			if err := m.Schemas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schemas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("schemas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateUserCredentials(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserCredentials); i++ {

		if m.UserCredentials[i] != nil {
			if err := m.UserCredentials[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_credentials" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_credentials" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateUserIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserIdentifiers); i++ {

		if m.UserIdentifiers[i] != nil {
			if err := m.UserIdentifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_identifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_identifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateUserVerifiableAddresses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserVerifiableAddresses); i++ {

		if m.UserVerifiableAddresses[i] != nil {
			if err := m.UserVerifiableAddresses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_verifiable_addresses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("user_verifiable_addresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dump) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Users); i++ {

		if m.Users[i] != nil {
			if err := m.Users[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Dump) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dump) UnmarshalBinary(b []byte) error {
	var res Dump
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
