// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserVerifiableAddress user verifiable address
//
// swagger:model UserVerifiableAddress
type UserVerifiableAddress struct {

	// address
	// Required: true
	Address string `json:"address" yaml:"address"`

	// address lc
	// Required: true
	AddressLc string `json:"address_lc" yaml:"address_lc"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at" yaml:"created_at"`

	// id
	ID string `json:"id,omitempty" yaml:"id,omitempty"`

	// general purpose metadata
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// preferred contact method
	// Example: sms
	// Enum: [sms voice]
	PreferredContactMethod string `json:"preferred_contact_method,omitempty" yaml:"preferred_contact_method,omitempty"`

	// status
	// Example: active
	// Required: true
	// Enum: [active inactive]
	Status string `json:"status" yaml:"status"`

	// tenant id
	// Example: default
	// Required: true
	TenantID string `json:"tenant_id" yaml:"tenant_id"`

	// type
	// Example: mobile
	// Required: true
	// Enum: [email mobile]
	Type string `json:"type" yaml:"type"`

	// updated at
	// Required: true
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at" yaml:"updated_at"`

	// user id
	// Required: true
	UserID string `json:"user_id" yaml:"user_id"`

	// user pool id
	// Example: default
	// Required: true
	UserPoolID string `json:"user_pool_id" yaml:"user_pool_id"`

	// verified
	// Required: true
	Verified bool `json:"verified" yaml:"verified"`

	// verified at
	// Format: date-time
	VerifiedAt strfmt.DateTime `json:"verified_at,omitempty" yaml:"verified_at,omitempty"`
}

// Validate validates this user verifiable address
func (m *UserVerifiableAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredContactMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPoolID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserVerifiableAddress) validateAddress(formats strfmt.Registry) error {

	if err := validate.RequiredString("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *UserVerifiableAddress) validateAddressLc(formats strfmt.Registry) error {

	if err := validate.RequiredString("address_lc", "body", m.AddressLc); err != nil {
		return err
	}

	return nil
}

func (m *UserVerifiableAddress) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var userVerifiableAddressTypePreferredContactMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","voice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userVerifiableAddressTypePreferredContactMethodPropEnum = append(userVerifiableAddressTypePreferredContactMethodPropEnum, v)
	}
}

const (

	// UserVerifiableAddressPreferredContactMethodSms captures enum value "sms"
	UserVerifiableAddressPreferredContactMethodSms string = "sms"

	// UserVerifiableAddressPreferredContactMethodVoice captures enum value "voice"
	UserVerifiableAddressPreferredContactMethodVoice string = "voice"
)

// prop value enum
func (m *UserVerifiableAddress) validatePreferredContactMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userVerifiableAddressTypePreferredContactMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserVerifiableAddress) validatePreferredContactMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredContactMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validatePreferredContactMethodEnum("preferred_contact_method", "body", m.PreferredContactMethod); err != nil {
		return err
	}

	return nil
}

var userVerifiableAddressTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userVerifiableAddressTypeStatusPropEnum = append(userVerifiableAddressTypeStatusPropEnum, v)
	}
}

const (

	// UserVerifiableAddressStatusActive captures enum value "active"
	UserVerifiableAddressStatusActive string = "active"

	// UserVerifiableAddressStatusInactive captures enum value "inactive"
	UserVerifiableAddressStatusInactive string = "inactive"
)

// prop value enum
func (m *UserVerifiableAddress) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userVerifiableAddressTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserVerifiableAddress) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *UserVerifiableAddress) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

var userVerifiableAddressTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","mobile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userVerifiableAddressTypeTypePropEnum = append(userVerifiableAddressTypeTypePropEnum, v)
	}
}

const (

	// UserVerifiableAddressTypeEmail captures enum value "email"
	UserVerifiableAddressTypeEmail string = "email"

	// UserVerifiableAddressTypeMobile captures enum value "mobile"
	UserVerifiableAddressTypeMobile string = "mobile"
)

// prop value enum
func (m *UserVerifiableAddress) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userVerifiableAddressTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserVerifiableAddress) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *UserVerifiableAddress) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserVerifiableAddress) validateUserID(formats strfmt.Registry) error {

	if err := validate.RequiredString("user_id", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *UserVerifiableAddress) validateUserPoolID(formats strfmt.Registry) error {

	if err := validate.RequiredString("user_pool_id", "body", m.UserPoolID); err != nil {
		return err
	}

	return nil
}

func (m *UserVerifiableAddress) validateVerified(formats strfmt.Registry) error {

	if err := validate.Required("verified", "body", bool(m.Verified)); err != nil {
		return err
	}

	return nil
}

func (m *UserVerifiableAddress) validateVerifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.VerifiedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("verified_at", "body", "date-time", m.VerifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user verifiable address based on context it is used
func (m *UserVerifiableAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserVerifiableAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserVerifiableAddress) UnmarshalBinary(b []byte) error {
	var res UserVerifiableAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
