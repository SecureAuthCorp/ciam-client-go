// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identityroot/models"
)

// NewPatchConfigurationParams creates a new PatchConfigurationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchConfigurationParams() *PatchConfigurationParams {
	return &PatchConfigurationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchConfigurationParamsWithTimeout creates a new PatchConfigurationParams object
// with the ability to set a timeout on a request.
func NewPatchConfigurationParamsWithTimeout(timeout time.Duration) *PatchConfigurationParams {
	return &PatchConfigurationParams{
		timeout: timeout,
	}
}

// NewPatchConfigurationParamsWithContext creates a new PatchConfigurationParams object
// with the ability to set a context for a request.
func NewPatchConfigurationParamsWithContext(ctx context.Context) *PatchConfigurationParams {
	return &PatchConfigurationParams{
		Context: ctx,
	}
}

// NewPatchConfigurationParamsWithHTTPClient creates a new PatchConfigurationParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchConfigurationParamsWithHTTPClient(client *http.Client) *PatchConfigurationParams {
	return &PatchConfigurationParams{
		HTTPClient: client,
	}
}

/* PatchConfigurationParams contains all the parameters to send to the API endpoint
   for the patch configuration operation.

   Typically these are written to a http.Request.
*/
type PatchConfigurationParams struct {

	// Mode.
	//
	// Format: insertMode
	Mode *string

	// Patch.
	Patch models.PatchConfiguration

	/* Tid.

	   Tenant id

	   Default: "default"
	*/
	Tid *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchConfigurationParams) WithDefaults() *PatchConfigurationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchConfigurationParams) SetDefaults() {
	var (
		tidDefault = string("default")
	)

	val := PatchConfigurationParams{
		Tid: &tidDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the patch configuration params
func (o *PatchConfigurationParams) WithTimeout(timeout time.Duration) *PatchConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch configuration params
func (o *PatchConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch configuration params
func (o *PatchConfigurationParams) WithContext(ctx context.Context) *PatchConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch configuration params
func (o *PatchConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch configuration params
func (o *PatchConfigurationParams) WithHTTPClient(client *http.Client) *PatchConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch configuration params
func (o *PatchConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMode adds the mode to the patch configuration params
func (o *PatchConfigurationParams) WithMode(mode *string) *PatchConfigurationParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the patch configuration params
func (o *PatchConfigurationParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithPatch adds the patch to the patch configuration params
func (o *PatchConfigurationParams) WithPatch(patch models.PatchConfiguration) *PatchConfigurationParams {
	o.SetPatch(patch)
	return o
}

// SetPatch adds the patch to the patch configuration params
func (o *PatchConfigurationParams) SetPatch(patch models.PatchConfiguration) {
	o.Patch = patch
}

// WithTid adds the tid to the patch configuration params
func (o *PatchConfigurationParams) WithTid(tid *string) *PatchConfigurationParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the patch configuration params
func (o *PatchConfigurationParams) SetTid(tid *string) {
	o.Tid = tid
}

// WriteToRequest writes these params to a swagger request
func (o *PatchConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Mode != nil {

		// query param mode
		var qrMode string

		if o.Mode != nil {
			qrMode = *o.Mode
		}
		qMode := qrMode
		if qMode != "" {

			if err := r.SetQueryParam("mode", qMode); err != nil {
				return err
			}
		}
	}
	if o.Patch != nil {
		if err := r.SetBodyParam(o.Patch); err != nil {
			return err
		}
	}

	if o.Tid != nil {

		// query param tid
		var qrTid string

		if o.Tid != nil {
			qrTid = *o.Tid
		}
		qTid := qrTid
		if qTid != "" {

			if err := r.SetQueryParam("tid", qTid); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
