// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/identityroot/models"
)

// NewSystemGenerateCodeParams creates a new SystemGenerateCodeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSystemGenerateCodeParams() *SystemGenerateCodeParams {
	return &SystemGenerateCodeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSystemGenerateCodeParamsWithTimeout creates a new SystemGenerateCodeParams object
// with the ability to set a timeout on a request.
func NewSystemGenerateCodeParamsWithTimeout(timeout time.Duration) *SystemGenerateCodeParams {
	return &SystemGenerateCodeParams{
		timeout: timeout,
	}
}

// NewSystemGenerateCodeParamsWithContext creates a new SystemGenerateCodeParams object
// with the ability to set a context for a request.
func NewSystemGenerateCodeParamsWithContext(ctx context.Context) *SystemGenerateCodeParams {
	return &SystemGenerateCodeParams{
		Context: ctx,
	}
}

// NewSystemGenerateCodeParamsWithHTTPClient creates a new SystemGenerateCodeParams object
// with the ability to set a custom HTTPClient for a request.
func NewSystemGenerateCodeParamsWithHTTPClient(client *http.Client) *SystemGenerateCodeParams {
	return &SystemGenerateCodeParams{
		HTTPClient: client,
	}
}

/* SystemGenerateCodeParams contains all the parameters to send to the API endpoint
   for the system generate code operation.

   Typically these are written to a http.Request.
*/
type SystemGenerateCodeParams struct {

	// CodeRequest.
	CodeRequest *models.RequestCode

	// IPID.
	IPID *string

	// TenantID.
	TenantID *string

	// UserID.
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the system generate code params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SystemGenerateCodeParams) WithDefaults() *SystemGenerateCodeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the system generate code params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SystemGenerateCodeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the system generate code params
func (o *SystemGenerateCodeParams) WithTimeout(timeout time.Duration) *SystemGenerateCodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the system generate code params
func (o *SystemGenerateCodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the system generate code params
func (o *SystemGenerateCodeParams) WithContext(ctx context.Context) *SystemGenerateCodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the system generate code params
func (o *SystemGenerateCodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the system generate code params
func (o *SystemGenerateCodeParams) WithHTTPClient(client *http.Client) *SystemGenerateCodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the system generate code params
func (o *SystemGenerateCodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCodeRequest adds the codeRequest to the system generate code params
func (o *SystemGenerateCodeParams) WithCodeRequest(codeRequest *models.RequestCode) *SystemGenerateCodeParams {
	o.SetCodeRequest(codeRequest)
	return o
}

// SetCodeRequest adds the codeRequest to the system generate code params
func (o *SystemGenerateCodeParams) SetCodeRequest(codeRequest *models.RequestCode) {
	o.CodeRequest = codeRequest
}

// WithIPID adds the iPID to the system generate code params
func (o *SystemGenerateCodeParams) WithIPID(iPID *string) *SystemGenerateCodeParams {
	o.SetIPID(iPID)
	return o
}

// SetIPID adds the ipId to the system generate code params
func (o *SystemGenerateCodeParams) SetIPID(iPID *string) {
	o.IPID = iPID
}

// WithTenantID adds the tenantID to the system generate code params
func (o *SystemGenerateCodeParams) WithTenantID(tenantID *string) *SystemGenerateCodeParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the system generate code params
func (o *SystemGenerateCodeParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithUserID adds the userID to the system generate code params
func (o *SystemGenerateCodeParams) WithUserID(userID *string) *SystemGenerateCodeParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the system generate code params
func (o *SystemGenerateCodeParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *SystemGenerateCodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.CodeRequest != nil {
		if err := r.SetBodyParam(o.CodeRequest); err != nil {
			return err
		}
	}

	if o.IPID != nil {

		// query param ipID
		var qrIPID string

		if o.IPID != nil {
			qrIPID = *o.IPID
		}
		qIPID := qrIPID
		if qIPID != "" {

			if err := r.SetQueryParam("ipID", qIPID); err != nil {
				return err
			}
		}
	}

	if o.TenantID != nil {

		// query param tenantID
		var qrTenantID string

		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {

			if err := r.SetQueryParam("tenantID", qTenantID); err != nil {
				return err
			}
		}
	}

	if o.UserID != nil {

		// query param userID
		var qrUserID string

		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {

			if err := r.SetQueryParam("userID", qUserID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
