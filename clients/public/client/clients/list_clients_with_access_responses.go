// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/public/models"
)

// ListClientsWithAccessReader is a Reader for the ListClientsWithAccess structure.
type ListClientsWithAccessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListClientsWithAccessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListClientsWithAccessOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListClientsWithAccessUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListClientsWithAccessForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListClientsWithAccessNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListClientsWithAccessTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /clients] listClientsWithAccess", response, response.Code())
	}
}

// NewListClientsWithAccessOK creates a ListClientsWithAccessOK with default headers values
func NewListClientsWithAccessOK() *ListClientsWithAccessOK {
	return &ListClientsWithAccessOK{}
}

/*
ListClientsWithAccessOK describes a response with status code 200, with default header values.

Clients with access
*/
type ListClientsWithAccessOK struct {
	Payload *models.ListClientsWithAccess
}

// IsSuccess returns true when this list clients with access o k response has a 2xx status code
func (o *ListClientsWithAccessOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list clients with access o k response has a 3xx status code
func (o *ListClientsWithAccessOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clients with access o k response has a 4xx status code
func (o *ListClientsWithAccessOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list clients with access o k response has a 5xx status code
func (o *ListClientsWithAccessOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list clients with access o k response a status code equal to that given
func (o *ListClientsWithAccessOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list clients with access o k response
func (o *ListClientsWithAccessOK) Code() int {
	return 200
}

func (o *ListClientsWithAccessOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessOK %s", 200, payload)
}

func (o *ListClientsWithAccessOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessOK %s", 200, payload)
}

func (o *ListClientsWithAccessOK) GetPayload() *models.ListClientsWithAccess {
	return o.Payload
}

func (o *ListClientsWithAccessOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListClientsWithAccess)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClientsWithAccessUnauthorized creates a ListClientsWithAccessUnauthorized with default headers values
func NewListClientsWithAccessUnauthorized() *ListClientsWithAccessUnauthorized {
	return &ListClientsWithAccessUnauthorized{}
}

/*
ListClientsWithAccessUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListClientsWithAccessUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list clients with access unauthorized response has a 2xx status code
func (o *ListClientsWithAccessUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clients with access unauthorized response has a 3xx status code
func (o *ListClientsWithAccessUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clients with access unauthorized response has a 4xx status code
func (o *ListClientsWithAccessUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clients with access unauthorized response has a 5xx status code
func (o *ListClientsWithAccessUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list clients with access unauthorized response a status code equal to that given
func (o *ListClientsWithAccessUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list clients with access unauthorized response
func (o *ListClientsWithAccessUnauthorized) Code() int {
	return 401
}

func (o *ListClientsWithAccessUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessUnauthorized %s", 401, payload)
}

func (o *ListClientsWithAccessUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessUnauthorized %s", 401, payload)
}

func (o *ListClientsWithAccessUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListClientsWithAccessUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClientsWithAccessForbidden creates a ListClientsWithAccessForbidden with default headers values
func NewListClientsWithAccessForbidden() *ListClientsWithAccessForbidden {
	return &ListClientsWithAccessForbidden{}
}

/*
ListClientsWithAccessForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListClientsWithAccessForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list clients with access forbidden response has a 2xx status code
func (o *ListClientsWithAccessForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clients with access forbidden response has a 3xx status code
func (o *ListClientsWithAccessForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clients with access forbidden response has a 4xx status code
func (o *ListClientsWithAccessForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clients with access forbidden response has a 5xx status code
func (o *ListClientsWithAccessForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list clients with access forbidden response a status code equal to that given
func (o *ListClientsWithAccessForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list clients with access forbidden response
func (o *ListClientsWithAccessForbidden) Code() int {
	return 403
}

func (o *ListClientsWithAccessForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessForbidden %s", 403, payload)
}

func (o *ListClientsWithAccessForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessForbidden %s", 403, payload)
}

func (o *ListClientsWithAccessForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListClientsWithAccessForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClientsWithAccessNotFound creates a ListClientsWithAccessNotFound with default headers values
func NewListClientsWithAccessNotFound() *ListClientsWithAccessNotFound {
	return &ListClientsWithAccessNotFound{}
}

/*
ListClientsWithAccessNotFound describes a response with status code 404, with default header values.

Not found
*/
type ListClientsWithAccessNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this list clients with access not found response has a 2xx status code
func (o *ListClientsWithAccessNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clients with access not found response has a 3xx status code
func (o *ListClientsWithAccessNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clients with access not found response has a 4xx status code
func (o *ListClientsWithAccessNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clients with access not found response has a 5xx status code
func (o *ListClientsWithAccessNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list clients with access not found response a status code equal to that given
func (o *ListClientsWithAccessNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list clients with access not found response
func (o *ListClientsWithAccessNotFound) Code() int {
	return 404
}

func (o *ListClientsWithAccessNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessNotFound %s", 404, payload)
}

func (o *ListClientsWithAccessNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessNotFound %s", 404, payload)
}

func (o *ListClientsWithAccessNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListClientsWithAccessNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListClientsWithAccessTooManyRequests creates a ListClientsWithAccessTooManyRequests with default headers values
func NewListClientsWithAccessTooManyRequests() *ListClientsWithAccessTooManyRequests {
	return &ListClientsWithAccessTooManyRequests{}
}

/*
ListClientsWithAccessTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListClientsWithAccessTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list clients with access too many requests response has a 2xx status code
func (o *ListClientsWithAccessTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list clients with access too many requests response has a 3xx status code
func (o *ListClientsWithAccessTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list clients with access too many requests response has a 4xx status code
func (o *ListClientsWithAccessTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list clients with access too many requests response has a 5xx status code
func (o *ListClientsWithAccessTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list clients with access too many requests response a status code equal to that given
func (o *ListClientsWithAccessTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list clients with access too many requests response
func (o *ListClientsWithAccessTooManyRequests) Code() int {
	return 429
}

func (o *ListClientsWithAccessTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessTooManyRequests %s", 429, payload)
}

func (o *ListClientsWithAccessTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /clients][%d] listClientsWithAccessTooManyRequests %s", 429, payload)
}

func (o *ListClientsWithAccessTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListClientsWithAccessTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
