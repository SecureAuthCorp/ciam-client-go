// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/public/models"
)

// RevokeClientAccessReader is a Reader for the RevokeClientAccess structure.
type RevokeClientAccessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeClientAccessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRevokeClientAccessNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRevokeClientAccessUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRevokeClientAccessForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRevokeClientAccessTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /clients/{cid}] revokeClientAccess", response, response.Code())
	}
}

// NewRevokeClientAccessNoContent creates a RevokeClientAccessNoContent with default headers values
func NewRevokeClientAccessNoContent() *RevokeClientAccessNoContent {
	return &RevokeClientAccessNoContent{}
}

/*
RevokeClientAccessNoContent describes a response with status code 204, with default header values.

	Client access has been revoked
*/
type RevokeClientAccessNoContent struct {
}

// IsSuccess returns true when this revoke client access no content response has a 2xx status code
func (o *RevokeClientAccessNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this revoke client access no content response has a 3xx status code
func (o *RevokeClientAccessNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke client access no content response has a 4xx status code
func (o *RevokeClientAccessNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke client access no content response has a 5xx status code
func (o *RevokeClientAccessNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke client access no content response a status code equal to that given
func (o *RevokeClientAccessNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the revoke client access no content response
func (o *RevokeClientAccessNoContent) Code() int {
	return 204
}

func (o *RevokeClientAccessNoContent) Error() string {
	return fmt.Sprintf("[DELETE /clients/{cid}][%d] revokeClientAccessNoContent", 204)
}

func (o *RevokeClientAccessNoContent) String() string {
	return fmt.Sprintf("[DELETE /clients/{cid}][%d] revokeClientAccessNoContent", 204)
}

func (o *RevokeClientAccessNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevokeClientAccessUnauthorized creates a RevokeClientAccessUnauthorized with default headers values
func NewRevokeClientAccessUnauthorized() *RevokeClientAccessUnauthorized {
	return &RevokeClientAccessUnauthorized{}
}

/*
RevokeClientAccessUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RevokeClientAccessUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke client access unauthorized response has a 2xx status code
func (o *RevokeClientAccessUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke client access unauthorized response has a 3xx status code
func (o *RevokeClientAccessUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke client access unauthorized response has a 4xx status code
func (o *RevokeClientAccessUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke client access unauthorized response has a 5xx status code
func (o *RevokeClientAccessUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke client access unauthorized response a status code equal to that given
func (o *RevokeClientAccessUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the revoke client access unauthorized response
func (o *RevokeClientAccessUnauthorized) Code() int {
	return 401
}

func (o *RevokeClientAccessUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /clients/{cid}][%d] revokeClientAccessUnauthorized %s", 401, payload)
}

func (o *RevokeClientAccessUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /clients/{cid}][%d] revokeClientAccessUnauthorized %s", 401, payload)
}

func (o *RevokeClientAccessUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeClientAccessUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeClientAccessForbidden creates a RevokeClientAccessForbidden with default headers values
func NewRevokeClientAccessForbidden() *RevokeClientAccessForbidden {
	return &RevokeClientAccessForbidden{}
}

/*
RevokeClientAccessForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RevokeClientAccessForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke client access forbidden response has a 2xx status code
func (o *RevokeClientAccessForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke client access forbidden response has a 3xx status code
func (o *RevokeClientAccessForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke client access forbidden response has a 4xx status code
func (o *RevokeClientAccessForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke client access forbidden response has a 5xx status code
func (o *RevokeClientAccessForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke client access forbidden response a status code equal to that given
func (o *RevokeClientAccessForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the revoke client access forbidden response
func (o *RevokeClientAccessForbidden) Code() int {
	return 403
}

func (o *RevokeClientAccessForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /clients/{cid}][%d] revokeClientAccessForbidden %s", 403, payload)
}

func (o *RevokeClientAccessForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /clients/{cid}][%d] revokeClientAccessForbidden %s", 403, payload)
}

func (o *RevokeClientAccessForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeClientAccessForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeClientAccessTooManyRequests creates a RevokeClientAccessTooManyRequests with default headers values
func NewRevokeClientAccessTooManyRequests() *RevokeClientAccessTooManyRequests {
	return &RevokeClientAccessTooManyRequests{}
}

/*
RevokeClientAccessTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type RevokeClientAccessTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke client access too many requests response has a 2xx status code
func (o *RevokeClientAccessTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke client access too many requests response has a 3xx status code
func (o *RevokeClientAccessTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke client access too many requests response has a 4xx status code
func (o *RevokeClientAccessTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke client access too many requests response has a 5xx status code
func (o *RevokeClientAccessTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke client access too many requests response a status code equal to that given
func (o *RevokeClientAccessTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the revoke client access too many requests response
func (o *RevokeClientAccessTooManyRequests) Code() int {
	return 429
}

func (o *RevokeClientAccessTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /clients/{cid}][%d] revokeClientAccessTooManyRequests %s", 429, payload)
}

func (o *RevokeClientAccessTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /clients/{cid}][%d] revokeClientAccessTooManyRequests %s", 429, payload)
}

func (o *RevokeClientAccessTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeClientAccessTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
