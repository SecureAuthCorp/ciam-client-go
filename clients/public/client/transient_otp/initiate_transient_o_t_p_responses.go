// Code generated by go-swagger; DO NOT EDIT.

package transient_otp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/public/models"
)

// InitiateTransientOTPReader is a Reader for the InitiateTransientOTP structure.
type InitiateTransientOTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InitiateTransientOTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInitiateTransientOTPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInitiateTransientOTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInitiateTransientOTPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInitiateTransientOTPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInitiateTransientOTPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewInitiateTransientOTPUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewInitiateTransientOTPTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /authn/otp/transient] initiateTransientOTP", response, response.Code())
	}
}

// NewInitiateTransientOTPOK creates a InitiateTransientOTPOK with default headers values
func NewInitiateTransientOTPOK() *InitiateTransientOTPOK {
	return &InitiateTransientOTPOK{}
}

/*
InitiateTransientOTPOK describes a response with status code 200, with default header values.

Transient OTP
*/
type InitiateTransientOTPOK struct {
	Payload *models.TransientOTPResponse
}

// IsSuccess returns true when this initiate transient o t p o k response has a 2xx status code
func (o *InitiateTransientOTPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this initiate transient o t p o k response has a 3xx status code
func (o *InitiateTransientOTPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this initiate transient o t p o k response has a 4xx status code
func (o *InitiateTransientOTPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this initiate transient o t p o k response has a 5xx status code
func (o *InitiateTransientOTPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this initiate transient o t p o k response a status code equal to that given
func (o *InitiateTransientOTPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the initiate transient o t p o k response
func (o *InitiateTransientOTPOK) Code() int {
	return 200
}

func (o *InitiateTransientOTPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPOK %s", 200, payload)
}

func (o *InitiateTransientOTPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPOK %s", 200, payload)
}

func (o *InitiateTransientOTPOK) GetPayload() *models.TransientOTPResponse {
	return o.Payload
}

func (o *InitiateTransientOTPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TransientOTPResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInitiateTransientOTPBadRequest creates a InitiateTransientOTPBadRequest with default headers values
func NewInitiateTransientOTPBadRequest() *InitiateTransientOTPBadRequest {
	return &InitiateTransientOTPBadRequest{}
}

/*
InitiateTransientOTPBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type InitiateTransientOTPBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this initiate transient o t p bad request response has a 2xx status code
func (o *InitiateTransientOTPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this initiate transient o t p bad request response has a 3xx status code
func (o *InitiateTransientOTPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this initiate transient o t p bad request response has a 4xx status code
func (o *InitiateTransientOTPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this initiate transient o t p bad request response has a 5xx status code
func (o *InitiateTransientOTPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this initiate transient o t p bad request response a status code equal to that given
func (o *InitiateTransientOTPBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the initiate transient o t p bad request response
func (o *InitiateTransientOTPBadRequest) Code() int {
	return 400
}

func (o *InitiateTransientOTPBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPBadRequest %s", 400, payload)
}

func (o *InitiateTransientOTPBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPBadRequest %s", 400, payload)
}

func (o *InitiateTransientOTPBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *InitiateTransientOTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInitiateTransientOTPUnauthorized creates a InitiateTransientOTPUnauthorized with default headers values
func NewInitiateTransientOTPUnauthorized() *InitiateTransientOTPUnauthorized {
	return &InitiateTransientOTPUnauthorized{}
}

/*
InitiateTransientOTPUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type InitiateTransientOTPUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this initiate transient o t p unauthorized response has a 2xx status code
func (o *InitiateTransientOTPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this initiate transient o t p unauthorized response has a 3xx status code
func (o *InitiateTransientOTPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this initiate transient o t p unauthorized response has a 4xx status code
func (o *InitiateTransientOTPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this initiate transient o t p unauthorized response has a 5xx status code
func (o *InitiateTransientOTPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this initiate transient o t p unauthorized response a status code equal to that given
func (o *InitiateTransientOTPUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the initiate transient o t p unauthorized response
func (o *InitiateTransientOTPUnauthorized) Code() int {
	return 401
}

func (o *InitiateTransientOTPUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPUnauthorized %s", 401, payload)
}

func (o *InitiateTransientOTPUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPUnauthorized %s", 401, payload)
}

func (o *InitiateTransientOTPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *InitiateTransientOTPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInitiateTransientOTPForbidden creates a InitiateTransientOTPForbidden with default headers values
func NewInitiateTransientOTPForbidden() *InitiateTransientOTPForbidden {
	return &InitiateTransientOTPForbidden{}
}

/*
InitiateTransientOTPForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type InitiateTransientOTPForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this initiate transient o t p forbidden response has a 2xx status code
func (o *InitiateTransientOTPForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this initiate transient o t p forbidden response has a 3xx status code
func (o *InitiateTransientOTPForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this initiate transient o t p forbidden response has a 4xx status code
func (o *InitiateTransientOTPForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this initiate transient o t p forbidden response has a 5xx status code
func (o *InitiateTransientOTPForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this initiate transient o t p forbidden response a status code equal to that given
func (o *InitiateTransientOTPForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the initiate transient o t p forbidden response
func (o *InitiateTransientOTPForbidden) Code() int {
	return 403
}

func (o *InitiateTransientOTPForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPForbidden %s", 403, payload)
}

func (o *InitiateTransientOTPForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPForbidden %s", 403, payload)
}

func (o *InitiateTransientOTPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *InitiateTransientOTPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInitiateTransientOTPNotFound creates a InitiateTransientOTPNotFound with default headers values
func NewInitiateTransientOTPNotFound() *InitiateTransientOTPNotFound {
	return &InitiateTransientOTPNotFound{}
}

/*
InitiateTransientOTPNotFound describes a response with status code 404, with default header values.

Not found
*/
type InitiateTransientOTPNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this initiate transient o t p not found response has a 2xx status code
func (o *InitiateTransientOTPNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this initiate transient o t p not found response has a 3xx status code
func (o *InitiateTransientOTPNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this initiate transient o t p not found response has a 4xx status code
func (o *InitiateTransientOTPNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this initiate transient o t p not found response has a 5xx status code
func (o *InitiateTransientOTPNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this initiate transient o t p not found response a status code equal to that given
func (o *InitiateTransientOTPNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the initiate transient o t p not found response
func (o *InitiateTransientOTPNotFound) Code() int {
	return 404
}

func (o *InitiateTransientOTPNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPNotFound %s", 404, payload)
}

func (o *InitiateTransientOTPNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPNotFound %s", 404, payload)
}

func (o *InitiateTransientOTPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *InitiateTransientOTPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInitiateTransientOTPUnprocessableEntity creates a InitiateTransientOTPUnprocessableEntity with default headers values
func NewInitiateTransientOTPUnprocessableEntity() *InitiateTransientOTPUnprocessableEntity {
	return &InitiateTransientOTPUnprocessableEntity{}
}

/*
InitiateTransientOTPUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type InitiateTransientOTPUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this initiate transient o t p unprocessable entity response has a 2xx status code
func (o *InitiateTransientOTPUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this initiate transient o t p unprocessable entity response has a 3xx status code
func (o *InitiateTransientOTPUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this initiate transient o t p unprocessable entity response has a 4xx status code
func (o *InitiateTransientOTPUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this initiate transient o t p unprocessable entity response has a 5xx status code
func (o *InitiateTransientOTPUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this initiate transient o t p unprocessable entity response a status code equal to that given
func (o *InitiateTransientOTPUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the initiate transient o t p unprocessable entity response
func (o *InitiateTransientOTPUnprocessableEntity) Code() int {
	return 422
}

func (o *InitiateTransientOTPUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPUnprocessableEntity %s", 422, payload)
}

func (o *InitiateTransientOTPUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPUnprocessableEntity %s", 422, payload)
}

func (o *InitiateTransientOTPUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *InitiateTransientOTPUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInitiateTransientOTPTooManyRequests creates a InitiateTransientOTPTooManyRequests with default headers values
func NewInitiateTransientOTPTooManyRequests() *InitiateTransientOTPTooManyRequests {
	return &InitiateTransientOTPTooManyRequests{}
}

/*
InitiateTransientOTPTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type InitiateTransientOTPTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this initiate transient o t p too many requests response has a 2xx status code
func (o *InitiateTransientOTPTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this initiate transient o t p too many requests response has a 3xx status code
func (o *InitiateTransientOTPTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this initiate transient o t p too many requests response has a 4xx status code
func (o *InitiateTransientOTPTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this initiate transient o t p too many requests response has a 5xx status code
func (o *InitiateTransientOTPTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this initiate transient o t p too many requests response a status code equal to that given
func (o *InitiateTransientOTPTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the initiate transient o t p too many requests response
func (o *InitiateTransientOTPTooManyRequests) Code() int {
	return 429
}

func (o *InitiateTransientOTPTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPTooManyRequests %s", 429, payload)
}

func (o *InitiateTransientOTPTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /authn/otp/transient][%d] initiateTransientOTPTooManyRequests %s", 429, payload)
}

func (o *InitiateTransientOTPTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *InitiateTransientOTPTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
