// Code generated by go-swagger; DO NOT EDIT.

package transient_otp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new transient otp API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for transient otp API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetTransientOTP(params *GetTransientOTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTransientOTPOK, error)

	InitiateTransientOTP(params *InitiateTransientOTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitiateTransientOTPOK, error)

	VerifyTransientOTP(params *VerifyTransientOTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyTransientOTPNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetTransientOTP gets the one time password o t p object

Determine whether this OTP has been verified already.
*/
func (a *Client) GetTransientOTP(params *GetTransientOTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTransientOTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransientOTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTransientOTP",
		Method:             "GET",
		PathPattern:        "/authn/otp/transient/{otpID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransientOTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransientOTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTransientOTP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InitiateTransientOTP sends a transient one time password o t p

Initiate a new transient OTP verification.
*/
func (a *Client) InitiateTransientOTP(params *InitiateTransientOTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InitiateTransientOTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitiateTransientOTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "initiateTransientOTP",
		Method:             "POST",
		PathPattern:        "/authn/otp/transient",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InitiateTransientOTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitiateTransientOTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for initiateTransientOTP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerifyTransientOTP verifies the one time password o t p

Compare the OTP submitted by the user to the OTP that was sent.
*/
func (a *Client) VerifyTransientOTP(params *VerifyTransientOTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VerifyTransientOTPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyTransientOTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verifyTransientOTP",
		Method:             "POST",
		PathPattern:        "/authn/otp/transient/{otpID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerifyTransientOTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyTransientOTPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyTransientOTP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
