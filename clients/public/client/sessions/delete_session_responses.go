// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/public/models"
)

// DeleteSessionReader is a Reader for the DeleteSession structure.
type DeleteSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteSessionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteSessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteSessionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /sessions/{sessionID}] deleteSession", response, response.Code())
	}
}

// NewDeleteSessionNoContent creates a DeleteSessionNoContent with default headers values
func NewDeleteSessionNoContent() *DeleteSessionNoContent {
	return &DeleteSessionNoContent{}
}

/*
DeleteSessionNoContent describes a response with status code 204, with default header values.

	Session has been deleted
*/
type DeleteSessionNoContent struct {
}

// IsSuccess returns true when this delete session no content response has a 2xx status code
func (o *DeleteSessionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete session no content response has a 3xx status code
func (o *DeleteSessionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session no content response has a 4xx status code
func (o *DeleteSessionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete session no content response has a 5xx status code
func (o *DeleteSessionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete session no content response a status code equal to that given
func (o *DeleteSessionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete session no content response
func (o *DeleteSessionNoContent) Code() int {
	return 204
}

func (o *DeleteSessionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionNoContent ", 204)
}

func (o *DeleteSessionNoContent) String() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionNoContent ", 204)
}

func (o *DeleteSessionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteSessionUnauthorized creates a DeleteSessionUnauthorized with default headers values
func NewDeleteSessionUnauthorized() *DeleteSessionUnauthorized {
	return &DeleteSessionUnauthorized{}
}

/*
DeleteSessionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteSessionUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete session unauthorized response has a 2xx status code
func (o *DeleteSessionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete session unauthorized response has a 3xx status code
func (o *DeleteSessionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session unauthorized response has a 4xx status code
func (o *DeleteSessionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete session unauthorized response has a 5xx status code
func (o *DeleteSessionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete session unauthorized response a status code equal to that given
func (o *DeleteSessionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete session unauthorized response
func (o *DeleteSessionUnauthorized) Code() int {
	return 401
}

func (o *DeleteSessionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSessionUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteSessionUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSessionForbidden creates a DeleteSessionForbidden with default headers values
func NewDeleteSessionForbidden() *DeleteSessionForbidden {
	return &DeleteSessionForbidden{}
}

/*
DeleteSessionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteSessionForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete session forbidden response has a 2xx status code
func (o *DeleteSessionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete session forbidden response has a 3xx status code
func (o *DeleteSessionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session forbidden response has a 4xx status code
func (o *DeleteSessionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete session forbidden response has a 5xx status code
func (o *DeleteSessionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete session forbidden response a status code equal to that given
func (o *DeleteSessionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete session forbidden response
func (o *DeleteSessionForbidden) Code() int {
	return 403
}

func (o *DeleteSessionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSessionForbidden) String() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSessionForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSessionNotFound creates a DeleteSessionNotFound with default headers values
func NewDeleteSessionNotFound() *DeleteSessionNotFound {
	return &DeleteSessionNotFound{}
}

/*
DeleteSessionNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteSessionNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete session not found response has a 2xx status code
func (o *DeleteSessionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete session not found response has a 3xx status code
func (o *DeleteSessionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session not found response has a 4xx status code
func (o *DeleteSessionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete session not found response has a 5xx status code
func (o *DeleteSessionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete session not found response a status code equal to that given
func (o *DeleteSessionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete session not found response
func (o *DeleteSessionNotFound) Code() int {
	return 404
}

func (o *DeleteSessionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSessionNotFound) String() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSessionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSessionTooManyRequests creates a DeleteSessionTooManyRequests with default headers values
func NewDeleteSessionTooManyRequests() *DeleteSessionTooManyRequests {
	return &DeleteSessionTooManyRequests{}
}

/*
DeleteSessionTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteSessionTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete session too many requests response has a 2xx status code
func (o *DeleteSessionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete session too many requests response has a 3xx status code
func (o *DeleteSessionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete session too many requests response has a 4xx status code
func (o *DeleteSessionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete session too many requests response has a 5xx status code
func (o *DeleteSessionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete session too many requests response a status code equal to that given
func (o *DeleteSessionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete session too many requests response
func (o *DeleteSessionTooManyRequests) Code() int {
	return 429
}

func (o *DeleteSessionTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSessionTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /sessions/{sessionID}][%d] deleteSessionTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSessionTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteSessionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
