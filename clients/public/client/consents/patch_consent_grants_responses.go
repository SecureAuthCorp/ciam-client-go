// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/public/models"
)

// PatchConsentGrantsReader is a Reader for the PatchConsentGrants structure.
type PatchConsentGrantsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchConsentGrantsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPatchConsentGrantsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchConsentGrantsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchConsentGrantsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchConsentGrantsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchConsentGrantsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchConsentGrantsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchConsentGrantsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchConsentGrantsCreated creates a PatchConsentGrantsCreated with default headers values
func NewPatchConsentGrantsCreated() *PatchConsentGrantsCreated {
	return &PatchConsentGrantsCreated{}
}

/*
PatchConsentGrantsCreated describes a response with status code 201, with default header values.

Consent grant patch
*/
type PatchConsentGrantsCreated struct {
	Payload *models.ConsentGrantPatchResponse
}

// IsSuccess returns true when this patch consent grants created response has a 2xx status code
func (o *PatchConsentGrantsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch consent grants created response has a 3xx status code
func (o *PatchConsentGrantsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch consent grants created response has a 4xx status code
func (o *PatchConsentGrantsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch consent grants created response has a 5xx status code
func (o *PatchConsentGrantsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this patch consent grants created response a status code equal to that given
func (o *PatchConsentGrantsCreated) IsCode(code int) bool {
	return code == 201
}

func (o *PatchConsentGrantsCreated) Error() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsCreated  %+v", 201, o.Payload)
}

func (o *PatchConsentGrantsCreated) String() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsCreated  %+v", 201, o.Payload)
}

func (o *PatchConsentGrantsCreated) GetPayload() *models.ConsentGrantPatchResponse {
	return o.Payload
}

func (o *PatchConsentGrantsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentGrantPatchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConsentGrantsUnauthorized creates a PatchConsentGrantsUnauthorized with default headers values
func NewPatchConsentGrantsUnauthorized() *PatchConsentGrantsUnauthorized {
	return &PatchConsentGrantsUnauthorized{}
}

/*
PatchConsentGrantsUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type PatchConsentGrantsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch consent grants unauthorized response has a 2xx status code
func (o *PatchConsentGrantsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch consent grants unauthorized response has a 3xx status code
func (o *PatchConsentGrantsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch consent grants unauthorized response has a 4xx status code
func (o *PatchConsentGrantsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch consent grants unauthorized response has a 5xx status code
func (o *PatchConsentGrantsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch consent grants unauthorized response a status code equal to that given
func (o *PatchConsentGrantsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PatchConsentGrantsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConsentGrantsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsUnauthorized  %+v", 401, o.Payload)
}

func (o *PatchConsentGrantsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConsentGrantsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConsentGrantsForbidden creates a PatchConsentGrantsForbidden with default headers values
func NewPatchConsentGrantsForbidden() *PatchConsentGrantsForbidden {
	return &PatchConsentGrantsForbidden{}
}

/*
PatchConsentGrantsForbidden describes a response with status code 403, with default header values.

HttpError
*/
type PatchConsentGrantsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch consent grants forbidden response has a 2xx status code
func (o *PatchConsentGrantsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch consent grants forbidden response has a 3xx status code
func (o *PatchConsentGrantsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch consent grants forbidden response has a 4xx status code
func (o *PatchConsentGrantsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch consent grants forbidden response has a 5xx status code
func (o *PatchConsentGrantsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch consent grants forbidden response a status code equal to that given
func (o *PatchConsentGrantsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchConsentGrantsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsForbidden  %+v", 403, o.Payload)
}

func (o *PatchConsentGrantsForbidden) String() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsForbidden  %+v", 403, o.Payload)
}

func (o *PatchConsentGrantsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConsentGrantsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConsentGrantsNotFound creates a PatchConsentGrantsNotFound with default headers values
func NewPatchConsentGrantsNotFound() *PatchConsentGrantsNotFound {
	return &PatchConsentGrantsNotFound{}
}

/*
PatchConsentGrantsNotFound describes a response with status code 404, with default header values.

HttpError
*/
type PatchConsentGrantsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch consent grants not found response has a 2xx status code
func (o *PatchConsentGrantsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch consent grants not found response has a 3xx status code
func (o *PatchConsentGrantsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch consent grants not found response has a 4xx status code
func (o *PatchConsentGrantsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch consent grants not found response has a 5xx status code
func (o *PatchConsentGrantsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch consent grants not found response a status code equal to that given
func (o *PatchConsentGrantsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchConsentGrantsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsNotFound  %+v", 404, o.Payload)
}

func (o *PatchConsentGrantsNotFound) String() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsNotFound  %+v", 404, o.Payload)
}

func (o *PatchConsentGrantsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConsentGrantsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConsentGrantsConflict creates a PatchConsentGrantsConflict with default headers values
func NewPatchConsentGrantsConflict() *PatchConsentGrantsConflict {
	return &PatchConsentGrantsConflict{}
}

/*
PatchConsentGrantsConflict describes a response with status code 409, with default header values.

HttpError
*/
type PatchConsentGrantsConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch consent grants conflict response has a 2xx status code
func (o *PatchConsentGrantsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch consent grants conflict response has a 3xx status code
func (o *PatchConsentGrantsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch consent grants conflict response has a 4xx status code
func (o *PatchConsentGrantsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch consent grants conflict response has a 5xx status code
func (o *PatchConsentGrantsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch consent grants conflict response a status code equal to that given
func (o *PatchConsentGrantsConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PatchConsentGrantsConflict) Error() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsConflict  %+v", 409, o.Payload)
}

func (o *PatchConsentGrantsConflict) String() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsConflict  %+v", 409, o.Payload)
}

func (o *PatchConsentGrantsConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConsentGrantsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConsentGrantsUnprocessableEntity creates a PatchConsentGrantsUnprocessableEntity with default headers values
func NewPatchConsentGrantsUnprocessableEntity() *PatchConsentGrantsUnprocessableEntity {
	return &PatchConsentGrantsUnprocessableEntity{}
}

/*
PatchConsentGrantsUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type PatchConsentGrantsUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch consent grants unprocessable entity response has a 2xx status code
func (o *PatchConsentGrantsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch consent grants unprocessable entity response has a 3xx status code
func (o *PatchConsentGrantsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch consent grants unprocessable entity response has a 4xx status code
func (o *PatchConsentGrantsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch consent grants unprocessable entity response has a 5xx status code
func (o *PatchConsentGrantsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this patch consent grants unprocessable entity response a status code equal to that given
func (o *PatchConsentGrantsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *PatchConsentGrantsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchConsentGrantsUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchConsentGrantsUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConsentGrantsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchConsentGrantsTooManyRequests creates a PatchConsentGrantsTooManyRequests with default headers values
func NewPatchConsentGrantsTooManyRequests() *PatchConsentGrantsTooManyRequests {
	return &PatchConsentGrantsTooManyRequests{}
}

/*
PatchConsentGrantsTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type PatchConsentGrantsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this patch consent grants too many requests response has a 2xx status code
func (o *PatchConsentGrantsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch consent grants too many requests response has a 3xx status code
func (o *PatchConsentGrantsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch consent grants too many requests response has a 4xx status code
func (o *PatchConsentGrantsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch consent grants too many requests response has a 5xx status code
func (o *PatchConsentGrantsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch consent grants too many requests response a status code equal to that given
func (o *PatchConsentGrantsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchConsentGrantsTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConsentGrantsTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /privacy/consents][%d] patchConsentGrantsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchConsentGrantsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *PatchConsentGrantsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
