// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/public/models"
)

// ListUserConsentsByActionReader is a Reader for the ListUserConsentsByAction structure.
type ListUserConsentsByActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUserConsentsByActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUserConsentsByActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUserConsentsByActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUserConsentsByActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUserConsentsByActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListUserConsentsByActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /privacy/consents/{action}] listUserConsentsByAction", response, response.Code())
	}
}

// NewListUserConsentsByActionOK creates a ListUserConsentsByActionOK with default headers values
func NewListUserConsentsByActionOK() *ListUserConsentsByActionOK {
	return &ListUserConsentsByActionOK{}
}

/*
ListUserConsentsByActionOK describes a response with status code 200, with default header values.

Consents with grants
*/
type ListUserConsentsByActionOK struct {
	Payload *models.ConsentsWithGrants
}

// IsSuccess returns true when this list user consents by action o k response has a 2xx status code
func (o *ListUserConsentsByActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list user consents by action o k response has a 3xx status code
func (o *ListUserConsentsByActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user consents by action o k response has a 4xx status code
func (o *ListUserConsentsByActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list user consents by action o k response has a 5xx status code
func (o *ListUserConsentsByActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list user consents by action o k response a status code equal to that given
func (o *ListUserConsentsByActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list user consents by action o k response
func (o *ListUserConsentsByActionOK) Code() int {
	return 200
}

func (o *ListUserConsentsByActionOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionOK %s", 200, payload)
}

func (o *ListUserConsentsByActionOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionOK %s", 200, payload)
}

func (o *ListUserConsentsByActionOK) GetPayload() *models.ConsentsWithGrants {
	return o.Payload
}

func (o *ListUserConsentsByActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentsWithGrants)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserConsentsByActionUnauthorized creates a ListUserConsentsByActionUnauthorized with default headers values
func NewListUserConsentsByActionUnauthorized() *ListUserConsentsByActionUnauthorized {
	return &ListUserConsentsByActionUnauthorized{}
}

/*
ListUserConsentsByActionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListUserConsentsByActionUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user consents by action unauthorized response has a 2xx status code
func (o *ListUserConsentsByActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user consents by action unauthorized response has a 3xx status code
func (o *ListUserConsentsByActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user consents by action unauthorized response has a 4xx status code
func (o *ListUserConsentsByActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user consents by action unauthorized response has a 5xx status code
func (o *ListUserConsentsByActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list user consents by action unauthorized response a status code equal to that given
func (o *ListUserConsentsByActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list user consents by action unauthorized response
func (o *ListUserConsentsByActionUnauthorized) Code() int {
	return 401
}

func (o *ListUserConsentsByActionUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionUnauthorized %s", 401, payload)
}

func (o *ListUserConsentsByActionUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionUnauthorized %s", 401, payload)
}

func (o *ListUserConsentsByActionUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserConsentsByActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserConsentsByActionForbidden creates a ListUserConsentsByActionForbidden with default headers values
func NewListUserConsentsByActionForbidden() *ListUserConsentsByActionForbidden {
	return &ListUserConsentsByActionForbidden{}
}

/*
ListUserConsentsByActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListUserConsentsByActionForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user consents by action forbidden response has a 2xx status code
func (o *ListUserConsentsByActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user consents by action forbidden response has a 3xx status code
func (o *ListUserConsentsByActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user consents by action forbidden response has a 4xx status code
func (o *ListUserConsentsByActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user consents by action forbidden response has a 5xx status code
func (o *ListUserConsentsByActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list user consents by action forbidden response a status code equal to that given
func (o *ListUserConsentsByActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list user consents by action forbidden response
func (o *ListUserConsentsByActionForbidden) Code() int {
	return 403
}

func (o *ListUserConsentsByActionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionForbidden %s", 403, payload)
}

func (o *ListUserConsentsByActionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionForbidden %s", 403, payload)
}

func (o *ListUserConsentsByActionForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserConsentsByActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserConsentsByActionNotFound creates a ListUserConsentsByActionNotFound with default headers values
func NewListUserConsentsByActionNotFound() *ListUserConsentsByActionNotFound {
	return &ListUserConsentsByActionNotFound{}
}

/*
ListUserConsentsByActionNotFound describes a response with status code 404, with default header values.

Not found
*/
type ListUserConsentsByActionNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user consents by action not found response has a 2xx status code
func (o *ListUserConsentsByActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user consents by action not found response has a 3xx status code
func (o *ListUserConsentsByActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user consents by action not found response has a 4xx status code
func (o *ListUserConsentsByActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user consents by action not found response has a 5xx status code
func (o *ListUserConsentsByActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list user consents by action not found response a status code equal to that given
func (o *ListUserConsentsByActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list user consents by action not found response
func (o *ListUserConsentsByActionNotFound) Code() int {
	return 404
}

func (o *ListUserConsentsByActionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionNotFound %s", 404, payload)
}

func (o *ListUserConsentsByActionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionNotFound %s", 404, payload)
}

func (o *ListUserConsentsByActionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserConsentsByActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUserConsentsByActionTooManyRequests creates a ListUserConsentsByActionTooManyRequests with default headers values
func NewListUserConsentsByActionTooManyRequests() *ListUserConsentsByActionTooManyRequests {
	return &ListUserConsentsByActionTooManyRequests{}
}

/*
ListUserConsentsByActionTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListUserConsentsByActionTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list user consents by action too many requests response has a 2xx status code
func (o *ListUserConsentsByActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list user consents by action too many requests response has a 3xx status code
func (o *ListUserConsentsByActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list user consents by action too many requests response has a 4xx status code
func (o *ListUserConsentsByActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list user consents by action too many requests response has a 5xx status code
func (o *ListUserConsentsByActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list user consents by action too many requests response a status code equal to that given
func (o *ListUserConsentsByActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list user consents by action too many requests response
func (o *ListUserConsentsByActionTooManyRequests) Code() int {
	return 429
}

func (o *ListUserConsentsByActionTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionTooManyRequests %s", 429, payload)
}

func (o *ListUserConsentsByActionTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /privacy/consents/{action}][%d] listUserConsentsByActionTooManyRequests %s", 429, payload)
}

func (o *ListUserConsentsByActionTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListUserConsentsByActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
