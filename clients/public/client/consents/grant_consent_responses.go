// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/public/models"
)

// GrantConsentReader is a Reader for the GrantConsent structure.
type GrantConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GrantConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewGrantConsentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGrantConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGrantConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGrantConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGrantConsentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGrantConsentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGrantConsentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /privacy/consents/grant] grantConsent", response, response.Code())
	}
}

// NewGrantConsentCreated creates a GrantConsentCreated with default headers values
func NewGrantConsentCreated() *GrantConsentCreated {
	return &GrantConsentCreated{}
}

/*
GrantConsentCreated describes a response with status code 201, with default header values.

Consent grant
*/
type GrantConsentCreated struct {
	Payload *models.ConsentGrant
}

// IsSuccess returns true when this grant consent created response has a 2xx status code
func (o *GrantConsentCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this grant consent created response has a 3xx status code
func (o *GrantConsentCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this grant consent created response has a 4xx status code
func (o *GrantConsentCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this grant consent created response has a 5xx status code
func (o *GrantConsentCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this grant consent created response a status code equal to that given
func (o *GrantConsentCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the grant consent created response
func (o *GrantConsentCreated) Code() int {
	return 201
}

func (o *GrantConsentCreated) Error() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentCreated  %+v", 201, o.Payload)
}

func (o *GrantConsentCreated) String() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentCreated  %+v", 201, o.Payload)
}

func (o *GrantConsentCreated) GetPayload() *models.ConsentGrant {
	return o.Payload
}

func (o *GrantConsentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentGrant)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGrantConsentUnauthorized creates a GrantConsentUnauthorized with default headers values
func NewGrantConsentUnauthorized() *GrantConsentUnauthorized {
	return &GrantConsentUnauthorized{}
}

/*
GrantConsentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GrantConsentUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this grant consent unauthorized response has a 2xx status code
func (o *GrantConsentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this grant consent unauthorized response has a 3xx status code
func (o *GrantConsentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this grant consent unauthorized response has a 4xx status code
func (o *GrantConsentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this grant consent unauthorized response has a 5xx status code
func (o *GrantConsentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this grant consent unauthorized response a status code equal to that given
func (o *GrantConsentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the grant consent unauthorized response
func (o *GrantConsentUnauthorized) Code() int {
	return 401
}

func (o *GrantConsentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentUnauthorized  %+v", 401, o.Payload)
}

func (o *GrantConsentUnauthorized) String() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentUnauthorized  %+v", 401, o.Payload)
}

func (o *GrantConsentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GrantConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGrantConsentForbidden creates a GrantConsentForbidden with default headers values
func NewGrantConsentForbidden() *GrantConsentForbidden {
	return &GrantConsentForbidden{}
}

/*
GrantConsentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GrantConsentForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this grant consent forbidden response has a 2xx status code
func (o *GrantConsentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this grant consent forbidden response has a 3xx status code
func (o *GrantConsentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this grant consent forbidden response has a 4xx status code
func (o *GrantConsentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this grant consent forbidden response has a 5xx status code
func (o *GrantConsentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this grant consent forbidden response a status code equal to that given
func (o *GrantConsentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the grant consent forbidden response
func (o *GrantConsentForbidden) Code() int {
	return 403
}

func (o *GrantConsentForbidden) Error() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentForbidden  %+v", 403, o.Payload)
}

func (o *GrantConsentForbidden) String() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentForbidden  %+v", 403, o.Payload)
}

func (o *GrantConsentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GrantConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGrantConsentNotFound creates a GrantConsentNotFound with default headers values
func NewGrantConsentNotFound() *GrantConsentNotFound {
	return &GrantConsentNotFound{}
}

/*
GrantConsentNotFound describes a response with status code 404, with default header values.

Not found
*/
type GrantConsentNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this grant consent not found response has a 2xx status code
func (o *GrantConsentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this grant consent not found response has a 3xx status code
func (o *GrantConsentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this grant consent not found response has a 4xx status code
func (o *GrantConsentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this grant consent not found response has a 5xx status code
func (o *GrantConsentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this grant consent not found response a status code equal to that given
func (o *GrantConsentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the grant consent not found response
func (o *GrantConsentNotFound) Code() int {
	return 404
}

func (o *GrantConsentNotFound) Error() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentNotFound  %+v", 404, o.Payload)
}

func (o *GrantConsentNotFound) String() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentNotFound  %+v", 404, o.Payload)
}

func (o *GrantConsentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GrantConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGrantConsentConflict creates a GrantConsentConflict with default headers values
func NewGrantConsentConflict() *GrantConsentConflict {
	return &GrantConsentConflict{}
}

/*
GrantConsentConflict describes a response with status code 409, with default header values.

Conflict
*/
type GrantConsentConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this grant consent conflict response has a 2xx status code
func (o *GrantConsentConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this grant consent conflict response has a 3xx status code
func (o *GrantConsentConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this grant consent conflict response has a 4xx status code
func (o *GrantConsentConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this grant consent conflict response has a 5xx status code
func (o *GrantConsentConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this grant consent conflict response a status code equal to that given
func (o *GrantConsentConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the grant consent conflict response
func (o *GrantConsentConflict) Code() int {
	return 409
}

func (o *GrantConsentConflict) Error() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentConflict  %+v", 409, o.Payload)
}

func (o *GrantConsentConflict) String() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentConflict  %+v", 409, o.Payload)
}

func (o *GrantConsentConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *GrantConsentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGrantConsentUnprocessableEntity creates a GrantConsentUnprocessableEntity with default headers values
func NewGrantConsentUnprocessableEntity() *GrantConsentUnprocessableEntity {
	return &GrantConsentUnprocessableEntity{}
}

/*
GrantConsentUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type GrantConsentUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this grant consent unprocessable entity response has a 2xx status code
func (o *GrantConsentUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this grant consent unprocessable entity response has a 3xx status code
func (o *GrantConsentUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this grant consent unprocessable entity response has a 4xx status code
func (o *GrantConsentUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this grant consent unprocessable entity response has a 5xx status code
func (o *GrantConsentUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this grant consent unprocessable entity response a status code equal to that given
func (o *GrantConsentUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the grant consent unprocessable entity response
func (o *GrantConsentUnprocessableEntity) Code() int {
	return 422
}

func (o *GrantConsentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GrantConsentUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GrantConsentUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *GrantConsentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGrantConsentTooManyRequests creates a GrantConsentTooManyRequests with default headers values
func NewGrantConsentTooManyRequests() *GrantConsentTooManyRequests {
	return &GrantConsentTooManyRequests{}
}

/*
GrantConsentTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GrantConsentTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this grant consent too many requests response has a 2xx status code
func (o *GrantConsentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this grant consent too many requests response has a 3xx status code
func (o *GrantConsentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this grant consent too many requests response has a 4xx status code
func (o *GrantConsentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this grant consent too many requests response has a 5xx status code
func (o *GrantConsentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this grant consent too many requests response a status code equal to that given
func (o *GrantConsentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the grant consent too many requests response
func (o *GrantConsentTooManyRequests) Code() int {
	return 429
}

func (o *GrantConsentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GrantConsentTooManyRequests) String() string {
	return fmt.Sprintf("[POST /privacy/consents/grant][%d] grantConsentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GrantConsentTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GrantConsentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
