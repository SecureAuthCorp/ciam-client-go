// Code generated by go-swagger; DO NOT EDIT.

package environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/public/models"
)

// GetPublicEnvironmentReader is a Reader for the GetPublicEnvironment structure.
type GetPublicEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPublicEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPublicEnvironmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetPublicEnvironmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPublicEnvironmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPublicEnvironmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /environment] getPublicEnvironment", response, response.Code())
	}
}

// NewGetPublicEnvironmentOK creates a GetPublicEnvironmentOK with default headers values
func NewGetPublicEnvironmentOK() *GetPublicEnvironmentOK {
	return &GetPublicEnvironmentOK{}
}

/*
GetPublicEnvironmentOK describes a response with status code 200, with default header values.

Public environment
*/
type GetPublicEnvironmentOK struct {
	Payload *models.PublicEnvironment
}

// IsSuccess returns true when this get public environment o k response has a 2xx status code
func (o *GetPublicEnvironmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get public environment o k response has a 3xx status code
func (o *GetPublicEnvironmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public environment o k response has a 4xx status code
func (o *GetPublicEnvironmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get public environment o k response has a 5xx status code
func (o *GetPublicEnvironmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get public environment o k response a status code equal to that given
func (o *GetPublicEnvironmentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get public environment o k response
func (o *GetPublicEnvironmentOK) Code() int {
	return 200
}

func (o *GetPublicEnvironmentOK) Error() string {
	return fmt.Sprintf("[GET /environment][%d] getPublicEnvironmentOK  %+v", 200, o.Payload)
}

func (o *GetPublicEnvironmentOK) String() string {
	return fmt.Sprintf("[GET /environment][%d] getPublicEnvironmentOK  %+v", 200, o.Payload)
}

func (o *GetPublicEnvironmentOK) GetPayload() *models.PublicEnvironment {
	return o.Payload
}

func (o *GetPublicEnvironmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PublicEnvironment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicEnvironmentUnauthorized creates a GetPublicEnvironmentUnauthorized with default headers values
func NewGetPublicEnvironmentUnauthorized() *GetPublicEnvironmentUnauthorized {
	return &GetPublicEnvironmentUnauthorized{}
}

/*
GetPublicEnvironmentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPublicEnvironmentUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get public environment unauthorized response has a 2xx status code
func (o *GetPublicEnvironmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get public environment unauthorized response has a 3xx status code
func (o *GetPublicEnvironmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public environment unauthorized response has a 4xx status code
func (o *GetPublicEnvironmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get public environment unauthorized response has a 5xx status code
func (o *GetPublicEnvironmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get public environment unauthorized response a status code equal to that given
func (o *GetPublicEnvironmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get public environment unauthorized response
func (o *GetPublicEnvironmentUnauthorized) Code() int {
	return 401
}

func (o *GetPublicEnvironmentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /environment][%d] getPublicEnvironmentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPublicEnvironmentUnauthorized) String() string {
	return fmt.Sprintf("[GET /environment][%d] getPublicEnvironmentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPublicEnvironmentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPublicEnvironmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicEnvironmentForbidden creates a GetPublicEnvironmentForbidden with default headers values
func NewGetPublicEnvironmentForbidden() *GetPublicEnvironmentForbidden {
	return &GetPublicEnvironmentForbidden{}
}

/*
GetPublicEnvironmentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPublicEnvironmentForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get public environment forbidden response has a 2xx status code
func (o *GetPublicEnvironmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get public environment forbidden response has a 3xx status code
func (o *GetPublicEnvironmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public environment forbidden response has a 4xx status code
func (o *GetPublicEnvironmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get public environment forbidden response has a 5xx status code
func (o *GetPublicEnvironmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get public environment forbidden response a status code equal to that given
func (o *GetPublicEnvironmentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get public environment forbidden response
func (o *GetPublicEnvironmentForbidden) Code() int {
	return 403
}

func (o *GetPublicEnvironmentForbidden) Error() string {
	return fmt.Sprintf("[GET /environment][%d] getPublicEnvironmentForbidden  %+v", 403, o.Payload)
}

func (o *GetPublicEnvironmentForbidden) String() string {
	return fmt.Sprintf("[GET /environment][%d] getPublicEnvironmentForbidden  %+v", 403, o.Payload)
}

func (o *GetPublicEnvironmentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPublicEnvironmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicEnvironmentTooManyRequests creates a GetPublicEnvironmentTooManyRequests with default headers values
func NewGetPublicEnvironmentTooManyRequests() *GetPublicEnvironmentTooManyRequests {
	return &GetPublicEnvironmentTooManyRequests{}
}

/*
GetPublicEnvironmentTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetPublicEnvironmentTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get public environment too many requests response has a 2xx status code
func (o *GetPublicEnvironmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get public environment too many requests response has a 3xx status code
func (o *GetPublicEnvironmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get public environment too many requests response has a 4xx status code
func (o *GetPublicEnvironmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get public environment too many requests response has a 5xx status code
func (o *GetPublicEnvironmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get public environment too many requests response a status code equal to that given
func (o *GetPublicEnvironmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get public environment too many requests response
func (o *GetPublicEnvironmentTooManyRequests) Code() int {
	return 429
}

func (o *GetPublicEnvironmentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /environment][%d] getPublicEnvironmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPublicEnvironmentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /environment][%d] getPublicEnvironmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPublicEnvironmentTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetPublicEnvironmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
