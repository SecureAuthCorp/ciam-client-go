// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserSession user session
//
// swagger:model UserSession
type UserSession struct {

	// Time when the session was last used
	// Format: date-time
	ActiveTime strfmt.DateTime `json:"active_time,omitempty" yaml:"active_time,omitempty"`

	// time when user authenticated
	// Format: date-time
	AuthTime strfmt.DateTime `json:"auth_time,omitempty" yaml:"auth_time,omitempty"`

	// Session id
	ID string `json:"id,omitempty" yaml:"id,omitempty"`

	// IP address of the user who created the session
	IPAddress string `json:"ip_address,omitempty" yaml:"ip_address,omitempty"`

	// Time when the session was issued
	// Format: date-time
	IssueTime strfmt.DateTime `json:"issue_time,omitempty" yaml:"issue_time,omitempty"`

	// Session type
	Type string `json:"type,omitempty" yaml:"type,omitempty"`

	// User agent of the user who created the session
	UserAgent string `json:"user_agent,omitempty" yaml:"user_agent,omitempty"`
}

// Validate validates this user session
func (m *UserSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserSession) validateActiveTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveTime) { // not required
		return nil
	}

	if err := validate.FormatOf("active_time", "body", "date-time", m.ActiveTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserSession) validateAuthTime(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthTime) { // not required
		return nil
	}

	if err := validate.FormatOf("auth_time", "body", "date-time", m.AuthTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserSession) validateIssueTime(formats strfmt.Registry) error {
	if swag.IsZero(m.IssueTime) { // not required
		return nil
	}

	if err := validate.FormatOf("issue_time", "body", "date-time", m.IssueTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user session based on context it is used
func (m *UserSession) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserSession) UnmarshalBinary(b []byte) error {
	var res UserSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
