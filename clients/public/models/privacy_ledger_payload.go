// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PrivacyLedgerPayload privacy ledger payload
//
// swagger:model PrivacyLedgerPayload
type PrivacyLedgerPayload struct {

	// consent granted
	ConsentGranted *ConsentGrantedEvent `json:"consent_granted,omitempty" yaml:"consent_granted,omitempty"`

	// consent revoked
	ConsentRevoked *ConsentRevokedEvent `json:"consent_revoked,omitempty" yaml:"consent_revoked,omitempty"`

	// event type
	EventType PrivacyLedgerEventType `json:"event_type,omitempty" yaml:"event_type,omitempty"`
}

// Validate validates this privacy ledger payload
func (m *PrivacyLedgerPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConsentGranted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentRevoked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivacyLedgerPayload) validateConsentGranted(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentGranted) { // not required
		return nil
	}

	if m.ConsentGranted != nil {
		if err := m.ConsentGranted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_granted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_granted")
			}
			return err
		}
	}

	return nil
}

func (m *PrivacyLedgerPayload) validateConsentRevoked(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentRevoked) { // not required
		return nil
	}

	if m.ConsentRevoked != nil {
		if err := m.ConsentRevoked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *PrivacyLedgerPayload) validateEventType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := m.EventType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("event_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("event_type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this privacy ledger payload based on the context it is used
func (m *PrivacyLedgerPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConsentGranted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentRevoked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivacyLedgerPayload) contextValidateConsentGranted(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentGranted != nil {

		if swag.IsZero(m.ConsentGranted) { // not required
			return nil
		}

		if err := m.ConsentGranted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_granted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_granted")
			}
			return err
		}
	}

	return nil
}

func (m *PrivacyLedgerPayload) contextValidateConsentRevoked(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentRevoked != nil {

		if swag.IsZero(m.ConsentRevoked) { // not required
			return nil
		}

		if err := m.ConsentRevoked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *PrivacyLedgerPayload) contextValidateEventType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := m.EventType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("event_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("event_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivacyLedgerPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivacyLedgerPayload) UnmarshalBinary(b []byte) error {
	var res PrivacyLedgerPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
