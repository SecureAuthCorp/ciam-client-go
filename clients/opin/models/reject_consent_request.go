// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RejectConsentRequest reject consent request
//
// swagger:model RejectConsentRequest
type RejectConsentRequest struct {

	// Rejection error indication.
	// Example: Rejected
	Error string `json:"error,omitempty" yaml:"error,omitempty"`

	// Rejection cause.
	// Example: Rejected by the user.
	ErrorCause string `json:"error_cause,omitempty" yaml:"error_cause,omitempty"`

	// Rejection error description.
	// Example: The user rejected authentication.
	ErrorDescription string `json:"error_description,omitempty" yaml:"error_description,omitempty"`

	// Login identifier.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`

	// Random string generated by Cloudentity used to mitigate cross-site request forgery (CSRF) attacks.
	// Cloudentity sends state as the `login_state` query parameter when redirecting to the consent page.
	// Example: cauq8fonbud6q8806bf0
	LoginState string `json:"login_state,omitempty" yaml:"login_state,omitempty"`

	// rejection reason
	RejectionReason *RejectionReason `json:"rejection_reason,omitempty" yaml:"rejection_reason,omitempty"`

	// Rejection HTTP status code.
	// Example: 403
	StatusCode int64 `json:"status_code,omitempty" yaml:"status_code,omitempty"`
}

// Validate validates this reject consent request
func (m *RejectConsentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRejectionReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RejectConsentRequest) validateRejectionReason(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectionReason) { // not required
		return nil
	}

	if m.RejectionReason != nil {
		if err := m.RejectionReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rejection_reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rejection_reason")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reject consent request based on the context it is used
func (m *RejectConsentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRejectionReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RejectConsentRequest) contextValidateRejectionReason(ctx context.Context, formats strfmt.Registry) error {

	if m.RejectionReason != nil {

		if swag.IsZero(m.RejectionReason) { // not required
			return nil
		}

		if err := m.RejectionReason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rejection_reason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rejection_reason")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RejectConsentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RejectConsentRequest) UnmarshalBinary(b []byte) error {
	var res RejectConsentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
