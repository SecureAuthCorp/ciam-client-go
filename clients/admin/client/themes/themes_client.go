// Code generated by go-swagger; DO NOT EDIT.

package themes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new themes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new themes API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new themes API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for themes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTheme(params *CreateThemeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateThemeCreated, error)

	DeleteTheme(params *DeleteThemeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteThemeNoContent, error)

	GetTheme(params *GetThemeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetThemeOK, error)

	ListThemes(params *ListThemesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListThemesOK, error)

	UpdateTheme(params *UpdateThemeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateThemeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateTheme creates theme

Creates a new Custom-Branding Theme
*/
func (a *Client) CreateTheme(params *CreateThemeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateThemeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateThemeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTheme",
		Method:             "POST",
		PathPattern:        "/theme",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateThemeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateThemeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTheme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTheme deletes theme

Deletes the custom-branding theme.
*/
func (a *Client) DeleteTheme(params *DeleteThemeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteThemeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteThemeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTheme",
		Method:             "DELETE",
		PathPattern:        "/theme/{themeID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteThemeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteThemeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTheme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTheme gets theme

Returns an Theme and its content.
*/
func (a *Client) GetTheme(params *GetThemeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetThemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetThemeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTheme",
		Method:             "GET",
		PathPattern:        "/theme/{themeID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetThemeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetThemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTheme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListThemes lists themes

List themes for this tenant.
*/
func (a *Client) ListThemes(params *ListThemesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListThemesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListThemesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listThemes",
		Method:             "GET",
		PathPattern:        "/themes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListThemesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListThemesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listThemes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTheme updates theme

Updates the custom-branding theme
*/
func (a *Client) UpdateTheme(params *UpdateThemeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateThemeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateThemeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTheme",
		Method:             "PUT",
		PathPattern:        "/theme/{themeID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateThemeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateThemeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTheme: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
