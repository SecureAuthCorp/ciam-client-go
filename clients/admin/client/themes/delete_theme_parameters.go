// Code generated by go-swagger; DO NOT EDIT.

package themes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteThemeParams creates a new DeleteThemeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteThemeParams() *DeleteThemeParams {
	return &DeleteThemeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteThemeParamsWithTimeout creates a new DeleteThemeParams object
// with the ability to set a timeout on a request.
func NewDeleteThemeParamsWithTimeout(timeout time.Duration) *DeleteThemeParams {
	return &DeleteThemeParams{
		timeout: timeout,
	}
}

// NewDeleteThemeParamsWithContext creates a new DeleteThemeParams object
// with the ability to set a context for a request.
func NewDeleteThemeParamsWithContext(ctx context.Context) *DeleteThemeParams {
	return &DeleteThemeParams{
		Context: ctx,
	}
}

// NewDeleteThemeParamsWithHTTPClient creates a new DeleteThemeParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteThemeParamsWithHTTPClient(client *http.Client) *DeleteThemeParams {
	return &DeleteThemeParams{
		HTTPClient: client,
	}
}

/*
DeleteThemeParams contains all the parameters to send to the API endpoint

	for the delete theme operation.

	Typically these are written to a http.Request.
*/
type DeleteThemeParams struct {

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	/* ThemeID.

	   Theme ID
	*/
	ThemeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete theme params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteThemeParams) WithDefaults() *DeleteThemeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete theme params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteThemeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete theme params
func (o *DeleteThemeParams) WithTimeout(timeout time.Duration) *DeleteThemeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete theme params
func (o *DeleteThemeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete theme params
func (o *DeleteThemeParams) WithContext(ctx context.Context) *DeleteThemeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete theme params
func (o *DeleteThemeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete theme params
func (o *DeleteThemeParams) WithHTTPClient(client *http.Client) *DeleteThemeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete theme params
func (o *DeleteThemeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the delete theme params
func (o *DeleteThemeParams) WithIfMatch(ifMatch *string) *DeleteThemeParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the delete theme params
func (o *DeleteThemeParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithThemeID adds the themeID to the delete theme params
func (o *DeleteThemeParams) WithThemeID(themeID string) *DeleteThemeParams {
	o.SetThemeID(themeID)
	return o
}

// SetThemeID adds the themeId to the delete theme params
func (o *DeleteThemeParams) SetThemeID(themeID string) {
	o.ThemeID = themeID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteThemeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	// path param themeID
	if err := r.SetPathParam("themeID", o.ThemeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
