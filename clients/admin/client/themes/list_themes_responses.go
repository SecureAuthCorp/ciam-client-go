// Code generated by go-swagger; DO NOT EDIT.

package themes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ListThemesReader is a Reader for the ListThemes structure.
type ListThemesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListThemesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListThemesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListThemesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListThemesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListThemesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /themes] listThemes", response, response.Code())
	}
}

// NewListThemesOK creates a ListThemesOK with default headers values
func NewListThemesOK() *ListThemesOK {
	return &ListThemesOK{}
}

/*
ListThemesOK describes a response with status code 200, with default header values.

Themes
*/
type ListThemesOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Themes
}

// IsSuccess returns true when this list themes o k response has a 2xx status code
func (o *ListThemesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list themes o k response has a 3xx status code
func (o *ListThemesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list themes o k response has a 4xx status code
func (o *ListThemesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list themes o k response has a 5xx status code
func (o *ListThemesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list themes o k response a status code equal to that given
func (o *ListThemesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list themes o k response
func (o *ListThemesOK) Code() int {
	return 200
}

func (o *ListThemesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /themes][%d] listThemesOK %s", 200, payload)
}

func (o *ListThemesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /themes][%d] listThemesOK %s", 200, payload)
}

func (o *ListThemesOK) GetPayload() *models.Themes {
	return o.Payload
}

func (o *ListThemesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Themes)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListThemesUnauthorized creates a ListThemesUnauthorized with default headers values
func NewListThemesUnauthorized() *ListThemesUnauthorized {
	return &ListThemesUnauthorized{}
}

/*
ListThemesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListThemesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list themes unauthorized response has a 2xx status code
func (o *ListThemesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list themes unauthorized response has a 3xx status code
func (o *ListThemesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list themes unauthorized response has a 4xx status code
func (o *ListThemesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list themes unauthorized response has a 5xx status code
func (o *ListThemesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list themes unauthorized response a status code equal to that given
func (o *ListThemesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list themes unauthorized response
func (o *ListThemesUnauthorized) Code() int {
	return 401
}

func (o *ListThemesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /themes][%d] listThemesUnauthorized %s", 401, payload)
}

func (o *ListThemesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /themes][%d] listThemesUnauthorized %s", 401, payload)
}

func (o *ListThemesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListThemesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListThemesForbidden creates a ListThemesForbidden with default headers values
func NewListThemesForbidden() *ListThemesForbidden {
	return &ListThemesForbidden{}
}

/*
ListThemesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListThemesForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list themes forbidden response has a 2xx status code
func (o *ListThemesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list themes forbidden response has a 3xx status code
func (o *ListThemesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list themes forbidden response has a 4xx status code
func (o *ListThemesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list themes forbidden response has a 5xx status code
func (o *ListThemesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list themes forbidden response a status code equal to that given
func (o *ListThemesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list themes forbidden response
func (o *ListThemesForbidden) Code() int {
	return 403
}

func (o *ListThemesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /themes][%d] listThemesForbidden %s", 403, payload)
}

func (o *ListThemesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /themes][%d] listThemesForbidden %s", 403, payload)
}

func (o *ListThemesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListThemesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListThemesTooManyRequests creates a ListThemesTooManyRequests with default headers values
func NewListThemesTooManyRequests() *ListThemesTooManyRequests {
	return &ListThemesTooManyRequests{}
}

/*
ListThemesTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListThemesTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list themes too many requests response has a 2xx status code
func (o *ListThemesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list themes too many requests response has a 3xx status code
func (o *ListThemesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list themes too many requests response has a 4xx status code
func (o *ListThemesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list themes too many requests response has a 5xx status code
func (o *ListThemesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list themes too many requests response a status code equal to that given
func (o *ListThemesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list themes too many requests response
func (o *ListThemesTooManyRequests) Code() int {
	return 429
}

func (o *ListThemesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /themes][%d] listThemesTooManyRequests %s", 429, payload)
}

func (o *ListThemesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /themes][%d] listThemesTooManyRequests %s", 429, payload)
}

func (o *ListThemesTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListThemesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
