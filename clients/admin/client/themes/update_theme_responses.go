// Code generated by go-swagger; DO NOT EDIT.

package themes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateThemeReader is a Reader for the UpdateTheme structure.
type UpdateThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateThemeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateThemeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateThemeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateThemeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateThemeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateThemeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /theme/{themeID}] updateTheme", response, response.Code())
	}
}

// NewUpdateThemeOK creates a UpdateThemeOK with default headers values
func NewUpdateThemeOK() *UpdateThemeOK {
	return &UpdateThemeOK{}
}

/*
UpdateThemeOK describes a response with status code 200, with default header values.

Theme
*/
type UpdateThemeOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Theme
}

// IsSuccess returns true when this update theme o k response has a 2xx status code
func (o *UpdateThemeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update theme o k response has a 3xx status code
func (o *UpdateThemeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update theme o k response has a 4xx status code
func (o *UpdateThemeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update theme o k response has a 5xx status code
func (o *UpdateThemeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update theme o k response a status code equal to that given
func (o *UpdateThemeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update theme o k response
func (o *UpdateThemeOK) Code() int {
	return 200
}

func (o *UpdateThemeOK) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeOK  %+v", 200, o.Payload)
}

func (o *UpdateThemeOK) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeOK  %+v", 200, o.Payload)
}

func (o *UpdateThemeOK) GetPayload() *models.Theme {
	return o.Payload
}

func (o *UpdateThemeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Theme)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateThemeBadRequest creates a UpdateThemeBadRequest with default headers values
func NewUpdateThemeBadRequest() *UpdateThemeBadRequest {
	return &UpdateThemeBadRequest{}
}

/*
UpdateThemeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateThemeBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update theme bad request response has a 2xx status code
func (o *UpdateThemeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update theme bad request response has a 3xx status code
func (o *UpdateThemeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update theme bad request response has a 4xx status code
func (o *UpdateThemeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update theme bad request response has a 5xx status code
func (o *UpdateThemeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update theme bad request response a status code equal to that given
func (o *UpdateThemeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update theme bad request response
func (o *UpdateThemeBadRequest) Code() int {
	return 400
}

func (o *UpdateThemeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateThemeBadRequest) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateThemeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateThemeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateThemeUnauthorized creates a UpdateThemeUnauthorized with default headers values
func NewUpdateThemeUnauthorized() *UpdateThemeUnauthorized {
	return &UpdateThemeUnauthorized{}
}

/*
UpdateThemeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateThemeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update theme unauthorized response has a 2xx status code
func (o *UpdateThemeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update theme unauthorized response has a 3xx status code
func (o *UpdateThemeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update theme unauthorized response has a 4xx status code
func (o *UpdateThemeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update theme unauthorized response has a 5xx status code
func (o *UpdateThemeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update theme unauthorized response a status code equal to that given
func (o *UpdateThemeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update theme unauthorized response
func (o *UpdateThemeUnauthorized) Code() int {
	return 401
}

func (o *UpdateThemeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateThemeUnauthorized) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateThemeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateThemeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateThemeForbidden creates a UpdateThemeForbidden with default headers values
func NewUpdateThemeForbidden() *UpdateThemeForbidden {
	return &UpdateThemeForbidden{}
}

/*
UpdateThemeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateThemeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update theme forbidden response has a 2xx status code
func (o *UpdateThemeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update theme forbidden response has a 3xx status code
func (o *UpdateThemeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update theme forbidden response has a 4xx status code
func (o *UpdateThemeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update theme forbidden response has a 5xx status code
func (o *UpdateThemeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update theme forbidden response a status code equal to that given
func (o *UpdateThemeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update theme forbidden response
func (o *UpdateThemeForbidden) Code() int {
	return 403
}

func (o *UpdateThemeForbidden) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateThemeForbidden) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeForbidden  %+v", 403, o.Payload)
}

func (o *UpdateThemeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateThemeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateThemeUnprocessableEntity creates a UpdateThemeUnprocessableEntity with default headers values
func NewUpdateThemeUnprocessableEntity() *UpdateThemeUnprocessableEntity {
	return &UpdateThemeUnprocessableEntity{}
}

/*
UpdateThemeUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateThemeUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update theme unprocessable entity response has a 2xx status code
func (o *UpdateThemeUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update theme unprocessable entity response has a 3xx status code
func (o *UpdateThemeUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update theme unprocessable entity response has a 4xx status code
func (o *UpdateThemeUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update theme unprocessable entity response has a 5xx status code
func (o *UpdateThemeUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update theme unprocessable entity response a status code equal to that given
func (o *UpdateThemeUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update theme unprocessable entity response
func (o *UpdateThemeUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateThemeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateThemeUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateThemeUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateThemeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateThemeTooManyRequests creates a UpdateThemeTooManyRequests with default headers values
func NewUpdateThemeTooManyRequests() *UpdateThemeTooManyRequests {
	return &UpdateThemeTooManyRequests{}
}

/*
UpdateThemeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateThemeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update theme too many requests response has a 2xx status code
func (o *UpdateThemeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update theme too many requests response has a 3xx status code
func (o *UpdateThemeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update theme too many requests response has a 4xx status code
func (o *UpdateThemeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update theme too many requests response has a 5xx status code
func (o *UpdateThemeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update theme too many requests response a status code equal to that given
func (o *UpdateThemeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update theme too many requests response
func (o *UpdateThemeTooManyRequests) Code() int {
	return 429
}

func (o *UpdateThemeTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateThemeTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}][%d] updateThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateThemeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateThemeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
