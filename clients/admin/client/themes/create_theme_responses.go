// Code generated by go-swagger; DO NOT EDIT.

package themes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CreateThemeReader is a Reader for the CreateTheme structure.
type CreateThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateThemeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateThemeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateThemeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateThemeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateThemeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateThemeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /theme] createTheme", response, response.Code())
	}
}

// NewCreateThemeCreated creates a CreateThemeCreated with default headers values
func NewCreateThemeCreated() *CreateThemeCreated {
	return &CreateThemeCreated{}
}

/*
CreateThemeCreated describes a response with status code 201, with default header values.

Theme
*/
type CreateThemeCreated struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Theme
}

// IsSuccess returns true when this create theme created response has a 2xx status code
func (o *CreateThemeCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create theme created response has a 3xx status code
func (o *CreateThemeCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create theme created response has a 4xx status code
func (o *CreateThemeCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create theme created response has a 5xx status code
func (o *CreateThemeCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create theme created response a status code equal to that given
func (o *CreateThemeCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create theme created response
func (o *CreateThemeCreated) Code() int {
	return 201
}

func (o *CreateThemeCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeCreated %s", 201, payload)
}

func (o *CreateThemeCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeCreated %s", 201, payload)
}

func (o *CreateThemeCreated) GetPayload() *models.Theme {
	return o.Payload
}

func (o *CreateThemeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Theme)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThemeBadRequest creates a CreateThemeBadRequest with default headers values
func NewCreateThemeBadRequest() *CreateThemeBadRequest {
	return &CreateThemeBadRequest{}
}

/*
CreateThemeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateThemeBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this create theme bad request response has a 2xx status code
func (o *CreateThemeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create theme bad request response has a 3xx status code
func (o *CreateThemeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create theme bad request response has a 4xx status code
func (o *CreateThemeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create theme bad request response has a 5xx status code
func (o *CreateThemeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create theme bad request response a status code equal to that given
func (o *CreateThemeBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create theme bad request response
func (o *CreateThemeBadRequest) Code() int {
	return 400
}

func (o *CreateThemeBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeBadRequest %s", 400, payload)
}

func (o *CreateThemeBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeBadRequest %s", 400, payload)
}

func (o *CreateThemeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateThemeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThemeUnauthorized creates a CreateThemeUnauthorized with default headers values
func NewCreateThemeUnauthorized() *CreateThemeUnauthorized {
	return &CreateThemeUnauthorized{}
}

/*
CreateThemeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateThemeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this create theme unauthorized response has a 2xx status code
func (o *CreateThemeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create theme unauthorized response has a 3xx status code
func (o *CreateThemeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create theme unauthorized response has a 4xx status code
func (o *CreateThemeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create theme unauthorized response has a 5xx status code
func (o *CreateThemeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create theme unauthorized response a status code equal to that given
func (o *CreateThemeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create theme unauthorized response
func (o *CreateThemeUnauthorized) Code() int {
	return 401
}

func (o *CreateThemeUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeUnauthorized %s", 401, payload)
}

func (o *CreateThemeUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeUnauthorized %s", 401, payload)
}

func (o *CreateThemeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateThemeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThemeForbidden creates a CreateThemeForbidden with default headers values
func NewCreateThemeForbidden() *CreateThemeForbidden {
	return &CreateThemeForbidden{}
}

/*
CreateThemeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateThemeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this create theme forbidden response has a 2xx status code
func (o *CreateThemeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create theme forbidden response has a 3xx status code
func (o *CreateThemeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create theme forbidden response has a 4xx status code
func (o *CreateThemeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create theme forbidden response has a 5xx status code
func (o *CreateThemeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create theme forbidden response a status code equal to that given
func (o *CreateThemeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create theme forbidden response
func (o *CreateThemeForbidden) Code() int {
	return 403
}

func (o *CreateThemeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeForbidden %s", 403, payload)
}

func (o *CreateThemeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeForbidden %s", 403, payload)
}

func (o *CreateThemeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateThemeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThemeUnprocessableEntity creates a CreateThemeUnprocessableEntity with default headers values
func NewCreateThemeUnprocessableEntity() *CreateThemeUnprocessableEntity {
	return &CreateThemeUnprocessableEntity{}
}

/*
CreateThemeUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type CreateThemeUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this create theme unprocessable entity response has a 2xx status code
func (o *CreateThemeUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create theme unprocessable entity response has a 3xx status code
func (o *CreateThemeUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create theme unprocessable entity response has a 4xx status code
func (o *CreateThemeUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create theme unprocessable entity response has a 5xx status code
func (o *CreateThemeUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create theme unprocessable entity response a status code equal to that given
func (o *CreateThemeUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create theme unprocessable entity response
func (o *CreateThemeUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateThemeUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeUnprocessableEntity %s", 422, payload)
}

func (o *CreateThemeUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeUnprocessableEntity %s", 422, payload)
}

func (o *CreateThemeUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateThemeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateThemeTooManyRequests creates a CreateThemeTooManyRequests with default headers values
func NewCreateThemeTooManyRequests() *CreateThemeTooManyRequests {
	return &CreateThemeTooManyRequests{}
}

/*
CreateThemeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type CreateThemeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this create theme too many requests response has a 2xx status code
func (o *CreateThemeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create theme too many requests response has a 3xx status code
func (o *CreateThemeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create theme too many requests response has a 4xx status code
func (o *CreateThemeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create theme too many requests response has a 5xx status code
func (o *CreateThemeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create theme too many requests response a status code equal to that given
func (o *CreateThemeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create theme too many requests response
func (o *CreateThemeTooManyRequests) Code() int {
	return 429
}

func (o *CreateThemeTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeTooManyRequests %s", 429, payload)
}

func (o *CreateThemeTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /theme][%d] createThemeTooManyRequests %s", 429, payload)
}

func (o *CreateThemeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateThemeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
