// Code generated by go-swagger; DO NOT EDIT.

package themes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetThemeReader is a Reader for the GetTheme structure.
type GetThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetThemeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetThemeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetThemeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetThemeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetThemeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /theme/{themeID}] getTheme", response, response.Code())
	}
}

// NewGetThemeOK creates a GetThemeOK with default headers values
func NewGetThemeOK() *GetThemeOK {
	return &GetThemeOK{}
}

/*
GetThemeOK describes a response with status code 200, with default header values.

Theme
*/
type GetThemeOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Theme
}

// IsSuccess returns true when this get theme o k response has a 2xx status code
func (o *GetThemeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get theme o k response has a 3xx status code
func (o *GetThemeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get theme o k response has a 4xx status code
func (o *GetThemeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get theme o k response has a 5xx status code
func (o *GetThemeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get theme o k response a status code equal to that given
func (o *GetThemeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get theme o k response
func (o *GetThemeOK) Code() int {
	return 200
}

func (o *GetThemeOK) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeOK  %+v", 200, o.Payload)
}

func (o *GetThemeOK) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeOK  %+v", 200, o.Payload)
}

func (o *GetThemeOK) GetPayload() *models.Theme {
	return o.Payload
}

func (o *GetThemeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Theme)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetThemeUnauthorized creates a GetThemeUnauthorized with default headers values
func NewGetThemeUnauthorized() *GetThemeUnauthorized {
	return &GetThemeUnauthorized{}
}

/*
GetThemeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetThemeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get theme unauthorized response has a 2xx status code
func (o *GetThemeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get theme unauthorized response has a 3xx status code
func (o *GetThemeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get theme unauthorized response has a 4xx status code
func (o *GetThemeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get theme unauthorized response has a 5xx status code
func (o *GetThemeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get theme unauthorized response a status code equal to that given
func (o *GetThemeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get theme unauthorized response
func (o *GetThemeUnauthorized) Code() int {
	return 401
}

func (o *GetThemeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetThemeUnauthorized) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetThemeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetThemeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetThemeForbidden creates a GetThemeForbidden with default headers values
func NewGetThemeForbidden() *GetThemeForbidden {
	return &GetThemeForbidden{}
}

/*
GetThemeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetThemeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get theme forbidden response has a 2xx status code
func (o *GetThemeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get theme forbidden response has a 3xx status code
func (o *GetThemeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get theme forbidden response has a 4xx status code
func (o *GetThemeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get theme forbidden response has a 5xx status code
func (o *GetThemeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get theme forbidden response a status code equal to that given
func (o *GetThemeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get theme forbidden response
func (o *GetThemeForbidden) Code() int {
	return 403
}

func (o *GetThemeForbidden) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeForbidden  %+v", 403, o.Payload)
}

func (o *GetThemeForbidden) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeForbidden  %+v", 403, o.Payload)
}

func (o *GetThemeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetThemeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetThemeNotFound creates a GetThemeNotFound with default headers values
func NewGetThemeNotFound() *GetThemeNotFound {
	return &GetThemeNotFound{}
}

/*
GetThemeNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetThemeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get theme not found response has a 2xx status code
func (o *GetThemeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get theme not found response has a 3xx status code
func (o *GetThemeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get theme not found response has a 4xx status code
func (o *GetThemeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get theme not found response has a 5xx status code
func (o *GetThemeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get theme not found response a status code equal to that given
func (o *GetThemeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get theme not found response
func (o *GetThemeNotFound) Code() int {
	return 404
}

func (o *GetThemeNotFound) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeNotFound  %+v", 404, o.Payload)
}

func (o *GetThemeNotFound) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeNotFound  %+v", 404, o.Payload)
}

func (o *GetThemeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetThemeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetThemeTooManyRequests creates a GetThemeTooManyRequests with default headers values
func NewGetThemeTooManyRequests() *GetThemeTooManyRequests {
	return &GetThemeTooManyRequests{}
}

/*
GetThemeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetThemeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get theme too many requests response has a 2xx status code
func (o *GetThemeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get theme too many requests response has a 3xx status code
func (o *GetThemeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get theme too many requests response has a 4xx status code
func (o *GetThemeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get theme too many requests response has a 5xx status code
func (o *GetThemeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get theme too many requests response a status code equal to that given
func (o *GetThemeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get theme too many requests response
func (o *GetThemeTooManyRequests) Code() int {
	return 429
}

func (o *GetThemeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetThemeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}][%d] getThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetThemeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetThemeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
