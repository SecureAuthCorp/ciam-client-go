// Code generated by go-swagger; DO NOT EDIT.

package themes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// DeleteThemeReader is a Reader for the DeleteTheme structure.
type DeleteThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteThemeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteThemeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteThemeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteThemeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteThemeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /theme/{themeID}] deleteTheme", response, response.Code())
	}
}

// NewDeleteThemeNoContent creates a DeleteThemeNoContent with default headers values
func NewDeleteThemeNoContent() *DeleteThemeNoContent {
	return &DeleteThemeNoContent{}
}

/*
DeleteThemeNoContent describes a response with status code 204, with default header values.

	HTML template has been deleted
*/
type DeleteThemeNoContent struct {
}

// IsSuccess returns true when this delete theme no content response has a 2xx status code
func (o *DeleteThemeNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete theme no content response has a 3xx status code
func (o *DeleteThemeNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete theme no content response has a 4xx status code
func (o *DeleteThemeNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete theme no content response has a 5xx status code
func (o *DeleteThemeNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete theme no content response a status code equal to that given
func (o *DeleteThemeNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete theme no content response
func (o *DeleteThemeNoContent) Code() int {
	return 204
}

func (o *DeleteThemeNoContent) Error() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeNoContent ", 204)
}

func (o *DeleteThemeNoContent) String() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeNoContent ", 204)
}

func (o *DeleteThemeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteThemeUnauthorized creates a DeleteThemeUnauthorized with default headers values
func NewDeleteThemeUnauthorized() *DeleteThemeUnauthorized {
	return &DeleteThemeUnauthorized{}
}

/*
DeleteThemeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteThemeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete theme unauthorized response has a 2xx status code
func (o *DeleteThemeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete theme unauthorized response has a 3xx status code
func (o *DeleteThemeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete theme unauthorized response has a 4xx status code
func (o *DeleteThemeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete theme unauthorized response has a 5xx status code
func (o *DeleteThemeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete theme unauthorized response a status code equal to that given
func (o *DeleteThemeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete theme unauthorized response
func (o *DeleteThemeUnauthorized) Code() int {
	return 401
}

func (o *DeleteThemeUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteThemeUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteThemeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteThemeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteThemeForbidden creates a DeleteThemeForbidden with default headers values
func NewDeleteThemeForbidden() *DeleteThemeForbidden {
	return &DeleteThemeForbidden{}
}

/*
DeleteThemeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteThemeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete theme forbidden response has a 2xx status code
func (o *DeleteThemeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete theme forbidden response has a 3xx status code
func (o *DeleteThemeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete theme forbidden response has a 4xx status code
func (o *DeleteThemeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete theme forbidden response has a 5xx status code
func (o *DeleteThemeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete theme forbidden response a status code equal to that given
func (o *DeleteThemeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete theme forbidden response
func (o *DeleteThemeForbidden) Code() int {
	return 403
}

func (o *DeleteThemeForbidden) Error() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeForbidden  %+v", 403, o.Payload)
}

func (o *DeleteThemeForbidden) String() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeForbidden  %+v", 403, o.Payload)
}

func (o *DeleteThemeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteThemeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteThemeNotFound creates a DeleteThemeNotFound with default headers values
func NewDeleteThemeNotFound() *DeleteThemeNotFound {
	return &DeleteThemeNotFound{}
}

/*
DeleteThemeNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteThemeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete theme not found response has a 2xx status code
func (o *DeleteThemeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete theme not found response has a 3xx status code
func (o *DeleteThemeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete theme not found response has a 4xx status code
func (o *DeleteThemeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete theme not found response has a 5xx status code
func (o *DeleteThemeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete theme not found response a status code equal to that given
func (o *DeleteThemeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete theme not found response
func (o *DeleteThemeNotFound) Code() int {
	return 404
}

func (o *DeleteThemeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeNotFound  %+v", 404, o.Payload)
}

func (o *DeleteThemeNotFound) String() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeNotFound  %+v", 404, o.Payload)
}

func (o *DeleteThemeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteThemeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteThemeTooManyRequests creates a DeleteThemeTooManyRequests with default headers values
func NewDeleteThemeTooManyRequests() *DeleteThemeTooManyRequests {
	return &DeleteThemeTooManyRequests{}
}

/*
DeleteThemeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteThemeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete theme too many requests response has a 2xx status code
func (o *DeleteThemeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete theme too many requests response has a 3xx status code
func (o *DeleteThemeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete theme too many requests response has a 4xx status code
func (o *DeleteThemeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete theme too many requests response has a 5xx status code
func (o *DeleteThemeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete theme too many requests response a status code equal to that given
func (o *DeleteThemeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete theme too many requests response
func (o *DeleteThemeTooManyRequests) Code() int {
	return 429
}

func (o *DeleteThemeTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteThemeTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /theme/{themeID}][%d] deleteThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteThemeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteThemeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
