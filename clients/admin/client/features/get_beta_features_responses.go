// Code generated by go-swagger; DO NOT EDIT.

package features

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetBetaFeaturesReader is a Reader for the GetBetaFeatures structure.
type GetBetaFeaturesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBetaFeaturesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBetaFeaturesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetBetaFeaturesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBetaFeaturesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBetaFeaturesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetBetaFeaturesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /beta-features] getBetaFeatures", response, response.Code())
	}
}

// NewGetBetaFeaturesOK creates a GetBetaFeaturesOK with default headers values
func NewGetBetaFeaturesOK() *GetBetaFeaturesOK {
	return &GetBetaFeaturesOK{}
}

/*
GetBetaFeaturesOK describes a response with status code 200, with default header values.

Beta features
*/
type GetBetaFeaturesOK struct {
	Payload *models.FeaturesResponse
}

// IsSuccess returns true when this get beta features o k response has a 2xx status code
func (o *GetBetaFeaturesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get beta features o k response has a 3xx status code
func (o *GetBetaFeaturesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get beta features o k response has a 4xx status code
func (o *GetBetaFeaturesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get beta features o k response has a 5xx status code
func (o *GetBetaFeaturesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get beta features o k response a status code equal to that given
func (o *GetBetaFeaturesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get beta features o k response
func (o *GetBetaFeaturesOK) Code() int {
	return 200
}

func (o *GetBetaFeaturesOK) Error() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesOK  %+v", 200, o.Payload)
}

func (o *GetBetaFeaturesOK) String() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesOK  %+v", 200, o.Payload)
}

func (o *GetBetaFeaturesOK) GetPayload() *models.FeaturesResponse {
	return o.Payload
}

func (o *GetBetaFeaturesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FeaturesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBetaFeaturesUnauthorized creates a GetBetaFeaturesUnauthorized with default headers values
func NewGetBetaFeaturesUnauthorized() *GetBetaFeaturesUnauthorized {
	return &GetBetaFeaturesUnauthorized{}
}

/*
GetBetaFeaturesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetBetaFeaturesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get beta features unauthorized response has a 2xx status code
func (o *GetBetaFeaturesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get beta features unauthorized response has a 3xx status code
func (o *GetBetaFeaturesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get beta features unauthorized response has a 4xx status code
func (o *GetBetaFeaturesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get beta features unauthorized response has a 5xx status code
func (o *GetBetaFeaturesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get beta features unauthorized response a status code equal to that given
func (o *GetBetaFeaturesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get beta features unauthorized response
func (o *GetBetaFeaturesUnauthorized) Code() int {
	return 401
}

func (o *GetBetaFeaturesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetBetaFeaturesUnauthorized) String() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetBetaFeaturesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBetaFeaturesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBetaFeaturesForbidden creates a GetBetaFeaturesForbidden with default headers values
func NewGetBetaFeaturesForbidden() *GetBetaFeaturesForbidden {
	return &GetBetaFeaturesForbidden{}
}

/*
GetBetaFeaturesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetBetaFeaturesForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get beta features forbidden response has a 2xx status code
func (o *GetBetaFeaturesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get beta features forbidden response has a 3xx status code
func (o *GetBetaFeaturesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get beta features forbidden response has a 4xx status code
func (o *GetBetaFeaturesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get beta features forbidden response has a 5xx status code
func (o *GetBetaFeaturesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get beta features forbidden response a status code equal to that given
func (o *GetBetaFeaturesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get beta features forbidden response
func (o *GetBetaFeaturesForbidden) Code() int {
	return 403
}

func (o *GetBetaFeaturesForbidden) Error() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesForbidden  %+v", 403, o.Payload)
}

func (o *GetBetaFeaturesForbidden) String() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesForbidden  %+v", 403, o.Payload)
}

func (o *GetBetaFeaturesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBetaFeaturesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBetaFeaturesNotFound creates a GetBetaFeaturesNotFound with default headers values
func NewGetBetaFeaturesNotFound() *GetBetaFeaturesNotFound {
	return &GetBetaFeaturesNotFound{}
}

/*
GetBetaFeaturesNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetBetaFeaturesNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get beta features not found response has a 2xx status code
func (o *GetBetaFeaturesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get beta features not found response has a 3xx status code
func (o *GetBetaFeaturesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get beta features not found response has a 4xx status code
func (o *GetBetaFeaturesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get beta features not found response has a 5xx status code
func (o *GetBetaFeaturesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get beta features not found response a status code equal to that given
func (o *GetBetaFeaturesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get beta features not found response
func (o *GetBetaFeaturesNotFound) Code() int {
	return 404
}

func (o *GetBetaFeaturesNotFound) Error() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesNotFound  %+v", 404, o.Payload)
}

func (o *GetBetaFeaturesNotFound) String() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesNotFound  %+v", 404, o.Payload)
}

func (o *GetBetaFeaturesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBetaFeaturesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBetaFeaturesTooManyRequests creates a GetBetaFeaturesTooManyRequests with default headers values
func NewGetBetaFeaturesTooManyRequests() *GetBetaFeaturesTooManyRequests {
	return &GetBetaFeaturesTooManyRequests{}
}

/*
GetBetaFeaturesTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetBetaFeaturesTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get beta features too many requests response has a 2xx status code
func (o *GetBetaFeaturesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get beta features too many requests response has a 3xx status code
func (o *GetBetaFeaturesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get beta features too many requests response has a 4xx status code
func (o *GetBetaFeaturesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get beta features too many requests response has a 5xx status code
func (o *GetBetaFeaturesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get beta features too many requests response a status code equal to that given
func (o *GetBetaFeaturesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get beta features too many requests response
func (o *GetBetaFeaturesTooManyRequests) Code() int {
	return 429
}

func (o *GetBetaFeaturesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetBetaFeaturesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /beta-features][%d] getBetaFeaturesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetBetaFeaturesTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetBetaFeaturesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
