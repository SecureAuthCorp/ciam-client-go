// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CheckWorkspacePermissionsReader is a Reader for the CheckWorkspacePermissions structure.
type CheckWorkspacePermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckWorkspacePermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckWorkspacePermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCheckWorkspacePermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckWorkspacePermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckWorkspacePermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCheckWorkspacePermissionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/permissions] checkWorkspacePermissions", response, response.Code())
	}
}

// NewCheckWorkspacePermissionsOK creates a CheckWorkspacePermissionsOK with default headers values
func NewCheckWorkspacePermissionsOK() *CheckWorkspacePermissionsOK {
	return &CheckWorkspacePermissionsOK{}
}

/*
CheckWorkspacePermissionsOK describes a response with status code 200, with default header values.

WorkspacePermissions
*/
type CheckWorkspacePermissionsOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.WorkspacePermissionsResponse
}

// IsSuccess returns true when this check workspace permissions o k response has a 2xx status code
func (o *CheckWorkspacePermissionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this check workspace permissions o k response has a 3xx status code
func (o *CheckWorkspacePermissionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check workspace permissions o k response has a 4xx status code
func (o *CheckWorkspacePermissionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this check workspace permissions o k response has a 5xx status code
func (o *CheckWorkspacePermissionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this check workspace permissions o k response a status code equal to that given
func (o *CheckWorkspacePermissionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the check workspace permissions o k response
func (o *CheckWorkspacePermissionsOK) Code() int {
	return 200
}

func (o *CheckWorkspacePermissionsOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsOK  %+v", 200, o.Payload)
}

func (o *CheckWorkspacePermissionsOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsOK  %+v", 200, o.Payload)
}

func (o *CheckWorkspacePermissionsOK) GetPayload() *models.WorkspacePermissionsResponse {
	return o.Payload
}

func (o *CheckWorkspacePermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.WorkspacePermissionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckWorkspacePermissionsUnauthorized creates a CheckWorkspacePermissionsUnauthorized with default headers values
func NewCheckWorkspacePermissionsUnauthorized() *CheckWorkspacePermissionsUnauthorized {
	return &CheckWorkspacePermissionsUnauthorized{}
}

/*
CheckWorkspacePermissionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckWorkspacePermissionsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this check workspace permissions unauthorized response has a 2xx status code
func (o *CheckWorkspacePermissionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check workspace permissions unauthorized response has a 3xx status code
func (o *CheckWorkspacePermissionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check workspace permissions unauthorized response has a 4xx status code
func (o *CheckWorkspacePermissionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this check workspace permissions unauthorized response has a 5xx status code
func (o *CheckWorkspacePermissionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this check workspace permissions unauthorized response a status code equal to that given
func (o *CheckWorkspacePermissionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the check workspace permissions unauthorized response
func (o *CheckWorkspacePermissionsUnauthorized) Code() int {
	return 401
}

func (o *CheckWorkspacePermissionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckWorkspacePermissionsUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsUnauthorized  %+v", 401, o.Payload)
}

func (o *CheckWorkspacePermissionsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckWorkspacePermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckWorkspacePermissionsForbidden creates a CheckWorkspacePermissionsForbidden with default headers values
func NewCheckWorkspacePermissionsForbidden() *CheckWorkspacePermissionsForbidden {
	return &CheckWorkspacePermissionsForbidden{}
}

/*
CheckWorkspacePermissionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckWorkspacePermissionsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this check workspace permissions forbidden response has a 2xx status code
func (o *CheckWorkspacePermissionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check workspace permissions forbidden response has a 3xx status code
func (o *CheckWorkspacePermissionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check workspace permissions forbidden response has a 4xx status code
func (o *CheckWorkspacePermissionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this check workspace permissions forbidden response has a 5xx status code
func (o *CheckWorkspacePermissionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this check workspace permissions forbidden response a status code equal to that given
func (o *CheckWorkspacePermissionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the check workspace permissions forbidden response
func (o *CheckWorkspacePermissionsForbidden) Code() int {
	return 403
}

func (o *CheckWorkspacePermissionsForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsForbidden  %+v", 403, o.Payload)
}

func (o *CheckWorkspacePermissionsForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsForbidden  %+v", 403, o.Payload)
}

func (o *CheckWorkspacePermissionsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckWorkspacePermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckWorkspacePermissionsNotFound creates a CheckWorkspacePermissionsNotFound with default headers values
func NewCheckWorkspacePermissionsNotFound() *CheckWorkspacePermissionsNotFound {
	return &CheckWorkspacePermissionsNotFound{}
}

/*
CheckWorkspacePermissionsNotFound describes a response with status code 404, with default header values.

Not found
*/
type CheckWorkspacePermissionsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this check workspace permissions not found response has a 2xx status code
func (o *CheckWorkspacePermissionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check workspace permissions not found response has a 3xx status code
func (o *CheckWorkspacePermissionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check workspace permissions not found response has a 4xx status code
func (o *CheckWorkspacePermissionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this check workspace permissions not found response has a 5xx status code
func (o *CheckWorkspacePermissionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this check workspace permissions not found response a status code equal to that given
func (o *CheckWorkspacePermissionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the check workspace permissions not found response
func (o *CheckWorkspacePermissionsNotFound) Code() int {
	return 404
}

func (o *CheckWorkspacePermissionsNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsNotFound  %+v", 404, o.Payload)
}

func (o *CheckWorkspacePermissionsNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsNotFound  %+v", 404, o.Payload)
}

func (o *CheckWorkspacePermissionsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckWorkspacePermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckWorkspacePermissionsTooManyRequests creates a CheckWorkspacePermissionsTooManyRequests with default headers values
func NewCheckWorkspacePermissionsTooManyRequests() *CheckWorkspacePermissionsTooManyRequests {
	return &CheckWorkspacePermissionsTooManyRequests{}
}

/*
CheckWorkspacePermissionsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type CheckWorkspacePermissionsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this check workspace permissions too many requests response has a 2xx status code
func (o *CheckWorkspacePermissionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check workspace permissions too many requests response has a 3xx status code
func (o *CheckWorkspacePermissionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check workspace permissions too many requests response has a 4xx status code
func (o *CheckWorkspacePermissionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this check workspace permissions too many requests response has a 5xx status code
func (o *CheckWorkspacePermissionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this check workspace permissions too many requests response a status code equal to that given
func (o *CheckWorkspacePermissionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the check workspace permissions too many requests response
func (o *CheckWorkspacePermissionsTooManyRequests) Code() int {
	return 429
}

func (o *CheckWorkspacePermissionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CheckWorkspacePermissionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/permissions][%d] checkWorkspacePermissionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CheckWorkspacePermissionsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckWorkspacePermissionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
