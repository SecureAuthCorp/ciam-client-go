// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CheckTenantPermissionsReader is a Reader for the CheckTenantPermissions structure.
type CheckTenantPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckTenantPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckTenantPermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCheckTenantPermissionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCheckTenantPermissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCheckTenantPermissionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCheckTenantPermissionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /tenant/permissions] checkTenantPermissions", response, response.Code())
	}
}

// NewCheckTenantPermissionsOK creates a CheckTenantPermissionsOK with default headers values
func NewCheckTenantPermissionsOK() *CheckTenantPermissionsOK {
	return &CheckTenantPermissionsOK{}
}

/*
CheckTenantPermissionsOK describes a response with status code 200, with default header values.

TenantPermissions
*/
type CheckTenantPermissionsOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.TenantPermissionsResponse
}

// IsSuccess returns true when this check tenant permissions o k response has a 2xx status code
func (o *CheckTenantPermissionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this check tenant permissions o k response has a 3xx status code
func (o *CheckTenantPermissionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check tenant permissions o k response has a 4xx status code
func (o *CheckTenantPermissionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this check tenant permissions o k response has a 5xx status code
func (o *CheckTenantPermissionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this check tenant permissions o k response a status code equal to that given
func (o *CheckTenantPermissionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the check tenant permissions o k response
func (o *CheckTenantPermissionsOK) Code() int {
	return 200
}

func (o *CheckTenantPermissionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsOK %s", 200, payload)
}

func (o *CheckTenantPermissionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsOK %s", 200, payload)
}

func (o *CheckTenantPermissionsOK) GetPayload() *models.TenantPermissionsResponse {
	return o.Payload
}

func (o *CheckTenantPermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.TenantPermissionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckTenantPermissionsUnauthorized creates a CheckTenantPermissionsUnauthorized with default headers values
func NewCheckTenantPermissionsUnauthorized() *CheckTenantPermissionsUnauthorized {
	return &CheckTenantPermissionsUnauthorized{}
}

/*
CheckTenantPermissionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CheckTenantPermissionsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this check tenant permissions unauthorized response has a 2xx status code
func (o *CheckTenantPermissionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check tenant permissions unauthorized response has a 3xx status code
func (o *CheckTenantPermissionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check tenant permissions unauthorized response has a 4xx status code
func (o *CheckTenantPermissionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this check tenant permissions unauthorized response has a 5xx status code
func (o *CheckTenantPermissionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this check tenant permissions unauthorized response a status code equal to that given
func (o *CheckTenantPermissionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the check tenant permissions unauthorized response
func (o *CheckTenantPermissionsUnauthorized) Code() int {
	return 401
}

func (o *CheckTenantPermissionsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsUnauthorized %s", 401, payload)
}

func (o *CheckTenantPermissionsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsUnauthorized %s", 401, payload)
}

func (o *CheckTenantPermissionsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckTenantPermissionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckTenantPermissionsForbidden creates a CheckTenantPermissionsForbidden with default headers values
func NewCheckTenantPermissionsForbidden() *CheckTenantPermissionsForbidden {
	return &CheckTenantPermissionsForbidden{}
}

/*
CheckTenantPermissionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CheckTenantPermissionsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this check tenant permissions forbidden response has a 2xx status code
func (o *CheckTenantPermissionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check tenant permissions forbidden response has a 3xx status code
func (o *CheckTenantPermissionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check tenant permissions forbidden response has a 4xx status code
func (o *CheckTenantPermissionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this check tenant permissions forbidden response has a 5xx status code
func (o *CheckTenantPermissionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this check tenant permissions forbidden response a status code equal to that given
func (o *CheckTenantPermissionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the check tenant permissions forbidden response
func (o *CheckTenantPermissionsForbidden) Code() int {
	return 403
}

func (o *CheckTenantPermissionsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsForbidden %s", 403, payload)
}

func (o *CheckTenantPermissionsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsForbidden %s", 403, payload)
}

func (o *CheckTenantPermissionsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckTenantPermissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckTenantPermissionsNotFound creates a CheckTenantPermissionsNotFound with default headers values
func NewCheckTenantPermissionsNotFound() *CheckTenantPermissionsNotFound {
	return &CheckTenantPermissionsNotFound{}
}

/*
CheckTenantPermissionsNotFound describes a response with status code 404, with default header values.

Not found
*/
type CheckTenantPermissionsNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this check tenant permissions not found response has a 2xx status code
func (o *CheckTenantPermissionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check tenant permissions not found response has a 3xx status code
func (o *CheckTenantPermissionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check tenant permissions not found response has a 4xx status code
func (o *CheckTenantPermissionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this check tenant permissions not found response has a 5xx status code
func (o *CheckTenantPermissionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this check tenant permissions not found response a status code equal to that given
func (o *CheckTenantPermissionsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the check tenant permissions not found response
func (o *CheckTenantPermissionsNotFound) Code() int {
	return 404
}

func (o *CheckTenantPermissionsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsNotFound %s", 404, payload)
}

func (o *CheckTenantPermissionsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsNotFound %s", 404, payload)
}

func (o *CheckTenantPermissionsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckTenantPermissionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckTenantPermissionsTooManyRequests creates a CheckTenantPermissionsTooManyRequests with default headers values
func NewCheckTenantPermissionsTooManyRequests() *CheckTenantPermissionsTooManyRequests {
	return &CheckTenantPermissionsTooManyRequests{}
}

/*
CheckTenantPermissionsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type CheckTenantPermissionsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this check tenant permissions too many requests response has a 2xx status code
func (o *CheckTenantPermissionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this check tenant permissions too many requests response has a 3xx status code
func (o *CheckTenantPermissionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this check tenant permissions too many requests response has a 4xx status code
func (o *CheckTenantPermissionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this check tenant permissions too many requests response has a 5xx status code
func (o *CheckTenantPermissionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this check tenant permissions too many requests response a status code equal to that given
func (o *CheckTenantPermissionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the check tenant permissions too many requests response
func (o *CheckTenantPermissionsTooManyRequests) Code() int {
	return 429
}

func (o *CheckTenantPermissionsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsTooManyRequests %s", 429, payload)
}

func (o *CheckTenantPermissionsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /tenant/permissions][%d] checkTenantPermissionsTooManyRequests %s", 429, payload)
}

func (o *CheckTenantPermissionsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CheckTenantPermissionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
