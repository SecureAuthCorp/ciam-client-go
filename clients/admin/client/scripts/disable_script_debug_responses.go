// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// DisableScriptDebugReader is a Reader for the DisableScriptDebug structure.
type DisableScriptDebugReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisableScriptDebugReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDisableScriptDebugNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDisableScriptDebugUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisableScriptDebugForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDisableScriptDebugNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDisableScriptDebugTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /servers/{wid}/scripts/{script}/debug] disableScriptDebug", response, response.Code())
	}
}

// NewDisableScriptDebugNoContent creates a DisableScriptDebugNoContent with default headers values
func NewDisableScriptDebugNoContent() *DisableScriptDebugNoContent {
	return &DisableScriptDebugNoContent{}
}

/*
DisableScriptDebugNoContent describes a response with status code 204, with default header values.

	debug logging has been disabled
*/
type DisableScriptDebugNoContent struct {
}

// IsSuccess returns true when this disable script debug no content response has a 2xx status code
func (o *DisableScriptDebugNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this disable script debug no content response has a 3xx status code
func (o *DisableScriptDebugNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable script debug no content response has a 4xx status code
func (o *DisableScriptDebugNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this disable script debug no content response has a 5xx status code
func (o *DisableScriptDebugNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this disable script debug no content response a status code equal to that given
func (o *DisableScriptDebugNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the disable script debug no content response
func (o *DisableScriptDebugNoContent) Code() int {
	return 204
}

func (o *DisableScriptDebugNoContent) Error() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugNoContent ", 204)
}

func (o *DisableScriptDebugNoContent) String() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugNoContent ", 204)
}

func (o *DisableScriptDebugNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDisableScriptDebugUnauthorized creates a DisableScriptDebugUnauthorized with default headers values
func NewDisableScriptDebugUnauthorized() *DisableScriptDebugUnauthorized {
	return &DisableScriptDebugUnauthorized{}
}

/*
DisableScriptDebugUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DisableScriptDebugUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this disable script debug unauthorized response has a 2xx status code
func (o *DisableScriptDebugUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable script debug unauthorized response has a 3xx status code
func (o *DisableScriptDebugUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable script debug unauthorized response has a 4xx status code
func (o *DisableScriptDebugUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this disable script debug unauthorized response has a 5xx status code
func (o *DisableScriptDebugUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this disable script debug unauthorized response a status code equal to that given
func (o *DisableScriptDebugUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the disable script debug unauthorized response
func (o *DisableScriptDebugUnauthorized) Code() int {
	return 401
}

func (o *DisableScriptDebugUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugUnauthorized  %+v", 401, o.Payload)
}

func (o *DisableScriptDebugUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugUnauthorized  %+v", 401, o.Payload)
}

func (o *DisableScriptDebugUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DisableScriptDebugUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableScriptDebugForbidden creates a DisableScriptDebugForbidden with default headers values
func NewDisableScriptDebugForbidden() *DisableScriptDebugForbidden {
	return &DisableScriptDebugForbidden{}
}

/*
DisableScriptDebugForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DisableScriptDebugForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this disable script debug forbidden response has a 2xx status code
func (o *DisableScriptDebugForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable script debug forbidden response has a 3xx status code
func (o *DisableScriptDebugForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable script debug forbidden response has a 4xx status code
func (o *DisableScriptDebugForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this disable script debug forbidden response has a 5xx status code
func (o *DisableScriptDebugForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this disable script debug forbidden response a status code equal to that given
func (o *DisableScriptDebugForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the disable script debug forbidden response
func (o *DisableScriptDebugForbidden) Code() int {
	return 403
}

func (o *DisableScriptDebugForbidden) Error() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugForbidden  %+v", 403, o.Payload)
}

func (o *DisableScriptDebugForbidden) String() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugForbidden  %+v", 403, o.Payload)
}

func (o *DisableScriptDebugForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DisableScriptDebugForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableScriptDebugNotFound creates a DisableScriptDebugNotFound with default headers values
func NewDisableScriptDebugNotFound() *DisableScriptDebugNotFound {
	return &DisableScriptDebugNotFound{}
}

/*
DisableScriptDebugNotFound describes a response with status code 404, with default header values.

Not found
*/
type DisableScriptDebugNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this disable script debug not found response has a 2xx status code
func (o *DisableScriptDebugNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable script debug not found response has a 3xx status code
func (o *DisableScriptDebugNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable script debug not found response has a 4xx status code
func (o *DisableScriptDebugNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this disable script debug not found response has a 5xx status code
func (o *DisableScriptDebugNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this disable script debug not found response a status code equal to that given
func (o *DisableScriptDebugNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the disable script debug not found response
func (o *DisableScriptDebugNotFound) Code() int {
	return 404
}

func (o *DisableScriptDebugNotFound) Error() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugNotFound  %+v", 404, o.Payload)
}

func (o *DisableScriptDebugNotFound) String() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugNotFound  %+v", 404, o.Payload)
}

func (o *DisableScriptDebugNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DisableScriptDebugNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisableScriptDebugTooManyRequests creates a DisableScriptDebugTooManyRequests with default headers values
func NewDisableScriptDebugTooManyRequests() *DisableScriptDebugTooManyRequests {
	return &DisableScriptDebugTooManyRequests{}
}

/*
DisableScriptDebugTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DisableScriptDebugTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this disable script debug too many requests response has a 2xx status code
func (o *DisableScriptDebugTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this disable script debug too many requests response has a 3xx status code
func (o *DisableScriptDebugTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this disable script debug too many requests response has a 4xx status code
func (o *DisableScriptDebugTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this disable script debug too many requests response has a 5xx status code
func (o *DisableScriptDebugTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this disable script debug too many requests response a status code equal to that given
func (o *DisableScriptDebugTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the disable script debug too many requests response
func (o *DisableScriptDebugTooManyRequests) Code() int {
	return 429
}

func (o *DisableScriptDebugTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugTooManyRequests  %+v", 429, o.Payload)
}

func (o *DisableScriptDebugTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /servers/{wid}/scripts/{script}/debug][%d] disableScriptDebugTooManyRequests  %+v", 429, o.Payload)
}

func (o *DisableScriptDebugTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DisableScriptDebugTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
