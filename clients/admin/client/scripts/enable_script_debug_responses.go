// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// EnableScriptDebugReader is a Reader for the EnableScriptDebug structure.
type EnableScriptDebugReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnableScriptDebugReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnableScriptDebugOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnableScriptDebugBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnableScriptDebugUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnableScriptDebugForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnableScriptDebugNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEnableScriptDebugTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /servers/{wid}/scripts/{script}/debug] enableScriptDebug", response, response.Code())
	}
}

// NewEnableScriptDebugOK creates a EnableScriptDebugOK with default headers values
func NewEnableScriptDebugOK() *EnableScriptDebugOK {
	return &EnableScriptDebugOK{}
}

/*
EnableScriptDebugOK describes a response with status code 200, with default header values.

ScriptDebug
*/
type EnableScriptDebugOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ScriptDebug
}

// IsSuccess returns true when this enable script debug o k response has a 2xx status code
func (o *EnableScriptDebugOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enable script debug o k response has a 3xx status code
func (o *EnableScriptDebugOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable script debug o k response has a 4xx status code
func (o *EnableScriptDebugOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enable script debug o k response has a 5xx status code
func (o *EnableScriptDebugOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enable script debug o k response a status code equal to that given
func (o *EnableScriptDebugOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enable script debug o k response
func (o *EnableScriptDebugOK) Code() int {
	return 200
}

func (o *EnableScriptDebugOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugOK %s", 200, payload)
}

func (o *EnableScriptDebugOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugOK %s", 200, payload)
}

func (o *EnableScriptDebugOK) GetPayload() *models.ScriptDebug {
	return o.Payload
}

func (o *EnableScriptDebugOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ScriptDebug)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableScriptDebugBadRequest creates a EnableScriptDebugBadRequest with default headers values
func NewEnableScriptDebugBadRequest() *EnableScriptDebugBadRequest {
	return &EnableScriptDebugBadRequest{}
}

/*
EnableScriptDebugBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type EnableScriptDebugBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable script debug bad request response has a 2xx status code
func (o *EnableScriptDebugBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable script debug bad request response has a 3xx status code
func (o *EnableScriptDebugBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable script debug bad request response has a 4xx status code
func (o *EnableScriptDebugBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable script debug bad request response has a 5xx status code
func (o *EnableScriptDebugBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enable script debug bad request response a status code equal to that given
func (o *EnableScriptDebugBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enable script debug bad request response
func (o *EnableScriptDebugBadRequest) Code() int {
	return 400
}

func (o *EnableScriptDebugBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugBadRequest %s", 400, payload)
}

func (o *EnableScriptDebugBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugBadRequest %s", 400, payload)
}

func (o *EnableScriptDebugBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnableScriptDebugBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableScriptDebugUnauthorized creates a EnableScriptDebugUnauthorized with default headers values
func NewEnableScriptDebugUnauthorized() *EnableScriptDebugUnauthorized {
	return &EnableScriptDebugUnauthorized{}
}

/*
EnableScriptDebugUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnableScriptDebugUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable script debug unauthorized response has a 2xx status code
func (o *EnableScriptDebugUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable script debug unauthorized response has a 3xx status code
func (o *EnableScriptDebugUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable script debug unauthorized response has a 4xx status code
func (o *EnableScriptDebugUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable script debug unauthorized response has a 5xx status code
func (o *EnableScriptDebugUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enable script debug unauthorized response a status code equal to that given
func (o *EnableScriptDebugUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enable script debug unauthorized response
func (o *EnableScriptDebugUnauthorized) Code() int {
	return 401
}

func (o *EnableScriptDebugUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugUnauthorized %s", 401, payload)
}

func (o *EnableScriptDebugUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugUnauthorized %s", 401, payload)
}

func (o *EnableScriptDebugUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnableScriptDebugUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableScriptDebugForbidden creates a EnableScriptDebugForbidden with default headers values
func NewEnableScriptDebugForbidden() *EnableScriptDebugForbidden {
	return &EnableScriptDebugForbidden{}
}

/*
EnableScriptDebugForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnableScriptDebugForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable script debug forbidden response has a 2xx status code
func (o *EnableScriptDebugForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable script debug forbidden response has a 3xx status code
func (o *EnableScriptDebugForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable script debug forbidden response has a 4xx status code
func (o *EnableScriptDebugForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable script debug forbidden response has a 5xx status code
func (o *EnableScriptDebugForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enable script debug forbidden response a status code equal to that given
func (o *EnableScriptDebugForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enable script debug forbidden response
func (o *EnableScriptDebugForbidden) Code() int {
	return 403
}

func (o *EnableScriptDebugForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugForbidden %s", 403, payload)
}

func (o *EnableScriptDebugForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugForbidden %s", 403, payload)
}

func (o *EnableScriptDebugForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnableScriptDebugForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableScriptDebugNotFound creates a EnableScriptDebugNotFound with default headers values
func NewEnableScriptDebugNotFound() *EnableScriptDebugNotFound {
	return &EnableScriptDebugNotFound{}
}

/*
EnableScriptDebugNotFound describes a response with status code 404, with default header values.

Not found
*/
type EnableScriptDebugNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable script debug not found response has a 2xx status code
func (o *EnableScriptDebugNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable script debug not found response has a 3xx status code
func (o *EnableScriptDebugNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable script debug not found response has a 4xx status code
func (o *EnableScriptDebugNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable script debug not found response has a 5xx status code
func (o *EnableScriptDebugNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enable script debug not found response a status code equal to that given
func (o *EnableScriptDebugNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enable script debug not found response
func (o *EnableScriptDebugNotFound) Code() int {
	return 404
}

func (o *EnableScriptDebugNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugNotFound %s", 404, payload)
}

func (o *EnableScriptDebugNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugNotFound %s", 404, payload)
}

func (o *EnableScriptDebugNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnableScriptDebugNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnableScriptDebugTooManyRequests creates a EnableScriptDebugTooManyRequests with default headers values
func NewEnableScriptDebugTooManyRequests() *EnableScriptDebugTooManyRequests {
	return &EnableScriptDebugTooManyRequests{}
}

/*
EnableScriptDebugTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type EnableScriptDebugTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this enable script debug too many requests response has a 2xx status code
func (o *EnableScriptDebugTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enable script debug too many requests response has a 3xx status code
func (o *EnableScriptDebugTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enable script debug too many requests response has a 4xx status code
func (o *EnableScriptDebugTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this enable script debug too many requests response has a 5xx status code
func (o *EnableScriptDebugTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this enable script debug too many requests response a status code equal to that given
func (o *EnableScriptDebugTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the enable script debug too many requests response
func (o *EnableScriptDebugTooManyRequests) Code() int {
	return 429
}

func (o *EnableScriptDebugTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugTooManyRequests %s", 429, payload)
}

func (o *EnableScriptDebugTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}/debug][%d] enableScriptDebugTooManyRequests %s", 429, payload)
}

func (o *EnableScriptDebugTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *EnableScriptDebugTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
