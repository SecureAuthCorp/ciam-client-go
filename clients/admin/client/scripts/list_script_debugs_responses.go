// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ListScriptDebugsReader is a Reader for the ListScriptDebugs structure.
type ListScriptDebugsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListScriptDebugsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListScriptDebugsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListScriptDebugsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListScriptDebugsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListScriptDebugsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/script-debugs] listScriptDebugs", response, response.Code())
	}
}

// NewListScriptDebugsOK creates a ListScriptDebugsOK with default headers values
func NewListScriptDebugsOK() *ListScriptDebugsOK {
	return &ListScriptDebugsOK{}
}

/*
ListScriptDebugsOK describes a response with status code 200, with default header values.

Script debug triggers
*/
type ListScriptDebugsOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ScriptDebugs
}

// IsSuccess returns true when this list script debugs o k response has a 2xx status code
func (o *ListScriptDebugsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list script debugs o k response has a 3xx status code
func (o *ListScriptDebugsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list script debugs o k response has a 4xx status code
func (o *ListScriptDebugsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list script debugs o k response has a 5xx status code
func (o *ListScriptDebugsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list script debugs o k response a status code equal to that given
func (o *ListScriptDebugsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list script debugs o k response
func (o *ListScriptDebugsOK) Code() int {
	return 200
}

func (o *ListScriptDebugsOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/script-debugs][%d] listScriptDebugsOK  %+v", 200, o.Payload)
}

func (o *ListScriptDebugsOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/script-debugs][%d] listScriptDebugsOK  %+v", 200, o.Payload)
}

func (o *ListScriptDebugsOK) GetPayload() *models.ScriptDebugs {
	return o.Payload
}

func (o *ListScriptDebugsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ScriptDebugs)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListScriptDebugsUnauthorized creates a ListScriptDebugsUnauthorized with default headers values
func NewListScriptDebugsUnauthorized() *ListScriptDebugsUnauthorized {
	return &ListScriptDebugsUnauthorized{}
}

/*
ListScriptDebugsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListScriptDebugsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list script debugs unauthorized response has a 2xx status code
func (o *ListScriptDebugsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list script debugs unauthorized response has a 3xx status code
func (o *ListScriptDebugsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list script debugs unauthorized response has a 4xx status code
func (o *ListScriptDebugsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list script debugs unauthorized response has a 5xx status code
func (o *ListScriptDebugsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list script debugs unauthorized response a status code equal to that given
func (o *ListScriptDebugsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list script debugs unauthorized response
func (o *ListScriptDebugsUnauthorized) Code() int {
	return 401
}

func (o *ListScriptDebugsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/script-debugs][%d] listScriptDebugsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListScriptDebugsUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/script-debugs][%d] listScriptDebugsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListScriptDebugsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListScriptDebugsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListScriptDebugsForbidden creates a ListScriptDebugsForbidden with default headers values
func NewListScriptDebugsForbidden() *ListScriptDebugsForbidden {
	return &ListScriptDebugsForbidden{}
}

/*
ListScriptDebugsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListScriptDebugsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list script debugs forbidden response has a 2xx status code
func (o *ListScriptDebugsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list script debugs forbidden response has a 3xx status code
func (o *ListScriptDebugsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list script debugs forbidden response has a 4xx status code
func (o *ListScriptDebugsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list script debugs forbidden response has a 5xx status code
func (o *ListScriptDebugsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list script debugs forbidden response a status code equal to that given
func (o *ListScriptDebugsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list script debugs forbidden response
func (o *ListScriptDebugsForbidden) Code() int {
	return 403
}

func (o *ListScriptDebugsForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/script-debugs][%d] listScriptDebugsForbidden  %+v", 403, o.Payload)
}

func (o *ListScriptDebugsForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/script-debugs][%d] listScriptDebugsForbidden  %+v", 403, o.Payload)
}

func (o *ListScriptDebugsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListScriptDebugsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListScriptDebugsTooManyRequests creates a ListScriptDebugsTooManyRequests with default headers values
func NewListScriptDebugsTooManyRequests() *ListScriptDebugsTooManyRequests {
	return &ListScriptDebugsTooManyRequests{}
}

/*
ListScriptDebugsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListScriptDebugsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list script debugs too many requests response has a 2xx status code
func (o *ListScriptDebugsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list script debugs too many requests response has a 3xx status code
func (o *ListScriptDebugsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list script debugs too many requests response has a 4xx status code
func (o *ListScriptDebugsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list script debugs too many requests response has a 5xx status code
func (o *ListScriptDebugsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list script debugs too many requests response a status code equal to that given
func (o *ListScriptDebugsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list script debugs too many requests response
func (o *ListScriptDebugsTooManyRequests) Code() int {
	return 429
}

func (o *ListScriptDebugsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/script-debugs][%d] listScriptDebugsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListScriptDebugsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/script-debugs][%d] listScriptDebugsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListScriptDebugsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListScriptDebugsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
