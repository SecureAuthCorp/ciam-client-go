// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateScriptReader is a Reader for the UpdateScript structure.
type UpdateScriptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScriptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateScriptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateScriptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateScriptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateScriptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateScriptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateScriptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /servers/{wid}/scripts/{script}] updateScript", response, response.Code())
	}
}

// NewUpdateScriptOK creates a UpdateScriptOK with default headers values
func NewUpdateScriptOK() *UpdateScriptOK {
	return &UpdateScriptOK{}
}

/*
UpdateScriptOK describes a response with status code 200, with default header values.

Script
*/
type UpdateScriptOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Script
}

// IsSuccess returns true when this update script o k response has a 2xx status code
func (o *UpdateScriptOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update script o k response has a 3xx status code
func (o *UpdateScriptOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update script o k response has a 4xx status code
func (o *UpdateScriptOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update script o k response has a 5xx status code
func (o *UpdateScriptOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update script o k response a status code equal to that given
func (o *UpdateScriptOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update script o k response
func (o *UpdateScriptOK) Code() int {
	return 200
}

func (o *UpdateScriptOK) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptOK  %+v", 200, o.Payload)
}

func (o *UpdateScriptOK) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptOK  %+v", 200, o.Payload)
}

func (o *UpdateScriptOK) GetPayload() *models.Script {
	return o.Payload
}

func (o *UpdateScriptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Script)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptBadRequest creates a UpdateScriptBadRequest with default headers values
func NewUpdateScriptBadRequest() *UpdateScriptBadRequest {
	return &UpdateScriptBadRequest{}
}

/*
UpdateScriptBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateScriptBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update script bad request response has a 2xx status code
func (o *UpdateScriptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update script bad request response has a 3xx status code
func (o *UpdateScriptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update script bad request response has a 4xx status code
func (o *UpdateScriptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update script bad request response has a 5xx status code
func (o *UpdateScriptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update script bad request response a status code equal to that given
func (o *UpdateScriptBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update script bad request response
func (o *UpdateScriptBadRequest) Code() int {
	return 400
}

func (o *UpdateScriptBadRequest) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScriptBadRequest) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScriptBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptUnauthorized creates a UpdateScriptUnauthorized with default headers values
func NewUpdateScriptUnauthorized() *UpdateScriptUnauthorized {
	return &UpdateScriptUnauthorized{}
}

/*
UpdateScriptUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateScriptUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update script unauthorized response has a 2xx status code
func (o *UpdateScriptUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update script unauthorized response has a 3xx status code
func (o *UpdateScriptUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update script unauthorized response has a 4xx status code
func (o *UpdateScriptUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update script unauthorized response has a 5xx status code
func (o *UpdateScriptUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update script unauthorized response a status code equal to that given
func (o *UpdateScriptUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update script unauthorized response
func (o *UpdateScriptUnauthorized) Code() int {
	return 401
}

func (o *UpdateScriptUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateScriptUnauthorized) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateScriptUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptForbidden creates a UpdateScriptForbidden with default headers values
func NewUpdateScriptForbidden() *UpdateScriptForbidden {
	return &UpdateScriptForbidden{}
}

/*
UpdateScriptForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateScriptForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update script forbidden response has a 2xx status code
func (o *UpdateScriptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update script forbidden response has a 3xx status code
func (o *UpdateScriptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update script forbidden response has a 4xx status code
func (o *UpdateScriptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update script forbidden response has a 5xx status code
func (o *UpdateScriptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update script forbidden response a status code equal to that given
func (o *UpdateScriptForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update script forbidden response
func (o *UpdateScriptForbidden) Code() int {
	return 403
}

func (o *UpdateScriptForbidden) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScriptForbidden) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScriptForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptNotFound creates a UpdateScriptNotFound with default headers values
func NewUpdateScriptNotFound() *UpdateScriptNotFound {
	return &UpdateScriptNotFound{}
}

/*
UpdateScriptNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateScriptNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update script not found response has a 2xx status code
func (o *UpdateScriptNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update script not found response has a 3xx status code
func (o *UpdateScriptNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update script not found response has a 4xx status code
func (o *UpdateScriptNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update script not found response has a 5xx status code
func (o *UpdateScriptNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update script not found response a status code equal to that given
func (o *UpdateScriptNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update script not found response
func (o *UpdateScriptNotFound) Code() int {
	return 404
}

func (o *UpdateScriptNotFound) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScriptNotFound) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScriptNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptTooManyRequests creates a UpdateScriptTooManyRequests with default headers values
func NewUpdateScriptTooManyRequests() *UpdateScriptTooManyRequests {
	return &UpdateScriptTooManyRequests{}
}

/*
UpdateScriptTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateScriptTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update script too many requests response has a 2xx status code
func (o *UpdateScriptTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update script too many requests response has a 3xx status code
func (o *UpdateScriptTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update script too many requests response has a 4xx status code
func (o *UpdateScriptTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update script too many requests response has a 5xx status code
func (o *UpdateScriptTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update script too many requests response a status code equal to that given
func (o *UpdateScriptTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update script too many requests response
func (o *UpdateScriptTooManyRequests) Code() int {
	return 429
}

func (o *UpdateScriptTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateScriptTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/scripts/{script}][%d] updateScriptTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateScriptTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
