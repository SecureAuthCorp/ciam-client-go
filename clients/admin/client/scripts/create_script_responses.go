// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CreateScriptReader is a Reader for the CreateScript structure.
type CreateScriptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateScriptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateScriptCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateScriptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateScriptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateScriptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateScriptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{wid}/scripts] createScript", response, response.Code())
	}
}

// NewCreateScriptCreated creates a CreateScriptCreated with default headers values
func NewCreateScriptCreated() *CreateScriptCreated {
	return &CreateScriptCreated{}
}

/*
CreateScriptCreated describes a response with status code 201, with default header values.

Script
*/
type CreateScriptCreated struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Script
}

// IsSuccess returns true when this create script created response has a 2xx status code
func (o *CreateScriptCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create script created response has a 3xx status code
func (o *CreateScriptCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create script created response has a 4xx status code
func (o *CreateScriptCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create script created response has a 5xx status code
func (o *CreateScriptCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create script created response a status code equal to that given
func (o *CreateScriptCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create script created response
func (o *CreateScriptCreated) Code() int {
	return 201
}

func (o *CreateScriptCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptCreated %s", 201, payload)
}

func (o *CreateScriptCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptCreated %s", 201, payload)
}

func (o *CreateScriptCreated) GetPayload() *models.Script {
	return o.Payload
}

func (o *CreateScriptCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Script)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScriptBadRequest creates a CreateScriptBadRequest with default headers values
func NewCreateScriptBadRequest() *CreateScriptBadRequest {
	return &CreateScriptBadRequest{}
}

/*
CreateScriptBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateScriptBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this create script bad request response has a 2xx status code
func (o *CreateScriptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create script bad request response has a 3xx status code
func (o *CreateScriptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create script bad request response has a 4xx status code
func (o *CreateScriptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create script bad request response has a 5xx status code
func (o *CreateScriptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create script bad request response a status code equal to that given
func (o *CreateScriptBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create script bad request response
func (o *CreateScriptBadRequest) Code() int {
	return 400
}

func (o *CreateScriptBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptBadRequest %s", 400, payload)
}

func (o *CreateScriptBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptBadRequest %s", 400, payload)
}

func (o *CreateScriptBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScriptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScriptUnauthorized creates a CreateScriptUnauthorized with default headers values
func NewCreateScriptUnauthorized() *CreateScriptUnauthorized {
	return &CreateScriptUnauthorized{}
}

/*
CreateScriptUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateScriptUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this create script unauthorized response has a 2xx status code
func (o *CreateScriptUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create script unauthorized response has a 3xx status code
func (o *CreateScriptUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create script unauthorized response has a 4xx status code
func (o *CreateScriptUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create script unauthorized response has a 5xx status code
func (o *CreateScriptUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create script unauthorized response a status code equal to that given
func (o *CreateScriptUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create script unauthorized response
func (o *CreateScriptUnauthorized) Code() int {
	return 401
}

func (o *CreateScriptUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptUnauthorized %s", 401, payload)
}

func (o *CreateScriptUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptUnauthorized %s", 401, payload)
}

func (o *CreateScriptUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScriptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScriptForbidden creates a CreateScriptForbidden with default headers values
func NewCreateScriptForbidden() *CreateScriptForbidden {
	return &CreateScriptForbidden{}
}

/*
CreateScriptForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateScriptForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this create script forbidden response has a 2xx status code
func (o *CreateScriptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create script forbidden response has a 3xx status code
func (o *CreateScriptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create script forbidden response has a 4xx status code
func (o *CreateScriptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create script forbidden response has a 5xx status code
func (o *CreateScriptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create script forbidden response a status code equal to that given
func (o *CreateScriptForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create script forbidden response
func (o *CreateScriptForbidden) Code() int {
	return 403
}

func (o *CreateScriptForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptForbidden %s", 403, payload)
}

func (o *CreateScriptForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptForbidden %s", 403, payload)
}

func (o *CreateScriptForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScriptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScriptTooManyRequests creates a CreateScriptTooManyRequests with default headers values
func NewCreateScriptTooManyRequests() *CreateScriptTooManyRequests {
	return &CreateScriptTooManyRequests{}
}

/*
CreateScriptTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type CreateScriptTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this create script too many requests response has a 2xx status code
func (o *CreateScriptTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create script too many requests response has a 3xx status code
func (o *CreateScriptTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create script too many requests response has a 4xx status code
func (o *CreateScriptTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create script too many requests response has a 5xx status code
func (o *CreateScriptTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create script too many requests response a status code equal to that given
func (o *CreateScriptTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create script too many requests response
func (o *CreateScriptTooManyRequests) Code() int {
	return 429
}

func (o *CreateScriptTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptTooManyRequests %s", 429, payload)
}

func (o *CreateScriptTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts][%d] createScriptTooManyRequests %s", 429, payload)
}

func (o *CreateScriptTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScriptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
