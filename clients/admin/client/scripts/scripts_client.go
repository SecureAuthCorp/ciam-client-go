// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scripts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scripts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateScript(params *CreateScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScriptCreated, error)

	DeleteScript(params *DeleteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScriptNoContent, error)

	GetScript(params *GetScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScriptOK, error)

	ListScriptExecutionPoints(params *ListScriptExecutionPointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScriptExecutionPointsOK, error)

	ListScripts(params *ListScriptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScriptsOK, error)

	SetScriptExecutionPoints(params *SetScriptExecutionPointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetScriptExecutionPointsOK, error)

	TestScript(params *TestScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestScriptOK, error)

	UpdateScript(params *UpdateScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScriptOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateScript creates script

  Creates a script that is used for enriching authentication context.
You can, for example, define additional authentication context attributes for mock
users defined for a static identity provider. Your script should be written in JavaScript.
*/
func (a *Client) CreateScript(params *CreateScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScriptCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createScript",
		Method:             "POST",
		PathPattern:        "/servers/{aid}/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScriptCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteScript deletes given script

  Deleting a script is permanent and it cannot be undone.
*/
func (a *Client) DeleteScript(params *DeleteScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScriptNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteScript",
		Method:             "DELETE",
		PathPattern:        "/servers/{aid}/scripts/{script}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScriptNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScript gets script

  Returns a script and it's content.
*/
func (a *Client) GetScript(params *GetScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getScript",
		Method:             "GET",
		PathPattern:        "/servers/{aid}/scripts/{script}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListScriptExecutionPoints lists script execution points

  Returns a list of script execution points for a given workspace.
*/
func (a *Client) ListScriptExecutionPoints(params *ListScriptExecutionPointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScriptExecutionPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScriptExecutionPointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listScriptExecutionPoints",
		Method:             "GET",
		PathPattern:        "/servers/{aid}/script-execution-points",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScriptExecutionPointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScriptExecutionPointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listScriptExecutionPoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListScripts lists scripts

  Lists tenant's scripts.
*/
func (a *Client) ListScripts(params *ListScriptsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScriptsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScriptsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listScripts",
		Method:             "GET",
		PathPattern:        "/servers/{aid}/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScriptsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScriptsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listScripts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetScriptExecutionPoints sets script execution points

  Available execution points: `post_authn_ctx`
*/
func (a *Client) SetScriptExecutionPoints(params *SetScriptExecutionPointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetScriptExecutionPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetScriptExecutionPointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setScriptExecutionPoints",
		Method:             "PUT",
		PathPattern:        "/servers/{aid}/script-execution-points",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetScriptExecutionPointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetScriptExecutionPointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setScriptExecutionPoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TestScript tests script

  You can test a script and check if it works correctly using this endpoint. Provide your mock input and
pass it as the value of the `input` parameter. Define your script. Then, fire a request to the
test script endpoint. By doing so, you can test if a script would fail or pass for a given request.
*/
func (a *Client) TestScript(params *TestScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "testScript",
		Method:             "POST",
		PathPattern:        "/servers/{aid}/scripts/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for testScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateScript updates script

  Update existing script.
*/
func (a *Client) UpdateScript(params *UpdateScriptParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScriptOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScriptParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateScript",
		Method:             "PUT",
		PathPattern:        "/servers/{aid}/scripts/{script}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScriptReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScriptOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateScript: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
