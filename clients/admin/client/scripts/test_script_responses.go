// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// TestScriptReader is a Reader for the TestScript structure.
type TestScriptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TestScriptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTestScriptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewTestScriptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewTestScriptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewTestScriptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewTestScriptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewTestScriptConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewTestScriptUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewTestScriptTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{wid}/scripts/test] testScript", response, response.Code())
	}
}

// NewTestScriptOK creates a TestScriptOK with default headers values
func NewTestScriptOK() *TestScriptOK {
	return &TestScriptOK{}
}

/*
TestScriptOK describes a response with status code 200, with default header values.

Script execution result
*/
type TestScriptOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ScriptExecutionResult
}

// IsSuccess returns true when this test script o k response has a 2xx status code
func (o *TestScriptOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this test script o k response has a 3xx status code
func (o *TestScriptOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test script o k response has a 4xx status code
func (o *TestScriptOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this test script o k response has a 5xx status code
func (o *TestScriptOK) IsServerError() bool {
	return false
}

// IsCode returns true when this test script o k response a status code equal to that given
func (o *TestScriptOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the test script o k response
func (o *TestScriptOK) Code() int {
	return 200
}

func (o *TestScriptOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptOK %s", 200, payload)
}

func (o *TestScriptOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptOK %s", 200, payload)
}

func (o *TestScriptOK) GetPayload() *models.ScriptExecutionResult {
	return o.Payload
}

func (o *TestScriptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ScriptExecutionResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestScriptBadRequest creates a TestScriptBadRequest with default headers values
func NewTestScriptBadRequest() *TestScriptBadRequest {
	return &TestScriptBadRequest{}
}

/*
TestScriptBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type TestScriptBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this test script bad request response has a 2xx status code
func (o *TestScriptBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test script bad request response has a 3xx status code
func (o *TestScriptBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test script bad request response has a 4xx status code
func (o *TestScriptBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this test script bad request response has a 5xx status code
func (o *TestScriptBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this test script bad request response a status code equal to that given
func (o *TestScriptBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the test script bad request response
func (o *TestScriptBadRequest) Code() int {
	return 400
}

func (o *TestScriptBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptBadRequest %s", 400, payload)
}

func (o *TestScriptBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptBadRequest %s", 400, payload)
}

func (o *TestScriptBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestScriptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestScriptUnauthorized creates a TestScriptUnauthorized with default headers values
func NewTestScriptUnauthorized() *TestScriptUnauthorized {
	return &TestScriptUnauthorized{}
}

/*
TestScriptUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type TestScriptUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this test script unauthorized response has a 2xx status code
func (o *TestScriptUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test script unauthorized response has a 3xx status code
func (o *TestScriptUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test script unauthorized response has a 4xx status code
func (o *TestScriptUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this test script unauthorized response has a 5xx status code
func (o *TestScriptUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this test script unauthorized response a status code equal to that given
func (o *TestScriptUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the test script unauthorized response
func (o *TestScriptUnauthorized) Code() int {
	return 401
}

func (o *TestScriptUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptUnauthorized %s", 401, payload)
}

func (o *TestScriptUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptUnauthorized %s", 401, payload)
}

func (o *TestScriptUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestScriptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestScriptForbidden creates a TestScriptForbidden with default headers values
func NewTestScriptForbidden() *TestScriptForbidden {
	return &TestScriptForbidden{}
}

/*
TestScriptForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type TestScriptForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this test script forbidden response has a 2xx status code
func (o *TestScriptForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test script forbidden response has a 3xx status code
func (o *TestScriptForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test script forbidden response has a 4xx status code
func (o *TestScriptForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this test script forbidden response has a 5xx status code
func (o *TestScriptForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this test script forbidden response a status code equal to that given
func (o *TestScriptForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the test script forbidden response
func (o *TestScriptForbidden) Code() int {
	return 403
}

func (o *TestScriptForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptForbidden %s", 403, payload)
}

func (o *TestScriptForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptForbidden %s", 403, payload)
}

func (o *TestScriptForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestScriptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestScriptNotFound creates a TestScriptNotFound with default headers values
func NewTestScriptNotFound() *TestScriptNotFound {
	return &TestScriptNotFound{}
}

/*
TestScriptNotFound describes a response with status code 404, with default header values.

Not found
*/
type TestScriptNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this test script not found response has a 2xx status code
func (o *TestScriptNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test script not found response has a 3xx status code
func (o *TestScriptNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test script not found response has a 4xx status code
func (o *TestScriptNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this test script not found response has a 5xx status code
func (o *TestScriptNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this test script not found response a status code equal to that given
func (o *TestScriptNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the test script not found response
func (o *TestScriptNotFound) Code() int {
	return 404
}

func (o *TestScriptNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptNotFound %s", 404, payload)
}

func (o *TestScriptNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptNotFound %s", 404, payload)
}

func (o *TestScriptNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestScriptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestScriptConflict creates a TestScriptConflict with default headers values
func NewTestScriptConflict() *TestScriptConflict {
	return &TestScriptConflict{}
}

/*
TestScriptConflict describes a response with status code 409, with default header values.

Conflict
*/
type TestScriptConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this test script conflict response has a 2xx status code
func (o *TestScriptConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test script conflict response has a 3xx status code
func (o *TestScriptConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test script conflict response has a 4xx status code
func (o *TestScriptConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this test script conflict response has a 5xx status code
func (o *TestScriptConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this test script conflict response a status code equal to that given
func (o *TestScriptConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the test script conflict response
func (o *TestScriptConflict) Code() int {
	return 409
}

func (o *TestScriptConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptConflict %s", 409, payload)
}

func (o *TestScriptConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptConflict %s", 409, payload)
}

func (o *TestScriptConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestScriptConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestScriptUnprocessableEntity creates a TestScriptUnprocessableEntity with default headers values
func NewTestScriptUnprocessableEntity() *TestScriptUnprocessableEntity {
	return &TestScriptUnprocessableEntity{}
}

/*
TestScriptUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type TestScriptUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this test script unprocessable entity response has a 2xx status code
func (o *TestScriptUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test script unprocessable entity response has a 3xx status code
func (o *TestScriptUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test script unprocessable entity response has a 4xx status code
func (o *TestScriptUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this test script unprocessable entity response has a 5xx status code
func (o *TestScriptUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this test script unprocessable entity response a status code equal to that given
func (o *TestScriptUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the test script unprocessable entity response
func (o *TestScriptUnprocessableEntity) Code() int {
	return 422
}

func (o *TestScriptUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptUnprocessableEntity %s", 422, payload)
}

func (o *TestScriptUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptUnprocessableEntity %s", 422, payload)
}

func (o *TestScriptUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestScriptUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTestScriptTooManyRequests creates a TestScriptTooManyRequests with default headers values
func NewTestScriptTooManyRequests() *TestScriptTooManyRequests {
	return &TestScriptTooManyRequests{}
}

/*
TestScriptTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type TestScriptTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this test script too many requests response has a 2xx status code
func (o *TestScriptTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this test script too many requests response has a 3xx status code
func (o *TestScriptTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this test script too many requests response has a 4xx status code
func (o *TestScriptTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this test script too many requests response has a 5xx status code
func (o *TestScriptTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this test script too many requests response a status code equal to that given
func (o *TestScriptTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the test script too many requests response
func (o *TestScriptTooManyRequests) Code() int {
	return 429
}

func (o *TestScriptTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptTooManyRequests %s", 429, payload)
}

func (o *TestScriptTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/scripts/test][%d] testScriptTooManyRequests %s", 429, payload)
}

func (o *TestScriptTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *TestScriptTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
