// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetScriptDebugReader is a Reader for the GetScriptDebug structure.
type GetScriptDebugReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScriptDebugReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScriptDebugOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetScriptDebugUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScriptDebugForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScriptDebugNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScriptDebugTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/scripts/{script}/debug] getScriptDebug", response, response.Code())
	}
}

// NewGetScriptDebugOK creates a GetScriptDebugOK with default headers values
func NewGetScriptDebugOK() *GetScriptDebugOK {
	return &GetScriptDebugOK{}
}

/*
GetScriptDebugOK describes a response with status code 200, with default header values.

ScriptDebug
*/
type GetScriptDebugOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ScriptDebug
}

// IsSuccess returns true when this get script debug o k response has a 2xx status code
func (o *GetScriptDebugOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get script debug o k response has a 3xx status code
func (o *GetScriptDebugOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script debug o k response has a 4xx status code
func (o *GetScriptDebugOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get script debug o k response has a 5xx status code
func (o *GetScriptDebugOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get script debug o k response a status code equal to that given
func (o *GetScriptDebugOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get script debug o k response
func (o *GetScriptDebugOK) Code() int {
	return 200
}

func (o *GetScriptDebugOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugOK  %+v", 200, o.Payload)
}

func (o *GetScriptDebugOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugOK  %+v", 200, o.Payload)
}

func (o *GetScriptDebugOK) GetPayload() *models.ScriptDebug {
	return o.Payload
}

func (o *GetScriptDebugOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ScriptDebug)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptDebugUnauthorized creates a GetScriptDebugUnauthorized with default headers values
func NewGetScriptDebugUnauthorized() *GetScriptDebugUnauthorized {
	return &GetScriptDebugUnauthorized{}
}

/*
GetScriptDebugUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetScriptDebugUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get script debug unauthorized response has a 2xx status code
func (o *GetScriptDebugUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script debug unauthorized response has a 3xx status code
func (o *GetScriptDebugUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script debug unauthorized response has a 4xx status code
func (o *GetScriptDebugUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script debug unauthorized response has a 5xx status code
func (o *GetScriptDebugUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get script debug unauthorized response a status code equal to that given
func (o *GetScriptDebugUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get script debug unauthorized response
func (o *GetScriptDebugUnauthorized) Code() int {
	return 401
}

func (o *GetScriptDebugUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptDebugUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScriptDebugUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetScriptDebugUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptDebugForbidden creates a GetScriptDebugForbidden with default headers values
func NewGetScriptDebugForbidden() *GetScriptDebugForbidden {
	return &GetScriptDebugForbidden{}
}

/*
GetScriptDebugForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetScriptDebugForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get script debug forbidden response has a 2xx status code
func (o *GetScriptDebugForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script debug forbidden response has a 3xx status code
func (o *GetScriptDebugForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script debug forbidden response has a 4xx status code
func (o *GetScriptDebugForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script debug forbidden response has a 5xx status code
func (o *GetScriptDebugForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get script debug forbidden response a status code equal to that given
func (o *GetScriptDebugForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get script debug forbidden response
func (o *GetScriptDebugForbidden) Code() int {
	return 403
}

func (o *GetScriptDebugForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptDebugForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugForbidden  %+v", 403, o.Payload)
}

func (o *GetScriptDebugForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetScriptDebugForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptDebugNotFound creates a GetScriptDebugNotFound with default headers values
func NewGetScriptDebugNotFound() *GetScriptDebugNotFound {
	return &GetScriptDebugNotFound{}
}

/*
GetScriptDebugNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetScriptDebugNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get script debug not found response has a 2xx status code
func (o *GetScriptDebugNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script debug not found response has a 3xx status code
func (o *GetScriptDebugNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script debug not found response has a 4xx status code
func (o *GetScriptDebugNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script debug not found response has a 5xx status code
func (o *GetScriptDebugNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get script debug not found response a status code equal to that given
func (o *GetScriptDebugNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get script debug not found response
func (o *GetScriptDebugNotFound) Code() int {
	return 404
}

func (o *GetScriptDebugNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptDebugNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugNotFound  %+v", 404, o.Payload)
}

func (o *GetScriptDebugNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetScriptDebugNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScriptDebugTooManyRequests creates a GetScriptDebugTooManyRequests with default headers values
func NewGetScriptDebugTooManyRequests() *GetScriptDebugTooManyRequests {
	return &GetScriptDebugTooManyRequests{}
}

/*
GetScriptDebugTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetScriptDebugTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get script debug too many requests response has a 2xx status code
func (o *GetScriptDebugTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get script debug too many requests response has a 3xx status code
func (o *GetScriptDebugTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get script debug too many requests response has a 4xx status code
func (o *GetScriptDebugTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get script debug too many requests response has a 5xx status code
func (o *GetScriptDebugTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get script debug too many requests response a status code equal to that given
func (o *GetScriptDebugTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get script debug too many requests response
func (o *GetScriptDebugTooManyRequests) Code() int {
	return 429
}

func (o *GetScriptDebugTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptDebugTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/scripts/{script}/debug][%d] getScriptDebugTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScriptDebugTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetScriptDebugTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
