// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListScriptsParams creates a new ListScriptsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListScriptsParams() *ListScriptsParams {
	return &ListScriptsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListScriptsParamsWithTimeout creates a new ListScriptsParams object
// with the ability to set a timeout on a request.
func NewListScriptsParamsWithTimeout(timeout time.Duration) *ListScriptsParams {
	return &ListScriptsParams{
		timeout: timeout,
	}
}

// NewListScriptsParamsWithContext creates a new ListScriptsParams object
// with the ability to set a context for a request.
func NewListScriptsParamsWithContext(ctx context.Context) *ListScriptsParams {
	return &ListScriptsParams{
		Context: ctx,
	}
}

// NewListScriptsParamsWithHTTPClient creates a new ListScriptsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListScriptsParamsWithHTTPClient(client *http.Client) *ListScriptsParams {
	return &ListScriptsParams{
		HTTPClient: client,
	}
}

/* ListScriptsParams contains all the parameters to send to the API endpoint
   for the list scripts operation.

   Typically these are written to a http.Request.
*/
type ListScriptsParams struct {

	/* AfterScriptID.

	     optional list scripts after given id
	AfterScriptID
	*/
	AfterScriptID *string

	/* Aid.

	   ID of your authorization server (workspace)

	   Default: "default"
	*/
	Aid string

	/* BeforeScriptID.

	     optional list scripts before given id
	BeforeScriptID
	*/
	BeforeScriptID *string

	/* Limit.

	     optional limit results
	Limit

	     Format: int64
	     Default: 20
	*/
	Limit *int64

	/* Order.

	     optional order scripts by given direction
	Order
	*/
	Order *string

	/* SearchPhrase.

	     Optional search phrase: script id OR script name substring (case insensitive)
	SearchPhrase
	*/
	SearchPhrase *string

	/* Sort.

	     optional sort scripts by given field
	Sort
	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list scripts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListScriptsParams) WithDefaults() *ListScriptsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list scripts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListScriptsParams) SetDefaults() {
	var (
		aidDefault = string("default")

		limitDefault = int64(20)
	)

	val := ListScriptsParams{
		Aid:   aidDefault,
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list scripts params
func (o *ListScriptsParams) WithTimeout(timeout time.Duration) *ListScriptsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list scripts params
func (o *ListScriptsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list scripts params
func (o *ListScriptsParams) WithContext(ctx context.Context) *ListScriptsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list scripts params
func (o *ListScriptsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list scripts params
func (o *ListScriptsParams) WithHTTPClient(client *http.Client) *ListScriptsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list scripts params
func (o *ListScriptsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterScriptID adds the afterScriptID to the list scripts params
func (o *ListScriptsParams) WithAfterScriptID(afterScriptID *string) *ListScriptsParams {
	o.SetAfterScriptID(afterScriptID)
	return o
}

// SetAfterScriptID adds the afterScriptId to the list scripts params
func (o *ListScriptsParams) SetAfterScriptID(afterScriptID *string) {
	o.AfterScriptID = afterScriptID
}

// WithAid adds the aid to the list scripts params
func (o *ListScriptsParams) WithAid(aid string) *ListScriptsParams {
	o.SetAid(aid)
	return o
}

// SetAid adds the aid to the list scripts params
func (o *ListScriptsParams) SetAid(aid string) {
	o.Aid = aid
}

// WithBeforeScriptID adds the beforeScriptID to the list scripts params
func (o *ListScriptsParams) WithBeforeScriptID(beforeScriptID *string) *ListScriptsParams {
	o.SetBeforeScriptID(beforeScriptID)
	return o
}

// SetBeforeScriptID adds the beforeScriptId to the list scripts params
func (o *ListScriptsParams) SetBeforeScriptID(beforeScriptID *string) {
	o.BeforeScriptID = beforeScriptID
}

// WithLimit adds the limit to the list scripts params
func (o *ListScriptsParams) WithLimit(limit *int64) *ListScriptsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list scripts params
func (o *ListScriptsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOrder adds the order to the list scripts params
func (o *ListScriptsParams) WithOrder(order *string) *ListScriptsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the list scripts params
func (o *ListScriptsParams) SetOrder(order *string) {
	o.Order = order
}

// WithSearchPhrase adds the searchPhrase to the list scripts params
func (o *ListScriptsParams) WithSearchPhrase(searchPhrase *string) *ListScriptsParams {
	o.SetSearchPhrase(searchPhrase)
	return o
}

// SetSearchPhrase adds the searchPhrase to the list scripts params
func (o *ListScriptsParams) SetSearchPhrase(searchPhrase *string) {
	o.SearchPhrase = searchPhrase
}

// WithSort adds the sort to the list scripts params
func (o *ListScriptsParams) WithSort(sort *string) *ListScriptsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list scripts params
func (o *ListScriptsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *ListScriptsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterScriptID != nil {

		// query param after_script_id
		var qrAfterScriptID string

		if o.AfterScriptID != nil {
			qrAfterScriptID = *o.AfterScriptID
		}
		qAfterScriptID := qrAfterScriptID
		if qAfterScriptID != "" {

			if err := r.SetQueryParam("after_script_id", qAfterScriptID); err != nil {
				return err
			}
		}
	}

	// path param aid
	if err := r.SetPathParam("aid", o.Aid); err != nil {
		return err
	}

	if o.BeforeScriptID != nil {

		// query param before_script_id
		var qrBeforeScriptID string

		if o.BeforeScriptID != nil {
			qrBeforeScriptID = *o.BeforeScriptID
		}
		qBeforeScriptID := qrBeforeScriptID
		if qBeforeScriptID != "" {

			if err := r.SetQueryParam("before_script_id", qBeforeScriptID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.SearchPhrase != nil {

		// query param search_phrase
		var qrSearchPhrase string

		if o.SearchPhrase != nil {
			qrSearchPhrase = *o.SearchPhrase
		}
		qSearchPhrase := qrSearchPhrase
		if qSearchPhrase != "" {

			if err := r.SetQueryParam("search_phrase", qSearchPhrase); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
