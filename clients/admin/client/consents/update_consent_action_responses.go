// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateConsentActionReader is a Reader for the UpdateConsentAction structure.
type UpdateConsentActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConsentActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewUpdateConsentActionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateConsentActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateConsentActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateConsentActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateConsentActionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateConsentActionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateConsentActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /actions/{action}] updateConsentAction", response, response.Code())
	}
}

// NewUpdateConsentActionCreated creates a UpdateConsentActionCreated with default headers values
func NewUpdateConsentActionCreated() *UpdateConsentActionCreated {
	return &UpdateConsentActionCreated{}
}

/*
UpdateConsentActionCreated describes a response with status code 201, with default header values.

Consent action with consents
*/
type UpdateConsentActionCreated struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ConsentActionWithConsents
}

// IsSuccess returns true when this update consent action created response has a 2xx status code
func (o *UpdateConsentActionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update consent action created response has a 3xx status code
func (o *UpdateConsentActionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update consent action created response has a 4xx status code
func (o *UpdateConsentActionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update consent action created response has a 5xx status code
func (o *UpdateConsentActionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update consent action created response a status code equal to that given
func (o *UpdateConsentActionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update consent action created response
func (o *UpdateConsentActionCreated) Code() int {
	return 201
}

func (o *UpdateConsentActionCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionCreated %s", 201, payload)
}

func (o *UpdateConsentActionCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionCreated %s", 201, payload)
}

func (o *UpdateConsentActionCreated) GetPayload() *models.ConsentActionWithConsents {
	return o.Payload
}

func (o *UpdateConsentActionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ConsentActionWithConsents)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsentActionUnauthorized creates a UpdateConsentActionUnauthorized with default headers values
func NewUpdateConsentActionUnauthorized() *UpdateConsentActionUnauthorized {
	return &UpdateConsentActionUnauthorized{}
}

/*
UpdateConsentActionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateConsentActionUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update consent action unauthorized response has a 2xx status code
func (o *UpdateConsentActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update consent action unauthorized response has a 3xx status code
func (o *UpdateConsentActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update consent action unauthorized response has a 4xx status code
func (o *UpdateConsentActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update consent action unauthorized response has a 5xx status code
func (o *UpdateConsentActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update consent action unauthorized response a status code equal to that given
func (o *UpdateConsentActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update consent action unauthorized response
func (o *UpdateConsentActionUnauthorized) Code() int {
	return 401
}

func (o *UpdateConsentActionUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionUnauthorized %s", 401, payload)
}

func (o *UpdateConsentActionUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionUnauthorized %s", 401, payload)
}

func (o *UpdateConsentActionUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateConsentActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsentActionForbidden creates a UpdateConsentActionForbidden with default headers values
func NewUpdateConsentActionForbidden() *UpdateConsentActionForbidden {
	return &UpdateConsentActionForbidden{}
}

/*
UpdateConsentActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateConsentActionForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update consent action forbidden response has a 2xx status code
func (o *UpdateConsentActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update consent action forbidden response has a 3xx status code
func (o *UpdateConsentActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update consent action forbidden response has a 4xx status code
func (o *UpdateConsentActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update consent action forbidden response has a 5xx status code
func (o *UpdateConsentActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update consent action forbidden response a status code equal to that given
func (o *UpdateConsentActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update consent action forbidden response
func (o *UpdateConsentActionForbidden) Code() int {
	return 403
}

func (o *UpdateConsentActionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionForbidden %s", 403, payload)
}

func (o *UpdateConsentActionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionForbidden %s", 403, payload)
}

func (o *UpdateConsentActionForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateConsentActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsentActionNotFound creates a UpdateConsentActionNotFound with default headers values
func NewUpdateConsentActionNotFound() *UpdateConsentActionNotFound {
	return &UpdateConsentActionNotFound{}
}

/*
UpdateConsentActionNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateConsentActionNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update consent action not found response has a 2xx status code
func (o *UpdateConsentActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update consent action not found response has a 3xx status code
func (o *UpdateConsentActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update consent action not found response has a 4xx status code
func (o *UpdateConsentActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update consent action not found response has a 5xx status code
func (o *UpdateConsentActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update consent action not found response a status code equal to that given
func (o *UpdateConsentActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update consent action not found response
func (o *UpdateConsentActionNotFound) Code() int {
	return 404
}

func (o *UpdateConsentActionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionNotFound %s", 404, payload)
}

func (o *UpdateConsentActionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionNotFound %s", 404, payload)
}

func (o *UpdateConsentActionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateConsentActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsentActionConflict creates a UpdateConsentActionConflict with default headers values
func NewUpdateConsentActionConflict() *UpdateConsentActionConflict {
	return &UpdateConsentActionConflict{}
}

/*
UpdateConsentActionConflict describes a response with status code 409, with default header values.

Conflict
*/
type UpdateConsentActionConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update consent action conflict response has a 2xx status code
func (o *UpdateConsentActionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update consent action conflict response has a 3xx status code
func (o *UpdateConsentActionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update consent action conflict response has a 4xx status code
func (o *UpdateConsentActionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update consent action conflict response has a 5xx status code
func (o *UpdateConsentActionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update consent action conflict response a status code equal to that given
func (o *UpdateConsentActionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update consent action conflict response
func (o *UpdateConsentActionConflict) Code() int {
	return 409
}

func (o *UpdateConsentActionConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionConflict %s", 409, payload)
}

func (o *UpdateConsentActionConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionConflict %s", 409, payload)
}

func (o *UpdateConsentActionConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateConsentActionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsentActionUnprocessableEntity creates a UpdateConsentActionUnprocessableEntity with default headers values
func NewUpdateConsentActionUnprocessableEntity() *UpdateConsentActionUnprocessableEntity {
	return &UpdateConsentActionUnprocessableEntity{}
}

/*
UpdateConsentActionUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateConsentActionUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update consent action unprocessable entity response has a 2xx status code
func (o *UpdateConsentActionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update consent action unprocessable entity response has a 3xx status code
func (o *UpdateConsentActionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update consent action unprocessable entity response has a 4xx status code
func (o *UpdateConsentActionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update consent action unprocessable entity response has a 5xx status code
func (o *UpdateConsentActionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update consent action unprocessable entity response a status code equal to that given
func (o *UpdateConsentActionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update consent action unprocessable entity response
func (o *UpdateConsentActionUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateConsentActionUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionUnprocessableEntity %s", 422, payload)
}

func (o *UpdateConsentActionUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionUnprocessableEntity %s", 422, payload)
}

func (o *UpdateConsentActionUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateConsentActionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConsentActionTooManyRequests creates a UpdateConsentActionTooManyRequests with default headers values
func NewUpdateConsentActionTooManyRequests() *UpdateConsentActionTooManyRequests {
	return &UpdateConsentActionTooManyRequests{}
}

/*
UpdateConsentActionTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateConsentActionTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update consent action too many requests response has a 2xx status code
func (o *UpdateConsentActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update consent action too many requests response has a 3xx status code
func (o *UpdateConsentActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update consent action too many requests response has a 4xx status code
func (o *UpdateConsentActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update consent action too many requests response has a 5xx status code
func (o *UpdateConsentActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update consent action too many requests response a status code equal to that given
func (o *UpdateConsentActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update consent action too many requests response
func (o *UpdateConsentActionTooManyRequests) Code() int {
	return 429
}

func (o *UpdateConsentActionTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionTooManyRequests %s", 429, payload)
}

func (o *UpdateConsentActionTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /actions/{action}][%d] updateConsentActionTooManyRequests %s", 429, payload)
}

func (o *UpdateConsentActionTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateConsentActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
