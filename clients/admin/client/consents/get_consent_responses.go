// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetConsentReader is a Reader for the GetConsent structure.
type GetConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConsentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetConsentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /consents/{consent}] getConsent", response, response.Code())
	}
}

// NewGetConsentOK creates a GetConsentOK with default headers values
func NewGetConsentOK() *GetConsentOK {
	return &GetConsentOK{}
}

/*
GetConsentOK describes a response with status code 200, with default header values.

Consent
*/
type GetConsentOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Consent
}

// IsSuccess returns true when this get consent o k response has a 2xx status code
func (o *GetConsentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get consent o k response has a 3xx status code
func (o *GetConsentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent o k response has a 4xx status code
func (o *GetConsentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get consent o k response has a 5xx status code
func (o *GetConsentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent o k response a status code equal to that given
func (o *GetConsentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get consent o k response
func (o *GetConsentOK) Code() int {
	return 200
}

func (o *GetConsentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentOK %s", 200, payload)
}

func (o *GetConsentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentOK %s", 200, payload)
}

func (o *GetConsentOK) GetPayload() *models.Consent {
	return o.Payload
}

func (o *GetConsentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Consent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsentUnauthorized creates a GetConsentUnauthorized with default headers values
func NewGetConsentUnauthorized() *GetConsentUnauthorized {
	return &GetConsentUnauthorized{}
}

/*
GetConsentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetConsentUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get consent unauthorized response has a 2xx status code
func (o *GetConsentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get consent unauthorized response has a 3xx status code
func (o *GetConsentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent unauthorized response has a 4xx status code
func (o *GetConsentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get consent unauthorized response has a 5xx status code
func (o *GetConsentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent unauthorized response a status code equal to that given
func (o *GetConsentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get consent unauthorized response
func (o *GetConsentUnauthorized) Code() int {
	return 401
}

func (o *GetConsentUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentUnauthorized %s", 401, payload)
}

func (o *GetConsentUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentUnauthorized %s", 401, payload)
}

func (o *GetConsentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsentForbidden creates a GetConsentForbidden with default headers values
func NewGetConsentForbidden() *GetConsentForbidden {
	return &GetConsentForbidden{}
}

/*
GetConsentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetConsentForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get consent forbidden response has a 2xx status code
func (o *GetConsentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get consent forbidden response has a 3xx status code
func (o *GetConsentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent forbidden response has a 4xx status code
func (o *GetConsentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get consent forbidden response has a 5xx status code
func (o *GetConsentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent forbidden response a status code equal to that given
func (o *GetConsentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get consent forbidden response
func (o *GetConsentForbidden) Code() int {
	return 403
}

func (o *GetConsentForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentForbidden %s", 403, payload)
}

func (o *GetConsentForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentForbidden %s", 403, payload)
}

func (o *GetConsentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsentNotFound creates a GetConsentNotFound with default headers values
func NewGetConsentNotFound() *GetConsentNotFound {
	return &GetConsentNotFound{}
}

/*
GetConsentNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetConsentNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get consent not found response has a 2xx status code
func (o *GetConsentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get consent not found response has a 3xx status code
func (o *GetConsentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent not found response has a 4xx status code
func (o *GetConsentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get consent not found response has a 5xx status code
func (o *GetConsentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent not found response a status code equal to that given
func (o *GetConsentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get consent not found response
func (o *GetConsentNotFound) Code() int {
	return 404
}

func (o *GetConsentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentNotFound %s", 404, payload)
}

func (o *GetConsentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentNotFound %s", 404, payload)
}

func (o *GetConsentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsentTooManyRequests creates a GetConsentTooManyRequests with default headers values
func NewGetConsentTooManyRequests() *GetConsentTooManyRequests {
	return &GetConsentTooManyRequests{}
}

/*
GetConsentTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetConsentTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get consent too many requests response has a 2xx status code
func (o *GetConsentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get consent too many requests response has a 3xx status code
func (o *GetConsentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent too many requests response has a 4xx status code
func (o *GetConsentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get consent too many requests response has a 5xx status code
func (o *GetConsentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent too many requests response a status code equal to that given
func (o *GetConsentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get consent too many requests response
func (o *GetConsentTooManyRequests) Code() int {
	return 429
}

func (o *GetConsentTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentTooManyRequests %s", 429, payload)
}

func (o *GetConsentTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /consents/{consent}][%d] getConsentTooManyRequests %s", 429, payload)
}

func (o *GetConsentTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConsentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
