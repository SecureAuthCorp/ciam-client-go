// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CreateConsentReader is a Reader for the CreateConsent structure.
type CreateConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateConsentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateConsentConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateConsentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateConsentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /consents] createConsent", response, response.Code())
	}
}

// NewCreateConsentCreated creates a CreateConsentCreated with default headers values
func NewCreateConsentCreated() *CreateConsentCreated {
	return &CreateConsentCreated{}
}

/*
CreateConsentCreated describes a response with status code 201, with default header values.

Consent
*/
type CreateConsentCreated struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Consent
}

// IsSuccess returns true when this create consent created response has a 2xx status code
func (o *CreateConsentCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create consent created response has a 3xx status code
func (o *CreateConsentCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent created response has a 4xx status code
func (o *CreateConsentCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create consent created response has a 5xx status code
func (o *CreateConsentCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent created response a status code equal to that given
func (o *CreateConsentCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create consent created response
func (o *CreateConsentCreated) Code() int {
	return 201
}

func (o *CreateConsentCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentCreated %s", 201, payload)
}

func (o *CreateConsentCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentCreated %s", 201, payload)
}

func (o *CreateConsentCreated) GetPayload() *models.Consent {
	return o.Payload
}

func (o *CreateConsentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Consent)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentUnauthorized creates a CreateConsentUnauthorized with default headers values
func NewCreateConsentUnauthorized() *CreateConsentUnauthorized {
	return &CreateConsentUnauthorized{}
}

/*
CreateConsentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateConsentUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent unauthorized response has a 2xx status code
func (o *CreateConsentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent unauthorized response has a 3xx status code
func (o *CreateConsentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent unauthorized response has a 4xx status code
func (o *CreateConsentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent unauthorized response has a 5xx status code
func (o *CreateConsentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent unauthorized response a status code equal to that given
func (o *CreateConsentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create consent unauthorized response
func (o *CreateConsentUnauthorized) Code() int {
	return 401
}

func (o *CreateConsentUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentUnauthorized %s", 401, payload)
}

func (o *CreateConsentUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentUnauthorized %s", 401, payload)
}

func (o *CreateConsentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentForbidden creates a CreateConsentForbidden with default headers values
func NewCreateConsentForbidden() *CreateConsentForbidden {
	return &CreateConsentForbidden{}
}

/*
CreateConsentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateConsentForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent forbidden response has a 2xx status code
func (o *CreateConsentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent forbidden response has a 3xx status code
func (o *CreateConsentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent forbidden response has a 4xx status code
func (o *CreateConsentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent forbidden response has a 5xx status code
func (o *CreateConsentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent forbidden response a status code equal to that given
func (o *CreateConsentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create consent forbidden response
func (o *CreateConsentForbidden) Code() int {
	return 403
}

func (o *CreateConsentForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentForbidden %s", 403, payload)
}

func (o *CreateConsentForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentForbidden %s", 403, payload)
}

func (o *CreateConsentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentNotFound creates a CreateConsentNotFound with default headers values
func NewCreateConsentNotFound() *CreateConsentNotFound {
	return &CreateConsentNotFound{}
}

/*
CreateConsentNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateConsentNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent not found response has a 2xx status code
func (o *CreateConsentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent not found response has a 3xx status code
func (o *CreateConsentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent not found response has a 4xx status code
func (o *CreateConsentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent not found response has a 5xx status code
func (o *CreateConsentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent not found response a status code equal to that given
func (o *CreateConsentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create consent not found response
func (o *CreateConsentNotFound) Code() int {
	return 404
}

func (o *CreateConsentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentNotFound %s", 404, payload)
}

func (o *CreateConsentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentNotFound %s", 404, payload)
}

func (o *CreateConsentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentConflict creates a CreateConsentConflict with default headers values
func NewCreateConsentConflict() *CreateConsentConflict {
	return &CreateConsentConflict{}
}

/*
CreateConsentConflict describes a response with status code 409, with default header values.

Conflict
*/
type CreateConsentConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent conflict response has a 2xx status code
func (o *CreateConsentConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent conflict response has a 3xx status code
func (o *CreateConsentConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent conflict response has a 4xx status code
func (o *CreateConsentConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent conflict response has a 5xx status code
func (o *CreateConsentConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent conflict response a status code equal to that given
func (o *CreateConsentConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create consent conflict response
func (o *CreateConsentConflict) Code() int {
	return 409
}

func (o *CreateConsentConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentConflict %s", 409, payload)
}

func (o *CreateConsentConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentConflict %s", 409, payload)
}

func (o *CreateConsentConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentUnprocessableEntity creates a CreateConsentUnprocessableEntity with default headers values
func NewCreateConsentUnprocessableEntity() *CreateConsentUnprocessableEntity {
	return &CreateConsentUnprocessableEntity{}
}

/*
CreateConsentUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type CreateConsentUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent unprocessable entity response has a 2xx status code
func (o *CreateConsentUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent unprocessable entity response has a 3xx status code
func (o *CreateConsentUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent unprocessable entity response has a 4xx status code
func (o *CreateConsentUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent unprocessable entity response has a 5xx status code
func (o *CreateConsentUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent unprocessable entity response a status code equal to that given
func (o *CreateConsentUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create consent unprocessable entity response
func (o *CreateConsentUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateConsentUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentUnprocessableEntity %s", 422, payload)
}

func (o *CreateConsentUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentUnprocessableEntity %s", 422, payload)
}

func (o *CreateConsentUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentTooManyRequests creates a CreateConsentTooManyRequests with default headers values
func NewCreateConsentTooManyRequests() *CreateConsentTooManyRequests {
	return &CreateConsentTooManyRequests{}
}

/*
CreateConsentTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type CreateConsentTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent too many requests response has a 2xx status code
func (o *CreateConsentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent too many requests response has a 3xx status code
func (o *CreateConsentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent too many requests response has a 4xx status code
func (o *CreateConsentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent too many requests response has a 5xx status code
func (o *CreateConsentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent too many requests response a status code equal to that given
func (o *CreateConsentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create consent too many requests response
func (o *CreateConsentTooManyRequests) Code() int {
	return 429
}

func (o *CreateConsentTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentTooManyRequests %s", 429, payload)
}

func (o *CreateConsentTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /consents][%d] createConsentTooManyRequests %s", 429, payload)
}

func (o *CreateConsentTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
