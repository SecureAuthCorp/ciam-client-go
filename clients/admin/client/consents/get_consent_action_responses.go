// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetConsentActionReader is a Reader for the GetConsentAction structure.
type GetConsentActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConsentActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetConsentActionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetConsentActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConsentActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetConsentActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetConsentActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /actions/{action}] getConsentAction", response, response.Code())
	}
}

// NewGetConsentActionOK creates a GetConsentActionOK with default headers values
func NewGetConsentActionOK() *GetConsentActionOK {
	return &GetConsentActionOK{}
}

/*
GetConsentActionOK describes a response with status code 200, with default header values.

Consent action with consents
*/
type GetConsentActionOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ConsentActionWithConsents
}

// IsSuccess returns true when this get consent action o k response has a 2xx status code
func (o *GetConsentActionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get consent action o k response has a 3xx status code
func (o *GetConsentActionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent action o k response has a 4xx status code
func (o *GetConsentActionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get consent action o k response has a 5xx status code
func (o *GetConsentActionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent action o k response a status code equal to that given
func (o *GetConsentActionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get consent action o k response
func (o *GetConsentActionOK) Code() int {
	return 200
}

func (o *GetConsentActionOK) Error() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionOK  %+v", 200, o.Payload)
}

func (o *GetConsentActionOK) String() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionOK  %+v", 200, o.Payload)
}

func (o *GetConsentActionOK) GetPayload() *models.ConsentActionWithConsents {
	return o.Payload
}

func (o *GetConsentActionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ConsentActionWithConsents)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsentActionUnauthorized creates a GetConsentActionUnauthorized with default headers values
func NewGetConsentActionUnauthorized() *GetConsentActionUnauthorized {
	return &GetConsentActionUnauthorized{}
}

/*
GetConsentActionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetConsentActionUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get consent action unauthorized response has a 2xx status code
func (o *GetConsentActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get consent action unauthorized response has a 3xx status code
func (o *GetConsentActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent action unauthorized response has a 4xx status code
func (o *GetConsentActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get consent action unauthorized response has a 5xx status code
func (o *GetConsentActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent action unauthorized response a status code equal to that given
func (o *GetConsentActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get consent action unauthorized response
func (o *GetConsentActionUnauthorized) Code() int {
	return 401
}

func (o *GetConsentActionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConsentActionUnauthorized) String() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetConsentActionUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConsentActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsentActionForbidden creates a GetConsentActionForbidden with default headers values
func NewGetConsentActionForbidden() *GetConsentActionForbidden {
	return &GetConsentActionForbidden{}
}

/*
GetConsentActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetConsentActionForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get consent action forbidden response has a 2xx status code
func (o *GetConsentActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get consent action forbidden response has a 3xx status code
func (o *GetConsentActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent action forbidden response has a 4xx status code
func (o *GetConsentActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get consent action forbidden response has a 5xx status code
func (o *GetConsentActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent action forbidden response a status code equal to that given
func (o *GetConsentActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get consent action forbidden response
func (o *GetConsentActionForbidden) Code() int {
	return 403
}

func (o *GetConsentActionForbidden) Error() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionForbidden  %+v", 403, o.Payload)
}

func (o *GetConsentActionForbidden) String() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionForbidden  %+v", 403, o.Payload)
}

func (o *GetConsentActionForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConsentActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsentActionNotFound creates a GetConsentActionNotFound with default headers values
func NewGetConsentActionNotFound() *GetConsentActionNotFound {
	return &GetConsentActionNotFound{}
}

/*
GetConsentActionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetConsentActionNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get consent action not found response has a 2xx status code
func (o *GetConsentActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get consent action not found response has a 3xx status code
func (o *GetConsentActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent action not found response has a 4xx status code
func (o *GetConsentActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get consent action not found response has a 5xx status code
func (o *GetConsentActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent action not found response a status code equal to that given
func (o *GetConsentActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get consent action not found response
func (o *GetConsentActionNotFound) Code() int {
	return 404
}

func (o *GetConsentActionNotFound) Error() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionNotFound  %+v", 404, o.Payload)
}

func (o *GetConsentActionNotFound) String() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionNotFound  %+v", 404, o.Payload)
}

func (o *GetConsentActionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConsentActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConsentActionTooManyRequests creates a GetConsentActionTooManyRequests with default headers values
func NewGetConsentActionTooManyRequests() *GetConsentActionTooManyRequests {
	return &GetConsentActionTooManyRequests{}
}

/*
GetConsentActionTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetConsentActionTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get consent action too many requests response has a 2xx status code
func (o *GetConsentActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get consent action too many requests response has a 3xx status code
func (o *GetConsentActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get consent action too many requests response has a 4xx status code
func (o *GetConsentActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get consent action too many requests response has a 5xx status code
func (o *GetConsentActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get consent action too many requests response a status code equal to that given
func (o *GetConsentActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get consent action too many requests response
func (o *GetConsentActionTooManyRequests) Code() int {
	return 429
}

func (o *GetConsentActionTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConsentActionTooManyRequests) String() string {
	return fmt.Sprintf("[GET /actions/{action}][%d] getConsentActionTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetConsentActionTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConsentActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
