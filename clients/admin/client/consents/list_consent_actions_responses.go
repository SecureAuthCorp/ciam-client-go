// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ListConsentActionsReader is a Reader for the ListConsentActions structure.
type ListConsentActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListConsentActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListConsentActionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListConsentActionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListConsentActionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListConsentActionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /actions] listConsentActions", response, response.Code())
	}
}

// NewListConsentActionsOK creates a ListConsentActionsOK with default headers values
func NewListConsentActionsOK() *ListConsentActionsOK {
	return &ListConsentActionsOK{}
}

/*
ListConsentActionsOK describes a response with status code 200, with default header values.

Consent actions
*/
type ListConsentActionsOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ConsentActions
}

// IsSuccess returns true when this list consent actions o k response has a 2xx status code
func (o *ListConsentActionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list consent actions o k response has a 3xx status code
func (o *ListConsentActionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list consent actions o k response has a 4xx status code
func (o *ListConsentActionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list consent actions o k response has a 5xx status code
func (o *ListConsentActionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list consent actions o k response a status code equal to that given
func (o *ListConsentActionsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list consent actions o k response
func (o *ListConsentActionsOK) Code() int {
	return 200
}

func (o *ListConsentActionsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /actions][%d] listConsentActionsOK %s", 200, payload)
}

func (o *ListConsentActionsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /actions][%d] listConsentActionsOK %s", 200, payload)
}

func (o *ListConsentActionsOK) GetPayload() *models.ConsentActions {
	return o.Payload
}

func (o *ListConsentActionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ConsentActions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsentActionsUnauthorized creates a ListConsentActionsUnauthorized with default headers values
func NewListConsentActionsUnauthorized() *ListConsentActionsUnauthorized {
	return &ListConsentActionsUnauthorized{}
}

/*
ListConsentActionsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListConsentActionsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list consent actions unauthorized response has a 2xx status code
func (o *ListConsentActionsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list consent actions unauthorized response has a 3xx status code
func (o *ListConsentActionsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list consent actions unauthorized response has a 4xx status code
func (o *ListConsentActionsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list consent actions unauthorized response has a 5xx status code
func (o *ListConsentActionsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list consent actions unauthorized response a status code equal to that given
func (o *ListConsentActionsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list consent actions unauthorized response
func (o *ListConsentActionsUnauthorized) Code() int {
	return 401
}

func (o *ListConsentActionsUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /actions][%d] listConsentActionsUnauthorized %s", 401, payload)
}

func (o *ListConsentActionsUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /actions][%d] listConsentActionsUnauthorized %s", 401, payload)
}

func (o *ListConsentActionsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListConsentActionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsentActionsForbidden creates a ListConsentActionsForbidden with default headers values
func NewListConsentActionsForbidden() *ListConsentActionsForbidden {
	return &ListConsentActionsForbidden{}
}

/*
ListConsentActionsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListConsentActionsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list consent actions forbidden response has a 2xx status code
func (o *ListConsentActionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list consent actions forbidden response has a 3xx status code
func (o *ListConsentActionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list consent actions forbidden response has a 4xx status code
func (o *ListConsentActionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list consent actions forbidden response has a 5xx status code
func (o *ListConsentActionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list consent actions forbidden response a status code equal to that given
func (o *ListConsentActionsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list consent actions forbidden response
func (o *ListConsentActionsForbidden) Code() int {
	return 403
}

func (o *ListConsentActionsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /actions][%d] listConsentActionsForbidden %s", 403, payload)
}

func (o *ListConsentActionsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /actions][%d] listConsentActionsForbidden %s", 403, payload)
}

func (o *ListConsentActionsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListConsentActionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListConsentActionsTooManyRequests creates a ListConsentActionsTooManyRequests with default headers values
func NewListConsentActionsTooManyRequests() *ListConsentActionsTooManyRequests {
	return &ListConsentActionsTooManyRequests{}
}

/*
ListConsentActionsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListConsentActionsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list consent actions too many requests response has a 2xx status code
func (o *ListConsentActionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list consent actions too many requests response has a 3xx status code
func (o *ListConsentActionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list consent actions too many requests response has a 4xx status code
func (o *ListConsentActionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list consent actions too many requests response has a 5xx status code
func (o *ListConsentActionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list consent actions too many requests response a status code equal to that given
func (o *ListConsentActionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list consent actions too many requests response
func (o *ListConsentActionsTooManyRequests) Code() int {
	return 429
}

func (o *ListConsentActionsTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /actions][%d] listConsentActionsTooManyRequests %s", 429, payload)
}

func (o *ListConsentActionsTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /actions][%d] listConsentActionsTooManyRequests %s", 429, payload)
}

func (o *ListConsentActionsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListConsentActionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
