// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CreateConsentActionReader is a Reader for the CreateConsentAction structure.
type CreateConsentActionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateConsentActionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateConsentActionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateConsentActionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateConsentActionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateConsentActionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateConsentActionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateConsentActionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateConsentActionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /actions] createConsentAction", response, response.Code())
	}
}

// NewCreateConsentActionCreated creates a CreateConsentActionCreated with default headers values
func NewCreateConsentActionCreated() *CreateConsentActionCreated {
	return &CreateConsentActionCreated{}
}

/*
CreateConsentActionCreated describes a response with status code 201, with default header values.

Consent action with consents
*/
type CreateConsentActionCreated struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ConsentActionWithConsents
}

// IsSuccess returns true when this create consent action created response has a 2xx status code
func (o *CreateConsentActionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create consent action created response has a 3xx status code
func (o *CreateConsentActionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent action created response has a 4xx status code
func (o *CreateConsentActionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create consent action created response has a 5xx status code
func (o *CreateConsentActionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent action created response a status code equal to that given
func (o *CreateConsentActionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create consent action created response
func (o *CreateConsentActionCreated) Code() int {
	return 201
}

func (o *CreateConsentActionCreated) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionCreated %s", 201, payload)
}

func (o *CreateConsentActionCreated) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionCreated %s", 201, payload)
}

func (o *CreateConsentActionCreated) GetPayload() *models.ConsentActionWithConsents {
	return o.Payload
}

func (o *CreateConsentActionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ConsentActionWithConsents)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentActionUnauthorized creates a CreateConsentActionUnauthorized with default headers values
func NewCreateConsentActionUnauthorized() *CreateConsentActionUnauthorized {
	return &CreateConsentActionUnauthorized{}
}

/*
CreateConsentActionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateConsentActionUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent action unauthorized response has a 2xx status code
func (o *CreateConsentActionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent action unauthorized response has a 3xx status code
func (o *CreateConsentActionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent action unauthorized response has a 4xx status code
func (o *CreateConsentActionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent action unauthorized response has a 5xx status code
func (o *CreateConsentActionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent action unauthorized response a status code equal to that given
func (o *CreateConsentActionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create consent action unauthorized response
func (o *CreateConsentActionUnauthorized) Code() int {
	return 401
}

func (o *CreateConsentActionUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionUnauthorized %s", 401, payload)
}

func (o *CreateConsentActionUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionUnauthorized %s", 401, payload)
}

func (o *CreateConsentActionUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentActionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentActionForbidden creates a CreateConsentActionForbidden with default headers values
func NewCreateConsentActionForbidden() *CreateConsentActionForbidden {
	return &CreateConsentActionForbidden{}
}

/*
CreateConsentActionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateConsentActionForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent action forbidden response has a 2xx status code
func (o *CreateConsentActionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent action forbidden response has a 3xx status code
func (o *CreateConsentActionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent action forbidden response has a 4xx status code
func (o *CreateConsentActionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent action forbidden response has a 5xx status code
func (o *CreateConsentActionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent action forbidden response a status code equal to that given
func (o *CreateConsentActionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create consent action forbidden response
func (o *CreateConsentActionForbidden) Code() int {
	return 403
}

func (o *CreateConsentActionForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionForbidden %s", 403, payload)
}

func (o *CreateConsentActionForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionForbidden %s", 403, payload)
}

func (o *CreateConsentActionForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentActionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentActionNotFound creates a CreateConsentActionNotFound with default headers values
func NewCreateConsentActionNotFound() *CreateConsentActionNotFound {
	return &CreateConsentActionNotFound{}
}

/*
CreateConsentActionNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateConsentActionNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent action not found response has a 2xx status code
func (o *CreateConsentActionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent action not found response has a 3xx status code
func (o *CreateConsentActionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent action not found response has a 4xx status code
func (o *CreateConsentActionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent action not found response has a 5xx status code
func (o *CreateConsentActionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent action not found response a status code equal to that given
func (o *CreateConsentActionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create consent action not found response
func (o *CreateConsentActionNotFound) Code() int {
	return 404
}

func (o *CreateConsentActionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionNotFound %s", 404, payload)
}

func (o *CreateConsentActionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionNotFound %s", 404, payload)
}

func (o *CreateConsentActionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentActionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentActionConflict creates a CreateConsentActionConflict with default headers values
func NewCreateConsentActionConflict() *CreateConsentActionConflict {
	return &CreateConsentActionConflict{}
}

/*
CreateConsentActionConflict describes a response with status code 409, with default header values.

Conflict
*/
type CreateConsentActionConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent action conflict response has a 2xx status code
func (o *CreateConsentActionConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent action conflict response has a 3xx status code
func (o *CreateConsentActionConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent action conflict response has a 4xx status code
func (o *CreateConsentActionConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent action conflict response has a 5xx status code
func (o *CreateConsentActionConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent action conflict response a status code equal to that given
func (o *CreateConsentActionConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create consent action conflict response
func (o *CreateConsentActionConflict) Code() int {
	return 409
}

func (o *CreateConsentActionConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionConflict %s", 409, payload)
}

func (o *CreateConsentActionConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionConflict %s", 409, payload)
}

func (o *CreateConsentActionConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentActionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentActionUnprocessableEntity creates a CreateConsentActionUnprocessableEntity with default headers values
func NewCreateConsentActionUnprocessableEntity() *CreateConsentActionUnprocessableEntity {
	return &CreateConsentActionUnprocessableEntity{}
}

/*
CreateConsentActionUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type CreateConsentActionUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent action unprocessable entity response has a 2xx status code
func (o *CreateConsentActionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent action unprocessable entity response has a 3xx status code
func (o *CreateConsentActionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent action unprocessable entity response has a 4xx status code
func (o *CreateConsentActionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent action unprocessable entity response has a 5xx status code
func (o *CreateConsentActionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent action unprocessable entity response a status code equal to that given
func (o *CreateConsentActionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create consent action unprocessable entity response
func (o *CreateConsentActionUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateConsentActionUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionUnprocessableEntity %s", 422, payload)
}

func (o *CreateConsentActionUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionUnprocessableEntity %s", 422, payload)
}

func (o *CreateConsentActionUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentActionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConsentActionTooManyRequests creates a CreateConsentActionTooManyRequests with default headers values
func NewCreateConsentActionTooManyRequests() *CreateConsentActionTooManyRequests {
	return &CreateConsentActionTooManyRequests{}
}

/*
CreateConsentActionTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type CreateConsentActionTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this create consent action too many requests response has a 2xx status code
func (o *CreateConsentActionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create consent action too many requests response has a 3xx status code
func (o *CreateConsentActionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create consent action too many requests response has a 4xx status code
func (o *CreateConsentActionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create consent action too many requests response has a 5xx status code
func (o *CreateConsentActionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create consent action too many requests response a status code equal to that given
func (o *CreateConsentActionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create consent action too many requests response
func (o *CreateConsentActionTooManyRequests) Code() int {
	return 429
}

func (o *CreateConsentActionTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionTooManyRequests %s", 429, payload)
}

func (o *CreateConsentActionTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /actions][%d] createConsentActionTooManyRequests %s", 429, payload)
}

func (o *CreateConsentActionTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateConsentActionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
