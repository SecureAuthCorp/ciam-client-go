// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetServiceReader is a Reader for the GetService structure.
type GetServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetServiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetServiceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /services/{sid}] getService", response, response.Code())
	}
}

// NewGetServiceOK creates a GetServiceOK with default headers values
func NewGetServiceOK() *GetServiceOK {
	return &GetServiceOK{}
}

/*
GetServiceOK describes a response with status code 200, with default header values.

Service with scopes
*/
type GetServiceOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ServiceWithScopesResponse
}

// IsSuccess returns true when this get service o k response has a 2xx status code
func (o *GetServiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get service o k response has a 3xx status code
func (o *GetServiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service o k response has a 4xx status code
func (o *GetServiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get service o k response has a 5xx status code
func (o *GetServiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get service o k response a status code equal to that given
func (o *GetServiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get service o k response
func (o *GetServiceOK) Code() int {
	return 200
}

func (o *GetServiceOK) Error() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceOK  %+v", 200, o.Payload)
}

func (o *GetServiceOK) String() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceOK  %+v", 200, o.Payload)
}

func (o *GetServiceOK) GetPayload() *models.ServiceWithScopesResponse {
	return o.Payload
}

func (o *GetServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ServiceWithScopesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceUnauthorized creates a GetServiceUnauthorized with default headers values
func NewGetServiceUnauthorized() *GetServiceUnauthorized {
	return &GetServiceUnauthorized{}
}

/*
GetServiceUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetServiceUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service unauthorized response has a 2xx status code
func (o *GetServiceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service unauthorized response has a 3xx status code
func (o *GetServiceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service unauthorized response has a 4xx status code
func (o *GetServiceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service unauthorized response has a 5xx status code
func (o *GetServiceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get service unauthorized response a status code equal to that given
func (o *GetServiceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get service unauthorized response
func (o *GetServiceUnauthorized) Code() int {
	return 401
}

func (o *GetServiceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServiceUnauthorized) String() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServiceUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceForbidden creates a GetServiceForbidden with default headers values
func NewGetServiceForbidden() *GetServiceForbidden {
	return &GetServiceForbidden{}
}

/*
GetServiceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServiceForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service forbidden response has a 2xx status code
func (o *GetServiceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service forbidden response has a 3xx status code
func (o *GetServiceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service forbidden response has a 4xx status code
func (o *GetServiceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service forbidden response has a 5xx status code
func (o *GetServiceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get service forbidden response a status code equal to that given
func (o *GetServiceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get service forbidden response
func (o *GetServiceForbidden) Code() int {
	return 403
}

func (o *GetServiceForbidden) Error() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceForbidden  %+v", 403, o.Payload)
}

func (o *GetServiceForbidden) String() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceForbidden  %+v", 403, o.Payload)
}

func (o *GetServiceForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceNotFound creates a GetServiceNotFound with default headers values
func NewGetServiceNotFound() *GetServiceNotFound {
	return &GetServiceNotFound{}
}

/*
GetServiceNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetServiceNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service not found response has a 2xx status code
func (o *GetServiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service not found response has a 3xx status code
func (o *GetServiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service not found response has a 4xx status code
func (o *GetServiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service not found response has a 5xx status code
func (o *GetServiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get service not found response a status code equal to that given
func (o *GetServiceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get service not found response
func (o *GetServiceNotFound) Code() int {
	return 404
}

func (o *GetServiceNotFound) Error() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceNotFound  %+v", 404, o.Payload)
}

func (o *GetServiceNotFound) String() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceNotFound  %+v", 404, o.Payload)
}

func (o *GetServiceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceTooManyRequests creates a GetServiceTooManyRequests with default headers values
func NewGetServiceTooManyRequests() *GetServiceTooManyRequests {
	return &GetServiceTooManyRequests{}
}

/*
GetServiceTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetServiceTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get service too many requests response has a 2xx status code
func (o *GetServiceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get service too many requests response has a 3xx status code
func (o *GetServiceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get service too many requests response has a 4xx status code
func (o *GetServiceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get service too many requests response has a 5xx status code
func (o *GetServiceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get service too many requests response a status code equal to that given
func (o *GetServiceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get service too many requests response
func (o *GetServiceTooManyRequests) Code() int {
	return 429
}

func (o *GetServiceTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetServiceTooManyRequests) String() string {
	return fmt.Sprintf("[GET /services/{sid}][%d] getServiceTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetServiceTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServiceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
