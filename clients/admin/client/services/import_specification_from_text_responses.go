// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ImportSpecificationFromTextReader is a Reader for the ImportSpecificationFromText structure.
type ImportSpecificationFromTextReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportSpecificationFromTextReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportSpecificationFromTextOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImportSpecificationFromTextBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewImportSpecificationFromTextUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewImportSpecificationFromTextForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImportSpecificationFromTextNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewImportSpecificationFromTextConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewImportSpecificationFromTextUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewImportSpecificationFromTextTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /services/{sid}/apis/import/text] importSpecificationFromText", response, response.Code())
	}
}

// NewImportSpecificationFromTextOK creates a ImportSpecificationFromTextOK with default headers values
func NewImportSpecificationFromTextOK() *ImportSpecificationFromTextOK {
	return &ImportSpecificationFromTextOK{}
}

/*
ImportSpecificationFromTextOK describes a response with status code 200, with default header values.

Import service configuration result
*/
type ImportSpecificationFromTextOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ImportServiceConfigurationResult
}

// IsSuccess returns true when this import specification from text o k response has a 2xx status code
func (o *ImportSpecificationFromTextOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import specification from text o k response has a 3xx status code
func (o *ImportSpecificationFromTextOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from text o k response has a 4xx status code
func (o *ImportSpecificationFromTextOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this import specification from text o k response has a 5xx status code
func (o *ImportSpecificationFromTextOK) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from text o k response a status code equal to that given
func (o *ImportSpecificationFromTextOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the import specification from text o k response
func (o *ImportSpecificationFromTextOK) Code() int {
	return 200
}

func (o *ImportSpecificationFromTextOK) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextOK  %+v", 200, o.Payload)
}

func (o *ImportSpecificationFromTextOK) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextOK  %+v", 200, o.Payload)
}

func (o *ImportSpecificationFromTextOK) GetPayload() *models.ImportServiceConfigurationResult {
	return o.Payload
}

func (o *ImportSpecificationFromTextOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ImportServiceConfigurationResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromTextBadRequest creates a ImportSpecificationFromTextBadRequest with default headers values
func NewImportSpecificationFromTextBadRequest() *ImportSpecificationFromTextBadRequest {
	return &ImportSpecificationFromTextBadRequest{}
}

/*
ImportSpecificationFromTextBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ImportSpecificationFromTextBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from text bad request response has a 2xx status code
func (o *ImportSpecificationFromTextBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from text bad request response has a 3xx status code
func (o *ImportSpecificationFromTextBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from text bad request response has a 4xx status code
func (o *ImportSpecificationFromTextBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from text bad request response has a 5xx status code
func (o *ImportSpecificationFromTextBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from text bad request response a status code equal to that given
func (o *ImportSpecificationFromTextBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the import specification from text bad request response
func (o *ImportSpecificationFromTextBadRequest) Code() int {
	return 400
}

func (o *ImportSpecificationFromTextBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextBadRequest  %+v", 400, o.Payload)
}

func (o *ImportSpecificationFromTextBadRequest) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextBadRequest  %+v", 400, o.Payload)
}

func (o *ImportSpecificationFromTextBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromTextBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromTextUnauthorized creates a ImportSpecificationFromTextUnauthorized with default headers values
func NewImportSpecificationFromTextUnauthorized() *ImportSpecificationFromTextUnauthorized {
	return &ImportSpecificationFromTextUnauthorized{}
}

/*
ImportSpecificationFromTextUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ImportSpecificationFromTextUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from text unauthorized response has a 2xx status code
func (o *ImportSpecificationFromTextUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from text unauthorized response has a 3xx status code
func (o *ImportSpecificationFromTextUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from text unauthorized response has a 4xx status code
func (o *ImportSpecificationFromTextUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from text unauthorized response has a 5xx status code
func (o *ImportSpecificationFromTextUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from text unauthorized response a status code equal to that given
func (o *ImportSpecificationFromTextUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the import specification from text unauthorized response
func (o *ImportSpecificationFromTextUnauthorized) Code() int {
	return 401
}

func (o *ImportSpecificationFromTextUnauthorized) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportSpecificationFromTextUnauthorized) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportSpecificationFromTextUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromTextUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromTextForbidden creates a ImportSpecificationFromTextForbidden with default headers values
func NewImportSpecificationFromTextForbidden() *ImportSpecificationFromTextForbidden {
	return &ImportSpecificationFromTextForbidden{}
}

/*
ImportSpecificationFromTextForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ImportSpecificationFromTextForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from text forbidden response has a 2xx status code
func (o *ImportSpecificationFromTextForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from text forbidden response has a 3xx status code
func (o *ImportSpecificationFromTextForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from text forbidden response has a 4xx status code
func (o *ImportSpecificationFromTextForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from text forbidden response has a 5xx status code
func (o *ImportSpecificationFromTextForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from text forbidden response a status code equal to that given
func (o *ImportSpecificationFromTextForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the import specification from text forbidden response
func (o *ImportSpecificationFromTextForbidden) Code() int {
	return 403
}

func (o *ImportSpecificationFromTextForbidden) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextForbidden  %+v", 403, o.Payload)
}

func (o *ImportSpecificationFromTextForbidden) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextForbidden  %+v", 403, o.Payload)
}

func (o *ImportSpecificationFromTextForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromTextForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromTextNotFound creates a ImportSpecificationFromTextNotFound with default headers values
func NewImportSpecificationFromTextNotFound() *ImportSpecificationFromTextNotFound {
	return &ImportSpecificationFromTextNotFound{}
}

/*
ImportSpecificationFromTextNotFound describes a response with status code 404, with default header values.

Not found
*/
type ImportSpecificationFromTextNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from text not found response has a 2xx status code
func (o *ImportSpecificationFromTextNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from text not found response has a 3xx status code
func (o *ImportSpecificationFromTextNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from text not found response has a 4xx status code
func (o *ImportSpecificationFromTextNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from text not found response has a 5xx status code
func (o *ImportSpecificationFromTextNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from text not found response a status code equal to that given
func (o *ImportSpecificationFromTextNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the import specification from text not found response
func (o *ImportSpecificationFromTextNotFound) Code() int {
	return 404
}

func (o *ImportSpecificationFromTextNotFound) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextNotFound  %+v", 404, o.Payload)
}

func (o *ImportSpecificationFromTextNotFound) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextNotFound  %+v", 404, o.Payload)
}

func (o *ImportSpecificationFromTextNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromTextNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromTextConflict creates a ImportSpecificationFromTextConflict with default headers values
func NewImportSpecificationFromTextConflict() *ImportSpecificationFromTextConflict {
	return &ImportSpecificationFromTextConflict{}
}

/*
ImportSpecificationFromTextConflict describes a response with status code 409, with default header values.

Conflict
*/
type ImportSpecificationFromTextConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from text conflict response has a 2xx status code
func (o *ImportSpecificationFromTextConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from text conflict response has a 3xx status code
func (o *ImportSpecificationFromTextConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from text conflict response has a 4xx status code
func (o *ImportSpecificationFromTextConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from text conflict response has a 5xx status code
func (o *ImportSpecificationFromTextConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from text conflict response a status code equal to that given
func (o *ImportSpecificationFromTextConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the import specification from text conflict response
func (o *ImportSpecificationFromTextConflict) Code() int {
	return 409
}

func (o *ImportSpecificationFromTextConflict) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextConflict  %+v", 409, o.Payload)
}

func (o *ImportSpecificationFromTextConflict) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextConflict  %+v", 409, o.Payload)
}

func (o *ImportSpecificationFromTextConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromTextConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromTextUnprocessableEntity creates a ImportSpecificationFromTextUnprocessableEntity with default headers values
func NewImportSpecificationFromTextUnprocessableEntity() *ImportSpecificationFromTextUnprocessableEntity {
	return &ImportSpecificationFromTextUnprocessableEntity{}
}

/*
ImportSpecificationFromTextUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ImportSpecificationFromTextUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from text unprocessable entity response has a 2xx status code
func (o *ImportSpecificationFromTextUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from text unprocessable entity response has a 3xx status code
func (o *ImportSpecificationFromTextUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from text unprocessable entity response has a 4xx status code
func (o *ImportSpecificationFromTextUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from text unprocessable entity response has a 5xx status code
func (o *ImportSpecificationFromTextUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from text unprocessable entity response a status code equal to that given
func (o *ImportSpecificationFromTextUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the import specification from text unprocessable entity response
func (o *ImportSpecificationFromTextUnprocessableEntity) Code() int {
	return 422
}

func (o *ImportSpecificationFromTextUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ImportSpecificationFromTextUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ImportSpecificationFromTextUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromTextUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromTextTooManyRequests creates a ImportSpecificationFromTextTooManyRequests with default headers values
func NewImportSpecificationFromTextTooManyRequests() *ImportSpecificationFromTextTooManyRequests {
	return &ImportSpecificationFromTextTooManyRequests{}
}

/*
ImportSpecificationFromTextTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ImportSpecificationFromTextTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from text too many requests response has a 2xx status code
func (o *ImportSpecificationFromTextTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from text too many requests response has a 3xx status code
func (o *ImportSpecificationFromTextTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from text too many requests response has a 4xx status code
func (o *ImportSpecificationFromTextTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from text too many requests response has a 5xx status code
func (o *ImportSpecificationFromTextTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from text too many requests response a status code equal to that given
func (o *ImportSpecificationFromTextTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the import specification from text too many requests response
func (o *ImportSpecificationFromTextTooManyRequests) Code() int {
	return 429
}

func (o *ImportSpecificationFromTextTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextTooManyRequests  %+v", 429, o.Payload)
}

func (o *ImportSpecificationFromTextTooManyRequests) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/text][%d] importSpecificationFromTextTooManyRequests  %+v", 429, o.Payload)
}

func (o *ImportSpecificationFromTextTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromTextTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
