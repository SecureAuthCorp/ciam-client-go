// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ImportSpecificationFromURLReader is a Reader for the ImportSpecificationFromURL structure.
type ImportSpecificationFromURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportSpecificationFromURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportSpecificationFromURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImportSpecificationFromURLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewImportSpecificationFromURLUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewImportSpecificationFromURLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImportSpecificationFromURLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewImportSpecificationFromURLConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewImportSpecificationFromURLUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewImportSpecificationFromURLTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /services/{sid}/apis/import/url] importSpecificationFromURL", response, response.Code())
	}
}

// NewImportSpecificationFromURLOK creates a ImportSpecificationFromURLOK with default headers values
func NewImportSpecificationFromURLOK() *ImportSpecificationFromURLOK {
	return &ImportSpecificationFromURLOK{}
}

/*
ImportSpecificationFromURLOK describes a response with status code 200, with default header values.

Import service configuration result
*/
type ImportSpecificationFromURLOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ImportServiceConfigurationResult
}

// IsSuccess returns true when this import specification from Url o k response has a 2xx status code
func (o *ImportSpecificationFromURLOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import specification from Url o k response has a 3xx status code
func (o *ImportSpecificationFromURLOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from Url o k response has a 4xx status code
func (o *ImportSpecificationFromURLOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this import specification from Url o k response has a 5xx status code
func (o *ImportSpecificationFromURLOK) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from Url o k response a status code equal to that given
func (o *ImportSpecificationFromURLOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the import specification from Url o k response
func (o *ImportSpecificationFromURLOK) Code() int {
	return 200
}

func (o *ImportSpecificationFromURLOK) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlOK  %+v", 200, o.Payload)
}

func (o *ImportSpecificationFromURLOK) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlOK  %+v", 200, o.Payload)
}

func (o *ImportSpecificationFromURLOK) GetPayload() *models.ImportServiceConfigurationResult {
	return o.Payload
}

func (o *ImportSpecificationFromURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ImportServiceConfigurationResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromURLBadRequest creates a ImportSpecificationFromURLBadRequest with default headers values
func NewImportSpecificationFromURLBadRequest() *ImportSpecificationFromURLBadRequest {
	return &ImportSpecificationFromURLBadRequest{}
}

/*
ImportSpecificationFromURLBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ImportSpecificationFromURLBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from Url bad request response has a 2xx status code
func (o *ImportSpecificationFromURLBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from Url bad request response has a 3xx status code
func (o *ImportSpecificationFromURLBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from Url bad request response has a 4xx status code
func (o *ImportSpecificationFromURLBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from Url bad request response has a 5xx status code
func (o *ImportSpecificationFromURLBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from Url bad request response a status code equal to that given
func (o *ImportSpecificationFromURLBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the import specification from Url bad request response
func (o *ImportSpecificationFromURLBadRequest) Code() int {
	return 400
}

func (o *ImportSpecificationFromURLBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlBadRequest  %+v", 400, o.Payload)
}

func (o *ImportSpecificationFromURLBadRequest) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlBadRequest  %+v", 400, o.Payload)
}

func (o *ImportSpecificationFromURLBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromURLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromURLUnauthorized creates a ImportSpecificationFromURLUnauthorized with default headers values
func NewImportSpecificationFromURLUnauthorized() *ImportSpecificationFromURLUnauthorized {
	return &ImportSpecificationFromURLUnauthorized{}
}

/*
ImportSpecificationFromURLUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ImportSpecificationFromURLUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from Url unauthorized response has a 2xx status code
func (o *ImportSpecificationFromURLUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from Url unauthorized response has a 3xx status code
func (o *ImportSpecificationFromURLUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from Url unauthorized response has a 4xx status code
func (o *ImportSpecificationFromURLUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from Url unauthorized response has a 5xx status code
func (o *ImportSpecificationFromURLUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from Url unauthorized response a status code equal to that given
func (o *ImportSpecificationFromURLUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the import specification from Url unauthorized response
func (o *ImportSpecificationFromURLUnauthorized) Code() int {
	return 401
}

func (o *ImportSpecificationFromURLUnauthorized) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportSpecificationFromURLUnauthorized) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportSpecificationFromURLUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromURLUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromURLForbidden creates a ImportSpecificationFromURLForbidden with default headers values
func NewImportSpecificationFromURLForbidden() *ImportSpecificationFromURLForbidden {
	return &ImportSpecificationFromURLForbidden{}
}

/*
ImportSpecificationFromURLForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ImportSpecificationFromURLForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from Url forbidden response has a 2xx status code
func (o *ImportSpecificationFromURLForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from Url forbidden response has a 3xx status code
func (o *ImportSpecificationFromURLForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from Url forbidden response has a 4xx status code
func (o *ImportSpecificationFromURLForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from Url forbidden response has a 5xx status code
func (o *ImportSpecificationFromURLForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from Url forbidden response a status code equal to that given
func (o *ImportSpecificationFromURLForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the import specification from Url forbidden response
func (o *ImportSpecificationFromURLForbidden) Code() int {
	return 403
}

func (o *ImportSpecificationFromURLForbidden) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlForbidden  %+v", 403, o.Payload)
}

func (o *ImportSpecificationFromURLForbidden) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlForbidden  %+v", 403, o.Payload)
}

func (o *ImportSpecificationFromURLForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromURLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromURLNotFound creates a ImportSpecificationFromURLNotFound with default headers values
func NewImportSpecificationFromURLNotFound() *ImportSpecificationFromURLNotFound {
	return &ImportSpecificationFromURLNotFound{}
}

/*
ImportSpecificationFromURLNotFound describes a response with status code 404, with default header values.

Not found
*/
type ImportSpecificationFromURLNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from Url not found response has a 2xx status code
func (o *ImportSpecificationFromURLNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from Url not found response has a 3xx status code
func (o *ImportSpecificationFromURLNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from Url not found response has a 4xx status code
func (o *ImportSpecificationFromURLNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from Url not found response has a 5xx status code
func (o *ImportSpecificationFromURLNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from Url not found response a status code equal to that given
func (o *ImportSpecificationFromURLNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the import specification from Url not found response
func (o *ImportSpecificationFromURLNotFound) Code() int {
	return 404
}

func (o *ImportSpecificationFromURLNotFound) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlNotFound  %+v", 404, o.Payload)
}

func (o *ImportSpecificationFromURLNotFound) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlNotFound  %+v", 404, o.Payload)
}

func (o *ImportSpecificationFromURLNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromURLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromURLConflict creates a ImportSpecificationFromURLConflict with default headers values
func NewImportSpecificationFromURLConflict() *ImportSpecificationFromURLConflict {
	return &ImportSpecificationFromURLConflict{}
}

/*
ImportSpecificationFromURLConflict describes a response with status code 409, with default header values.

Conflict
*/
type ImportSpecificationFromURLConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from Url conflict response has a 2xx status code
func (o *ImportSpecificationFromURLConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from Url conflict response has a 3xx status code
func (o *ImportSpecificationFromURLConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from Url conflict response has a 4xx status code
func (o *ImportSpecificationFromURLConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from Url conflict response has a 5xx status code
func (o *ImportSpecificationFromURLConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from Url conflict response a status code equal to that given
func (o *ImportSpecificationFromURLConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the import specification from Url conflict response
func (o *ImportSpecificationFromURLConflict) Code() int {
	return 409
}

func (o *ImportSpecificationFromURLConflict) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlConflict  %+v", 409, o.Payload)
}

func (o *ImportSpecificationFromURLConflict) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlConflict  %+v", 409, o.Payload)
}

func (o *ImportSpecificationFromURLConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromURLConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromURLUnprocessableEntity creates a ImportSpecificationFromURLUnprocessableEntity with default headers values
func NewImportSpecificationFromURLUnprocessableEntity() *ImportSpecificationFromURLUnprocessableEntity {
	return &ImportSpecificationFromURLUnprocessableEntity{}
}

/*
ImportSpecificationFromURLUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ImportSpecificationFromURLUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from Url unprocessable entity response has a 2xx status code
func (o *ImportSpecificationFromURLUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from Url unprocessable entity response has a 3xx status code
func (o *ImportSpecificationFromURLUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from Url unprocessable entity response has a 4xx status code
func (o *ImportSpecificationFromURLUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from Url unprocessable entity response has a 5xx status code
func (o *ImportSpecificationFromURLUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from Url unprocessable entity response a status code equal to that given
func (o *ImportSpecificationFromURLUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the import specification from Url unprocessable entity response
func (o *ImportSpecificationFromURLUnprocessableEntity) Code() int {
	return 422
}

func (o *ImportSpecificationFromURLUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ImportSpecificationFromURLUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ImportSpecificationFromURLUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromURLUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSpecificationFromURLTooManyRequests creates a ImportSpecificationFromURLTooManyRequests with default headers values
func NewImportSpecificationFromURLTooManyRequests() *ImportSpecificationFromURLTooManyRequests {
	return &ImportSpecificationFromURLTooManyRequests{}
}

/*
ImportSpecificationFromURLTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ImportSpecificationFromURLTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this import specification from Url too many requests response has a 2xx status code
func (o *ImportSpecificationFromURLTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import specification from Url too many requests response has a 3xx status code
func (o *ImportSpecificationFromURLTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import specification from Url too many requests response has a 4xx status code
func (o *ImportSpecificationFromURLTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this import specification from Url too many requests response has a 5xx status code
func (o *ImportSpecificationFromURLTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this import specification from Url too many requests response a status code equal to that given
func (o *ImportSpecificationFromURLTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the import specification from Url too many requests response
func (o *ImportSpecificationFromURLTooManyRequests) Code() int {
	return 429
}

func (o *ImportSpecificationFromURLTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlTooManyRequests  %+v", 429, o.Payload)
}

func (o *ImportSpecificationFromURLTooManyRequests) String() string {
	return fmt.Sprintf("[POST /services/{sid}/apis/import/url][%d] importSpecificationFromUrlTooManyRequests  %+v", 429, o.Payload)
}

func (o *ImportSpecificationFromURLTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSpecificationFromURLTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
