// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateServiceReader is a Reader for the UpdateService structure.
type UpdateServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateServiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateServiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateServiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateServiceUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateServiceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /services/{sid}] updateService", response, response.Code())
	}
}

// NewUpdateServiceOK creates a UpdateServiceOK with default headers values
func NewUpdateServiceOK() *UpdateServiceOK {
	return &UpdateServiceOK{}
}

/*
UpdateServiceOK describes a response with status code 200, with default header values.

Service
*/
type UpdateServiceOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ServiceWithAudience
}

// IsSuccess returns true when this update service o k response has a 2xx status code
func (o *UpdateServiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update service o k response has a 3xx status code
func (o *UpdateServiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service o k response has a 4xx status code
func (o *UpdateServiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update service o k response has a 5xx status code
func (o *UpdateServiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update service o k response a status code equal to that given
func (o *UpdateServiceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update service o k response
func (o *UpdateServiceOK) Code() int {
	return 200
}

func (o *UpdateServiceOK) Error() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceOK  %+v", 200, o.Payload)
}

func (o *UpdateServiceOK) String() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceOK  %+v", 200, o.Payload)
}

func (o *UpdateServiceOK) GetPayload() *models.ServiceWithAudience {
	return o.Payload
}

func (o *UpdateServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ServiceWithAudience)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceBadRequest creates a UpdateServiceBadRequest with default headers values
func NewUpdateServiceBadRequest() *UpdateServiceBadRequest {
	return &UpdateServiceBadRequest{}
}

/*
UpdateServiceBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateServiceBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update service bad request response has a 2xx status code
func (o *UpdateServiceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service bad request response has a 3xx status code
func (o *UpdateServiceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service bad request response has a 4xx status code
func (o *UpdateServiceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service bad request response has a 5xx status code
func (o *UpdateServiceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update service bad request response a status code equal to that given
func (o *UpdateServiceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update service bad request response
func (o *UpdateServiceBadRequest) Code() int {
	return 400
}

func (o *UpdateServiceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceBadRequest) String() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateServiceBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceUnauthorized creates a UpdateServiceUnauthorized with default headers values
func NewUpdateServiceUnauthorized() *UpdateServiceUnauthorized {
	return &UpdateServiceUnauthorized{}
}

/*
UpdateServiceUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateServiceUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update service unauthorized response has a 2xx status code
func (o *UpdateServiceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service unauthorized response has a 3xx status code
func (o *UpdateServiceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service unauthorized response has a 4xx status code
func (o *UpdateServiceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service unauthorized response has a 5xx status code
func (o *UpdateServiceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update service unauthorized response a status code equal to that given
func (o *UpdateServiceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update service unauthorized response
func (o *UpdateServiceUnauthorized) Code() int {
	return 401
}

func (o *UpdateServiceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateServiceUnauthorized) String() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateServiceUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceForbidden creates a UpdateServiceForbidden with default headers values
func NewUpdateServiceForbidden() *UpdateServiceForbidden {
	return &UpdateServiceForbidden{}
}

/*
UpdateServiceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateServiceForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update service forbidden response has a 2xx status code
func (o *UpdateServiceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service forbidden response has a 3xx status code
func (o *UpdateServiceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service forbidden response has a 4xx status code
func (o *UpdateServiceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service forbidden response has a 5xx status code
func (o *UpdateServiceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update service forbidden response a status code equal to that given
func (o *UpdateServiceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update service forbidden response
func (o *UpdateServiceForbidden) Code() int {
	return 403
}

func (o *UpdateServiceForbidden) Error() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateServiceForbidden) String() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateServiceForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceNotFound creates a UpdateServiceNotFound with default headers values
func NewUpdateServiceNotFound() *UpdateServiceNotFound {
	return &UpdateServiceNotFound{}
}

/*
UpdateServiceNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateServiceNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update service not found response has a 2xx status code
func (o *UpdateServiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service not found response has a 3xx status code
func (o *UpdateServiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service not found response has a 4xx status code
func (o *UpdateServiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service not found response has a 5xx status code
func (o *UpdateServiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update service not found response a status code equal to that given
func (o *UpdateServiceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update service not found response
func (o *UpdateServiceNotFound) Code() int {
	return 404
}

func (o *UpdateServiceNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServiceNotFound) String() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServiceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceUnprocessableEntity creates a UpdateServiceUnprocessableEntity with default headers values
func NewUpdateServiceUnprocessableEntity() *UpdateServiceUnprocessableEntity {
	return &UpdateServiceUnprocessableEntity{}
}

/*
UpdateServiceUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateServiceUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update service unprocessable entity response has a 2xx status code
func (o *UpdateServiceUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service unprocessable entity response has a 3xx status code
func (o *UpdateServiceUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service unprocessable entity response has a 4xx status code
func (o *UpdateServiceUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service unprocessable entity response has a 5xx status code
func (o *UpdateServiceUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update service unprocessable entity response a status code equal to that given
func (o *UpdateServiceUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update service unprocessable entity response
func (o *UpdateServiceUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateServiceUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateServiceUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateServiceUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServiceUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceTooManyRequests creates a UpdateServiceTooManyRequests with default headers values
func NewUpdateServiceTooManyRequests() *UpdateServiceTooManyRequests {
	return &UpdateServiceTooManyRequests{}
}

/*
UpdateServiceTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateServiceTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update service too many requests response has a 2xx status code
func (o *UpdateServiceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update service too many requests response has a 3xx status code
func (o *UpdateServiceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update service too many requests response has a 4xx status code
func (o *UpdateServiceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update service too many requests response has a 5xx status code
func (o *UpdateServiceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update service too many requests response a status code equal to that given
func (o *UpdateServiceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update service too many requests response
func (o *UpdateServiceTooManyRequests) Code() int {
	return 429
}

func (o *UpdateServiceTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateServiceTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /services/{sid}][%d] updateServiceTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateServiceTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateServiceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
