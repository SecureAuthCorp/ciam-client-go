// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// RevokeIdentityPoolRoleReader is a Reader for the RevokeIdentityPoolRole structure.
type RevokeIdentityPoolRoleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeIdentityPoolRoleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRevokeIdentityPoolRoleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRevokeIdentityPoolRoleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRevokeIdentityPoolRoleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRevokeIdentityPoolRoleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRevokeIdentityPoolRoleUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRevokeIdentityPoolRoleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /pools/{ipID}/roles/revoke] revokeIdentityPoolRole", response, response.Code())
	}
}

// NewRevokeIdentityPoolRoleNoContent creates a RevokeIdentityPoolRoleNoContent with default headers values
func NewRevokeIdentityPoolRoleNoContent() *RevokeIdentityPoolRoleNoContent {
	return &RevokeIdentityPoolRoleNoContent{}
}

/*
RevokeIdentityPoolRoleNoContent describes a response with status code 204, with default header values.

Role revoked
*/
type RevokeIdentityPoolRoleNoContent struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string
}

// IsSuccess returns true when this revoke identity pool role no content response has a 2xx status code
func (o *RevokeIdentityPoolRoleNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this revoke identity pool role no content response has a 3xx status code
func (o *RevokeIdentityPoolRoleNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke identity pool role no content response has a 4xx status code
func (o *RevokeIdentityPoolRoleNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke identity pool role no content response has a 5xx status code
func (o *RevokeIdentityPoolRoleNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke identity pool role no content response a status code equal to that given
func (o *RevokeIdentityPoolRoleNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the revoke identity pool role no content response
func (o *RevokeIdentityPoolRoleNoContent) Code() int {
	return 204
}

func (o *RevokeIdentityPoolRoleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleNoContent", 204)
}

func (o *RevokeIdentityPoolRoleNoContent) String() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleNoContent", 204)
}

func (o *RevokeIdentityPoolRoleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	return nil
}

// NewRevokeIdentityPoolRoleUnauthorized creates a RevokeIdentityPoolRoleUnauthorized with default headers values
func NewRevokeIdentityPoolRoleUnauthorized() *RevokeIdentityPoolRoleUnauthorized {
	return &RevokeIdentityPoolRoleUnauthorized{}
}

/*
RevokeIdentityPoolRoleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RevokeIdentityPoolRoleUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke identity pool role unauthorized response has a 2xx status code
func (o *RevokeIdentityPoolRoleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke identity pool role unauthorized response has a 3xx status code
func (o *RevokeIdentityPoolRoleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke identity pool role unauthorized response has a 4xx status code
func (o *RevokeIdentityPoolRoleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke identity pool role unauthorized response has a 5xx status code
func (o *RevokeIdentityPoolRoleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke identity pool role unauthorized response a status code equal to that given
func (o *RevokeIdentityPoolRoleUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the revoke identity pool role unauthorized response
func (o *RevokeIdentityPoolRoleUnauthorized) Code() int {
	return 401
}

func (o *RevokeIdentityPoolRoleUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleUnauthorized %s", 401, payload)
}

func (o *RevokeIdentityPoolRoleUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleUnauthorized %s", 401, payload)
}

func (o *RevokeIdentityPoolRoleUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeIdentityPoolRoleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeIdentityPoolRoleForbidden creates a RevokeIdentityPoolRoleForbidden with default headers values
func NewRevokeIdentityPoolRoleForbidden() *RevokeIdentityPoolRoleForbidden {
	return &RevokeIdentityPoolRoleForbidden{}
}

/*
RevokeIdentityPoolRoleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RevokeIdentityPoolRoleForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke identity pool role forbidden response has a 2xx status code
func (o *RevokeIdentityPoolRoleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke identity pool role forbidden response has a 3xx status code
func (o *RevokeIdentityPoolRoleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke identity pool role forbidden response has a 4xx status code
func (o *RevokeIdentityPoolRoleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke identity pool role forbidden response has a 5xx status code
func (o *RevokeIdentityPoolRoleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke identity pool role forbidden response a status code equal to that given
func (o *RevokeIdentityPoolRoleForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the revoke identity pool role forbidden response
func (o *RevokeIdentityPoolRoleForbidden) Code() int {
	return 403
}

func (o *RevokeIdentityPoolRoleForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleForbidden %s", 403, payload)
}

func (o *RevokeIdentityPoolRoleForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleForbidden %s", 403, payload)
}

func (o *RevokeIdentityPoolRoleForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeIdentityPoolRoleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeIdentityPoolRoleNotFound creates a RevokeIdentityPoolRoleNotFound with default headers values
func NewRevokeIdentityPoolRoleNotFound() *RevokeIdentityPoolRoleNotFound {
	return &RevokeIdentityPoolRoleNotFound{}
}

/*
RevokeIdentityPoolRoleNotFound describes a response with status code 404, with default header values.

Not found
*/
type RevokeIdentityPoolRoleNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke identity pool role not found response has a 2xx status code
func (o *RevokeIdentityPoolRoleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke identity pool role not found response has a 3xx status code
func (o *RevokeIdentityPoolRoleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke identity pool role not found response has a 4xx status code
func (o *RevokeIdentityPoolRoleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke identity pool role not found response has a 5xx status code
func (o *RevokeIdentityPoolRoleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke identity pool role not found response a status code equal to that given
func (o *RevokeIdentityPoolRoleNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the revoke identity pool role not found response
func (o *RevokeIdentityPoolRoleNotFound) Code() int {
	return 404
}

func (o *RevokeIdentityPoolRoleNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleNotFound %s", 404, payload)
}

func (o *RevokeIdentityPoolRoleNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleNotFound %s", 404, payload)
}

func (o *RevokeIdentityPoolRoleNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeIdentityPoolRoleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeIdentityPoolRoleUnprocessableEntity creates a RevokeIdentityPoolRoleUnprocessableEntity with default headers values
func NewRevokeIdentityPoolRoleUnprocessableEntity() *RevokeIdentityPoolRoleUnprocessableEntity {
	return &RevokeIdentityPoolRoleUnprocessableEntity{}
}

/*
RevokeIdentityPoolRoleUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type RevokeIdentityPoolRoleUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke identity pool role unprocessable entity response has a 2xx status code
func (o *RevokeIdentityPoolRoleUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke identity pool role unprocessable entity response has a 3xx status code
func (o *RevokeIdentityPoolRoleUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke identity pool role unprocessable entity response has a 4xx status code
func (o *RevokeIdentityPoolRoleUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke identity pool role unprocessable entity response has a 5xx status code
func (o *RevokeIdentityPoolRoleUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke identity pool role unprocessable entity response a status code equal to that given
func (o *RevokeIdentityPoolRoleUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the revoke identity pool role unprocessable entity response
func (o *RevokeIdentityPoolRoleUnprocessableEntity) Code() int {
	return 422
}

func (o *RevokeIdentityPoolRoleUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleUnprocessableEntity %s", 422, payload)
}

func (o *RevokeIdentityPoolRoleUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleUnprocessableEntity %s", 422, payload)
}

func (o *RevokeIdentityPoolRoleUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeIdentityPoolRoleUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeIdentityPoolRoleTooManyRequests creates a RevokeIdentityPoolRoleTooManyRequests with default headers values
func NewRevokeIdentityPoolRoleTooManyRequests() *RevokeIdentityPoolRoleTooManyRequests {
	return &RevokeIdentityPoolRoleTooManyRequests{}
}

/*
RevokeIdentityPoolRoleTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type RevokeIdentityPoolRoleTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke identity pool role too many requests response has a 2xx status code
func (o *RevokeIdentityPoolRoleTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke identity pool role too many requests response has a 3xx status code
func (o *RevokeIdentityPoolRoleTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke identity pool role too many requests response has a 4xx status code
func (o *RevokeIdentityPoolRoleTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke identity pool role too many requests response has a 5xx status code
func (o *RevokeIdentityPoolRoleTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke identity pool role too many requests response a status code equal to that given
func (o *RevokeIdentityPoolRoleTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the revoke identity pool role too many requests response
func (o *RevokeIdentityPoolRoleTooManyRequests) Code() int {
	return 429
}

func (o *RevokeIdentityPoolRoleTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleTooManyRequests %s", 429, payload)
}

func (o *RevokeIdentityPoolRoleTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /pools/{ipID}/roles/revoke][%d] revokeIdentityPoolRoleTooManyRequests %s", 429, payload)
}

func (o *RevokeIdentityPoolRoleTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeIdentityPoolRoleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
