// Code generated by go-swagger; DO NOT EDIT.

package environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetEnvironmentReader is a Reader for the GetEnvironment structure.
type GetEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEnvironmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEnvironmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEnvironmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetEnvironmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /environment] getEnvironment", response, response.Code())
	}
}

// NewGetEnvironmentOK creates a GetEnvironmentOK with default headers values
func NewGetEnvironmentOK() *GetEnvironmentOK {
	return &GetEnvironmentOK{}
}

/*
GetEnvironmentOK describes a response with status code 200, with default header values.

Environment
*/
type GetEnvironmentOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Environment
}

// IsSuccess returns true when this get environment o k response has a 2xx status code
func (o *GetEnvironmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get environment o k response has a 3xx status code
func (o *GetEnvironmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get environment o k response has a 4xx status code
func (o *GetEnvironmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get environment o k response has a 5xx status code
func (o *GetEnvironmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get environment o k response a status code equal to that given
func (o *GetEnvironmentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get environment o k response
func (o *GetEnvironmentOK) Code() int {
	return 200
}

func (o *GetEnvironmentOK) Error() string {
	return fmt.Sprintf("[GET /environment][%d] getEnvironmentOK  %+v", 200, o.Payload)
}

func (o *GetEnvironmentOK) String() string {
	return fmt.Sprintf("[GET /environment][%d] getEnvironmentOK  %+v", 200, o.Payload)
}

func (o *GetEnvironmentOK) GetPayload() *models.Environment {
	return o.Payload
}

func (o *GetEnvironmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Environment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEnvironmentUnauthorized creates a GetEnvironmentUnauthorized with default headers values
func NewGetEnvironmentUnauthorized() *GetEnvironmentUnauthorized {
	return &GetEnvironmentUnauthorized{}
}

/*
GetEnvironmentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetEnvironmentUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get environment unauthorized response has a 2xx status code
func (o *GetEnvironmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get environment unauthorized response has a 3xx status code
func (o *GetEnvironmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get environment unauthorized response has a 4xx status code
func (o *GetEnvironmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get environment unauthorized response has a 5xx status code
func (o *GetEnvironmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get environment unauthorized response a status code equal to that given
func (o *GetEnvironmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get environment unauthorized response
func (o *GetEnvironmentUnauthorized) Code() int {
	return 401
}

func (o *GetEnvironmentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /environment][%d] getEnvironmentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEnvironmentUnauthorized) String() string {
	return fmt.Sprintf("[GET /environment][%d] getEnvironmentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEnvironmentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEnvironmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEnvironmentForbidden creates a GetEnvironmentForbidden with default headers values
func NewGetEnvironmentForbidden() *GetEnvironmentForbidden {
	return &GetEnvironmentForbidden{}
}

/*
GetEnvironmentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetEnvironmentForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get environment forbidden response has a 2xx status code
func (o *GetEnvironmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get environment forbidden response has a 3xx status code
func (o *GetEnvironmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get environment forbidden response has a 4xx status code
func (o *GetEnvironmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get environment forbidden response has a 5xx status code
func (o *GetEnvironmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get environment forbidden response a status code equal to that given
func (o *GetEnvironmentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get environment forbidden response
func (o *GetEnvironmentForbidden) Code() int {
	return 403
}

func (o *GetEnvironmentForbidden) Error() string {
	return fmt.Sprintf("[GET /environment][%d] getEnvironmentForbidden  %+v", 403, o.Payload)
}

func (o *GetEnvironmentForbidden) String() string {
	return fmt.Sprintf("[GET /environment][%d] getEnvironmentForbidden  %+v", 403, o.Payload)
}

func (o *GetEnvironmentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEnvironmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEnvironmentTooManyRequests creates a GetEnvironmentTooManyRequests with default headers values
func NewGetEnvironmentTooManyRequests() *GetEnvironmentTooManyRequests {
	return &GetEnvironmentTooManyRequests{}
}

/*
GetEnvironmentTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetEnvironmentTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get environment too many requests response has a 2xx status code
func (o *GetEnvironmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get environment too many requests response has a 3xx status code
func (o *GetEnvironmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get environment too many requests response has a 4xx status code
func (o *GetEnvironmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get environment too many requests response has a 5xx status code
func (o *GetEnvironmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get environment too many requests response a status code equal to that given
func (o *GetEnvironmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get environment too many requests response
func (o *GetEnvironmentTooManyRequests) Code() int {
	return 429
}

func (o *GetEnvironmentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /environment][%d] getEnvironmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEnvironmentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /environment][%d] getEnvironmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEnvironmentTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEnvironmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
