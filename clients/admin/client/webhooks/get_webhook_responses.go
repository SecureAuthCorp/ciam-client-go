// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetWebhookReader is a Reader for the GetWebhook structure.
type GetWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWebhookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWebhookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetWebhookTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/webhooks/{webhookID}] getWebhook", response, response.Code())
	}
}

// NewGetWebhookOK creates a GetWebhookOK with default headers values
func NewGetWebhookOK() *GetWebhookOK {
	return &GetWebhookOK{}
}

/*
GetWebhookOK describes a response with status code 200, with default header values.

Webhook response
*/
type GetWebhookOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.WebhookResponse
}

// IsSuccess returns true when this get webhook o k response has a 2xx status code
func (o *GetWebhookOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get webhook o k response has a 3xx status code
func (o *GetWebhookOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webhook o k response has a 4xx status code
func (o *GetWebhookOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get webhook o k response has a 5xx status code
func (o *GetWebhookOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get webhook o k response a status code equal to that given
func (o *GetWebhookOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get webhook o k response
func (o *GetWebhookOK) Code() int {
	return 200
}

func (o *GetWebhookOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookOK  %+v", 200, o.Payload)
}

func (o *GetWebhookOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookOK  %+v", 200, o.Payload)
}

func (o *GetWebhookOK) GetPayload() *models.WebhookResponse {
	return o.Payload
}

func (o *GetWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.WebhookResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookUnauthorized creates a GetWebhookUnauthorized with default headers values
func NewGetWebhookUnauthorized() *GetWebhookUnauthorized {
	return &GetWebhookUnauthorized{}
}

/*
GetWebhookUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetWebhookUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get webhook unauthorized response has a 2xx status code
func (o *GetWebhookUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webhook unauthorized response has a 3xx status code
func (o *GetWebhookUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webhook unauthorized response has a 4xx status code
func (o *GetWebhookUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webhook unauthorized response has a 5xx status code
func (o *GetWebhookUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get webhook unauthorized response a status code equal to that given
func (o *GetWebhookUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get webhook unauthorized response
func (o *GetWebhookUnauthorized) Code() int {
	return 401
}

func (o *GetWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebhookUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookUnauthorized  %+v", 401, o.Payload)
}

func (o *GetWebhookUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookForbidden creates a GetWebhookForbidden with default headers values
func NewGetWebhookForbidden() *GetWebhookForbidden {
	return &GetWebhookForbidden{}
}

/*
GetWebhookForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWebhookForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get webhook forbidden response has a 2xx status code
func (o *GetWebhookForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webhook forbidden response has a 3xx status code
func (o *GetWebhookForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webhook forbidden response has a 4xx status code
func (o *GetWebhookForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webhook forbidden response has a 5xx status code
func (o *GetWebhookForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get webhook forbidden response a status code equal to that given
func (o *GetWebhookForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get webhook forbidden response
func (o *GetWebhookForbidden) Code() int {
	return 403
}

func (o *GetWebhookForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookForbidden  %+v", 403, o.Payload)
}

func (o *GetWebhookForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookForbidden  %+v", 403, o.Payload)
}

func (o *GetWebhookForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWebhookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookNotFound creates a GetWebhookNotFound with default headers values
func NewGetWebhookNotFound() *GetWebhookNotFound {
	return &GetWebhookNotFound{}
}

/*
GetWebhookNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetWebhookNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get webhook not found response has a 2xx status code
func (o *GetWebhookNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webhook not found response has a 3xx status code
func (o *GetWebhookNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webhook not found response has a 4xx status code
func (o *GetWebhookNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webhook not found response has a 5xx status code
func (o *GetWebhookNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get webhook not found response a status code equal to that given
func (o *GetWebhookNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get webhook not found response
func (o *GetWebhookNotFound) Code() int {
	return 404
}

func (o *GetWebhookNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookNotFound  %+v", 404, o.Payload)
}

func (o *GetWebhookNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookNotFound  %+v", 404, o.Payload)
}

func (o *GetWebhookNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWebhookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhookTooManyRequests creates a GetWebhookTooManyRequests with default headers values
func NewGetWebhookTooManyRequests() *GetWebhookTooManyRequests {
	return &GetWebhookTooManyRequests{}
}

/*
GetWebhookTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetWebhookTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get webhook too many requests response has a 2xx status code
func (o *GetWebhookTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get webhook too many requests response has a 3xx status code
func (o *GetWebhookTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get webhook too many requests response has a 4xx status code
func (o *GetWebhookTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get webhook too many requests response has a 5xx status code
func (o *GetWebhookTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get webhook too many requests response a status code equal to that given
func (o *GetWebhookTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get webhook too many requests response
func (o *GetWebhookTooManyRequests) Code() int {
	return 429
}

func (o *GetWebhookTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebhookTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/webhooks/{webhookID}][%d] getWebhookTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetWebhookTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWebhookTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
