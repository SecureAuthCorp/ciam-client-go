// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ListWebhookEventsReader is a Reader for the ListWebhookEvents structure.
type ListWebhookEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListWebhookEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListWebhookEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListWebhookEventsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListWebhookEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListWebhookEventsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /webhooks/events/{wid}] listWebhookEvents", response, response.Code())
	}
}

// NewListWebhookEventsOK creates a ListWebhookEventsOK with default headers values
func NewListWebhookEventsOK() *ListWebhookEventsOK {
	return &ListWebhookEventsOK{}
}

/*
ListWebhookEventsOK describes a response with status code 200, with default header values.

AvailableEventsResponse
*/
type ListWebhookEventsOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.AvailableEvents
}

// IsSuccess returns true when this list webhook events o k response has a 2xx status code
func (o *ListWebhookEventsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list webhook events o k response has a 3xx status code
func (o *ListWebhookEventsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list webhook events o k response has a 4xx status code
func (o *ListWebhookEventsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list webhook events o k response has a 5xx status code
func (o *ListWebhookEventsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list webhook events o k response a status code equal to that given
func (o *ListWebhookEventsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list webhook events o k response
func (o *ListWebhookEventsOK) Code() int {
	return 200
}

func (o *ListWebhookEventsOK) Error() string {
	return fmt.Sprintf("[GET /webhooks/events/{wid}][%d] listWebhookEventsOK  %+v", 200, o.Payload)
}

func (o *ListWebhookEventsOK) String() string {
	return fmt.Sprintf("[GET /webhooks/events/{wid}][%d] listWebhookEventsOK  %+v", 200, o.Payload)
}

func (o *ListWebhookEventsOK) GetPayload() *models.AvailableEvents {
	return o.Payload
}

func (o *ListWebhookEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.AvailableEvents)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListWebhookEventsUnauthorized creates a ListWebhookEventsUnauthorized with default headers values
func NewListWebhookEventsUnauthorized() *ListWebhookEventsUnauthorized {
	return &ListWebhookEventsUnauthorized{}
}

/*
ListWebhookEventsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListWebhookEventsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list webhook events unauthorized response has a 2xx status code
func (o *ListWebhookEventsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list webhook events unauthorized response has a 3xx status code
func (o *ListWebhookEventsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list webhook events unauthorized response has a 4xx status code
func (o *ListWebhookEventsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list webhook events unauthorized response has a 5xx status code
func (o *ListWebhookEventsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list webhook events unauthorized response a status code equal to that given
func (o *ListWebhookEventsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list webhook events unauthorized response
func (o *ListWebhookEventsUnauthorized) Code() int {
	return 401
}

func (o *ListWebhookEventsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /webhooks/events/{wid}][%d] listWebhookEventsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListWebhookEventsUnauthorized) String() string {
	return fmt.Sprintf("[GET /webhooks/events/{wid}][%d] listWebhookEventsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListWebhookEventsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListWebhookEventsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListWebhookEventsForbidden creates a ListWebhookEventsForbidden with default headers values
func NewListWebhookEventsForbidden() *ListWebhookEventsForbidden {
	return &ListWebhookEventsForbidden{}
}

/*
ListWebhookEventsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListWebhookEventsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list webhook events forbidden response has a 2xx status code
func (o *ListWebhookEventsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list webhook events forbidden response has a 3xx status code
func (o *ListWebhookEventsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list webhook events forbidden response has a 4xx status code
func (o *ListWebhookEventsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list webhook events forbidden response has a 5xx status code
func (o *ListWebhookEventsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list webhook events forbidden response a status code equal to that given
func (o *ListWebhookEventsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list webhook events forbidden response
func (o *ListWebhookEventsForbidden) Code() int {
	return 403
}

func (o *ListWebhookEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /webhooks/events/{wid}][%d] listWebhookEventsForbidden  %+v", 403, o.Payload)
}

func (o *ListWebhookEventsForbidden) String() string {
	return fmt.Sprintf("[GET /webhooks/events/{wid}][%d] listWebhookEventsForbidden  %+v", 403, o.Payload)
}

func (o *ListWebhookEventsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListWebhookEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListWebhookEventsTooManyRequests creates a ListWebhookEventsTooManyRequests with default headers values
func NewListWebhookEventsTooManyRequests() *ListWebhookEventsTooManyRequests {
	return &ListWebhookEventsTooManyRequests{}
}

/*
ListWebhookEventsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListWebhookEventsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list webhook events too many requests response has a 2xx status code
func (o *ListWebhookEventsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list webhook events too many requests response has a 3xx status code
func (o *ListWebhookEventsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list webhook events too many requests response has a 4xx status code
func (o *ListWebhookEventsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list webhook events too many requests response has a 5xx status code
func (o *ListWebhookEventsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list webhook events too many requests response a status code equal to that given
func (o *ListWebhookEventsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list webhook events too many requests response
func (o *ListWebhookEventsTooManyRequests) Code() int {
	return 429
}

func (o *ListWebhookEventsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /webhooks/events/{wid}][%d] listWebhookEventsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListWebhookEventsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /webhooks/events/{wid}][%d] listWebhookEventsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListWebhookEventsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListWebhookEventsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
