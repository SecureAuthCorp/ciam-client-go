// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateWebhookReader is a Reader for the UpdateWebhook structure.
type UpdateWebhookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateWebhookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateWebhookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateWebhookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateWebhookUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateWebhookForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateWebhookNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateWebhookUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateWebhookTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /servers/{wid}/webhooks/{webhookID}] updateWebhook", response, response.Code())
	}
}

// NewUpdateWebhookOK creates a UpdateWebhookOK with default headers values
func NewUpdateWebhookOK() *UpdateWebhookOK {
	return &UpdateWebhookOK{}
}

/*
UpdateWebhookOK describes a response with status code 200, with default header values.

Webhook response
*/
type UpdateWebhookOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.WebhookResponse
}

// IsSuccess returns true when this update webhook o k response has a 2xx status code
func (o *UpdateWebhookOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update webhook o k response has a 3xx status code
func (o *UpdateWebhookOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook o k response has a 4xx status code
func (o *UpdateWebhookOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update webhook o k response has a 5xx status code
func (o *UpdateWebhookOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook o k response a status code equal to that given
func (o *UpdateWebhookOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update webhook o k response
func (o *UpdateWebhookOK) Code() int {
	return 200
}

func (o *UpdateWebhookOK) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookOK  %+v", 200, o.Payload)
}

func (o *UpdateWebhookOK) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookOK  %+v", 200, o.Payload)
}

func (o *UpdateWebhookOK) GetPayload() *models.WebhookResponse {
	return o.Payload
}

func (o *UpdateWebhookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.WebhookResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWebhookBadRequest creates a UpdateWebhookBadRequest with default headers values
func NewUpdateWebhookBadRequest() *UpdateWebhookBadRequest {
	return &UpdateWebhookBadRequest{}
}

/*
UpdateWebhookBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateWebhookBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update webhook bad request response has a 2xx status code
func (o *UpdateWebhookBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update webhook bad request response has a 3xx status code
func (o *UpdateWebhookBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook bad request response has a 4xx status code
func (o *UpdateWebhookBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update webhook bad request response has a 5xx status code
func (o *UpdateWebhookBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook bad request response a status code equal to that given
func (o *UpdateWebhookBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update webhook bad request response
func (o *UpdateWebhookBadRequest) Code() int {
	return 400
}

func (o *UpdateWebhookBadRequest) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateWebhookBadRequest) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateWebhookBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWebhookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWebhookUnauthorized creates a UpdateWebhookUnauthorized with default headers values
func NewUpdateWebhookUnauthorized() *UpdateWebhookUnauthorized {
	return &UpdateWebhookUnauthorized{}
}

/*
UpdateWebhookUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateWebhookUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update webhook unauthorized response has a 2xx status code
func (o *UpdateWebhookUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update webhook unauthorized response has a 3xx status code
func (o *UpdateWebhookUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook unauthorized response has a 4xx status code
func (o *UpdateWebhookUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update webhook unauthorized response has a 5xx status code
func (o *UpdateWebhookUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook unauthorized response a status code equal to that given
func (o *UpdateWebhookUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update webhook unauthorized response
func (o *UpdateWebhookUnauthorized) Code() int {
	return 401
}

func (o *UpdateWebhookUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateWebhookUnauthorized) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateWebhookUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWebhookUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWebhookForbidden creates a UpdateWebhookForbidden with default headers values
func NewUpdateWebhookForbidden() *UpdateWebhookForbidden {
	return &UpdateWebhookForbidden{}
}

/*
UpdateWebhookForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateWebhookForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update webhook forbidden response has a 2xx status code
func (o *UpdateWebhookForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update webhook forbidden response has a 3xx status code
func (o *UpdateWebhookForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook forbidden response has a 4xx status code
func (o *UpdateWebhookForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update webhook forbidden response has a 5xx status code
func (o *UpdateWebhookForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook forbidden response a status code equal to that given
func (o *UpdateWebhookForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update webhook forbidden response
func (o *UpdateWebhookForbidden) Code() int {
	return 403
}

func (o *UpdateWebhookForbidden) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookForbidden  %+v", 403, o.Payload)
}

func (o *UpdateWebhookForbidden) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookForbidden  %+v", 403, o.Payload)
}

func (o *UpdateWebhookForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWebhookForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWebhookNotFound creates a UpdateWebhookNotFound with default headers values
func NewUpdateWebhookNotFound() *UpdateWebhookNotFound {
	return &UpdateWebhookNotFound{}
}

/*
UpdateWebhookNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateWebhookNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update webhook not found response has a 2xx status code
func (o *UpdateWebhookNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update webhook not found response has a 3xx status code
func (o *UpdateWebhookNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook not found response has a 4xx status code
func (o *UpdateWebhookNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update webhook not found response has a 5xx status code
func (o *UpdateWebhookNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook not found response a status code equal to that given
func (o *UpdateWebhookNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update webhook not found response
func (o *UpdateWebhookNotFound) Code() int {
	return 404
}

func (o *UpdateWebhookNotFound) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookNotFound  %+v", 404, o.Payload)
}

func (o *UpdateWebhookNotFound) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookNotFound  %+v", 404, o.Payload)
}

func (o *UpdateWebhookNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWebhookNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWebhookUnprocessableEntity creates a UpdateWebhookUnprocessableEntity with default headers values
func NewUpdateWebhookUnprocessableEntity() *UpdateWebhookUnprocessableEntity {
	return &UpdateWebhookUnprocessableEntity{}
}

/*
UpdateWebhookUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateWebhookUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update webhook unprocessable entity response has a 2xx status code
func (o *UpdateWebhookUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update webhook unprocessable entity response has a 3xx status code
func (o *UpdateWebhookUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook unprocessable entity response has a 4xx status code
func (o *UpdateWebhookUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update webhook unprocessable entity response has a 5xx status code
func (o *UpdateWebhookUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook unprocessable entity response a status code equal to that given
func (o *UpdateWebhookUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update webhook unprocessable entity response
func (o *UpdateWebhookUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateWebhookUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateWebhookUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateWebhookUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWebhookUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWebhookTooManyRequests creates a UpdateWebhookTooManyRequests with default headers values
func NewUpdateWebhookTooManyRequests() *UpdateWebhookTooManyRequests {
	return &UpdateWebhookTooManyRequests{}
}

/*
UpdateWebhookTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateWebhookTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update webhook too many requests response has a 2xx status code
func (o *UpdateWebhookTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update webhook too many requests response has a 3xx status code
func (o *UpdateWebhookTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update webhook too many requests response has a 4xx status code
func (o *UpdateWebhookTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update webhook too many requests response has a 5xx status code
func (o *UpdateWebhookTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update webhook too many requests response a status code equal to that given
func (o *UpdateWebhookTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update webhook too many requests response
func (o *UpdateWebhookTooManyRequests) Code() int {
	return 429
}

func (o *UpdateWebhookTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateWebhookTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/webhooks/{webhookID}][%d] updateWebhookTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateWebhookTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateWebhookTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
