// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetOktaV2IDPReader is a Reader for the GetOktaV2IDP structure.
type GetOktaV2IDPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOktaV2IDPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOktaV2IDPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOktaV2IDPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOktaV2IDPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOktaV2IDPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOktaV2IDPTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/idps/okta_v2/{iid}] getOktaV2IDP", response, response.Code())
	}
}

// NewGetOktaV2IDPOK creates a GetOktaV2IDPOK with default headers values
func NewGetOktaV2IDPOK() *GetOktaV2IDPOK {
	return &GetOktaV2IDPOK{}
}

/*
GetOktaV2IDPOK describes a response with status code 200, with default header values.

OktaV2IDP
*/
type GetOktaV2IDPOK struct {
	Payload *models.OktaV2IDP
}

// IsSuccess returns true when this get okta v2 Id p o k response has a 2xx status code
func (o *GetOktaV2IDPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get okta v2 Id p o k response has a 3xx status code
func (o *GetOktaV2IDPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta v2 Id p o k response has a 4xx status code
func (o *GetOktaV2IDPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get okta v2 Id p o k response has a 5xx status code
func (o *GetOktaV2IDPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta v2 Id p o k response a status code equal to that given
func (o *GetOktaV2IDPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get okta v2 Id p o k response
func (o *GetOktaV2IDPOK) Code() int {
	return 200
}

func (o *GetOktaV2IDPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPOK %s", 200, payload)
}

func (o *GetOktaV2IDPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPOK %s", 200, payload)
}

func (o *GetOktaV2IDPOK) GetPayload() *models.OktaV2IDP {
	return o.Payload
}

func (o *GetOktaV2IDPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OktaV2IDP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaV2IDPUnauthorized creates a GetOktaV2IDPUnauthorized with default headers values
func NewGetOktaV2IDPUnauthorized() *GetOktaV2IDPUnauthorized {
	return &GetOktaV2IDPUnauthorized{}
}

/*
GetOktaV2IDPUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOktaV2IDPUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta v2 Id p unauthorized response has a 2xx status code
func (o *GetOktaV2IDPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta v2 Id p unauthorized response has a 3xx status code
func (o *GetOktaV2IDPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta v2 Id p unauthorized response has a 4xx status code
func (o *GetOktaV2IDPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta v2 Id p unauthorized response has a 5xx status code
func (o *GetOktaV2IDPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta v2 Id p unauthorized response a status code equal to that given
func (o *GetOktaV2IDPUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get okta v2 Id p unauthorized response
func (o *GetOktaV2IDPUnauthorized) Code() int {
	return 401
}

func (o *GetOktaV2IDPUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPUnauthorized %s", 401, payload)
}

func (o *GetOktaV2IDPUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPUnauthorized %s", 401, payload)
}

func (o *GetOktaV2IDPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaV2IDPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaV2IDPForbidden creates a GetOktaV2IDPForbidden with default headers values
func NewGetOktaV2IDPForbidden() *GetOktaV2IDPForbidden {
	return &GetOktaV2IDPForbidden{}
}

/*
GetOktaV2IDPForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOktaV2IDPForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta v2 Id p forbidden response has a 2xx status code
func (o *GetOktaV2IDPForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta v2 Id p forbidden response has a 3xx status code
func (o *GetOktaV2IDPForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta v2 Id p forbidden response has a 4xx status code
func (o *GetOktaV2IDPForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta v2 Id p forbidden response has a 5xx status code
func (o *GetOktaV2IDPForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta v2 Id p forbidden response a status code equal to that given
func (o *GetOktaV2IDPForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get okta v2 Id p forbidden response
func (o *GetOktaV2IDPForbidden) Code() int {
	return 403
}

func (o *GetOktaV2IDPForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPForbidden %s", 403, payload)
}

func (o *GetOktaV2IDPForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPForbidden %s", 403, payload)
}

func (o *GetOktaV2IDPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaV2IDPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaV2IDPNotFound creates a GetOktaV2IDPNotFound with default headers values
func NewGetOktaV2IDPNotFound() *GetOktaV2IDPNotFound {
	return &GetOktaV2IDPNotFound{}
}

/*
GetOktaV2IDPNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetOktaV2IDPNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta v2 Id p not found response has a 2xx status code
func (o *GetOktaV2IDPNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta v2 Id p not found response has a 3xx status code
func (o *GetOktaV2IDPNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta v2 Id p not found response has a 4xx status code
func (o *GetOktaV2IDPNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta v2 Id p not found response has a 5xx status code
func (o *GetOktaV2IDPNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta v2 Id p not found response a status code equal to that given
func (o *GetOktaV2IDPNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get okta v2 Id p not found response
func (o *GetOktaV2IDPNotFound) Code() int {
	return 404
}

func (o *GetOktaV2IDPNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPNotFound %s", 404, payload)
}

func (o *GetOktaV2IDPNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPNotFound %s", 404, payload)
}

func (o *GetOktaV2IDPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaV2IDPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaV2IDPTooManyRequests creates a GetOktaV2IDPTooManyRequests with default headers values
func NewGetOktaV2IDPTooManyRequests() *GetOktaV2IDPTooManyRequests {
	return &GetOktaV2IDPTooManyRequests{}
}

/*
GetOktaV2IDPTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetOktaV2IDPTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta v2 Id p too many requests response has a 2xx status code
func (o *GetOktaV2IDPTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta v2 Id p too many requests response has a 3xx status code
func (o *GetOktaV2IDPTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta v2 Id p too many requests response has a 4xx status code
func (o *GetOktaV2IDPTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta v2 Id p too many requests response has a 5xx status code
func (o *GetOktaV2IDPTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta v2 Id p too many requests response a status code equal to that given
func (o *GetOktaV2IDPTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get okta v2 Id p too many requests response
func (o *GetOktaV2IDPTooManyRequests) Code() int {
	return 429
}

func (o *GetOktaV2IDPTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPTooManyRequests %s", 429, payload)
}

func (o *GetOktaV2IDPTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta_v2/{iid}][%d] getOktaV2IdPTooManyRequests %s", 429, payload)
}

func (o *GetOktaV2IDPTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaV2IDPTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
