// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateOAuth2IDPReader is a Reader for the UpdateOAuth2IDP structure.
type UpdateOAuth2IDPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOAuth2IDPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOAuth2IDPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateOAuth2IDPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateOAuth2IDPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateOAuth2IDPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateOAuth2IDPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateOAuth2IDPUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateOAuth2IDPTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /servers/{wid}/idps/oauth2/{iid}] updateOAuth2IDP", response, response.Code())
	}
}

// NewUpdateOAuth2IDPOK creates a UpdateOAuth2IDPOK with default headers values
func NewUpdateOAuth2IDPOK() *UpdateOAuth2IDPOK {
	return &UpdateOAuth2IDPOK{}
}

/*
UpdateOAuth2IDPOK describes a response with status code 200, with default header values.

OAuth2IDP
*/
type UpdateOAuth2IDPOK struct {
	Payload *models.OAuth2IDP
}

// IsSuccess returns true when this update o auth2 Id p o k response has a 2xx status code
func (o *UpdateOAuth2IDPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update o auth2 Id p o k response has a 3xx status code
func (o *UpdateOAuth2IDPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update o auth2 Id p o k response has a 4xx status code
func (o *UpdateOAuth2IDPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update o auth2 Id p o k response has a 5xx status code
func (o *UpdateOAuth2IDPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update o auth2 Id p o k response a status code equal to that given
func (o *UpdateOAuth2IDPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update o auth2 Id p o k response
func (o *UpdateOAuth2IDPOK) Code() int {
	return 200
}

func (o *UpdateOAuth2IDPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPOK %s", 200, payload)
}

func (o *UpdateOAuth2IDPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPOK %s", 200, payload)
}

func (o *UpdateOAuth2IDPOK) GetPayload() *models.OAuth2IDP {
	return o.Payload
}

func (o *UpdateOAuth2IDPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuth2IDP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOAuth2IDPBadRequest creates a UpdateOAuth2IDPBadRequest with default headers values
func NewUpdateOAuth2IDPBadRequest() *UpdateOAuth2IDPBadRequest {
	return &UpdateOAuth2IDPBadRequest{}
}

/*
UpdateOAuth2IDPBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateOAuth2IDPBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update o auth2 Id p bad request response has a 2xx status code
func (o *UpdateOAuth2IDPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update o auth2 Id p bad request response has a 3xx status code
func (o *UpdateOAuth2IDPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update o auth2 Id p bad request response has a 4xx status code
func (o *UpdateOAuth2IDPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update o auth2 Id p bad request response has a 5xx status code
func (o *UpdateOAuth2IDPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update o auth2 Id p bad request response a status code equal to that given
func (o *UpdateOAuth2IDPBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update o auth2 Id p bad request response
func (o *UpdateOAuth2IDPBadRequest) Code() int {
	return 400
}

func (o *UpdateOAuth2IDPBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPBadRequest %s", 400, payload)
}

func (o *UpdateOAuth2IDPBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPBadRequest %s", 400, payload)
}

func (o *UpdateOAuth2IDPBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOAuth2IDPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOAuth2IDPUnauthorized creates a UpdateOAuth2IDPUnauthorized with default headers values
func NewUpdateOAuth2IDPUnauthorized() *UpdateOAuth2IDPUnauthorized {
	return &UpdateOAuth2IDPUnauthorized{}
}

/*
UpdateOAuth2IDPUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateOAuth2IDPUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update o auth2 Id p unauthorized response has a 2xx status code
func (o *UpdateOAuth2IDPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update o auth2 Id p unauthorized response has a 3xx status code
func (o *UpdateOAuth2IDPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update o auth2 Id p unauthorized response has a 4xx status code
func (o *UpdateOAuth2IDPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update o auth2 Id p unauthorized response has a 5xx status code
func (o *UpdateOAuth2IDPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update o auth2 Id p unauthorized response a status code equal to that given
func (o *UpdateOAuth2IDPUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update o auth2 Id p unauthorized response
func (o *UpdateOAuth2IDPUnauthorized) Code() int {
	return 401
}

func (o *UpdateOAuth2IDPUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPUnauthorized %s", 401, payload)
}

func (o *UpdateOAuth2IDPUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPUnauthorized %s", 401, payload)
}

func (o *UpdateOAuth2IDPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOAuth2IDPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOAuth2IDPForbidden creates a UpdateOAuth2IDPForbidden with default headers values
func NewUpdateOAuth2IDPForbidden() *UpdateOAuth2IDPForbidden {
	return &UpdateOAuth2IDPForbidden{}
}

/*
UpdateOAuth2IDPForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateOAuth2IDPForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update o auth2 Id p forbidden response has a 2xx status code
func (o *UpdateOAuth2IDPForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update o auth2 Id p forbidden response has a 3xx status code
func (o *UpdateOAuth2IDPForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update o auth2 Id p forbidden response has a 4xx status code
func (o *UpdateOAuth2IDPForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update o auth2 Id p forbidden response has a 5xx status code
func (o *UpdateOAuth2IDPForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update o auth2 Id p forbidden response a status code equal to that given
func (o *UpdateOAuth2IDPForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update o auth2 Id p forbidden response
func (o *UpdateOAuth2IDPForbidden) Code() int {
	return 403
}

func (o *UpdateOAuth2IDPForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPForbidden %s", 403, payload)
}

func (o *UpdateOAuth2IDPForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPForbidden %s", 403, payload)
}

func (o *UpdateOAuth2IDPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOAuth2IDPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOAuth2IDPNotFound creates a UpdateOAuth2IDPNotFound with default headers values
func NewUpdateOAuth2IDPNotFound() *UpdateOAuth2IDPNotFound {
	return &UpdateOAuth2IDPNotFound{}
}

/*
UpdateOAuth2IDPNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateOAuth2IDPNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update o auth2 Id p not found response has a 2xx status code
func (o *UpdateOAuth2IDPNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update o auth2 Id p not found response has a 3xx status code
func (o *UpdateOAuth2IDPNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update o auth2 Id p not found response has a 4xx status code
func (o *UpdateOAuth2IDPNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update o auth2 Id p not found response has a 5xx status code
func (o *UpdateOAuth2IDPNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update o auth2 Id p not found response a status code equal to that given
func (o *UpdateOAuth2IDPNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update o auth2 Id p not found response
func (o *UpdateOAuth2IDPNotFound) Code() int {
	return 404
}

func (o *UpdateOAuth2IDPNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPNotFound %s", 404, payload)
}

func (o *UpdateOAuth2IDPNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPNotFound %s", 404, payload)
}

func (o *UpdateOAuth2IDPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOAuth2IDPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOAuth2IDPUnprocessableEntity creates a UpdateOAuth2IDPUnprocessableEntity with default headers values
func NewUpdateOAuth2IDPUnprocessableEntity() *UpdateOAuth2IDPUnprocessableEntity {
	return &UpdateOAuth2IDPUnprocessableEntity{}
}

/*
UpdateOAuth2IDPUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateOAuth2IDPUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update o auth2 Id p unprocessable entity response has a 2xx status code
func (o *UpdateOAuth2IDPUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update o auth2 Id p unprocessable entity response has a 3xx status code
func (o *UpdateOAuth2IDPUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update o auth2 Id p unprocessable entity response has a 4xx status code
func (o *UpdateOAuth2IDPUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update o auth2 Id p unprocessable entity response has a 5xx status code
func (o *UpdateOAuth2IDPUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update o auth2 Id p unprocessable entity response a status code equal to that given
func (o *UpdateOAuth2IDPUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update o auth2 Id p unprocessable entity response
func (o *UpdateOAuth2IDPUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateOAuth2IDPUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPUnprocessableEntity %s", 422, payload)
}

func (o *UpdateOAuth2IDPUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPUnprocessableEntity %s", 422, payload)
}

func (o *UpdateOAuth2IDPUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOAuth2IDPUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOAuth2IDPTooManyRequests creates a UpdateOAuth2IDPTooManyRequests with default headers values
func NewUpdateOAuth2IDPTooManyRequests() *UpdateOAuth2IDPTooManyRequests {
	return &UpdateOAuth2IDPTooManyRequests{}
}

/*
UpdateOAuth2IDPTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateOAuth2IDPTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update o auth2 Id p too many requests response has a 2xx status code
func (o *UpdateOAuth2IDPTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update o auth2 Id p too many requests response has a 3xx status code
func (o *UpdateOAuth2IDPTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update o auth2 Id p too many requests response has a 4xx status code
func (o *UpdateOAuth2IDPTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update o auth2 Id p too many requests response has a 5xx status code
func (o *UpdateOAuth2IDPTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update o auth2 Id p too many requests response a status code equal to that given
func (o *UpdateOAuth2IDPTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update o auth2 Id p too many requests response
func (o *UpdateOAuth2IDPTooManyRequests) Code() int {
	return 429
}

func (o *UpdateOAuth2IDPTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPTooManyRequests %s", 429, payload)
}

func (o *UpdateOAuth2IDPTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/idps/oauth2/{iid}][%d] updateOAuth2IdPTooManyRequests %s", 429, payload)
}

func (o *UpdateOAuth2IDPTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOAuth2IDPTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
