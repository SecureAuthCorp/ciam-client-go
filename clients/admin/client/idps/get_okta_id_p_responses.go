// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetOktaIDPReader is a Reader for the GetOktaIDP structure.
type GetOktaIDPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOktaIDPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOktaIDPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOktaIDPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOktaIDPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOktaIDPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOktaIDPTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/idps/okta/{iid}] getOktaIDP", response, response.Code())
	}
}

// NewGetOktaIDPOK creates a GetOktaIDPOK with default headers values
func NewGetOktaIDPOK() *GetOktaIDPOK {
	return &GetOktaIDPOK{}
}

/*
GetOktaIDPOK describes a response with status code 200, with default header values.

OktaIDP
*/
type GetOktaIDPOK struct {
	Payload *models.OktaIDP
}

// IsSuccess returns true when this get okta Id p o k response has a 2xx status code
func (o *GetOktaIDPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get okta Id p o k response has a 3xx status code
func (o *GetOktaIDPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p o k response has a 4xx status code
func (o *GetOktaIDPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get okta Id p o k response has a 5xx status code
func (o *GetOktaIDPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p o k response a status code equal to that given
func (o *GetOktaIDPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get okta Id p o k response
func (o *GetOktaIDPOK) Code() int {
	return 200
}

func (o *GetOktaIDPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPOK %s", 200, payload)
}

func (o *GetOktaIDPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPOK %s", 200, payload)
}

func (o *GetOktaIDPOK) GetPayload() *models.OktaIDP {
	return o.Payload
}

func (o *GetOktaIDPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OktaIDP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPUnauthorized creates a GetOktaIDPUnauthorized with default headers values
func NewGetOktaIDPUnauthorized() *GetOktaIDPUnauthorized {
	return &GetOktaIDPUnauthorized{}
}

/*
GetOktaIDPUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOktaIDPUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p unauthorized response has a 2xx status code
func (o *GetOktaIDPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p unauthorized response has a 3xx status code
func (o *GetOktaIDPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p unauthorized response has a 4xx status code
func (o *GetOktaIDPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p unauthorized response has a 5xx status code
func (o *GetOktaIDPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p unauthorized response a status code equal to that given
func (o *GetOktaIDPUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get okta Id p unauthorized response
func (o *GetOktaIDPUnauthorized) Code() int {
	return 401
}

func (o *GetOktaIDPUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPUnauthorized %s", 401, payload)
}

func (o *GetOktaIDPUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPUnauthorized %s", 401, payload)
}

func (o *GetOktaIDPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPForbidden creates a GetOktaIDPForbidden with default headers values
func NewGetOktaIDPForbidden() *GetOktaIDPForbidden {
	return &GetOktaIDPForbidden{}
}

/*
GetOktaIDPForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOktaIDPForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p forbidden response has a 2xx status code
func (o *GetOktaIDPForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p forbidden response has a 3xx status code
func (o *GetOktaIDPForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p forbidden response has a 4xx status code
func (o *GetOktaIDPForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p forbidden response has a 5xx status code
func (o *GetOktaIDPForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p forbidden response a status code equal to that given
func (o *GetOktaIDPForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get okta Id p forbidden response
func (o *GetOktaIDPForbidden) Code() int {
	return 403
}

func (o *GetOktaIDPForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPForbidden %s", 403, payload)
}

func (o *GetOktaIDPForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPForbidden %s", 403, payload)
}

func (o *GetOktaIDPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPNotFound creates a GetOktaIDPNotFound with default headers values
func NewGetOktaIDPNotFound() *GetOktaIDPNotFound {
	return &GetOktaIDPNotFound{}
}

/*
GetOktaIDPNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetOktaIDPNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p not found response has a 2xx status code
func (o *GetOktaIDPNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p not found response has a 3xx status code
func (o *GetOktaIDPNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p not found response has a 4xx status code
func (o *GetOktaIDPNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p not found response has a 5xx status code
func (o *GetOktaIDPNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p not found response a status code equal to that given
func (o *GetOktaIDPNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get okta Id p not found response
func (o *GetOktaIDPNotFound) Code() int {
	return 404
}

func (o *GetOktaIDPNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPNotFound %s", 404, payload)
}

func (o *GetOktaIDPNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPNotFound %s", 404, payload)
}

func (o *GetOktaIDPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPTooManyRequests creates a GetOktaIDPTooManyRequests with default headers values
func NewGetOktaIDPTooManyRequests() *GetOktaIDPTooManyRequests {
	return &GetOktaIDPTooManyRequests{}
}

/*
GetOktaIDPTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetOktaIDPTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p too many requests response has a 2xx status code
func (o *GetOktaIDPTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p too many requests response has a 3xx status code
func (o *GetOktaIDPTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p too many requests response has a 4xx status code
func (o *GetOktaIDPTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p too many requests response has a 5xx status code
func (o *GetOktaIDPTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p too many requests response a status code equal to that given
func (o *GetOktaIDPTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get okta Id p too many requests response
func (o *GetOktaIDPTooManyRequests) Code() int {
	return 429
}

func (o *GetOktaIDPTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPTooManyRequests %s", 429, payload)
}

func (o *GetOktaIDPTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}][%d] getOktaIdPTooManyRequests %s", 429, payload)
}

func (o *GetOktaIDPTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
