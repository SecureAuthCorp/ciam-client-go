// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetCognitoIDPReader is a Reader for the GetCognitoIDP structure.
type GetCognitoIDPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCognitoIDPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCognitoIDPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCognitoIDPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCognitoIDPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCognitoIDPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCognitoIDPTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/idps/cognito/{iid}] getCognitoIDP", response, response.Code())
	}
}

// NewGetCognitoIDPOK creates a GetCognitoIDPOK with default headers values
func NewGetCognitoIDPOK() *GetCognitoIDPOK {
	return &GetCognitoIDPOK{}
}

/*
GetCognitoIDPOK describes a response with status code 200, with default header values.

CognitoIDP
*/
type GetCognitoIDPOK struct {
	Payload *models.CognitoIDP
}

// IsSuccess returns true when this get cognito Id p o k response has a 2xx status code
func (o *GetCognitoIDPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cognito Id p o k response has a 3xx status code
func (o *GetCognitoIDPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cognito Id p o k response has a 4xx status code
func (o *GetCognitoIDPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cognito Id p o k response has a 5xx status code
func (o *GetCognitoIDPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get cognito Id p o k response a status code equal to that given
func (o *GetCognitoIDPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get cognito Id p o k response
func (o *GetCognitoIDPOK) Code() int {
	return 200
}

func (o *GetCognitoIDPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPOK %s", 200, payload)
}

func (o *GetCognitoIDPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPOK %s", 200, payload)
}

func (o *GetCognitoIDPOK) GetPayload() *models.CognitoIDP {
	return o.Payload
}

func (o *GetCognitoIDPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CognitoIDP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCognitoIDPUnauthorized creates a GetCognitoIDPUnauthorized with default headers values
func NewGetCognitoIDPUnauthorized() *GetCognitoIDPUnauthorized {
	return &GetCognitoIDPUnauthorized{}
}

/*
GetCognitoIDPUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCognitoIDPUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get cognito Id p unauthorized response has a 2xx status code
func (o *GetCognitoIDPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cognito Id p unauthorized response has a 3xx status code
func (o *GetCognitoIDPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cognito Id p unauthorized response has a 4xx status code
func (o *GetCognitoIDPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cognito Id p unauthorized response has a 5xx status code
func (o *GetCognitoIDPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get cognito Id p unauthorized response a status code equal to that given
func (o *GetCognitoIDPUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get cognito Id p unauthorized response
func (o *GetCognitoIDPUnauthorized) Code() int {
	return 401
}

func (o *GetCognitoIDPUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPUnauthorized %s", 401, payload)
}

func (o *GetCognitoIDPUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPUnauthorized %s", 401, payload)
}

func (o *GetCognitoIDPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCognitoIDPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCognitoIDPForbidden creates a GetCognitoIDPForbidden with default headers values
func NewGetCognitoIDPForbidden() *GetCognitoIDPForbidden {
	return &GetCognitoIDPForbidden{}
}

/*
GetCognitoIDPForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCognitoIDPForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get cognito Id p forbidden response has a 2xx status code
func (o *GetCognitoIDPForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cognito Id p forbidden response has a 3xx status code
func (o *GetCognitoIDPForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cognito Id p forbidden response has a 4xx status code
func (o *GetCognitoIDPForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cognito Id p forbidden response has a 5xx status code
func (o *GetCognitoIDPForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get cognito Id p forbidden response a status code equal to that given
func (o *GetCognitoIDPForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get cognito Id p forbidden response
func (o *GetCognitoIDPForbidden) Code() int {
	return 403
}

func (o *GetCognitoIDPForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPForbidden %s", 403, payload)
}

func (o *GetCognitoIDPForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPForbidden %s", 403, payload)
}

func (o *GetCognitoIDPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCognitoIDPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCognitoIDPNotFound creates a GetCognitoIDPNotFound with default headers values
func NewGetCognitoIDPNotFound() *GetCognitoIDPNotFound {
	return &GetCognitoIDPNotFound{}
}

/*
GetCognitoIDPNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetCognitoIDPNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get cognito Id p not found response has a 2xx status code
func (o *GetCognitoIDPNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cognito Id p not found response has a 3xx status code
func (o *GetCognitoIDPNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cognito Id p not found response has a 4xx status code
func (o *GetCognitoIDPNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cognito Id p not found response has a 5xx status code
func (o *GetCognitoIDPNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get cognito Id p not found response a status code equal to that given
func (o *GetCognitoIDPNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get cognito Id p not found response
func (o *GetCognitoIDPNotFound) Code() int {
	return 404
}

func (o *GetCognitoIDPNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPNotFound %s", 404, payload)
}

func (o *GetCognitoIDPNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPNotFound %s", 404, payload)
}

func (o *GetCognitoIDPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCognitoIDPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCognitoIDPTooManyRequests creates a GetCognitoIDPTooManyRequests with default headers values
func NewGetCognitoIDPTooManyRequests() *GetCognitoIDPTooManyRequests {
	return &GetCognitoIDPTooManyRequests{}
}

/*
GetCognitoIDPTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetCognitoIDPTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get cognito Id p too many requests response has a 2xx status code
func (o *GetCognitoIDPTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cognito Id p too many requests response has a 3xx status code
func (o *GetCognitoIDPTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cognito Id p too many requests response has a 4xx status code
func (o *GetCognitoIDPTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cognito Id p too many requests response has a 5xx status code
func (o *GetCognitoIDPTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get cognito Id p too many requests response a status code equal to that given
func (o *GetCognitoIDPTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get cognito Id p too many requests response
func (o *GetCognitoIDPTooManyRequests) Code() int {
	return 429
}

func (o *GetCognitoIDPTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPTooManyRequests %s", 429, payload)
}

func (o *GetCognitoIDPTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/cognito/{iid}][%d] getCognitoIdPTooManyRequests %s", 429, payload)
}

func (o *GetCognitoIDPTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCognitoIDPTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
