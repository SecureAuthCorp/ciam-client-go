// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetOktaIDPClientReader is a Reader for the GetOktaIDPClient structure.
type GetOktaIDPClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOktaIDPClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOktaIDPClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOktaIDPClientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOktaIDPClientUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOktaIDPClientForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOktaIDPClientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOktaIDPClientTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/idps/okta/{iid}/client] getOktaIDPClient", response, response.Code())
	}
}

// NewGetOktaIDPClientOK creates a GetOktaIDPClientOK with default headers values
func NewGetOktaIDPClientOK() *GetOktaIDPClientOK {
	return &GetOktaIDPClientOK{}
}

/*
GetOktaIDPClientOK describes a response with status code 200, with default header values.

Client
*/
type GetOktaIDPClientOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ClientAdminResponse
}

// IsSuccess returns true when this get okta Id p client o k response has a 2xx status code
func (o *GetOktaIDPClientOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get okta Id p client o k response has a 3xx status code
func (o *GetOktaIDPClientOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p client o k response has a 4xx status code
func (o *GetOktaIDPClientOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get okta Id p client o k response has a 5xx status code
func (o *GetOktaIDPClientOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p client o k response a status code equal to that given
func (o *GetOktaIDPClientOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get okta Id p client o k response
func (o *GetOktaIDPClientOK) Code() int {
	return 200
}

func (o *GetOktaIDPClientOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientOK  %+v", 200, o.Payload)
}

func (o *GetOktaIDPClientOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientOK  %+v", 200, o.Payload)
}

func (o *GetOktaIDPClientOK) GetPayload() *models.ClientAdminResponse {
	return o.Payload
}

func (o *GetOktaIDPClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ClientAdminResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPClientBadRequest creates a GetOktaIDPClientBadRequest with default headers values
func NewGetOktaIDPClientBadRequest() *GetOktaIDPClientBadRequest {
	return &GetOktaIDPClientBadRequest{}
}

/*
GetOktaIDPClientBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetOktaIDPClientBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p client bad request response has a 2xx status code
func (o *GetOktaIDPClientBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p client bad request response has a 3xx status code
func (o *GetOktaIDPClientBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p client bad request response has a 4xx status code
func (o *GetOktaIDPClientBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p client bad request response has a 5xx status code
func (o *GetOktaIDPClientBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p client bad request response a status code equal to that given
func (o *GetOktaIDPClientBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get okta Id p client bad request response
func (o *GetOktaIDPClientBadRequest) Code() int {
	return 400
}

func (o *GetOktaIDPClientBadRequest) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientBadRequest  %+v", 400, o.Payload)
}

func (o *GetOktaIDPClientBadRequest) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientBadRequest  %+v", 400, o.Payload)
}

func (o *GetOktaIDPClientBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPClientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPClientUnauthorized creates a GetOktaIDPClientUnauthorized with default headers values
func NewGetOktaIDPClientUnauthorized() *GetOktaIDPClientUnauthorized {
	return &GetOktaIDPClientUnauthorized{}
}

/*
GetOktaIDPClientUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOktaIDPClientUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p client unauthorized response has a 2xx status code
func (o *GetOktaIDPClientUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p client unauthorized response has a 3xx status code
func (o *GetOktaIDPClientUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p client unauthorized response has a 4xx status code
func (o *GetOktaIDPClientUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p client unauthorized response has a 5xx status code
func (o *GetOktaIDPClientUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p client unauthorized response a status code equal to that given
func (o *GetOktaIDPClientUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get okta Id p client unauthorized response
func (o *GetOktaIDPClientUnauthorized) Code() int {
	return 401
}

func (o *GetOktaIDPClientUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOktaIDPClientUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOktaIDPClientUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPClientUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPClientForbidden creates a GetOktaIDPClientForbidden with default headers values
func NewGetOktaIDPClientForbidden() *GetOktaIDPClientForbidden {
	return &GetOktaIDPClientForbidden{}
}

/*
GetOktaIDPClientForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOktaIDPClientForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p client forbidden response has a 2xx status code
func (o *GetOktaIDPClientForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p client forbidden response has a 3xx status code
func (o *GetOktaIDPClientForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p client forbidden response has a 4xx status code
func (o *GetOktaIDPClientForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p client forbidden response has a 5xx status code
func (o *GetOktaIDPClientForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p client forbidden response a status code equal to that given
func (o *GetOktaIDPClientForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get okta Id p client forbidden response
func (o *GetOktaIDPClientForbidden) Code() int {
	return 403
}

func (o *GetOktaIDPClientForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientForbidden  %+v", 403, o.Payload)
}

func (o *GetOktaIDPClientForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientForbidden  %+v", 403, o.Payload)
}

func (o *GetOktaIDPClientForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPClientForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPClientNotFound creates a GetOktaIDPClientNotFound with default headers values
func NewGetOktaIDPClientNotFound() *GetOktaIDPClientNotFound {
	return &GetOktaIDPClientNotFound{}
}

/*
GetOktaIDPClientNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetOktaIDPClientNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p client not found response has a 2xx status code
func (o *GetOktaIDPClientNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p client not found response has a 3xx status code
func (o *GetOktaIDPClientNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p client not found response has a 4xx status code
func (o *GetOktaIDPClientNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p client not found response has a 5xx status code
func (o *GetOktaIDPClientNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p client not found response a status code equal to that given
func (o *GetOktaIDPClientNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get okta Id p client not found response
func (o *GetOktaIDPClientNotFound) Code() int {
	return 404
}

func (o *GetOktaIDPClientNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientNotFound  %+v", 404, o.Payload)
}

func (o *GetOktaIDPClientNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientNotFound  %+v", 404, o.Payload)
}

func (o *GetOktaIDPClientNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPClientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOktaIDPClientTooManyRequests creates a GetOktaIDPClientTooManyRequests with default headers values
func NewGetOktaIDPClientTooManyRequests() *GetOktaIDPClientTooManyRequests {
	return &GetOktaIDPClientTooManyRequests{}
}

/*
GetOktaIDPClientTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetOktaIDPClientTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get okta Id p client too many requests response has a 2xx status code
func (o *GetOktaIDPClientTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get okta Id p client too many requests response has a 3xx status code
func (o *GetOktaIDPClientTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get okta Id p client too many requests response has a 4xx status code
func (o *GetOktaIDPClientTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get okta Id p client too many requests response has a 5xx status code
func (o *GetOktaIDPClientTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get okta Id p client too many requests response a status code equal to that given
func (o *GetOktaIDPClientTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get okta Id p client too many requests response
func (o *GetOktaIDPClientTooManyRequests) Code() int {
	return 429
}

func (o *GetOktaIDPClientTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOktaIDPClientTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/okta/{iid}/client][%d] getOktaIdPClientTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOktaIDPClientTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOktaIDPClientTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
