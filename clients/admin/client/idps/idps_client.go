// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new idps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new idps API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new idps API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for idps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAppleIDP(params *CreateAppleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAppleIDPCreated, error)

	CreateAuth0IDP(params *CreateAuth0IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuth0IDPCreated, error)

	CreateAzureB2CIDP(params *CreateAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureB2CIDPCreated, error)

	CreateAzureIDP(params *CreateAzureIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureIDPCreated, error)

	CreateCognitoIDP(params *CreateCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCognitoIDPCreated, error)

	CreateCustomIDP(params *CreateCustomIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomIDPCreated, error)

	CreateExternalIDP(params *CreateExternalIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateExternalIDPCreated, error)

	CreateGithubIDP(params *CreateGithubIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGithubIDPCreated, error)

	CreateGoogleIDP(params *CreateGoogleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGoogleIDPCreated, error)

	CreateGoogleWorkspaceIDP(params *CreateGoogleWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGoogleWorkspaceIDPCreated, error)

	CreateIdentityPoolIDP(params *CreateIdentityPoolIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIdentityPoolIDPCreated, error)

	CreateIntelliTrustIDP(params *CreateIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIntelliTrustIDPCreated, error)

	CreateLinkedInIDP(params *CreateLinkedInIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLinkedInIDPCreated, error)

	CreateMetaIDP(params *CreateMetaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMetaIDPCreated, error)

	CreateMicrosoftIDP(params *CreateMicrosoftIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMicrosoftIDPCreated, error)

	CreateOIDCIDP(params *CreateOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOIDCIDPCreated, error)

	CreateOktaIDP(params *CreateOktaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOktaIDPCreated, error)

	CreateOrganizationIDP(params *CreateOrganizationIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationIDPCreated, error)

	CreateSAMLIDP(params *CreateSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSAMLIDPCreated, error)

	CreateSAMLV2IDP(params *CreateSAMLV2IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSAMLV2IDPCreated, error)

	CreateStaticIDP(params *CreateStaticIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStaticIDPCreated, error)

	CreateWorkspaceIDP(params *CreateWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWorkspaceIDPCreated, error)

	CreateXIDP(params *CreateXIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateXIDPCreated, error)

	DeleteIDP(params *DeleteIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIDPNoContent, error)

	GetAppleIDP(params *GetAppleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAppleIDPOK, error)

	GetAppleIDPClient(params *GetAppleIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAppleIDPClientOK, error)

	GetAuth0IDP(params *GetAuth0IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuth0IDPOK, error)

	GetAuth0IDPClient(params *GetAuth0IDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuth0IDPClientOK, error)

	GetAzureB2CIDP(params *GetAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureB2CIDPOK, error)

	GetAzureB2CIDPClient(params *GetAzureB2CIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureB2CIDPClientOK, error)

	GetAzureIDP(params *GetAzureIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureIDPOK, error)

	GetAzureIDPClient(params *GetAzureIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureIDPClientOK, error)

	GetCognitoIDP(params *GetCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCognitoIDPOK, error)

	GetCognitoIDPClient(params *GetCognitoIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCognitoIDPClientOK, error)

	GetCustomIDP(params *GetCustomIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomIDPOK, error)

	GetCustomIDPClient(params *GetCustomIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomIDPClientOK, error)

	GetExternalIDP(params *GetExternalIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalIDPOK, error)

	GetExternalIDPClient(params *GetExternalIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalIDPClientOK, error)

	GetGithubEmbeddedIDP(params *GetGithubEmbeddedIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGithubEmbeddedIDPOK, error)

	GetGithubEmbeddedIDPClient(params *GetGithubEmbeddedIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGithubEmbeddedIDPClientOK, error)

	GetGithubIDP(params *GetGithubIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGithubIDPOK, error)

	GetGithubIDPClient(params *GetGithubIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGithubIDPClientOK, error)

	GetGoogleEmbeddedIDP(params *GetGoogleEmbeddedIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleEmbeddedIDPOK, error)

	GetGoogleEmbeddedIDPClient(params *GetGoogleEmbeddedIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleEmbeddedIDPClientOK, error)

	GetGoogleIDP(params *GetGoogleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleIDPOK, error)

	GetGoogleIDPClient(params *GetGoogleIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleIDPClientOK, error)

	GetGoogleWorkspaceIDP(params *GetGoogleWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleWorkspaceIDPOK, error)

	GetGoogleWorkspaceIDPClient(params *GetGoogleWorkspaceIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleWorkspaceIDPClientOK, error)

	GetIdentityPoolIDP(params *GetIdentityPoolIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIdentityPoolIDPOK, error)

	GetIdentityPoolIDPClient(params *GetIdentityPoolIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIdentityPoolIDPClientOK, error)

	GetIntelliTrustIDP(params *GetIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntelliTrustIDPOK, error)

	GetIntelliTrustIDPClient(params *GetIntelliTrustIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntelliTrustIDPClientOK, error)

	GetLinkedInIDP(params *GetLinkedInIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLinkedInIDPOK, error)

	GetLinkedInIDPClient(params *GetLinkedInIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLinkedInIDPClientOK, error)

	GetMetaIDP(params *GetMetaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetaIDPOK, error)

	GetMetaIDPClient(params *GetMetaIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetaIDPClientOK, error)

	GetMicrosoftIDP(params *GetMicrosoftIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMicrosoftIDPOK, error)

	GetMicrosoftIDPClient(params *GetMicrosoftIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMicrosoftIDPClientOK, error)

	GetOIDCIDP(params *GetOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOIDCIDPOK, error)

	GetOIDCIDPClient(params *GetOIDCIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOIDCIDPClientOK, error)

	GetOktaIDP(params *GetOktaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOktaIDPOK, error)

	GetOktaIDPClient(params *GetOktaIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOktaIDPClientOK, error)

	GetOrganizationIDP(params *GetOrganizationIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationIDPOK, error)

	GetOrganizationIDPClient(params *GetOrganizationIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationIDPClientOK, error)

	GetSAMLIDP(params *GetSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSAMLIDPOK, error)

	GetSAMLIDPClient(params *GetSAMLIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSAMLIDPClientOK, error)

	GetSAMLV2IDP(params *GetSAMLV2IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSAMLV2IDPOK, error)

	GetSAMLV2IDPClient(params *GetSAMLV2IDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSAMLV2IDPClientOK, error)

	GetStaticIDP(params *GetStaticIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStaticIDPOK, error)

	GetStaticIDPClient(params *GetStaticIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStaticIDPClientOK, error)

	GetWorkspaceIDP(params *GetWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceIDPOK, error)

	GetWorkspaceIDPClient(params *GetWorkspaceIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceIDPClientOK, error)

	GetXIDP(params *GetXIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetXIDPOK, error)

	GetXIDPClient(params *GetXIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetXIDPClientOK, error)

	ListIDPs(params *ListIDPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIDPsOK, error)

	ListIDPsForIdentityPool(params *ListIDPsForIdentityPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIDPsForIdentityPoolOK, error)

	UpdateAppleIDP(params *UpdateAppleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAppleIDPOK, error)

	UpdateAuth0IDP(params *UpdateAuth0IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuth0IDPOK, error)

	UpdateAzureB2CIDP(params *UpdateAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureB2CIDPOK, error)

	UpdateAzureIDP(params *UpdateAzureIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureIDPOK, error)

	UpdateCognitoIDP(params *UpdateCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCognitoIDPOK, error)

	UpdateCustomIDP(params *UpdateCustomIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomIDPOK, error)

	UpdateExternalIDP(params *UpdateExternalIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateExternalIDPOK, error)

	UpdateGithubEmbeddedIDP(params *UpdateGithubEmbeddedIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGithubEmbeddedIDPOK, error)

	UpdateGithubIDP(params *UpdateGithubIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGithubIDPOK, error)

	UpdateGoogleEmbeddedIDP(params *UpdateGoogleEmbeddedIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGoogleEmbeddedIDPOK, error)

	UpdateGoogleIDP(params *UpdateGoogleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGoogleIDPOK, error)

	UpdateGoogleWorkspaceIDP(params *UpdateGoogleWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGoogleWorkspaceIDPOK, error)

	UpdateIdentityPoolIDP(params *UpdateIdentityPoolIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIdentityPoolIDPOK, error)

	UpdateIntelliTrustIDP(params *UpdateIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIntelliTrustIDPOK, error)

	UpdateLinkedInIDP(params *UpdateLinkedInIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLinkedInIDPOK, error)

	UpdateMetaIDP(params *UpdateMetaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMetaIDPOK, error)

	UpdateMicrosoftIDP(params *UpdateMicrosoftIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMicrosoftIDPOK, error)

	UpdateOIDCIDP(params *UpdateOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOIDCIDPOK, error)

	UpdateOktaIDP(params *UpdateOktaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOktaIDPOK, error)

	UpdateOrganizationIDP(params *UpdateOrganizationIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationIDPOK, error)

	UpdateSAMLIDP(params *UpdateSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSAMLIDPOK, error)

	UpdateSAMLV2IDP(params *UpdateSAMLV2IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSAMLV2IDPOK, error)

	UpdateStaticIDP(params *UpdateStaticIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStaticIDPOK, error)

	UpdateWorkspaceIDP(params *UpdateWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWorkspaceIDPOK, error)

	UpdateXIDP(params *UpdateXIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateXIDPOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAppleIDP creates apple ID p

Create Apple IDP.
*/
func (a *Client) CreateAppleIDP(params *CreateAppleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAppleIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAppleIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAppleIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/apple",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAppleIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAppleIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAppleIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAuth0IDP creates auth0 ID p

Create Auth0 IDP.
*/
func (a *Client) CreateAuth0IDP(params *CreateAuth0IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuth0IDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuth0IDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAuth0IDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/auth0",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuth0IDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAuth0IDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAuth0IDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAzureB2CIDP creates azure b2 c ID p

Create AzureB2C IDP.
*/
func (a *Client) CreateAzureB2CIDP(params *CreateAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureB2CIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureB2CIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureB2CIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/azureb2c",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureB2CIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureB2CIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureB2CIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAzureIDP creates azure ID p

Create Azure IDP.
*/
func (a *Client) CreateAzureIDP(params *CreateAzureIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAzureIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAzureIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAzureIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/azure",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAzureIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAzureIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAzureIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCognitoIDP creates cognito ID p

Create Cognito IDP.
*/
func (a *Client) CreateCognitoIDP(params *CreateCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCognitoIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCognitoIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCognitoIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/cognito",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCognitoIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCognitoIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCognitoIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateCustomIDP creates custom ID p

Create Custom IDP.
*/
func (a *Client) CreateCustomIDP(params *CreateCustomIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCustomIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/custom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateExternalIDP creates external ID p

Create External IDP.
*/
func (a *Client) CreateExternalIDP(params *CreateExternalIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateExternalIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExternalIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createExternalIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/external",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateExternalIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExternalIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createExternalIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGithubIDP creates github ID p

Create Github IDP.
*/
func (a *Client) CreateGithubIDP(params *CreateGithubIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGithubIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGithubIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGithubIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/github",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGithubIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGithubIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGithubIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGoogleIDP creates google ID p

Create Google IDP.
*/
func (a *Client) CreateGoogleIDP(params *CreateGoogleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGoogleIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGoogleIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGoogleIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/google",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGoogleIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGoogleIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGoogleIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGoogleWorkspaceIDP creates google workspace ID p

Create GoogleWorkspace IDP.
*/
func (a *Client) CreateGoogleWorkspaceIDP(params *CreateGoogleWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGoogleWorkspaceIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGoogleWorkspaceIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGoogleWorkspaceIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/google_workspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGoogleWorkspaceIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGoogleWorkspaceIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGoogleWorkspaceIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIdentityPoolIDP creates identity pool ID p

Create IdentityPool IDP.
*/
func (a *Client) CreateIdentityPoolIDP(params *CreateIdentityPoolIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIdentityPoolIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIdentityPoolIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createIdentityPoolIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/identity_pool",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIdentityPoolIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIdentityPoolIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createIdentityPoolIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIntelliTrustIDP creates intelli trust ID p

Create IntelliTrust IDP.
*/
func (a *Client) CreateIntelliTrustIDP(params *CreateIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIntelliTrustIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntelliTrustIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createIntelliTrustIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/intelli_trust",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIntelliTrustIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIntelliTrustIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createIntelliTrustIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateLinkedInIDP creates linked in ID p

Create LinkedIn IDP.
*/
func (a *Client) CreateLinkedInIDP(params *CreateLinkedInIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateLinkedInIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLinkedInIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createLinkedInIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/linkedin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateLinkedInIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateLinkedInIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createLinkedInIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMetaIDP creates meta ID p

Create Meta IDP.
*/
func (a *Client) CreateMetaIDP(params *CreateMetaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMetaIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMetaIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMetaIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMetaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMetaIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMetaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMicrosoftIDP creates microsoft ID p

Create Microsoft IDP.
*/
func (a *Client) CreateMicrosoftIDP(params *CreateMicrosoftIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMicrosoftIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMicrosoftIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMicrosoftIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/microsoft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMicrosoftIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMicrosoftIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMicrosoftIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOIDCIDP creates o ID c ID p

Create OIDC IDP.
*/
func (a *Client) CreateOIDCIDP(params *CreateOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOIDCIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOIDCIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOIDCIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/oidc",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOIDCIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOIDCIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOIDCIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOktaIDP creates okta ID p

Create Okta IDP.
*/
func (a *Client) CreateOktaIDP(params *CreateOktaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOktaIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOktaIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOktaIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/okta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOktaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOktaIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOktaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOrganizationIDP creates organization ID p

Create Organization IDP.
*/
func (a *Client) CreateOrganizationIDP(params *CreateOrganizationIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrganizationIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrganizationIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrganizationIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrganizationIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrganizationIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrganizationIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSAMLIDP creates s a m l ID p

Create SAML IDP.
*/
func (a *Client) CreateSAMLIDP(params *CreateSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSAMLIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSAMLIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSAMLIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/saml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSAMLIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSAMLIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSAMLIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSAMLV2IDP creates s a m l v2 ID p

Create SAMLV2 IDP.
*/
func (a *Client) CreateSAMLV2IDP(params *CreateSAMLV2IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSAMLV2IDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSAMLV2IDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSAMLV2IDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/saml_v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSAMLV2IDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSAMLV2IDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSAMLV2IDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateStaticIDP creates static ID p

Create Static IDP.
*/
func (a *Client) CreateStaticIDP(params *CreateStaticIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStaticIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStaticIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStaticIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/static",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStaticIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStaticIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createStaticIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateWorkspaceIDP creates workspace ID p

Create Workspace IDP.
*/
func (a *Client) CreateWorkspaceIDP(params *CreateWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWorkspaceIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWorkspaceIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWorkspaceIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/workspace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWorkspaceIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWorkspaceIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWorkspaceIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateXIDP creates x ID p

Create X IDP.
*/
func (a *Client) CreateXIDP(params *CreateXIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateXIDPCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateXIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createXIDP",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/idps/x",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateXIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateXIDPCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createXIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteIDP deletes ID p

	Deletes an IDP of your choice

Deleting an IDP is permament. Deleted IDPs cannot be restored.

It is impossible to delete an IDP with which you are currently logged in.
*/
func (a *Client) DeleteIDP(params *DeleteIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIDPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIDP",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/idps/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIDPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAppleIDP gets apple ID p

Get Apple IDP.
*/
func (a *Client) GetAppleIDP(params *GetAppleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAppleIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppleIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAppleIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/apple/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppleIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppleIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppleIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAppleIDPClient returns apple ID p client
*/
func (a *Client) GetAppleIDPClient(params *GetAppleIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAppleIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppleIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAppleIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/apple/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppleIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAppleIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAppleIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuth0IDP gets auth0 ID p

Get Auth0 IDP.
*/
func (a *Client) GetAuth0IDP(params *GetAuth0IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuth0IDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuth0IDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuth0IDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/auth0/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuth0IDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuth0IDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuth0IDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuth0IDPClient returns auth0 ID p client
*/
func (a *Client) GetAuth0IDPClient(params *GetAuth0IDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuth0IDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuth0IDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuth0IDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/auth0/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuth0IDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuth0IDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuth0IDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAzureB2CIDP gets azure b2 c ID p

Get AzureB2C IDP.
*/
func (a *Client) GetAzureB2CIDP(params *GetAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureB2CIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureB2CIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAzureB2CIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/azureb2c/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureB2CIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureB2CIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureB2CIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAzureB2CIDPClient returns azure b2 c ID p client
*/
func (a *Client) GetAzureB2CIDPClient(params *GetAzureB2CIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureB2CIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureB2CIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAzureB2CIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/azureb2c/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureB2CIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureB2CIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureB2CIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAzureIDP gets azure ID p

Get Azure IDP.
*/
func (a *Client) GetAzureIDP(params *GetAzureIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAzureIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/azure/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAzureIDPClient returns azure ID p client
*/
func (a *Client) GetAzureIDPClient(params *GetAzureIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAzureIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAzureIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAzureIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/azure/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAzureIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAzureIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAzureIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCognitoIDP gets cognito ID p

Get Cognito IDP.
*/
func (a *Client) GetCognitoIDP(params *GetCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCognitoIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCognitoIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCognitoIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/cognito/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCognitoIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCognitoIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCognitoIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCognitoIDPClient returns cognito ID p client
*/
func (a *Client) GetCognitoIDPClient(params *GetCognitoIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCognitoIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCognitoIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCognitoIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/cognito/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCognitoIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCognitoIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCognitoIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCustomIDP gets custom ID p

Get Custom IDP.
*/
func (a *Client) GetCustomIDP(params *GetCustomIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/custom/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCustomIDPClient returns custom ID p client
*/
func (a *Client) GetCustomIDPClient(params *GetCustomIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/custom/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExternalIDP gets external ID p

Get External IDP.
*/
func (a *Client) GetExternalIDP(params *GetExternalIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExternalIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/external/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExternalIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExternalIDPClient returns external ID p client
*/
func (a *Client) GetExternalIDPClient(params *GetExternalIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExternalIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/external/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExternalIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGithubEmbeddedIDP gets github embedded ID p

Get GithubEmbedded IDP.
*/
func (a *Client) GetGithubEmbeddedIDP(params *GetGithubEmbeddedIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGithubEmbeddedIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGithubEmbeddedIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGithubEmbeddedIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/github_embedded/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGithubEmbeddedIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGithubEmbeddedIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGithubEmbeddedIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGithubEmbeddedIDPClient returns github embedded ID p client
*/
func (a *Client) GetGithubEmbeddedIDPClient(params *GetGithubEmbeddedIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGithubEmbeddedIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGithubEmbeddedIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGithubEmbeddedIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/github_embedded/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGithubEmbeddedIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGithubEmbeddedIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGithubEmbeddedIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGithubIDP gets github ID p

Get Github IDP.
*/
func (a *Client) GetGithubIDP(params *GetGithubIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGithubIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGithubIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGithubIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/github/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGithubIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGithubIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGithubIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGithubIDPClient returns github ID p client
*/
func (a *Client) GetGithubIDPClient(params *GetGithubIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGithubIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGithubIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGithubIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/github/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGithubIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGithubIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGithubIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGoogleEmbeddedIDP gets google embedded ID p

Get GoogleEmbedded IDP.
*/
func (a *Client) GetGoogleEmbeddedIDP(params *GetGoogleEmbeddedIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleEmbeddedIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGoogleEmbeddedIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGoogleEmbeddedIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/google_embedded/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGoogleEmbeddedIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGoogleEmbeddedIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGoogleEmbeddedIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGoogleEmbeddedIDPClient returns google embedded ID p client
*/
func (a *Client) GetGoogleEmbeddedIDPClient(params *GetGoogleEmbeddedIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleEmbeddedIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGoogleEmbeddedIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGoogleEmbeddedIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/google_embedded/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGoogleEmbeddedIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGoogleEmbeddedIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGoogleEmbeddedIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGoogleIDP gets google ID p

Get Google IDP.
*/
func (a *Client) GetGoogleIDP(params *GetGoogleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGoogleIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGoogleIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/google/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGoogleIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGoogleIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGoogleIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGoogleIDPClient returns google ID p client
*/
func (a *Client) GetGoogleIDPClient(params *GetGoogleIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGoogleIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGoogleIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/google/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGoogleIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGoogleIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGoogleIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGoogleWorkspaceIDP gets google workspace ID p

Get GoogleWorkspace IDP.
*/
func (a *Client) GetGoogleWorkspaceIDP(params *GetGoogleWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleWorkspaceIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGoogleWorkspaceIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGoogleWorkspaceIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/google_workspace/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGoogleWorkspaceIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGoogleWorkspaceIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGoogleWorkspaceIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGoogleWorkspaceIDPClient returns google workspace ID p client
*/
func (a *Client) GetGoogleWorkspaceIDPClient(params *GetGoogleWorkspaceIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGoogleWorkspaceIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGoogleWorkspaceIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGoogleWorkspaceIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/google_workspace/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGoogleWorkspaceIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGoogleWorkspaceIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGoogleWorkspaceIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIdentityPoolIDP gets identity pool ID p

Get IdentityPool IDP.
*/
func (a *Client) GetIdentityPoolIDP(params *GetIdentityPoolIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIdentityPoolIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIdentityPoolIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIdentityPoolIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/identity_pool/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityPoolIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIdentityPoolIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIdentityPoolIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIdentityPoolIDPClient returns identity pool ID p client
*/
func (a *Client) GetIdentityPoolIDPClient(params *GetIdentityPoolIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIdentityPoolIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIdentityPoolIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIdentityPoolIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/identity_pool/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIdentityPoolIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIdentityPoolIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIdentityPoolIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntelliTrustIDP gets intelli trust ID p

Get IntelliTrust IDP.
*/
func (a *Client) GetIntelliTrustIDP(params *GetIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntelliTrustIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelliTrustIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIntelliTrustIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/intelli_trust/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelliTrustIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelliTrustIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIntelliTrustIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntelliTrustIDPClient returns intelli trust ID p client
*/
func (a *Client) GetIntelliTrustIDPClient(params *GetIntelliTrustIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntelliTrustIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntelliTrustIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIntelliTrustIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/intelli_trust/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntelliTrustIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntelliTrustIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIntelliTrustIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLinkedInIDP gets linked in ID p

Get LinkedIn IDP.
*/
func (a *Client) GetLinkedInIDP(params *GetLinkedInIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLinkedInIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLinkedInIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLinkedInIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/linkedin/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLinkedInIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLinkedInIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLinkedInIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLinkedInIDPClient returns linked in ID p client
*/
func (a *Client) GetLinkedInIDPClient(params *GetLinkedInIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetLinkedInIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLinkedInIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLinkedInIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/linkedin/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLinkedInIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLinkedInIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLinkedInIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMetaIDP gets meta ID p

Get Meta IDP.
*/
func (a *Client) GetMetaIDP(params *GetMetaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetaIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetaIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMetaIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/meta/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetaIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMetaIDPClient returns meta ID p client
*/
func (a *Client) GetMetaIDPClient(params *GetMetaIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMetaIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetaIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMetaIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/meta/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetaIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetaIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMetaIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMicrosoftIDP gets microsoft ID p

Get Microsoft IDP.
*/
func (a *Client) GetMicrosoftIDP(params *GetMicrosoftIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMicrosoftIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicrosoftIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMicrosoftIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/microsoft/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMicrosoftIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMicrosoftIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMicrosoftIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMicrosoftIDPClient returns microsoft ID p client
*/
func (a *Client) GetMicrosoftIDPClient(params *GetMicrosoftIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMicrosoftIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicrosoftIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMicrosoftIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/microsoft/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMicrosoftIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMicrosoftIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMicrosoftIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOIDCIDP gets o ID c ID p

Get OIDC IDP.
*/
func (a *Client) GetOIDCIDP(params *GetOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOIDCIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOIDCIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOIDCIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/oidc/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOIDCIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOIDCIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOIDCIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOIDCIDPClient returns o ID c ID p client
*/
func (a *Client) GetOIDCIDPClient(params *GetOIDCIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOIDCIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOIDCIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOIDCIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/oidc/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOIDCIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOIDCIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOIDCIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOktaIDP gets okta ID p

Get Okta IDP.
*/
func (a *Client) GetOktaIDP(params *GetOktaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOktaIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOktaIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOktaIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/okta/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOktaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOktaIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOktaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOktaIDPClient returns okta ID p client
*/
func (a *Client) GetOktaIDPClient(params *GetOktaIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOktaIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOktaIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOktaIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/okta/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOktaIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOktaIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOktaIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationIDP gets organization ID p

Get Organization IDP.
*/
func (a *Client) GetOrganizationIDP(params *GetOrganizationIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/organization/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrganizationIDPClient returns organization ID p client
*/
func (a *Client) GetOrganizationIDPClient(params *GetOrganizationIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOrganizationIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOrganizationIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/organization/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrganizationIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrganizationIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrganizationIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSAMLIDP gets s a m l ID p

Get SAML IDP.
*/
func (a *Client) GetSAMLIDP(params *GetSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSAMLIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSAMLIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSAMLIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/saml/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSAMLIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSAMLIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSAMLIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSAMLIDPClient returns s a m l ID p client
*/
func (a *Client) GetSAMLIDPClient(params *GetSAMLIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSAMLIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSAMLIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSAMLIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/saml/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSAMLIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSAMLIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSAMLIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSAMLV2IDP gets s a m l v2 ID p

Get SAMLV2 IDP.
*/
func (a *Client) GetSAMLV2IDP(params *GetSAMLV2IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSAMLV2IDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSAMLV2IDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSAMLV2IDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/saml_v2/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSAMLV2IDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSAMLV2IDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSAMLV2IDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSAMLV2IDPClient returns s a m l v2 ID p client
*/
func (a *Client) GetSAMLV2IDPClient(params *GetSAMLV2IDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSAMLV2IDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSAMLV2IDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSAMLV2IDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/saml_v2/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSAMLV2IDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSAMLV2IDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSAMLV2IDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStaticIDP gets static ID p

Get Static IDP.
*/
func (a *Client) GetStaticIDP(params *GetStaticIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStaticIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStaticIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStaticIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/static/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStaticIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStaticIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStaticIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStaticIDPClient returns static ID p client
*/
func (a *Client) GetStaticIDPClient(params *GetStaticIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetStaticIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStaticIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getStaticIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/static/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStaticIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStaticIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStaticIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspaceIDP gets workspace ID p

Get Workspace IDP.
*/
func (a *Client) GetWorkspaceIDP(params *GetWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspaceIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkspaceIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/workspace/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspaceIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspaceIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkspaceIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWorkspaceIDPClient returns workspace ID p client
*/
func (a *Client) GetWorkspaceIDPClient(params *GetWorkspaceIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWorkspaceIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkspaceIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWorkspaceIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/workspace/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkspaceIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkspaceIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWorkspaceIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetXIDP gets x ID p

Get X IDP.
*/
func (a *Client) GetXIDP(params *GetXIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetXIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetXIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getXIDP",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/x/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetXIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetXIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getXIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetXIDPClient returns x ID p client
*/
func (a *Client) GetXIDPClient(params *GetXIDPClientParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetXIDPClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetXIDPClientParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getXIDPClient",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps/x/{iid}/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetXIDPClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetXIDPClientOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getXIDPClient: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIDPs Returns a list of IDPs connected to a given authorization server (workspace)
*/
func (a *Client) ListIDPs(params *ListIDPsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIDPsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIDPsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listIDPs",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/idps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIDPsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIDPsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIDPs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListIDPsForIdentityPool returns a list of ID ps connected with a given identity pool
*/
func (a *Client) ListIDPsForIdentityPool(params *ListIDPsForIdentityPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListIDPsForIdentityPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIDPsForIdentityPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listIDPsForIdentityPool",
		Method:             "GET",
		PathPattern:        "/pools/{ipID}/idps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIDPsForIdentityPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListIDPsForIdentityPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listIDPsForIdentityPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAppleIDP updates apple ID p

Update Apple IDP.
*/
func (a *Client) UpdateAppleIDP(params *UpdateAppleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAppleIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppleIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAppleIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/apple/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppleIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAppleIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAppleIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAuth0IDP updates auth0 ID p

Update Auth0 IDP.
*/
func (a *Client) UpdateAuth0IDP(params *UpdateAuth0IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuth0IDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuth0IDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAuth0IDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/auth0/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuth0IDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuth0IDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAuth0IDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAzureB2CIDP updates azure b2 c ID p

Update AzureB2C IDP.
*/
func (a *Client) UpdateAzureB2CIDP(params *UpdateAzureB2CIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureB2CIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureB2CIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAzureB2CIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/azureb2c/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureB2CIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureB2CIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAzureB2CIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAzureIDP updates azure ID p

Update Azure IDP.
*/
func (a *Client) UpdateAzureIDP(params *UpdateAzureIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAzureIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAzureIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAzureIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/azure/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAzureIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAzureIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAzureIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCognitoIDP updates cognito ID p

Update Cognito IDP.
*/
func (a *Client) UpdateCognitoIDP(params *UpdateCognitoIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCognitoIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCognitoIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCognitoIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/cognito/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCognitoIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCognitoIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCognitoIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCustomIDP updates custom ID p

Update Custom IDP.
*/
func (a *Client) UpdateCustomIDP(params *UpdateCustomIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCustomIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/custom/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateExternalIDP updates external ID p

Update External IDP.
*/
func (a *Client) UpdateExternalIDP(params *UpdateExternalIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateExternalIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateExternalIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateExternalIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/external/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateExternalIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateExternalIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateExternalIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGithubEmbeddedIDP updates github embedded ID p

Update GithubEmbedded IDP.
*/
func (a *Client) UpdateGithubEmbeddedIDP(params *UpdateGithubEmbeddedIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGithubEmbeddedIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGithubEmbeddedIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGithubEmbeddedIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/github_embedded/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGithubEmbeddedIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGithubEmbeddedIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGithubEmbeddedIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGithubIDP updates github ID p

Update Github IDP.
*/
func (a *Client) UpdateGithubIDP(params *UpdateGithubIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGithubIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGithubIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGithubIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/github/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGithubIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGithubIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGithubIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGoogleEmbeddedIDP updates google embedded ID p

Update GoogleEmbedded IDP.
*/
func (a *Client) UpdateGoogleEmbeddedIDP(params *UpdateGoogleEmbeddedIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGoogleEmbeddedIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGoogleEmbeddedIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGoogleEmbeddedIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/google_embedded/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGoogleEmbeddedIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGoogleEmbeddedIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGoogleEmbeddedIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGoogleIDP updates google ID p

Update Google IDP.
*/
func (a *Client) UpdateGoogleIDP(params *UpdateGoogleIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGoogleIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGoogleIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGoogleIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/google/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGoogleIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGoogleIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGoogleIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGoogleWorkspaceIDP updates google workspace ID p

Update GoogleWorkspace IDP.
*/
func (a *Client) UpdateGoogleWorkspaceIDP(params *UpdateGoogleWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGoogleWorkspaceIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGoogleWorkspaceIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGoogleWorkspaceIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/google_workspace/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGoogleWorkspaceIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGoogleWorkspaceIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGoogleWorkspaceIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIdentityPoolIDP updates identity pool ID p

Update IdentityPool IDP.
*/
func (a *Client) UpdateIdentityPoolIDP(params *UpdateIdentityPoolIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIdentityPoolIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIdentityPoolIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIdentityPoolIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/identity_pool/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIdentityPoolIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIdentityPoolIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIdentityPoolIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIntelliTrustIDP updates intelli trust ID p

Update IntelliTrust IDP.
*/
func (a *Client) UpdateIntelliTrustIDP(params *UpdateIntelliTrustIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIntelliTrustIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntelliTrustIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIntelliTrustIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/intelli_trust/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIntelliTrustIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIntelliTrustIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIntelliTrustIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLinkedInIDP updates linked in ID p

Update LinkedIn IDP.
*/
func (a *Client) UpdateLinkedInIDP(params *UpdateLinkedInIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateLinkedInIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLinkedInIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateLinkedInIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/linkedin/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateLinkedInIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateLinkedInIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateLinkedInIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMetaIDP updates meta ID p

Update Meta IDP.
*/
func (a *Client) UpdateMetaIDP(params *UpdateMetaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMetaIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMetaIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMetaIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/meta/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMetaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMetaIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMetaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMicrosoftIDP updates microsoft ID p

Update Microsoft IDP.
*/
func (a *Client) UpdateMicrosoftIDP(params *UpdateMicrosoftIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMicrosoftIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMicrosoftIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMicrosoftIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/microsoft/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMicrosoftIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMicrosoftIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMicrosoftIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOIDCIDP updates o ID c ID p

Update OIDC IDP.
*/
func (a *Client) UpdateOIDCIDP(params *UpdateOIDCIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOIDCIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOIDCIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOIDCIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/oidc/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOIDCIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOIDCIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOIDCIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOktaIDP updates okta ID p

Update Okta IDP.
*/
func (a *Client) UpdateOktaIDP(params *UpdateOktaIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOktaIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOktaIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOktaIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/okta/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOktaIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOktaIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOktaIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOrganizationIDP updates organization ID p

Update Organization IDP.
*/
func (a *Client) UpdateOrganizationIDP(params *UpdateOrganizationIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateOrganizationIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOrganizationIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOrganizationIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/organization/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateOrganizationIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOrganizationIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOrganizationIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSAMLIDP updates s a m l ID p

Update SAML IDP.
*/
func (a *Client) UpdateSAMLIDP(params *UpdateSAMLIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSAMLIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSAMLIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSAMLIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/saml/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSAMLIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSAMLIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSAMLIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSAMLV2IDP updates s a m l v2 ID p

Update SAMLV2 IDP.
*/
func (a *Client) UpdateSAMLV2IDP(params *UpdateSAMLV2IDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSAMLV2IDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSAMLV2IDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSAMLV2IDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/saml_v2/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSAMLV2IDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSAMLV2IDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSAMLV2IDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateStaticIDP updates static ID p

Update Static IDP.
*/
func (a *Client) UpdateStaticIDP(params *UpdateStaticIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateStaticIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStaticIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateStaticIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/static/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStaticIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStaticIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateStaticIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateWorkspaceIDP updates workspace ID p

Update Workspace IDP.
*/
func (a *Client) UpdateWorkspaceIDP(params *UpdateWorkspaceIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWorkspaceIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkspaceIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWorkspaceIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/workspace/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWorkspaceIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWorkspaceIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateWorkspaceIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateXIDP updates x ID p

Update X IDP.
*/
func (a *Client) UpdateXIDP(params *UpdateXIDPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateXIDPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateXIDPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateXIDP",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/idps/x/{iid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateXIDPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateXIDPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateXIDP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
