// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetGithubEmbeddedIDPClientReader is a Reader for the GetGithubEmbeddedIDPClient structure.
type GetGithubEmbeddedIDPClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGithubEmbeddedIDPClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGithubEmbeddedIDPClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGithubEmbeddedIDPClientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGithubEmbeddedIDPClientUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGithubEmbeddedIDPClientForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGithubEmbeddedIDPClientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGithubEmbeddedIDPClientTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/idps/github_embedded/{iid}/client] getGithubEmbeddedIDPClient", response, response.Code())
	}
}

// NewGetGithubEmbeddedIDPClientOK creates a GetGithubEmbeddedIDPClientOK with default headers values
func NewGetGithubEmbeddedIDPClientOK() *GetGithubEmbeddedIDPClientOK {
	return &GetGithubEmbeddedIDPClientOK{}
}

/*
GetGithubEmbeddedIDPClientOK describes a response with status code 200, with default header values.

Client
*/
type GetGithubEmbeddedIDPClientOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ClientAdminResponse
}

// IsSuccess returns true when this get github embedded Id p client o k response has a 2xx status code
func (o *GetGithubEmbeddedIDPClientOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get github embedded Id p client o k response has a 3xx status code
func (o *GetGithubEmbeddedIDPClientOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github embedded Id p client o k response has a 4xx status code
func (o *GetGithubEmbeddedIDPClientOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get github embedded Id p client o k response has a 5xx status code
func (o *GetGithubEmbeddedIDPClientOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get github embedded Id p client o k response a status code equal to that given
func (o *GetGithubEmbeddedIDPClientOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get github embedded Id p client o k response
func (o *GetGithubEmbeddedIDPClientOK) Code() int {
	return 200
}

func (o *GetGithubEmbeddedIDPClientOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientOK  %+v", 200, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientOK  %+v", 200, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientOK) GetPayload() *models.ClientAdminResponse {
	return o.Payload
}

func (o *GetGithubEmbeddedIDPClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ClientAdminResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubEmbeddedIDPClientBadRequest creates a GetGithubEmbeddedIDPClientBadRequest with default headers values
func NewGetGithubEmbeddedIDPClientBadRequest() *GetGithubEmbeddedIDPClientBadRequest {
	return &GetGithubEmbeddedIDPClientBadRequest{}
}

/*
GetGithubEmbeddedIDPClientBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetGithubEmbeddedIDPClientBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github embedded Id p client bad request response has a 2xx status code
func (o *GetGithubEmbeddedIDPClientBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github embedded Id p client bad request response has a 3xx status code
func (o *GetGithubEmbeddedIDPClientBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github embedded Id p client bad request response has a 4xx status code
func (o *GetGithubEmbeddedIDPClientBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github embedded Id p client bad request response has a 5xx status code
func (o *GetGithubEmbeddedIDPClientBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get github embedded Id p client bad request response a status code equal to that given
func (o *GetGithubEmbeddedIDPClientBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get github embedded Id p client bad request response
func (o *GetGithubEmbeddedIDPClientBadRequest) Code() int {
	return 400
}

func (o *GetGithubEmbeddedIDPClientBadRequest) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientBadRequest  %+v", 400, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientBadRequest) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientBadRequest  %+v", 400, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubEmbeddedIDPClientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubEmbeddedIDPClientUnauthorized creates a GetGithubEmbeddedIDPClientUnauthorized with default headers values
func NewGetGithubEmbeddedIDPClientUnauthorized() *GetGithubEmbeddedIDPClientUnauthorized {
	return &GetGithubEmbeddedIDPClientUnauthorized{}
}

/*
GetGithubEmbeddedIDPClientUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetGithubEmbeddedIDPClientUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github embedded Id p client unauthorized response has a 2xx status code
func (o *GetGithubEmbeddedIDPClientUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github embedded Id p client unauthorized response has a 3xx status code
func (o *GetGithubEmbeddedIDPClientUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github embedded Id p client unauthorized response has a 4xx status code
func (o *GetGithubEmbeddedIDPClientUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github embedded Id p client unauthorized response has a 5xx status code
func (o *GetGithubEmbeddedIDPClientUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get github embedded Id p client unauthorized response a status code equal to that given
func (o *GetGithubEmbeddedIDPClientUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get github embedded Id p client unauthorized response
func (o *GetGithubEmbeddedIDPClientUnauthorized) Code() int {
	return 401
}

func (o *GetGithubEmbeddedIDPClientUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubEmbeddedIDPClientUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubEmbeddedIDPClientForbidden creates a GetGithubEmbeddedIDPClientForbidden with default headers values
func NewGetGithubEmbeddedIDPClientForbidden() *GetGithubEmbeddedIDPClientForbidden {
	return &GetGithubEmbeddedIDPClientForbidden{}
}

/*
GetGithubEmbeddedIDPClientForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGithubEmbeddedIDPClientForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github embedded Id p client forbidden response has a 2xx status code
func (o *GetGithubEmbeddedIDPClientForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github embedded Id p client forbidden response has a 3xx status code
func (o *GetGithubEmbeddedIDPClientForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github embedded Id p client forbidden response has a 4xx status code
func (o *GetGithubEmbeddedIDPClientForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github embedded Id p client forbidden response has a 5xx status code
func (o *GetGithubEmbeddedIDPClientForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get github embedded Id p client forbidden response a status code equal to that given
func (o *GetGithubEmbeddedIDPClientForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get github embedded Id p client forbidden response
func (o *GetGithubEmbeddedIDPClientForbidden) Code() int {
	return 403
}

func (o *GetGithubEmbeddedIDPClientForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientForbidden  %+v", 403, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientForbidden  %+v", 403, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubEmbeddedIDPClientForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubEmbeddedIDPClientNotFound creates a GetGithubEmbeddedIDPClientNotFound with default headers values
func NewGetGithubEmbeddedIDPClientNotFound() *GetGithubEmbeddedIDPClientNotFound {
	return &GetGithubEmbeddedIDPClientNotFound{}
}

/*
GetGithubEmbeddedIDPClientNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetGithubEmbeddedIDPClientNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github embedded Id p client not found response has a 2xx status code
func (o *GetGithubEmbeddedIDPClientNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github embedded Id p client not found response has a 3xx status code
func (o *GetGithubEmbeddedIDPClientNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github embedded Id p client not found response has a 4xx status code
func (o *GetGithubEmbeddedIDPClientNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github embedded Id p client not found response has a 5xx status code
func (o *GetGithubEmbeddedIDPClientNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get github embedded Id p client not found response a status code equal to that given
func (o *GetGithubEmbeddedIDPClientNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get github embedded Id p client not found response
func (o *GetGithubEmbeddedIDPClientNotFound) Code() int {
	return 404
}

func (o *GetGithubEmbeddedIDPClientNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientNotFound  %+v", 404, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientNotFound  %+v", 404, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubEmbeddedIDPClientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubEmbeddedIDPClientTooManyRequests creates a GetGithubEmbeddedIDPClientTooManyRequests with default headers values
func NewGetGithubEmbeddedIDPClientTooManyRequests() *GetGithubEmbeddedIDPClientTooManyRequests {
	return &GetGithubEmbeddedIDPClientTooManyRequests{}
}

/*
GetGithubEmbeddedIDPClientTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetGithubEmbeddedIDPClientTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github embedded Id p client too many requests response has a 2xx status code
func (o *GetGithubEmbeddedIDPClientTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github embedded Id p client too many requests response has a 3xx status code
func (o *GetGithubEmbeddedIDPClientTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github embedded Id p client too many requests response has a 4xx status code
func (o *GetGithubEmbeddedIDPClientTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github embedded Id p client too many requests response has a 5xx status code
func (o *GetGithubEmbeddedIDPClientTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get github embedded Id p client too many requests response a status code equal to that given
func (o *GetGithubEmbeddedIDPClientTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get github embedded Id p client too many requests response
func (o *GetGithubEmbeddedIDPClientTooManyRequests) Code() int {
	return 429
}

func (o *GetGithubEmbeddedIDPClientTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/idps/github_embedded/{iid}/client][%d] getGithubEmbeddedIdPClientTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGithubEmbeddedIDPClientTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubEmbeddedIDPClientTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
