// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetOAuth2IDPClientReader is a Reader for the GetOAuth2IDPClient structure.
type GetOAuth2IDPClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOAuth2IDPClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOAuth2IDPClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOAuth2IDPClientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOAuth2IDPClientUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOAuth2IDPClientForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOAuth2IDPClientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOAuth2IDPClientTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/idps/oauth2/{iid}/client] getOAuth2IDPClient", response, response.Code())
	}
}

// NewGetOAuth2IDPClientOK creates a GetOAuth2IDPClientOK with default headers values
func NewGetOAuth2IDPClientOK() *GetOAuth2IDPClientOK {
	return &GetOAuth2IDPClientOK{}
}

/*
GetOAuth2IDPClientOK describes a response with status code 200, with default header values.

Client
*/
type GetOAuth2IDPClientOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ClientAdminResponse
}

// IsSuccess returns true when this get o auth2 Id p client o k response has a 2xx status code
func (o *GetOAuth2IDPClientOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get o auth2 Id p client o k response has a 3xx status code
func (o *GetOAuth2IDPClientOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p client o k response has a 4xx status code
func (o *GetOAuth2IDPClientOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get o auth2 Id p client o k response has a 5xx status code
func (o *GetOAuth2IDPClientOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p client o k response a status code equal to that given
func (o *GetOAuth2IDPClientOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get o auth2 Id p client o k response
func (o *GetOAuth2IDPClientOK) Code() int {
	return 200
}

func (o *GetOAuth2IDPClientOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientOK %s", 200, payload)
}

func (o *GetOAuth2IDPClientOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientOK %s", 200, payload)
}

func (o *GetOAuth2IDPClientOK) GetPayload() *models.ClientAdminResponse {
	return o.Payload
}

func (o *GetOAuth2IDPClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ClientAdminResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPClientBadRequest creates a GetOAuth2IDPClientBadRequest with default headers values
func NewGetOAuth2IDPClientBadRequest() *GetOAuth2IDPClientBadRequest {
	return &GetOAuth2IDPClientBadRequest{}
}

/*
GetOAuth2IDPClientBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetOAuth2IDPClientBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p client bad request response has a 2xx status code
func (o *GetOAuth2IDPClientBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p client bad request response has a 3xx status code
func (o *GetOAuth2IDPClientBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p client bad request response has a 4xx status code
func (o *GetOAuth2IDPClientBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p client bad request response has a 5xx status code
func (o *GetOAuth2IDPClientBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p client bad request response a status code equal to that given
func (o *GetOAuth2IDPClientBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get o auth2 Id p client bad request response
func (o *GetOAuth2IDPClientBadRequest) Code() int {
	return 400
}

func (o *GetOAuth2IDPClientBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientBadRequest %s", 400, payload)
}

func (o *GetOAuth2IDPClientBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientBadRequest %s", 400, payload)
}

func (o *GetOAuth2IDPClientBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPClientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPClientUnauthorized creates a GetOAuth2IDPClientUnauthorized with default headers values
func NewGetOAuth2IDPClientUnauthorized() *GetOAuth2IDPClientUnauthorized {
	return &GetOAuth2IDPClientUnauthorized{}
}

/*
GetOAuth2IDPClientUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOAuth2IDPClientUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p client unauthorized response has a 2xx status code
func (o *GetOAuth2IDPClientUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p client unauthorized response has a 3xx status code
func (o *GetOAuth2IDPClientUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p client unauthorized response has a 4xx status code
func (o *GetOAuth2IDPClientUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p client unauthorized response has a 5xx status code
func (o *GetOAuth2IDPClientUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p client unauthorized response a status code equal to that given
func (o *GetOAuth2IDPClientUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get o auth2 Id p client unauthorized response
func (o *GetOAuth2IDPClientUnauthorized) Code() int {
	return 401
}

func (o *GetOAuth2IDPClientUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientUnauthorized %s", 401, payload)
}

func (o *GetOAuth2IDPClientUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientUnauthorized %s", 401, payload)
}

func (o *GetOAuth2IDPClientUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPClientUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPClientForbidden creates a GetOAuth2IDPClientForbidden with default headers values
func NewGetOAuth2IDPClientForbidden() *GetOAuth2IDPClientForbidden {
	return &GetOAuth2IDPClientForbidden{}
}

/*
GetOAuth2IDPClientForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOAuth2IDPClientForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p client forbidden response has a 2xx status code
func (o *GetOAuth2IDPClientForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p client forbidden response has a 3xx status code
func (o *GetOAuth2IDPClientForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p client forbidden response has a 4xx status code
func (o *GetOAuth2IDPClientForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p client forbidden response has a 5xx status code
func (o *GetOAuth2IDPClientForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p client forbidden response a status code equal to that given
func (o *GetOAuth2IDPClientForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get o auth2 Id p client forbidden response
func (o *GetOAuth2IDPClientForbidden) Code() int {
	return 403
}

func (o *GetOAuth2IDPClientForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientForbidden %s", 403, payload)
}

func (o *GetOAuth2IDPClientForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientForbidden %s", 403, payload)
}

func (o *GetOAuth2IDPClientForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPClientForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPClientNotFound creates a GetOAuth2IDPClientNotFound with default headers values
func NewGetOAuth2IDPClientNotFound() *GetOAuth2IDPClientNotFound {
	return &GetOAuth2IDPClientNotFound{}
}

/*
GetOAuth2IDPClientNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetOAuth2IDPClientNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p client not found response has a 2xx status code
func (o *GetOAuth2IDPClientNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p client not found response has a 3xx status code
func (o *GetOAuth2IDPClientNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p client not found response has a 4xx status code
func (o *GetOAuth2IDPClientNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p client not found response has a 5xx status code
func (o *GetOAuth2IDPClientNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p client not found response a status code equal to that given
func (o *GetOAuth2IDPClientNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get o auth2 Id p client not found response
func (o *GetOAuth2IDPClientNotFound) Code() int {
	return 404
}

func (o *GetOAuth2IDPClientNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientNotFound %s", 404, payload)
}

func (o *GetOAuth2IDPClientNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientNotFound %s", 404, payload)
}

func (o *GetOAuth2IDPClientNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPClientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPClientTooManyRequests creates a GetOAuth2IDPClientTooManyRequests with default headers values
func NewGetOAuth2IDPClientTooManyRequests() *GetOAuth2IDPClientTooManyRequests {
	return &GetOAuth2IDPClientTooManyRequests{}
}

/*
GetOAuth2IDPClientTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetOAuth2IDPClientTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p client too many requests response has a 2xx status code
func (o *GetOAuth2IDPClientTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p client too many requests response has a 3xx status code
func (o *GetOAuth2IDPClientTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p client too many requests response has a 4xx status code
func (o *GetOAuth2IDPClientTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p client too many requests response has a 5xx status code
func (o *GetOAuth2IDPClientTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p client too many requests response a status code equal to that given
func (o *GetOAuth2IDPClientTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get o auth2 Id p client too many requests response
func (o *GetOAuth2IDPClientTooManyRequests) Code() int {
	return 429
}

func (o *GetOAuth2IDPClientTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientTooManyRequests %s", 429, payload)
}

func (o *GetOAuth2IDPClientTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}/client][%d] getOAuth2IdPClientTooManyRequests %s", 429, payload)
}

func (o *GetOAuth2IDPClientTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPClientTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
