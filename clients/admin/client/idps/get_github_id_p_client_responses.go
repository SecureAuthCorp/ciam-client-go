// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetGithubIDPClientReader is a Reader for the GetGithubIDPClient structure.
type GetGithubIDPClientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGithubIDPClientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGithubIDPClientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGithubIDPClientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGithubIDPClientUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGithubIDPClientForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGithubIDPClientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGithubIDPClientTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/idps/github/{iid}/client] getGithubIDPClient", response, response.Code())
	}
}

// NewGetGithubIDPClientOK creates a GetGithubIDPClientOK with default headers values
func NewGetGithubIDPClientOK() *GetGithubIDPClientOK {
	return &GetGithubIDPClientOK{}
}

/*
GetGithubIDPClientOK describes a response with status code 200, with default header values.

Client
*/
type GetGithubIDPClientOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ClientAdminResponse
}

// IsSuccess returns true when this get github Id p client o k response has a 2xx status code
func (o *GetGithubIDPClientOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get github Id p client o k response has a 3xx status code
func (o *GetGithubIDPClientOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github Id p client o k response has a 4xx status code
func (o *GetGithubIDPClientOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get github Id p client o k response has a 5xx status code
func (o *GetGithubIDPClientOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get github Id p client o k response a status code equal to that given
func (o *GetGithubIDPClientOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get github Id p client o k response
func (o *GetGithubIDPClientOK) Code() int {
	return 200
}

func (o *GetGithubIDPClientOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientOK %s", 200, payload)
}

func (o *GetGithubIDPClientOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientOK %s", 200, payload)
}

func (o *GetGithubIDPClientOK) GetPayload() *models.ClientAdminResponse {
	return o.Payload
}

func (o *GetGithubIDPClientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ClientAdminResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubIDPClientBadRequest creates a GetGithubIDPClientBadRequest with default headers values
func NewGetGithubIDPClientBadRequest() *GetGithubIDPClientBadRequest {
	return &GetGithubIDPClientBadRequest{}
}

/*
GetGithubIDPClientBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetGithubIDPClientBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github Id p client bad request response has a 2xx status code
func (o *GetGithubIDPClientBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github Id p client bad request response has a 3xx status code
func (o *GetGithubIDPClientBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github Id p client bad request response has a 4xx status code
func (o *GetGithubIDPClientBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github Id p client bad request response has a 5xx status code
func (o *GetGithubIDPClientBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get github Id p client bad request response a status code equal to that given
func (o *GetGithubIDPClientBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get github Id p client bad request response
func (o *GetGithubIDPClientBadRequest) Code() int {
	return 400
}

func (o *GetGithubIDPClientBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientBadRequest %s", 400, payload)
}

func (o *GetGithubIDPClientBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientBadRequest %s", 400, payload)
}

func (o *GetGithubIDPClientBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubIDPClientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubIDPClientUnauthorized creates a GetGithubIDPClientUnauthorized with default headers values
func NewGetGithubIDPClientUnauthorized() *GetGithubIDPClientUnauthorized {
	return &GetGithubIDPClientUnauthorized{}
}

/*
GetGithubIDPClientUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetGithubIDPClientUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github Id p client unauthorized response has a 2xx status code
func (o *GetGithubIDPClientUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github Id p client unauthorized response has a 3xx status code
func (o *GetGithubIDPClientUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github Id p client unauthorized response has a 4xx status code
func (o *GetGithubIDPClientUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github Id p client unauthorized response has a 5xx status code
func (o *GetGithubIDPClientUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get github Id p client unauthorized response a status code equal to that given
func (o *GetGithubIDPClientUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get github Id p client unauthorized response
func (o *GetGithubIDPClientUnauthorized) Code() int {
	return 401
}

func (o *GetGithubIDPClientUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientUnauthorized %s", 401, payload)
}

func (o *GetGithubIDPClientUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientUnauthorized %s", 401, payload)
}

func (o *GetGithubIDPClientUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubIDPClientUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubIDPClientForbidden creates a GetGithubIDPClientForbidden with default headers values
func NewGetGithubIDPClientForbidden() *GetGithubIDPClientForbidden {
	return &GetGithubIDPClientForbidden{}
}

/*
GetGithubIDPClientForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGithubIDPClientForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github Id p client forbidden response has a 2xx status code
func (o *GetGithubIDPClientForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github Id p client forbidden response has a 3xx status code
func (o *GetGithubIDPClientForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github Id p client forbidden response has a 4xx status code
func (o *GetGithubIDPClientForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github Id p client forbidden response has a 5xx status code
func (o *GetGithubIDPClientForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get github Id p client forbidden response a status code equal to that given
func (o *GetGithubIDPClientForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get github Id p client forbidden response
func (o *GetGithubIDPClientForbidden) Code() int {
	return 403
}

func (o *GetGithubIDPClientForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientForbidden %s", 403, payload)
}

func (o *GetGithubIDPClientForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientForbidden %s", 403, payload)
}

func (o *GetGithubIDPClientForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubIDPClientForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubIDPClientNotFound creates a GetGithubIDPClientNotFound with default headers values
func NewGetGithubIDPClientNotFound() *GetGithubIDPClientNotFound {
	return &GetGithubIDPClientNotFound{}
}

/*
GetGithubIDPClientNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetGithubIDPClientNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github Id p client not found response has a 2xx status code
func (o *GetGithubIDPClientNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github Id p client not found response has a 3xx status code
func (o *GetGithubIDPClientNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github Id p client not found response has a 4xx status code
func (o *GetGithubIDPClientNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github Id p client not found response has a 5xx status code
func (o *GetGithubIDPClientNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get github Id p client not found response a status code equal to that given
func (o *GetGithubIDPClientNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get github Id p client not found response
func (o *GetGithubIDPClientNotFound) Code() int {
	return 404
}

func (o *GetGithubIDPClientNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientNotFound %s", 404, payload)
}

func (o *GetGithubIDPClientNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientNotFound %s", 404, payload)
}

func (o *GetGithubIDPClientNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubIDPClientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGithubIDPClientTooManyRequests creates a GetGithubIDPClientTooManyRequests with default headers values
func NewGetGithubIDPClientTooManyRequests() *GetGithubIDPClientTooManyRequests {
	return &GetGithubIDPClientTooManyRequests{}
}

/*
GetGithubIDPClientTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetGithubIDPClientTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get github Id p client too many requests response has a 2xx status code
func (o *GetGithubIDPClientTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get github Id p client too many requests response has a 3xx status code
func (o *GetGithubIDPClientTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get github Id p client too many requests response has a 4xx status code
func (o *GetGithubIDPClientTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get github Id p client too many requests response has a 5xx status code
func (o *GetGithubIDPClientTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get github Id p client too many requests response a status code equal to that given
func (o *GetGithubIDPClientTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get github Id p client too many requests response
func (o *GetGithubIDPClientTooManyRequests) Code() int {
	return 429
}

func (o *GetGithubIDPClientTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientTooManyRequests %s", 429, payload)
}

func (o *GetGithubIDPClientTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/github/{iid}/client][%d] getGithubIdPClientTooManyRequests %s", 429, payload)
}

func (o *GetGithubIDPClientTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGithubIDPClientTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
