// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateOktaIDPReader is a Reader for the UpdateOktaIDP structure.
type UpdateOktaIDPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOktaIDPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOktaIDPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateOktaIDPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateOktaIDPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateOktaIDPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateOktaIDPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateOktaIDPUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateOktaIDPTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /servers/{wid}/idps/okta/{iid}] updateOktaIDP", response, response.Code())
	}
}

// NewUpdateOktaIDPOK creates a UpdateOktaIDPOK with default headers values
func NewUpdateOktaIDPOK() *UpdateOktaIDPOK {
	return &UpdateOktaIDPOK{}
}

/*
UpdateOktaIDPOK describes a response with status code 200, with default header values.

OktaIDP
*/
type UpdateOktaIDPOK struct {
	Payload *models.OktaIDP
}

// IsSuccess returns true when this update okta Id p o k response has a 2xx status code
func (o *UpdateOktaIDPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update okta Id p o k response has a 3xx status code
func (o *UpdateOktaIDPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update okta Id p o k response has a 4xx status code
func (o *UpdateOktaIDPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update okta Id p o k response has a 5xx status code
func (o *UpdateOktaIDPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update okta Id p o k response a status code equal to that given
func (o *UpdateOktaIDPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update okta Id p o k response
func (o *UpdateOktaIDPOK) Code() int {
	return 200
}

func (o *UpdateOktaIDPOK) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPOK  %+v", 200, o.Payload)
}

func (o *UpdateOktaIDPOK) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPOK  %+v", 200, o.Payload)
}

func (o *UpdateOktaIDPOK) GetPayload() *models.OktaIDP {
	return o.Payload
}

func (o *UpdateOktaIDPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OktaIDP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOktaIDPBadRequest creates a UpdateOktaIDPBadRequest with default headers values
func NewUpdateOktaIDPBadRequest() *UpdateOktaIDPBadRequest {
	return &UpdateOktaIDPBadRequest{}
}

/*
UpdateOktaIDPBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateOktaIDPBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update okta Id p bad request response has a 2xx status code
func (o *UpdateOktaIDPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update okta Id p bad request response has a 3xx status code
func (o *UpdateOktaIDPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update okta Id p bad request response has a 4xx status code
func (o *UpdateOktaIDPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update okta Id p bad request response has a 5xx status code
func (o *UpdateOktaIDPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update okta Id p bad request response a status code equal to that given
func (o *UpdateOktaIDPBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update okta Id p bad request response
func (o *UpdateOktaIDPBadRequest) Code() int {
	return 400
}

func (o *UpdateOktaIDPBadRequest) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateOktaIDPBadRequest) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateOktaIDPBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOktaIDPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOktaIDPUnauthorized creates a UpdateOktaIDPUnauthorized with default headers values
func NewUpdateOktaIDPUnauthorized() *UpdateOktaIDPUnauthorized {
	return &UpdateOktaIDPUnauthorized{}
}

/*
UpdateOktaIDPUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateOktaIDPUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update okta Id p unauthorized response has a 2xx status code
func (o *UpdateOktaIDPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update okta Id p unauthorized response has a 3xx status code
func (o *UpdateOktaIDPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update okta Id p unauthorized response has a 4xx status code
func (o *UpdateOktaIDPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update okta Id p unauthorized response has a 5xx status code
func (o *UpdateOktaIDPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update okta Id p unauthorized response a status code equal to that given
func (o *UpdateOktaIDPUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update okta Id p unauthorized response
func (o *UpdateOktaIDPUnauthorized) Code() int {
	return 401
}

func (o *UpdateOktaIDPUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateOktaIDPUnauthorized) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateOktaIDPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOktaIDPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOktaIDPForbidden creates a UpdateOktaIDPForbidden with default headers values
func NewUpdateOktaIDPForbidden() *UpdateOktaIDPForbidden {
	return &UpdateOktaIDPForbidden{}
}

/*
UpdateOktaIDPForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateOktaIDPForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update okta Id p forbidden response has a 2xx status code
func (o *UpdateOktaIDPForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update okta Id p forbidden response has a 3xx status code
func (o *UpdateOktaIDPForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update okta Id p forbidden response has a 4xx status code
func (o *UpdateOktaIDPForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update okta Id p forbidden response has a 5xx status code
func (o *UpdateOktaIDPForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update okta Id p forbidden response a status code equal to that given
func (o *UpdateOktaIDPForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update okta Id p forbidden response
func (o *UpdateOktaIDPForbidden) Code() int {
	return 403
}

func (o *UpdateOktaIDPForbidden) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPForbidden  %+v", 403, o.Payload)
}

func (o *UpdateOktaIDPForbidden) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPForbidden  %+v", 403, o.Payload)
}

func (o *UpdateOktaIDPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOktaIDPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOktaIDPNotFound creates a UpdateOktaIDPNotFound with default headers values
func NewUpdateOktaIDPNotFound() *UpdateOktaIDPNotFound {
	return &UpdateOktaIDPNotFound{}
}

/*
UpdateOktaIDPNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateOktaIDPNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update okta Id p not found response has a 2xx status code
func (o *UpdateOktaIDPNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update okta Id p not found response has a 3xx status code
func (o *UpdateOktaIDPNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update okta Id p not found response has a 4xx status code
func (o *UpdateOktaIDPNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update okta Id p not found response has a 5xx status code
func (o *UpdateOktaIDPNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update okta Id p not found response a status code equal to that given
func (o *UpdateOktaIDPNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update okta Id p not found response
func (o *UpdateOktaIDPNotFound) Code() int {
	return 404
}

func (o *UpdateOktaIDPNotFound) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPNotFound  %+v", 404, o.Payload)
}

func (o *UpdateOktaIDPNotFound) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPNotFound  %+v", 404, o.Payload)
}

func (o *UpdateOktaIDPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOktaIDPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOktaIDPUnprocessableEntity creates a UpdateOktaIDPUnprocessableEntity with default headers values
func NewUpdateOktaIDPUnprocessableEntity() *UpdateOktaIDPUnprocessableEntity {
	return &UpdateOktaIDPUnprocessableEntity{}
}

/*
UpdateOktaIDPUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateOktaIDPUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update okta Id p unprocessable entity response has a 2xx status code
func (o *UpdateOktaIDPUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update okta Id p unprocessable entity response has a 3xx status code
func (o *UpdateOktaIDPUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update okta Id p unprocessable entity response has a 4xx status code
func (o *UpdateOktaIDPUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update okta Id p unprocessable entity response has a 5xx status code
func (o *UpdateOktaIDPUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update okta Id p unprocessable entity response a status code equal to that given
func (o *UpdateOktaIDPUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update okta Id p unprocessable entity response
func (o *UpdateOktaIDPUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateOktaIDPUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateOktaIDPUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateOktaIDPUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOktaIDPUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOktaIDPTooManyRequests creates a UpdateOktaIDPTooManyRequests with default headers values
func NewUpdateOktaIDPTooManyRequests() *UpdateOktaIDPTooManyRequests {
	return &UpdateOktaIDPTooManyRequests{}
}

/*
UpdateOktaIDPTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateOktaIDPTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update okta Id p too many requests response has a 2xx status code
func (o *UpdateOktaIDPTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update okta Id p too many requests response has a 3xx status code
func (o *UpdateOktaIDPTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update okta Id p too many requests response has a 4xx status code
func (o *UpdateOktaIDPTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update okta Id p too many requests response has a 5xx status code
func (o *UpdateOktaIDPTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update okta Id p too many requests response a status code equal to that given
func (o *UpdateOktaIDPTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update okta Id p too many requests response
func (o *UpdateOktaIDPTooManyRequests) Code() int {
	return 429
}

func (o *UpdateOktaIDPTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateOktaIDPTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/idps/okta/{iid}][%d] updateOktaIdPTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateOktaIDPTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateOktaIDPTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
