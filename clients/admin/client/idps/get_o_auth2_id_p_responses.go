// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetOAuth2IDPReader is a Reader for the GetOAuth2IDP structure.
type GetOAuth2IDPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOAuth2IDPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOAuth2IDPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetOAuth2IDPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOAuth2IDPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOAuth2IDPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOAuth2IDPTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/idps/oauth2/{iid}] getOAuth2IDP", response, response.Code())
	}
}

// NewGetOAuth2IDPOK creates a GetOAuth2IDPOK with default headers values
func NewGetOAuth2IDPOK() *GetOAuth2IDPOK {
	return &GetOAuth2IDPOK{}
}

/*
GetOAuth2IDPOK describes a response with status code 200, with default header values.

OAuth2IDP
*/
type GetOAuth2IDPOK struct {
	Payload *models.OAuth2IDP
}

// IsSuccess returns true when this get o auth2 Id p o k response has a 2xx status code
func (o *GetOAuth2IDPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get o auth2 Id p o k response has a 3xx status code
func (o *GetOAuth2IDPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p o k response has a 4xx status code
func (o *GetOAuth2IDPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get o auth2 Id p o k response has a 5xx status code
func (o *GetOAuth2IDPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p o k response a status code equal to that given
func (o *GetOAuth2IDPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get o auth2 Id p o k response
func (o *GetOAuth2IDPOK) Code() int {
	return 200
}

func (o *GetOAuth2IDPOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPOK %s", 200, payload)
}

func (o *GetOAuth2IDPOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPOK %s", 200, payload)
}

func (o *GetOAuth2IDPOK) GetPayload() *models.OAuth2IDP {
	return o.Payload
}

func (o *GetOAuth2IDPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OAuth2IDP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPUnauthorized creates a GetOAuth2IDPUnauthorized with default headers values
func NewGetOAuth2IDPUnauthorized() *GetOAuth2IDPUnauthorized {
	return &GetOAuth2IDPUnauthorized{}
}

/*
GetOAuth2IDPUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetOAuth2IDPUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p unauthorized response has a 2xx status code
func (o *GetOAuth2IDPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p unauthorized response has a 3xx status code
func (o *GetOAuth2IDPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p unauthorized response has a 4xx status code
func (o *GetOAuth2IDPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p unauthorized response has a 5xx status code
func (o *GetOAuth2IDPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p unauthorized response a status code equal to that given
func (o *GetOAuth2IDPUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get o auth2 Id p unauthorized response
func (o *GetOAuth2IDPUnauthorized) Code() int {
	return 401
}

func (o *GetOAuth2IDPUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPUnauthorized %s", 401, payload)
}

func (o *GetOAuth2IDPUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPUnauthorized %s", 401, payload)
}

func (o *GetOAuth2IDPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPForbidden creates a GetOAuth2IDPForbidden with default headers values
func NewGetOAuth2IDPForbidden() *GetOAuth2IDPForbidden {
	return &GetOAuth2IDPForbidden{}
}

/*
GetOAuth2IDPForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetOAuth2IDPForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p forbidden response has a 2xx status code
func (o *GetOAuth2IDPForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p forbidden response has a 3xx status code
func (o *GetOAuth2IDPForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p forbidden response has a 4xx status code
func (o *GetOAuth2IDPForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p forbidden response has a 5xx status code
func (o *GetOAuth2IDPForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p forbidden response a status code equal to that given
func (o *GetOAuth2IDPForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get o auth2 Id p forbidden response
func (o *GetOAuth2IDPForbidden) Code() int {
	return 403
}

func (o *GetOAuth2IDPForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPForbidden %s", 403, payload)
}

func (o *GetOAuth2IDPForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPForbidden %s", 403, payload)
}

func (o *GetOAuth2IDPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPNotFound creates a GetOAuth2IDPNotFound with default headers values
func NewGetOAuth2IDPNotFound() *GetOAuth2IDPNotFound {
	return &GetOAuth2IDPNotFound{}
}

/*
GetOAuth2IDPNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetOAuth2IDPNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p not found response has a 2xx status code
func (o *GetOAuth2IDPNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p not found response has a 3xx status code
func (o *GetOAuth2IDPNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p not found response has a 4xx status code
func (o *GetOAuth2IDPNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p not found response has a 5xx status code
func (o *GetOAuth2IDPNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p not found response a status code equal to that given
func (o *GetOAuth2IDPNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get o auth2 Id p not found response
func (o *GetOAuth2IDPNotFound) Code() int {
	return 404
}

func (o *GetOAuth2IDPNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPNotFound %s", 404, payload)
}

func (o *GetOAuth2IDPNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPNotFound %s", 404, payload)
}

func (o *GetOAuth2IDPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOAuth2IDPTooManyRequests creates a GetOAuth2IDPTooManyRequests with default headers values
func NewGetOAuth2IDPTooManyRequests() *GetOAuth2IDPTooManyRequests {
	return &GetOAuth2IDPTooManyRequests{}
}

/*
GetOAuth2IDPTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetOAuth2IDPTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get o auth2 Id p too many requests response has a 2xx status code
func (o *GetOAuth2IDPTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get o auth2 Id p too many requests response has a 3xx status code
func (o *GetOAuth2IDPTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get o auth2 Id p too many requests response has a 4xx status code
func (o *GetOAuth2IDPTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get o auth2 Id p too many requests response has a 5xx status code
func (o *GetOAuth2IDPTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get o auth2 Id p too many requests response a status code equal to that given
func (o *GetOAuth2IDPTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get o auth2 Id p too many requests response
func (o *GetOAuth2IDPTooManyRequests) Code() int {
	return 429
}

func (o *GetOAuth2IDPTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPTooManyRequests %s", 429, payload)
}

func (o *GetOAuth2IDPTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/idps/oauth2/{iid}][%d] getOAuth2IdPTooManyRequests %s", 429, payload)
}

func (o *GetOAuth2IDPTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOAuth2IDPTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
