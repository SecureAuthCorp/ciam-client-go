// Code generated by go-swagger; DO NOT EDIT.

package a_c_rs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetACRReader is a Reader for the GetACR structure.
type GetACRReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetACRReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetACROK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetACRUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetACRForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetACRNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetACRTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/acrs/{acrID}] getACR", response, response.Code())
	}
}

// NewGetACROK creates a GetACROK with default headers values
func NewGetACROK() *GetACROK {
	return &GetACROK{}
}

/*
GetACROK describes a response with status code 200, with default header values.

ACR
*/
type GetACROK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ACR
}

// IsSuccess returns true when this get a c r o k response has a 2xx status code
func (o *GetACROK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get a c r o k response has a 3xx status code
func (o *GetACROK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a c r o k response has a 4xx status code
func (o *GetACROK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get a c r o k response has a 5xx status code
func (o *GetACROK) IsServerError() bool {
	return false
}

// IsCode returns true when this get a c r o k response a status code equal to that given
func (o *GetACROK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get a c r o k response
func (o *GetACROK) Code() int {
	return 200
}

func (o *GetACROK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACROK %s", 200, payload)
}

func (o *GetACROK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACROK %s", 200, payload)
}

func (o *GetACROK) GetPayload() *models.ACR {
	return o.Payload
}

func (o *GetACROK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ACR)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetACRUnauthorized creates a GetACRUnauthorized with default headers values
func NewGetACRUnauthorized() *GetACRUnauthorized {
	return &GetACRUnauthorized{}
}

/*
GetACRUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetACRUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get a c r unauthorized response has a 2xx status code
func (o *GetACRUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a c r unauthorized response has a 3xx status code
func (o *GetACRUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a c r unauthorized response has a 4xx status code
func (o *GetACRUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a c r unauthorized response has a 5xx status code
func (o *GetACRUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get a c r unauthorized response a status code equal to that given
func (o *GetACRUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get a c r unauthorized response
func (o *GetACRUnauthorized) Code() int {
	return 401
}

func (o *GetACRUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACRUnauthorized %s", 401, payload)
}

func (o *GetACRUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACRUnauthorized %s", 401, payload)
}

func (o *GetACRUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetACRUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetACRForbidden creates a GetACRForbidden with default headers values
func NewGetACRForbidden() *GetACRForbidden {
	return &GetACRForbidden{}
}

/*
GetACRForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetACRForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get a c r forbidden response has a 2xx status code
func (o *GetACRForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a c r forbidden response has a 3xx status code
func (o *GetACRForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a c r forbidden response has a 4xx status code
func (o *GetACRForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a c r forbidden response has a 5xx status code
func (o *GetACRForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get a c r forbidden response a status code equal to that given
func (o *GetACRForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get a c r forbidden response
func (o *GetACRForbidden) Code() int {
	return 403
}

func (o *GetACRForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACRForbidden %s", 403, payload)
}

func (o *GetACRForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACRForbidden %s", 403, payload)
}

func (o *GetACRForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetACRForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetACRNotFound creates a GetACRNotFound with default headers values
func NewGetACRNotFound() *GetACRNotFound {
	return &GetACRNotFound{}
}

/*
GetACRNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetACRNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get a c r not found response has a 2xx status code
func (o *GetACRNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a c r not found response has a 3xx status code
func (o *GetACRNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a c r not found response has a 4xx status code
func (o *GetACRNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a c r not found response has a 5xx status code
func (o *GetACRNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get a c r not found response a status code equal to that given
func (o *GetACRNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get a c r not found response
func (o *GetACRNotFound) Code() int {
	return 404
}

func (o *GetACRNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACRNotFound %s", 404, payload)
}

func (o *GetACRNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACRNotFound %s", 404, payload)
}

func (o *GetACRNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetACRNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetACRTooManyRequests creates a GetACRTooManyRequests with default headers values
func NewGetACRTooManyRequests() *GetACRTooManyRequests {
	return &GetACRTooManyRequests{}
}

/*
GetACRTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetACRTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get a c r too many requests response has a 2xx status code
func (o *GetACRTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get a c r too many requests response has a 3xx status code
func (o *GetACRTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get a c r too many requests response has a 4xx status code
func (o *GetACRTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get a c r too many requests response has a 5xx status code
func (o *GetACRTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get a c r too many requests response a status code equal to that given
func (o *GetACRTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get a c r too many requests response
func (o *GetACRTooManyRequests) Code() int {
	return 429
}

func (o *GetACRTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACRTooManyRequests %s", 429, payload)
}

func (o *GetACRTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/acrs/{acrID}][%d] getACRTooManyRequests %s", 429, payload)
}

func (o *GetACRTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetACRTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
