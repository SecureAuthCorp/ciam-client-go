// Code generated by go-swagger; DO NOT EDIT.

package a_c_rs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateACRReader is a Reader for the UpdateACR structure.
type UpdateACRReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateACRReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateACROK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateACRBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateACRUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateACRForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateACRNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateACRConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateACRUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateACRTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /servers/{wid}/acrs/{acrID}] updateACR", response, response.Code())
	}
}

// NewUpdateACROK creates a UpdateACROK with default headers values
func NewUpdateACROK() *UpdateACROK {
	return &UpdateACROK{}
}

/*
UpdateACROK describes a response with status code 200, with default header values.

ACR
*/
type UpdateACROK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ACR
}

// IsSuccess returns true when this update a c r o k response has a 2xx status code
func (o *UpdateACROK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update a c r o k response has a 3xx status code
func (o *UpdateACROK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a c r o k response has a 4xx status code
func (o *UpdateACROK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update a c r o k response has a 5xx status code
func (o *UpdateACROK) IsServerError() bool {
	return false
}

// IsCode returns true when this update a c r o k response a status code equal to that given
func (o *UpdateACROK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update a c r o k response
func (o *UpdateACROK) Code() int {
	return 200
}

func (o *UpdateACROK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACROK %s", 200, payload)
}

func (o *UpdateACROK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACROK %s", 200, payload)
}

func (o *UpdateACROK) GetPayload() *models.ACR {
	return o.Payload
}

func (o *UpdateACROK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ACR)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateACRBadRequest creates a UpdateACRBadRequest with default headers values
func NewUpdateACRBadRequest() *UpdateACRBadRequest {
	return &UpdateACRBadRequest{}
}

/*
UpdateACRBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateACRBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update a c r bad request response has a 2xx status code
func (o *UpdateACRBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a c r bad request response has a 3xx status code
func (o *UpdateACRBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a c r bad request response has a 4xx status code
func (o *UpdateACRBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a c r bad request response has a 5xx status code
func (o *UpdateACRBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update a c r bad request response a status code equal to that given
func (o *UpdateACRBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update a c r bad request response
func (o *UpdateACRBadRequest) Code() int {
	return 400
}

func (o *UpdateACRBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRBadRequest %s", 400, payload)
}

func (o *UpdateACRBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRBadRequest %s", 400, payload)
}

func (o *UpdateACRBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateACRBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateACRUnauthorized creates a UpdateACRUnauthorized with default headers values
func NewUpdateACRUnauthorized() *UpdateACRUnauthorized {
	return &UpdateACRUnauthorized{}
}

/*
UpdateACRUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateACRUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update a c r unauthorized response has a 2xx status code
func (o *UpdateACRUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a c r unauthorized response has a 3xx status code
func (o *UpdateACRUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a c r unauthorized response has a 4xx status code
func (o *UpdateACRUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a c r unauthorized response has a 5xx status code
func (o *UpdateACRUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update a c r unauthorized response a status code equal to that given
func (o *UpdateACRUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update a c r unauthorized response
func (o *UpdateACRUnauthorized) Code() int {
	return 401
}

func (o *UpdateACRUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRUnauthorized %s", 401, payload)
}

func (o *UpdateACRUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRUnauthorized %s", 401, payload)
}

func (o *UpdateACRUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateACRUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateACRForbidden creates a UpdateACRForbidden with default headers values
func NewUpdateACRForbidden() *UpdateACRForbidden {
	return &UpdateACRForbidden{}
}

/*
UpdateACRForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateACRForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update a c r forbidden response has a 2xx status code
func (o *UpdateACRForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a c r forbidden response has a 3xx status code
func (o *UpdateACRForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a c r forbidden response has a 4xx status code
func (o *UpdateACRForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a c r forbidden response has a 5xx status code
func (o *UpdateACRForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update a c r forbidden response a status code equal to that given
func (o *UpdateACRForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update a c r forbidden response
func (o *UpdateACRForbidden) Code() int {
	return 403
}

func (o *UpdateACRForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRForbidden %s", 403, payload)
}

func (o *UpdateACRForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRForbidden %s", 403, payload)
}

func (o *UpdateACRForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateACRForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateACRNotFound creates a UpdateACRNotFound with default headers values
func NewUpdateACRNotFound() *UpdateACRNotFound {
	return &UpdateACRNotFound{}
}

/*
UpdateACRNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateACRNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update a c r not found response has a 2xx status code
func (o *UpdateACRNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a c r not found response has a 3xx status code
func (o *UpdateACRNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a c r not found response has a 4xx status code
func (o *UpdateACRNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a c r not found response has a 5xx status code
func (o *UpdateACRNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update a c r not found response a status code equal to that given
func (o *UpdateACRNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update a c r not found response
func (o *UpdateACRNotFound) Code() int {
	return 404
}

func (o *UpdateACRNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRNotFound %s", 404, payload)
}

func (o *UpdateACRNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRNotFound %s", 404, payload)
}

func (o *UpdateACRNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateACRNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateACRConflict creates a UpdateACRConflict with default headers values
func NewUpdateACRConflict() *UpdateACRConflict {
	return &UpdateACRConflict{}
}

/*
UpdateACRConflict describes a response with status code 409, with default header values.

Unprocessable entity
*/
type UpdateACRConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update a c r conflict response has a 2xx status code
func (o *UpdateACRConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a c r conflict response has a 3xx status code
func (o *UpdateACRConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a c r conflict response has a 4xx status code
func (o *UpdateACRConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a c r conflict response has a 5xx status code
func (o *UpdateACRConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update a c r conflict response a status code equal to that given
func (o *UpdateACRConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update a c r conflict response
func (o *UpdateACRConflict) Code() int {
	return 409
}

func (o *UpdateACRConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRConflict %s", 409, payload)
}

func (o *UpdateACRConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRConflict %s", 409, payload)
}

func (o *UpdateACRConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateACRConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateACRUnprocessableEntity creates a UpdateACRUnprocessableEntity with default headers values
func NewUpdateACRUnprocessableEntity() *UpdateACRUnprocessableEntity {
	return &UpdateACRUnprocessableEntity{}
}

/*
UpdateACRUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateACRUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update a c r unprocessable entity response has a 2xx status code
func (o *UpdateACRUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a c r unprocessable entity response has a 3xx status code
func (o *UpdateACRUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a c r unprocessable entity response has a 4xx status code
func (o *UpdateACRUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a c r unprocessable entity response has a 5xx status code
func (o *UpdateACRUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update a c r unprocessable entity response a status code equal to that given
func (o *UpdateACRUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update a c r unprocessable entity response
func (o *UpdateACRUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateACRUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRUnprocessableEntity %s", 422, payload)
}

func (o *UpdateACRUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRUnprocessableEntity %s", 422, payload)
}

func (o *UpdateACRUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateACRUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateACRTooManyRequests creates a UpdateACRTooManyRequests with default headers values
func NewUpdateACRTooManyRequests() *UpdateACRTooManyRequests {
	return &UpdateACRTooManyRequests{}
}

/*
UpdateACRTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateACRTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update a c r too many requests response has a 2xx status code
func (o *UpdateACRTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a c r too many requests response has a 3xx status code
func (o *UpdateACRTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a c r too many requests response has a 4xx status code
func (o *UpdateACRTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a c r too many requests response has a 5xx status code
func (o *UpdateACRTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update a c r too many requests response a status code equal to that given
func (o *UpdateACRTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update a c r too many requests response
func (o *UpdateACRTooManyRequests) Code() int {
	return 429
}

func (o *UpdateACRTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRTooManyRequests %s", 429, payload)
}

func (o *UpdateACRTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /servers/{wid}/acrs/{acrID}][%d] updateACRTooManyRequests %s", 429, payload)
}

func (o *UpdateACRTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateACRTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
