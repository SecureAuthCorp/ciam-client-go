// Code generated by go-swagger; DO NOT EDIT.

package license

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetAdminLicenseReader is a Reader for the GetAdminLicense structure.
type GetAdminLicenseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAdminLicenseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAdminLicenseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAdminLicenseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAdminLicenseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAdminLicenseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAdminLicenseTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /license] getAdminLicense", response, response.Code())
	}
}

// NewGetAdminLicenseOK creates a GetAdminLicenseOK with default headers values
func NewGetAdminLicenseOK() *GetAdminLicenseOK {
	return &GetAdminLicenseOK{}
}

/*
GetAdminLicenseOK describes a response with status code 200, with default header values.

License
*/
type GetAdminLicenseOK struct {
	Payload *models.License
}

// IsSuccess returns true when this get admin license o k response has a 2xx status code
func (o *GetAdminLicenseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get admin license o k response has a 3xx status code
func (o *GetAdminLicenseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admin license o k response has a 4xx status code
func (o *GetAdminLicenseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get admin license o k response has a 5xx status code
func (o *GetAdminLicenseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get admin license o k response a status code equal to that given
func (o *GetAdminLicenseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get admin license o k response
func (o *GetAdminLicenseOK) Code() int {
	return 200
}

func (o *GetAdminLicenseOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseOK %s", 200, payload)
}

func (o *GetAdminLicenseOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseOK %s", 200, payload)
}

func (o *GetAdminLicenseOK) GetPayload() *models.License {
	return o.Payload
}

func (o *GetAdminLicenseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.License)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdminLicenseUnauthorized creates a GetAdminLicenseUnauthorized with default headers values
func NewGetAdminLicenseUnauthorized() *GetAdminLicenseUnauthorized {
	return &GetAdminLicenseUnauthorized{}
}

/*
GetAdminLicenseUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAdminLicenseUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get admin license unauthorized response has a 2xx status code
func (o *GetAdminLicenseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get admin license unauthorized response has a 3xx status code
func (o *GetAdminLicenseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admin license unauthorized response has a 4xx status code
func (o *GetAdminLicenseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get admin license unauthorized response has a 5xx status code
func (o *GetAdminLicenseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get admin license unauthorized response a status code equal to that given
func (o *GetAdminLicenseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get admin license unauthorized response
func (o *GetAdminLicenseUnauthorized) Code() int {
	return 401
}

func (o *GetAdminLicenseUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseUnauthorized %s", 401, payload)
}

func (o *GetAdminLicenseUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseUnauthorized %s", 401, payload)
}

func (o *GetAdminLicenseUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAdminLicenseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdminLicenseForbidden creates a GetAdminLicenseForbidden with default headers values
func NewGetAdminLicenseForbidden() *GetAdminLicenseForbidden {
	return &GetAdminLicenseForbidden{}
}

/*
GetAdminLicenseForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAdminLicenseForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get admin license forbidden response has a 2xx status code
func (o *GetAdminLicenseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get admin license forbidden response has a 3xx status code
func (o *GetAdminLicenseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admin license forbidden response has a 4xx status code
func (o *GetAdminLicenseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get admin license forbidden response has a 5xx status code
func (o *GetAdminLicenseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get admin license forbidden response a status code equal to that given
func (o *GetAdminLicenseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get admin license forbidden response
func (o *GetAdminLicenseForbidden) Code() int {
	return 403
}

func (o *GetAdminLicenseForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseForbidden %s", 403, payload)
}

func (o *GetAdminLicenseForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseForbidden %s", 403, payload)
}

func (o *GetAdminLicenseForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAdminLicenseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdminLicenseNotFound creates a GetAdminLicenseNotFound with default headers values
func NewGetAdminLicenseNotFound() *GetAdminLicenseNotFound {
	return &GetAdminLicenseNotFound{}
}

/*
GetAdminLicenseNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetAdminLicenseNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get admin license not found response has a 2xx status code
func (o *GetAdminLicenseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get admin license not found response has a 3xx status code
func (o *GetAdminLicenseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admin license not found response has a 4xx status code
func (o *GetAdminLicenseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get admin license not found response has a 5xx status code
func (o *GetAdminLicenseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get admin license not found response a status code equal to that given
func (o *GetAdminLicenseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get admin license not found response
func (o *GetAdminLicenseNotFound) Code() int {
	return 404
}

func (o *GetAdminLicenseNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseNotFound %s", 404, payload)
}

func (o *GetAdminLicenseNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseNotFound %s", 404, payload)
}

func (o *GetAdminLicenseNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAdminLicenseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdminLicenseTooManyRequests creates a GetAdminLicenseTooManyRequests with default headers values
func NewGetAdminLicenseTooManyRequests() *GetAdminLicenseTooManyRequests {
	return &GetAdminLicenseTooManyRequests{}
}

/*
GetAdminLicenseTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetAdminLicenseTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get admin license too many requests response has a 2xx status code
func (o *GetAdminLicenseTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get admin license too many requests response has a 3xx status code
func (o *GetAdminLicenseTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get admin license too many requests response has a 4xx status code
func (o *GetAdminLicenseTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get admin license too many requests response has a 5xx status code
func (o *GetAdminLicenseTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get admin license too many requests response a status code equal to that given
func (o *GetAdminLicenseTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get admin license too many requests response
func (o *GetAdminLicenseTooManyRequests) Code() int {
	return 429
}

func (o *GetAdminLicenseTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseTooManyRequests %s", 429, payload)
}

func (o *GetAdminLicenseTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /license][%d] getAdminLicenseTooManyRequests %s", 429, payload)
}

func (o *GetAdminLicenseTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAdminLicenseTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
