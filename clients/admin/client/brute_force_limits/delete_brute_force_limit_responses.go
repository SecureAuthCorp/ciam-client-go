// Code generated by go-swagger; DO NOT EDIT.

package brute_force_limits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// DeleteBruteForceLimitReader is a Reader for the DeleteBruteForceLimit structure.
type DeleteBruteForceLimitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteBruteForceLimitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteBruteForceLimitNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteBruteForceLimitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteBruteForceLimitForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteBruteForceLimitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteBruteForceLimitTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /bruteforce/{protectedType}] deleteBruteForceLimit", response, response.Code())
	}
}

// NewDeleteBruteForceLimitNoContent creates a DeleteBruteForceLimitNoContent with default headers values
func NewDeleteBruteForceLimitNoContent() *DeleteBruteForceLimitNoContent {
	return &DeleteBruteForceLimitNoContent{}
}

/*
DeleteBruteForceLimitNoContent describes a response with status code 204, with default header values.

	brute force limit has been reset
*/
type DeleteBruteForceLimitNoContent struct {
}

// IsSuccess returns true when this delete brute force limit no content response has a 2xx status code
func (o *DeleteBruteForceLimitNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete brute force limit no content response has a 3xx status code
func (o *DeleteBruteForceLimitNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete brute force limit no content response has a 4xx status code
func (o *DeleteBruteForceLimitNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete brute force limit no content response has a 5xx status code
func (o *DeleteBruteForceLimitNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete brute force limit no content response a status code equal to that given
func (o *DeleteBruteForceLimitNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete brute force limit no content response
func (o *DeleteBruteForceLimitNoContent) Code() int {
	return 204
}

func (o *DeleteBruteForceLimitNoContent) Error() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitNoContent ", 204)
}

func (o *DeleteBruteForceLimitNoContent) String() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitNoContent ", 204)
}

func (o *DeleteBruteForceLimitNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteBruteForceLimitUnauthorized creates a DeleteBruteForceLimitUnauthorized with default headers values
func NewDeleteBruteForceLimitUnauthorized() *DeleteBruteForceLimitUnauthorized {
	return &DeleteBruteForceLimitUnauthorized{}
}

/*
DeleteBruteForceLimitUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteBruteForceLimitUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete brute force limit unauthorized response has a 2xx status code
func (o *DeleteBruteForceLimitUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete brute force limit unauthorized response has a 3xx status code
func (o *DeleteBruteForceLimitUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete brute force limit unauthorized response has a 4xx status code
func (o *DeleteBruteForceLimitUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete brute force limit unauthorized response has a 5xx status code
func (o *DeleteBruteForceLimitUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete brute force limit unauthorized response a status code equal to that given
func (o *DeleteBruteForceLimitUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete brute force limit unauthorized response
func (o *DeleteBruteForceLimitUnauthorized) Code() int {
	return 401
}

func (o *DeleteBruteForceLimitUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteBruteForceLimitUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteBruteForceLimitUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteBruteForceLimitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBruteForceLimitForbidden creates a DeleteBruteForceLimitForbidden with default headers values
func NewDeleteBruteForceLimitForbidden() *DeleteBruteForceLimitForbidden {
	return &DeleteBruteForceLimitForbidden{}
}

/*
DeleteBruteForceLimitForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteBruteForceLimitForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete brute force limit forbidden response has a 2xx status code
func (o *DeleteBruteForceLimitForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete brute force limit forbidden response has a 3xx status code
func (o *DeleteBruteForceLimitForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete brute force limit forbidden response has a 4xx status code
func (o *DeleteBruteForceLimitForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete brute force limit forbidden response has a 5xx status code
func (o *DeleteBruteForceLimitForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete brute force limit forbidden response a status code equal to that given
func (o *DeleteBruteForceLimitForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete brute force limit forbidden response
func (o *DeleteBruteForceLimitForbidden) Code() int {
	return 403
}

func (o *DeleteBruteForceLimitForbidden) Error() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitForbidden  %+v", 403, o.Payload)
}

func (o *DeleteBruteForceLimitForbidden) String() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitForbidden  %+v", 403, o.Payload)
}

func (o *DeleteBruteForceLimitForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteBruteForceLimitForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBruteForceLimitNotFound creates a DeleteBruteForceLimitNotFound with default headers values
func NewDeleteBruteForceLimitNotFound() *DeleteBruteForceLimitNotFound {
	return &DeleteBruteForceLimitNotFound{}
}

/*
DeleteBruteForceLimitNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteBruteForceLimitNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete brute force limit not found response has a 2xx status code
func (o *DeleteBruteForceLimitNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete brute force limit not found response has a 3xx status code
func (o *DeleteBruteForceLimitNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete brute force limit not found response has a 4xx status code
func (o *DeleteBruteForceLimitNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete brute force limit not found response has a 5xx status code
func (o *DeleteBruteForceLimitNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete brute force limit not found response a status code equal to that given
func (o *DeleteBruteForceLimitNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete brute force limit not found response
func (o *DeleteBruteForceLimitNotFound) Code() int {
	return 404
}

func (o *DeleteBruteForceLimitNotFound) Error() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitNotFound  %+v", 404, o.Payload)
}

func (o *DeleteBruteForceLimitNotFound) String() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitNotFound  %+v", 404, o.Payload)
}

func (o *DeleteBruteForceLimitNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteBruteForceLimitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteBruteForceLimitTooManyRequests creates a DeleteBruteForceLimitTooManyRequests with default headers values
func NewDeleteBruteForceLimitTooManyRequests() *DeleteBruteForceLimitTooManyRequests {
	return &DeleteBruteForceLimitTooManyRequests{}
}

/*
DeleteBruteForceLimitTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteBruteForceLimitTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete brute force limit too many requests response has a 2xx status code
func (o *DeleteBruteForceLimitTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete brute force limit too many requests response has a 3xx status code
func (o *DeleteBruteForceLimitTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete brute force limit too many requests response has a 4xx status code
func (o *DeleteBruteForceLimitTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete brute force limit too many requests response has a 5xx status code
func (o *DeleteBruteForceLimitTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete brute force limit too many requests response a status code equal to that given
func (o *DeleteBruteForceLimitTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete brute force limit too many requests response
func (o *DeleteBruteForceLimitTooManyRequests) Code() int {
	return 429
}

func (o *DeleteBruteForceLimitTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteBruteForceLimitTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /bruteforce/{protectedType}][%d] deleteBruteForceLimitTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteBruteForceLimitTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteBruteForceLimitTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
