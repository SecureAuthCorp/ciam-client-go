// Code generated by go-swagger; DO NOT EDIT.

package apis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListAPIsByServerParams creates a new ListAPIsByServerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListAPIsByServerParams() *ListAPIsByServerParams {
	return &ListAPIsByServerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListAPIsByServerParamsWithTimeout creates a new ListAPIsByServerParams object
// with the ability to set a timeout on a request.
func NewListAPIsByServerParamsWithTimeout(timeout time.Duration) *ListAPIsByServerParams {
	return &ListAPIsByServerParams{
		timeout: timeout,
	}
}

// NewListAPIsByServerParamsWithContext creates a new ListAPIsByServerParams object
// with the ability to set a context for a request.
func NewListAPIsByServerParamsWithContext(ctx context.Context) *ListAPIsByServerParams {
	return &ListAPIsByServerParams{
		Context: ctx,
	}
}

// NewListAPIsByServerParamsWithHTTPClient creates a new ListAPIsByServerParams object
// with the ability to set a custom HTTPClient for a request.
func NewListAPIsByServerParamsWithHTTPClient(client *http.Client) *ListAPIsByServerParams {
	return &ListAPIsByServerParams{
		HTTPClient: client,
	}
}

/* ListAPIsByServerParams contains all the parameters to send to the API endpoint
   for the list a p is by server operation.

   Typically these are written to a http.Request.
*/
type ListAPIsByServerParams struct {

	/* DataClassification.

	   List apis that have given data classifications
	*/
	DataClassification []string

	/* Wid.

	   Server id

	   Default: "default"
	*/
	Wid string

	/* WithoutDataClassifications.

	   List apis that have no data classifications
	*/
	WithoutDataClassifications *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list a p is by server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAPIsByServerParams) WithDefaults() *ListAPIsByServerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list a p is by server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAPIsByServerParams) SetDefaults() {
	var (
		widDefault = string("default")
	)

	val := ListAPIsByServerParams{
		Wid: widDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list a p is by server params
func (o *ListAPIsByServerParams) WithTimeout(timeout time.Duration) *ListAPIsByServerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list a p is by server params
func (o *ListAPIsByServerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list a p is by server params
func (o *ListAPIsByServerParams) WithContext(ctx context.Context) *ListAPIsByServerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list a p is by server params
func (o *ListAPIsByServerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list a p is by server params
func (o *ListAPIsByServerParams) WithHTTPClient(client *http.Client) *ListAPIsByServerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list a p is by server params
func (o *ListAPIsByServerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDataClassification adds the dataClassification to the list a p is by server params
func (o *ListAPIsByServerParams) WithDataClassification(dataClassification []string) *ListAPIsByServerParams {
	o.SetDataClassification(dataClassification)
	return o
}

// SetDataClassification adds the dataClassification to the list a p is by server params
func (o *ListAPIsByServerParams) SetDataClassification(dataClassification []string) {
	o.DataClassification = dataClassification
}

// WithWid adds the wid to the list a p is by server params
func (o *ListAPIsByServerParams) WithWid(wid string) *ListAPIsByServerParams {
	o.SetWid(wid)
	return o
}

// SetWid adds the wid to the list a p is by server params
func (o *ListAPIsByServerParams) SetWid(wid string) {
	o.Wid = wid
}

// WithWithoutDataClassifications adds the withoutDataClassifications to the list a p is by server params
func (o *ListAPIsByServerParams) WithWithoutDataClassifications(withoutDataClassifications *bool) *ListAPIsByServerParams {
	o.SetWithoutDataClassifications(withoutDataClassifications)
	return o
}

// SetWithoutDataClassifications adds the withoutDataClassifications to the list a p is by server params
func (o *ListAPIsByServerParams) SetWithoutDataClassifications(withoutDataClassifications *bool) {
	o.WithoutDataClassifications = withoutDataClassifications
}

// WriteToRequest writes these params to a swagger request
func (o *ListAPIsByServerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DataClassification != nil {

		// binding items for data_classification
		joinedDataClassification := o.bindParamDataClassification(reg)

		// query array param data_classification
		if err := r.SetQueryParam("data_classification", joinedDataClassification...); err != nil {
			return err
		}
	}

	// path param wid
	if err := r.SetPathParam("wid", o.Wid); err != nil {
		return err
	}

	if o.WithoutDataClassifications != nil {

		// query param without_data_classifications
		var qrWithoutDataClassifications bool

		if o.WithoutDataClassifications != nil {
			qrWithoutDataClassifications = *o.WithoutDataClassifications
		}
		qWithoutDataClassifications := swag.FormatBool(qrWithoutDataClassifications)
		if qWithoutDataClassifications != "" {

			if err := r.SetQueryParam("without_data_classifications", qWithoutDataClassifications); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListAPIsByServer binds the parameter data_classification
func (o *ListAPIsByServerParams) bindParamDataClassification(formats strfmt.Registry) []string {
	dataClassificationIR := o.DataClassification

	var dataClassificationIC []string
	for _, dataClassificationIIR := range dataClassificationIR { // explode []string

		dataClassificationIIV := dataClassificationIIR // string as string
		dataClassificationIC = append(dataClassificationIC, dataClassificationIIV)
	}

	// items.CollectionFormat: ""
	dataClassificationIS := swag.JoinByFormat(dataClassificationIC, "")

	return dataClassificationIS
}
