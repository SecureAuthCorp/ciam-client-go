// Code generated by go-swagger; DO NOT EDIT.

package apis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateAPIReader is a Reader for the UpdateAPI structure.
type UpdateAPIReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAPIReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAPIOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAPIBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAPIUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAPIForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAPINotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateAPIUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateAPITooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /apis/{api}] updateAPI", response, response.Code())
	}
}

// NewUpdateAPIOK creates a UpdateAPIOK with default headers values
func NewUpdateAPIOK() *UpdateAPIOK {
	return &UpdateAPIOK{}
}

/*
UpdateAPIOK describes a response with status code 200, with default header values.

API
*/
type UpdateAPIOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.API
}

// IsSuccess returns true when this update Api o k response has a 2xx status code
func (o *UpdateAPIOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update Api o k response has a 3xx status code
func (o *UpdateAPIOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api o k response has a 4xx status code
func (o *UpdateAPIOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update Api o k response has a 5xx status code
func (o *UpdateAPIOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api o k response a status code equal to that given
func (o *UpdateAPIOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update Api o k response
func (o *UpdateAPIOK) Code() int {
	return 200
}

func (o *UpdateAPIOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiOK %s", 200, payload)
}

func (o *UpdateAPIOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiOK %s", 200, payload)
}

func (o *UpdateAPIOK) GetPayload() *models.API {
	return o.Payload
}

func (o *UpdateAPIOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.API)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIBadRequest creates a UpdateAPIBadRequest with default headers values
func NewUpdateAPIBadRequest() *UpdateAPIBadRequest {
	return &UpdateAPIBadRequest{}
}

/*
UpdateAPIBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateAPIBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api bad request response has a 2xx status code
func (o *UpdateAPIBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api bad request response has a 3xx status code
func (o *UpdateAPIBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api bad request response has a 4xx status code
func (o *UpdateAPIBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Api bad request response has a 5xx status code
func (o *UpdateAPIBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api bad request response a status code equal to that given
func (o *UpdateAPIBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update Api bad request response
func (o *UpdateAPIBadRequest) Code() int {
	return 400
}

func (o *UpdateAPIBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiBadRequest %s", 400, payload)
}

func (o *UpdateAPIBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiBadRequest %s", 400, payload)
}

func (o *UpdateAPIBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPIBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIUnauthorized creates a UpdateAPIUnauthorized with default headers values
func NewUpdateAPIUnauthorized() *UpdateAPIUnauthorized {
	return &UpdateAPIUnauthorized{}
}

/*
UpdateAPIUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAPIUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api unauthorized response has a 2xx status code
func (o *UpdateAPIUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api unauthorized response has a 3xx status code
func (o *UpdateAPIUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api unauthorized response has a 4xx status code
func (o *UpdateAPIUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Api unauthorized response has a 5xx status code
func (o *UpdateAPIUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api unauthorized response a status code equal to that given
func (o *UpdateAPIUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update Api unauthorized response
func (o *UpdateAPIUnauthorized) Code() int {
	return 401
}

func (o *UpdateAPIUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiUnauthorized %s", 401, payload)
}

func (o *UpdateAPIUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiUnauthorized %s", 401, payload)
}

func (o *UpdateAPIUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPIUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIForbidden creates a UpdateAPIForbidden with default headers values
func NewUpdateAPIForbidden() *UpdateAPIForbidden {
	return &UpdateAPIForbidden{}
}

/*
UpdateAPIForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAPIForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api forbidden response has a 2xx status code
func (o *UpdateAPIForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api forbidden response has a 3xx status code
func (o *UpdateAPIForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api forbidden response has a 4xx status code
func (o *UpdateAPIForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Api forbidden response has a 5xx status code
func (o *UpdateAPIForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api forbidden response a status code equal to that given
func (o *UpdateAPIForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update Api forbidden response
func (o *UpdateAPIForbidden) Code() int {
	return 403
}

func (o *UpdateAPIForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiForbidden %s", 403, payload)
}

func (o *UpdateAPIForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiForbidden %s", 403, payload)
}

func (o *UpdateAPIForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPIForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPINotFound creates a UpdateAPINotFound with default headers values
func NewUpdateAPINotFound() *UpdateAPINotFound {
	return &UpdateAPINotFound{}
}

/*
UpdateAPINotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateAPINotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api not found response has a 2xx status code
func (o *UpdateAPINotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api not found response has a 3xx status code
func (o *UpdateAPINotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api not found response has a 4xx status code
func (o *UpdateAPINotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Api not found response has a 5xx status code
func (o *UpdateAPINotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api not found response a status code equal to that given
func (o *UpdateAPINotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update Api not found response
func (o *UpdateAPINotFound) Code() int {
	return 404
}

func (o *UpdateAPINotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiNotFound %s", 404, payload)
}

func (o *UpdateAPINotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiNotFound %s", 404, payload)
}

func (o *UpdateAPINotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPINotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIUnprocessableEntity creates a UpdateAPIUnprocessableEntity with default headers values
func NewUpdateAPIUnprocessableEntity() *UpdateAPIUnprocessableEntity {
	return &UpdateAPIUnprocessableEntity{}
}

/*
UpdateAPIUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateAPIUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api unprocessable entity response has a 2xx status code
func (o *UpdateAPIUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api unprocessable entity response has a 3xx status code
func (o *UpdateAPIUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api unprocessable entity response has a 4xx status code
func (o *UpdateAPIUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Api unprocessable entity response has a 5xx status code
func (o *UpdateAPIUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api unprocessable entity response a status code equal to that given
func (o *UpdateAPIUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update Api unprocessable entity response
func (o *UpdateAPIUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateAPIUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiUnprocessableEntity %s", 422, payload)
}

func (o *UpdateAPIUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiUnprocessableEntity %s", 422, payload)
}

func (o *UpdateAPIUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPIUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPITooManyRequests creates a UpdateAPITooManyRequests with default headers values
func NewUpdateAPITooManyRequests() *UpdateAPITooManyRequests {
	return &UpdateAPITooManyRequests{}
}

/*
UpdateAPITooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateAPITooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update Api too many requests response has a 2xx status code
func (o *UpdateAPITooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update Api too many requests response has a 3xx status code
func (o *UpdateAPITooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update Api too many requests response has a 4xx status code
func (o *UpdateAPITooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update Api too many requests response has a 5xx status code
func (o *UpdateAPITooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update Api too many requests response a status code equal to that given
func (o *UpdateAPITooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update Api too many requests response
func (o *UpdateAPITooManyRequests) Code() int {
	return 429
}

func (o *UpdateAPITooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiTooManyRequests %s", 429, payload)
}

func (o *UpdateAPITooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /apis/{api}][%d] updateApiTooManyRequests %s", 429, payload)
}

func (o *UpdateAPITooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAPITooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
