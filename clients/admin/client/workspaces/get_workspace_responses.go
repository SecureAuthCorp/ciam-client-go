// Code generated by go-swagger; DO NOT EDIT.

package workspaces

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetWorkspaceReader is a Reader for the GetWorkspace structure.
type GetWorkspaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkspaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkspaceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetWorkspaceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWorkspaceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetWorkspaceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetWorkspaceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /workspaces/{wid}] getWorkspace", response, response.Code())
	}
}

// NewGetWorkspaceOK creates a GetWorkspaceOK with default headers values
func NewGetWorkspaceOK() *GetWorkspaceOK {
	return &GetWorkspaceOK{}
}

/*
GetWorkspaceOK describes a response with status code 200, with default header values.

Server
*/
type GetWorkspaceOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ServerResponse
}

// IsSuccess returns true when this get workspace o k response has a 2xx status code
func (o *GetWorkspaceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get workspace o k response has a 3xx status code
func (o *GetWorkspaceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workspace o k response has a 4xx status code
func (o *GetWorkspaceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get workspace o k response has a 5xx status code
func (o *GetWorkspaceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get workspace o k response a status code equal to that given
func (o *GetWorkspaceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get workspace o k response
func (o *GetWorkspaceOK) Code() int {
	return 200
}

func (o *GetWorkspaceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceOK %s", 200, payload)
}

func (o *GetWorkspaceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceOK %s", 200, payload)
}

func (o *GetWorkspaceOK) GetPayload() *models.ServerResponse {
	return o.Payload
}

func (o *GetWorkspaceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ServerResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkspaceUnauthorized creates a GetWorkspaceUnauthorized with default headers values
func NewGetWorkspaceUnauthorized() *GetWorkspaceUnauthorized {
	return &GetWorkspaceUnauthorized{}
}

/*
GetWorkspaceUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetWorkspaceUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get workspace unauthorized response has a 2xx status code
func (o *GetWorkspaceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workspace unauthorized response has a 3xx status code
func (o *GetWorkspaceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workspace unauthorized response has a 4xx status code
func (o *GetWorkspaceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workspace unauthorized response has a 5xx status code
func (o *GetWorkspaceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get workspace unauthorized response a status code equal to that given
func (o *GetWorkspaceUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get workspace unauthorized response
func (o *GetWorkspaceUnauthorized) Code() int {
	return 401
}

func (o *GetWorkspaceUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceUnauthorized %s", 401, payload)
}

func (o *GetWorkspaceUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceUnauthorized %s", 401, payload)
}

func (o *GetWorkspaceUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWorkspaceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkspaceForbidden creates a GetWorkspaceForbidden with default headers values
func NewGetWorkspaceForbidden() *GetWorkspaceForbidden {
	return &GetWorkspaceForbidden{}
}

/*
GetWorkspaceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWorkspaceForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get workspace forbidden response has a 2xx status code
func (o *GetWorkspaceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workspace forbidden response has a 3xx status code
func (o *GetWorkspaceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workspace forbidden response has a 4xx status code
func (o *GetWorkspaceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workspace forbidden response has a 5xx status code
func (o *GetWorkspaceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get workspace forbidden response a status code equal to that given
func (o *GetWorkspaceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get workspace forbidden response
func (o *GetWorkspaceForbidden) Code() int {
	return 403
}

func (o *GetWorkspaceForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceForbidden %s", 403, payload)
}

func (o *GetWorkspaceForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceForbidden %s", 403, payload)
}

func (o *GetWorkspaceForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWorkspaceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkspaceNotFound creates a GetWorkspaceNotFound with default headers values
func NewGetWorkspaceNotFound() *GetWorkspaceNotFound {
	return &GetWorkspaceNotFound{}
}

/*
GetWorkspaceNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetWorkspaceNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get workspace not found response has a 2xx status code
func (o *GetWorkspaceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workspace not found response has a 3xx status code
func (o *GetWorkspaceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workspace not found response has a 4xx status code
func (o *GetWorkspaceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workspace not found response has a 5xx status code
func (o *GetWorkspaceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get workspace not found response a status code equal to that given
func (o *GetWorkspaceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get workspace not found response
func (o *GetWorkspaceNotFound) Code() int {
	return 404
}

func (o *GetWorkspaceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceNotFound %s", 404, payload)
}

func (o *GetWorkspaceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceNotFound %s", 404, payload)
}

func (o *GetWorkspaceNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWorkspaceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkspaceTooManyRequests creates a GetWorkspaceTooManyRequests with default headers values
func NewGetWorkspaceTooManyRequests() *GetWorkspaceTooManyRequests {
	return &GetWorkspaceTooManyRequests{}
}

/*
GetWorkspaceTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetWorkspaceTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get workspace too many requests response has a 2xx status code
func (o *GetWorkspaceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get workspace too many requests response has a 3xx status code
func (o *GetWorkspaceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get workspace too many requests response has a 4xx status code
func (o *GetWorkspaceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get workspace too many requests response has a 5xx status code
func (o *GetWorkspaceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get workspace too many requests response a status code equal to that given
func (o *GetWorkspaceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get workspace too many requests response
func (o *GetWorkspaceTooManyRequests) Code() int {
	return 429
}

func (o *GetWorkspaceTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceTooManyRequests %s", 429, payload)
}

func (o *GetWorkspaceTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /workspaces/{wid}][%d] getWorkspaceTooManyRequests %s", 429, payload)
}

func (o *GetWorkspaceTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetWorkspaceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
