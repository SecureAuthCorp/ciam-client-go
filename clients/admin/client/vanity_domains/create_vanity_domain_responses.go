// Code generated by go-swagger; DO NOT EDIT.

package vanity_domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CreateVanityDomainReader is a Reader for the CreateVanityDomain structure.
type CreateVanityDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVanityDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateVanityDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateVanityDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateVanityDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateVanityDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateVanityDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateVanityDomainConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateVanityDomainUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateVanityDomainTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateVanityDomainOK creates a CreateVanityDomainOK with default headers values
func NewCreateVanityDomainOK() *CreateVanityDomainOK {
	return &CreateVanityDomainOK{}
}

/*
CreateVanityDomainOK describes a response with status code 200, with default header values.

Vanity domain
*/
type CreateVanityDomainOK struct {
	Payload *models.VanityDomain
}

// IsSuccess returns true when this create vanity domain o k response has a 2xx status code
func (o *CreateVanityDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create vanity domain o k response has a 3xx status code
func (o *CreateVanityDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create vanity domain o k response has a 4xx status code
func (o *CreateVanityDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create vanity domain o k response has a 5xx status code
func (o *CreateVanityDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create vanity domain o k response a status code equal to that given
func (o *CreateVanityDomainOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateVanityDomainOK) Error() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainOK  %+v", 200, o.Payload)
}

func (o *CreateVanityDomainOK) String() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainOK  %+v", 200, o.Payload)
}

func (o *CreateVanityDomainOK) GetPayload() *models.VanityDomain {
	return o.Payload
}

func (o *CreateVanityDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VanityDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVanityDomainBadRequest creates a CreateVanityDomainBadRequest with default headers values
func NewCreateVanityDomainBadRequest() *CreateVanityDomainBadRequest {
	return &CreateVanityDomainBadRequest{}
}

/*
CreateVanityDomainBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type CreateVanityDomainBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this create vanity domain bad request response has a 2xx status code
func (o *CreateVanityDomainBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create vanity domain bad request response has a 3xx status code
func (o *CreateVanityDomainBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create vanity domain bad request response has a 4xx status code
func (o *CreateVanityDomainBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create vanity domain bad request response has a 5xx status code
func (o *CreateVanityDomainBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create vanity domain bad request response a status code equal to that given
func (o *CreateVanityDomainBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateVanityDomainBadRequest) Error() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainBadRequest  %+v", 400, o.Payload)
}

func (o *CreateVanityDomainBadRequest) String() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainBadRequest  %+v", 400, o.Payload)
}

func (o *CreateVanityDomainBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVanityDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVanityDomainUnauthorized creates a CreateVanityDomainUnauthorized with default headers values
func NewCreateVanityDomainUnauthorized() *CreateVanityDomainUnauthorized {
	return &CreateVanityDomainUnauthorized{}
}

/*
CreateVanityDomainUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type CreateVanityDomainUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this create vanity domain unauthorized response has a 2xx status code
func (o *CreateVanityDomainUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create vanity domain unauthorized response has a 3xx status code
func (o *CreateVanityDomainUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create vanity domain unauthorized response has a 4xx status code
func (o *CreateVanityDomainUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create vanity domain unauthorized response has a 5xx status code
func (o *CreateVanityDomainUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create vanity domain unauthorized response a status code equal to that given
func (o *CreateVanityDomainUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateVanityDomainUnauthorized) Error() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateVanityDomainUnauthorized) String() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateVanityDomainUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVanityDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVanityDomainForbidden creates a CreateVanityDomainForbidden with default headers values
func NewCreateVanityDomainForbidden() *CreateVanityDomainForbidden {
	return &CreateVanityDomainForbidden{}
}

/*
CreateVanityDomainForbidden describes a response with status code 403, with default header values.

HttpError
*/
type CreateVanityDomainForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this create vanity domain forbidden response has a 2xx status code
func (o *CreateVanityDomainForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create vanity domain forbidden response has a 3xx status code
func (o *CreateVanityDomainForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create vanity domain forbidden response has a 4xx status code
func (o *CreateVanityDomainForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create vanity domain forbidden response has a 5xx status code
func (o *CreateVanityDomainForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create vanity domain forbidden response a status code equal to that given
func (o *CreateVanityDomainForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateVanityDomainForbidden) Error() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainForbidden  %+v", 403, o.Payload)
}

func (o *CreateVanityDomainForbidden) String() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainForbidden  %+v", 403, o.Payload)
}

func (o *CreateVanityDomainForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVanityDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVanityDomainNotFound creates a CreateVanityDomainNotFound with default headers values
func NewCreateVanityDomainNotFound() *CreateVanityDomainNotFound {
	return &CreateVanityDomainNotFound{}
}

/*
CreateVanityDomainNotFound describes a response with status code 404, with default header values.

HttpError
*/
type CreateVanityDomainNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this create vanity domain not found response has a 2xx status code
func (o *CreateVanityDomainNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create vanity domain not found response has a 3xx status code
func (o *CreateVanityDomainNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create vanity domain not found response has a 4xx status code
func (o *CreateVanityDomainNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create vanity domain not found response has a 5xx status code
func (o *CreateVanityDomainNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create vanity domain not found response a status code equal to that given
func (o *CreateVanityDomainNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateVanityDomainNotFound) Error() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainNotFound  %+v", 404, o.Payload)
}

func (o *CreateVanityDomainNotFound) String() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainNotFound  %+v", 404, o.Payload)
}

func (o *CreateVanityDomainNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVanityDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVanityDomainConflict creates a CreateVanityDomainConflict with default headers values
func NewCreateVanityDomainConflict() *CreateVanityDomainConflict {
	return &CreateVanityDomainConflict{}
}

/*
CreateVanityDomainConflict describes a response with status code 409, with default header values.

HttpError
*/
type CreateVanityDomainConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this create vanity domain conflict response has a 2xx status code
func (o *CreateVanityDomainConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create vanity domain conflict response has a 3xx status code
func (o *CreateVanityDomainConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create vanity domain conflict response has a 4xx status code
func (o *CreateVanityDomainConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create vanity domain conflict response has a 5xx status code
func (o *CreateVanityDomainConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create vanity domain conflict response a status code equal to that given
func (o *CreateVanityDomainConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateVanityDomainConflict) Error() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainConflict  %+v", 409, o.Payload)
}

func (o *CreateVanityDomainConflict) String() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainConflict  %+v", 409, o.Payload)
}

func (o *CreateVanityDomainConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVanityDomainConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVanityDomainUnprocessableEntity creates a CreateVanityDomainUnprocessableEntity with default headers values
func NewCreateVanityDomainUnprocessableEntity() *CreateVanityDomainUnprocessableEntity {
	return &CreateVanityDomainUnprocessableEntity{}
}

/*
CreateVanityDomainUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type CreateVanityDomainUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this create vanity domain unprocessable entity response has a 2xx status code
func (o *CreateVanityDomainUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create vanity domain unprocessable entity response has a 3xx status code
func (o *CreateVanityDomainUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create vanity domain unprocessable entity response has a 4xx status code
func (o *CreateVanityDomainUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create vanity domain unprocessable entity response has a 5xx status code
func (o *CreateVanityDomainUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create vanity domain unprocessable entity response a status code equal to that given
func (o *CreateVanityDomainUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *CreateVanityDomainUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateVanityDomainUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateVanityDomainUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVanityDomainUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVanityDomainTooManyRequests creates a CreateVanityDomainTooManyRequests with default headers values
func NewCreateVanityDomainTooManyRequests() *CreateVanityDomainTooManyRequests {
	return &CreateVanityDomainTooManyRequests{}
}

/*
CreateVanityDomainTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type CreateVanityDomainTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this create vanity domain too many requests response has a 2xx status code
func (o *CreateVanityDomainTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create vanity domain too many requests response has a 3xx status code
func (o *CreateVanityDomainTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create vanity domain too many requests response has a 4xx status code
func (o *CreateVanityDomainTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create vanity domain too many requests response has a 5xx status code
func (o *CreateVanityDomainTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create vanity domain too many requests response a status code equal to that given
func (o *CreateVanityDomainTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateVanityDomainTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateVanityDomainTooManyRequests) String() string {
	return fmt.Sprintf("[POST /vanity-domains][%d] createVanityDomainTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateVanityDomainTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateVanityDomainTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
