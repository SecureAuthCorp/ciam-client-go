// Code generated by go-swagger; DO NOT EDIT.

package vanity_domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetVanityDomainReader is a Reader for the GetVanityDomain structure.
type GetVanityDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVanityDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVanityDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVanityDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVanityDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVanityDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetVanityDomainTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /vanity-domains] getVanityDomain", response, response.Code())
	}
}

// NewGetVanityDomainOK creates a GetVanityDomainOK with default headers values
func NewGetVanityDomainOK() *GetVanityDomainOK {
	return &GetVanityDomainOK{}
}

/*
GetVanityDomainOK describes a response with status code 200, with default header values.

Vanity domain
*/
type GetVanityDomainOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.VanityDomain
}

// IsSuccess returns true when this get vanity domain o k response has a 2xx status code
func (o *GetVanityDomainOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get vanity domain o k response has a 3xx status code
func (o *GetVanityDomainOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vanity domain o k response has a 4xx status code
func (o *GetVanityDomainOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get vanity domain o k response has a 5xx status code
func (o *GetVanityDomainOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get vanity domain o k response a status code equal to that given
func (o *GetVanityDomainOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get vanity domain o k response
func (o *GetVanityDomainOK) Code() int {
	return 200
}

func (o *GetVanityDomainOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainOK %s", 200, payload)
}

func (o *GetVanityDomainOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainOK %s", 200, payload)
}

func (o *GetVanityDomainOK) GetPayload() *models.VanityDomain {
	return o.Payload
}

func (o *GetVanityDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.VanityDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVanityDomainUnauthorized creates a GetVanityDomainUnauthorized with default headers values
func NewGetVanityDomainUnauthorized() *GetVanityDomainUnauthorized {
	return &GetVanityDomainUnauthorized{}
}

/*
GetVanityDomainUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVanityDomainUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get vanity domain unauthorized response has a 2xx status code
func (o *GetVanityDomainUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vanity domain unauthorized response has a 3xx status code
func (o *GetVanityDomainUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vanity domain unauthorized response has a 4xx status code
func (o *GetVanityDomainUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vanity domain unauthorized response has a 5xx status code
func (o *GetVanityDomainUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get vanity domain unauthorized response a status code equal to that given
func (o *GetVanityDomainUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get vanity domain unauthorized response
func (o *GetVanityDomainUnauthorized) Code() int {
	return 401
}

func (o *GetVanityDomainUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainUnauthorized %s", 401, payload)
}

func (o *GetVanityDomainUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainUnauthorized %s", 401, payload)
}

func (o *GetVanityDomainUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVanityDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVanityDomainForbidden creates a GetVanityDomainForbidden with default headers values
func NewGetVanityDomainForbidden() *GetVanityDomainForbidden {
	return &GetVanityDomainForbidden{}
}

/*
GetVanityDomainForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVanityDomainForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get vanity domain forbidden response has a 2xx status code
func (o *GetVanityDomainForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vanity domain forbidden response has a 3xx status code
func (o *GetVanityDomainForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vanity domain forbidden response has a 4xx status code
func (o *GetVanityDomainForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vanity domain forbidden response has a 5xx status code
func (o *GetVanityDomainForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get vanity domain forbidden response a status code equal to that given
func (o *GetVanityDomainForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get vanity domain forbidden response
func (o *GetVanityDomainForbidden) Code() int {
	return 403
}

func (o *GetVanityDomainForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainForbidden %s", 403, payload)
}

func (o *GetVanityDomainForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainForbidden %s", 403, payload)
}

func (o *GetVanityDomainForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVanityDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVanityDomainNotFound creates a GetVanityDomainNotFound with default headers values
func NewGetVanityDomainNotFound() *GetVanityDomainNotFound {
	return &GetVanityDomainNotFound{}
}

/*
GetVanityDomainNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVanityDomainNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get vanity domain not found response has a 2xx status code
func (o *GetVanityDomainNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vanity domain not found response has a 3xx status code
func (o *GetVanityDomainNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vanity domain not found response has a 4xx status code
func (o *GetVanityDomainNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vanity domain not found response has a 5xx status code
func (o *GetVanityDomainNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get vanity domain not found response a status code equal to that given
func (o *GetVanityDomainNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get vanity domain not found response
func (o *GetVanityDomainNotFound) Code() int {
	return 404
}

func (o *GetVanityDomainNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainNotFound %s", 404, payload)
}

func (o *GetVanityDomainNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainNotFound %s", 404, payload)
}

func (o *GetVanityDomainNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVanityDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVanityDomainTooManyRequests creates a GetVanityDomainTooManyRequests with default headers values
func NewGetVanityDomainTooManyRequests() *GetVanityDomainTooManyRequests {
	return &GetVanityDomainTooManyRequests{}
}

/*
GetVanityDomainTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetVanityDomainTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get vanity domain too many requests response has a 2xx status code
func (o *GetVanityDomainTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vanity domain too many requests response has a 3xx status code
func (o *GetVanityDomainTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vanity domain too many requests response has a 4xx status code
func (o *GetVanityDomainTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vanity domain too many requests response has a 5xx status code
func (o *GetVanityDomainTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get vanity domain too many requests response a status code equal to that given
func (o *GetVanityDomainTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get vanity domain too many requests response
func (o *GetVanityDomainTooManyRequests) Code() int {
	return 429
}

func (o *GetVanityDomainTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainTooManyRequests %s", 429, payload)
}

func (o *GetVanityDomainTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainTooManyRequests %s", 429, payload)
}

func (o *GetVanityDomainTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVanityDomainTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
