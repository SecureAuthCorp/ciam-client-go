// Code generated by go-swagger; DO NOT EDIT.

package vanity_domains

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetVanityDomainReader is a Reader for the GetVanityDomain structure.
type GetVanityDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVanityDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVanityDomainOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVanityDomainUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVanityDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVanityDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetVanityDomainTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVanityDomainOK creates a GetVanityDomainOK with default headers values
func NewGetVanityDomainOK() *GetVanityDomainOK {
	return &GetVanityDomainOK{}
}

/* GetVanityDomainOK describes a response with status code 200, with default header values.

Vanity domain
*/
type GetVanityDomainOK struct {
	Payload *models.VanityDomain
}

func (o *GetVanityDomainOK) Error() string {
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainOK  %+v", 200, o.Payload)
}
func (o *GetVanityDomainOK) GetPayload() *models.VanityDomain {
	return o.Payload
}

func (o *GetVanityDomainOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VanityDomain)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVanityDomainUnauthorized creates a GetVanityDomainUnauthorized with default headers values
func NewGetVanityDomainUnauthorized() *GetVanityDomainUnauthorized {
	return &GetVanityDomainUnauthorized{}
}

/* GetVanityDomainUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type GetVanityDomainUnauthorized struct {
	Payload *models.Error
}

func (o *GetVanityDomainUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainUnauthorized  %+v", 401, o.Payload)
}
func (o *GetVanityDomainUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVanityDomainUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVanityDomainForbidden creates a GetVanityDomainForbidden with default headers values
func NewGetVanityDomainForbidden() *GetVanityDomainForbidden {
	return &GetVanityDomainForbidden{}
}

/* GetVanityDomainForbidden describes a response with status code 403, with default header values.

HttpError
*/
type GetVanityDomainForbidden struct {
	Payload *models.Error
}

func (o *GetVanityDomainForbidden) Error() string {
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainForbidden  %+v", 403, o.Payload)
}
func (o *GetVanityDomainForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVanityDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVanityDomainNotFound creates a GetVanityDomainNotFound with default headers values
func NewGetVanityDomainNotFound() *GetVanityDomainNotFound {
	return &GetVanityDomainNotFound{}
}

/* GetVanityDomainNotFound describes a response with status code 404, with default header values.

HttpError
*/
type GetVanityDomainNotFound struct {
	Payload *models.Error
}

func (o *GetVanityDomainNotFound) Error() string {
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainNotFound  %+v", 404, o.Payload)
}
func (o *GetVanityDomainNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVanityDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVanityDomainTooManyRequests creates a GetVanityDomainTooManyRequests with default headers values
func NewGetVanityDomainTooManyRequests() *GetVanityDomainTooManyRequests {
	return &GetVanityDomainTooManyRequests{}
}

/* GetVanityDomainTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type GetVanityDomainTooManyRequests struct {
	Payload *models.Error
}

func (o *GetVanityDomainTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vanity-domains][%d] getVanityDomainTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetVanityDomainTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetVanityDomainTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
