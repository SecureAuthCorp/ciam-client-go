// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// SetAutomaticKeyRotationReader is a Reader for the SetAutomaticKeyRotation structure.
type SetAutomaticKeyRotationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetAutomaticKeyRotationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetAutomaticKeyRotationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetAutomaticKeyRotationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSetAutomaticKeyRotationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetAutomaticKeyRotationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetAutomaticKeyRotationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetAutomaticKeyRotationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /servers/{wid}/keys/automatic-key-rotation] setAutomaticKeyRotation", response, response.Code())
	}
}

// NewSetAutomaticKeyRotationOK creates a SetAutomaticKeyRotationOK with default headers values
func NewSetAutomaticKeyRotationOK() *SetAutomaticKeyRotationOK {
	return &SetAutomaticKeyRotationOK{}
}

/*
SetAutomaticKeyRotationOK describes a response with status code 200, with default header values.

Automation key rotation
*/
type SetAutomaticKeyRotationOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.AutomaticKeyRotation
}

// IsSuccess returns true when this set automatic key rotation o k response has a 2xx status code
func (o *SetAutomaticKeyRotationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set automatic key rotation o k response has a 3xx status code
func (o *SetAutomaticKeyRotationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set automatic key rotation o k response has a 4xx status code
func (o *SetAutomaticKeyRotationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set automatic key rotation o k response has a 5xx status code
func (o *SetAutomaticKeyRotationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set automatic key rotation o k response a status code equal to that given
func (o *SetAutomaticKeyRotationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the set automatic key rotation o k response
func (o *SetAutomaticKeyRotationOK) Code() int {
	return 200
}

func (o *SetAutomaticKeyRotationOK) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationOK  %+v", 200, o.Payload)
}

func (o *SetAutomaticKeyRotationOK) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationOK  %+v", 200, o.Payload)
}

func (o *SetAutomaticKeyRotationOK) GetPayload() *models.AutomaticKeyRotation {
	return o.Payload
}

func (o *SetAutomaticKeyRotationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.AutomaticKeyRotation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAutomaticKeyRotationBadRequest creates a SetAutomaticKeyRotationBadRequest with default headers values
func NewSetAutomaticKeyRotationBadRequest() *SetAutomaticKeyRotationBadRequest {
	return &SetAutomaticKeyRotationBadRequest{}
}

/*
SetAutomaticKeyRotationBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SetAutomaticKeyRotationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this set automatic key rotation bad request response has a 2xx status code
func (o *SetAutomaticKeyRotationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set automatic key rotation bad request response has a 3xx status code
func (o *SetAutomaticKeyRotationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set automatic key rotation bad request response has a 4xx status code
func (o *SetAutomaticKeyRotationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set automatic key rotation bad request response has a 5xx status code
func (o *SetAutomaticKeyRotationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set automatic key rotation bad request response a status code equal to that given
func (o *SetAutomaticKeyRotationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the set automatic key rotation bad request response
func (o *SetAutomaticKeyRotationBadRequest) Code() int {
	return 400
}

func (o *SetAutomaticKeyRotationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationBadRequest  %+v", 400, o.Payload)
}

func (o *SetAutomaticKeyRotationBadRequest) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationBadRequest  %+v", 400, o.Payload)
}

func (o *SetAutomaticKeyRotationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetAutomaticKeyRotationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAutomaticKeyRotationUnauthorized creates a SetAutomaticKeyRotationUnauthorized with default headers values
func NewSetAutomaticKeyRotationUnauthorized() *SetAutomaticKeyRotationUnauthorized {
	return &SetAutomaticKeyRotationUnauthorized{}
}

/*
SetAutomaticKeyRotationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetAutomaticKeyRotationUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this set automatic key rotation unauthorized response has a 2xx status code
func (o *SetAutomaticKeyRotationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set automatic key rotation unauthorized response has a 3xx status code
func (o *SetAutomaticKeyRotationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set automatic key rotation unauthorized response has a 4xx status code
func (o *SetAutomaticKeyRotationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set automatic key rotation unauthorized response has a 5xx status code
func (o *SetAutomaticKeyRotationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set automatic key rotation unauthorized response a status code equal to that given
func (o *SetAutomaticKeyRotationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the set automatic key rotation unauthorized response
func (o *SetAutomaticKeyRotationUnauthorized) Code() int {
	return 401
}

func (o *SetAutomaticKeyRotationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationUnauthorized  %+v", 401, o.Payload)
}

func (o *SetAutomaticKeyRotationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationUnauthorized  %+v", 401, o.Payload)
}

func (o *SetAutomaticKeyRotationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetAutomaticKeyRotationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAutomaticKeyRotationForbidden creates a SetAutomaticKeyRotationForbidden with default headers values
func NewSetAutomaticKeyRotationForbidden() *SetAutomaticKeyRotationForbidden {
	return &SetAutomaticKeyRotationForbidden{}
}

/*
SetAutomaticKeyRotationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetAutomaticKeyRotationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this set automatic key rotation forbidden response has a 2xx status code
func (o *SetAutomaticKeyRotationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set automatic key rotation forbidden response has a 3xx status code
func (o *SetAutomaticKeyRotationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set automatic key rotation forbidden response has a 4xx status code
func (o *SetAutomaticKeyRotationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set automatic key rotation forbidden response has a 5xx status code
func (o *SetAutomaticKeyRotationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set automatic key rotation forbidden response a status code equal to that given
func (o *SetAutomaticKeyRotationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the set automatic key rotation forbidden response
func (o *SetAutomaticKeyRotationForbidden) Code() int {
	return 403
}

func (o *SetAutomaticKeyRotationForbidden) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationForbidden  %+v", 403, o.Payload)
}

func (o *SetAutomaticKeyRotationForbidden) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationForbidden  %+v", 403, o.Payload)
}

func (o *SetAutomaticKeyRotationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetAutomaticKeyRotationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAutomaticKeyRotationNotFound creates a SetAutomaticKeyRotationNotFound with default headers values
func NewSetAutomaticKeyRotationNotFound() *SetAutomaticKeyRotationNotFound {
	return &SetAutomaticKeyRotationNotFound{}
}

/*
SetAutomaticKeyRotationNotFound describes a response with status code 404, with default header values.

Not found
*/
type SetAutomaticKeyRotationNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this set automatic key rotation not found response has a 2xx status code
func (o *SetAutomaticKeyRotationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set automatic key rotation not found response has a 3xx status code
func (o *SetAutomaticKeyRotationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set automatic key rotation not found response has a 4xx status code
func (o *SetAutomaticKeyRotationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set automatic key rotation not found response has a 5xx status code
func (o *SetAutomaticKeyRotationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set automatic key rotation not found response a status code equal to that given
func (o *SetAutomaticKeyRotationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the set automatic key rotation not found response
func (o *SetAutomaticKeyRotationNotFound) Code() int {
	return 404
}

func (o *SetAutomaticKeyRotationNotFound) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationNotFound  %+v", 404, o.Payload)
}

func (o *SetAutomaticKeyRotationNotFound) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationNotFound  %+v", 404, o.Payload)
}

func (o *SetAutomaticKeyRotationNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetAutomaticKeyRotationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAutomaticKeyRotationTooManyRequests creates a SetAutomaticKeyRotationTooManyRequests with default headers values
func NewSetAutomaticKeyRotationTooManyRequests() *SetAutomaticKeyRotationTooManyRequests {
	return &SetAutomaticKeyRotationTooManyRequests{}
}

/*
SetAutomaticKeyRotationTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type SetAutomaticKeyRotationTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this set automatic key rotation too many requests response has a 2xx status code
func (o *SetAutomaticKeyRotationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set automatic key rotation too many requests response has a 3xx status code
func (o *SetAutomaticKeyRotationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set automatic key rotation too many requests response has a 4xx status code
func (o *SetAutomaticKeyRotationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this set automatic key rotation too many requests response has a 5xx status code
func (o *SetAutomaticKeyRotationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this set automatic key rotation too many requests response a status code equal to that given
func (o *SetAutomaticKeyRotationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the set automatic key rotation too many requests response
func (o *SetAutomaticKeyRotationTooManyRequests) Code() int {
	return 429
}

func (o *SetAutomaticKeyRotationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetAutomaticKeyRotationTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /servers/{wid}/keys/automatic-key-rotation][%d] setAutomaticKeyRotationTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetAutomaticKeyRotationTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetAutomaticKeyRotationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
