// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetKeyReader is a Reader for the GetKey structure.
type GetKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetKeyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetKeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetKeyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/keys/{kid}/raw] getKey", response, response.Code())
	}
}

// NewGetKeyOK creates a GetKeyOK with default headers values
func NewGetKeyOK() *GetKeyOK {
	return &GetKeyOK{}
}

/*
GetKeyOK describes a response with status code 200, with default header values.

JWK
*/
type GetKeyOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ClientJWK
}

// IsSuccess returns true when this get key o k response has a 2xx status code
func (o *GetKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get key o k response has a 3xx status code
func (o *GetKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key o k response has a 4xx status code
func (o *GetKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get key o k response has a 5xx status code
func (o *GetKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get key o k response a status code equal to that given
func (o *GetKeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get key o k response
func (o *GetKeyOK) Code() int {
	return 200
}

func (o *GetKeyOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyOK  %+v", 200, o.Payload)
}

func (o *GetKeyOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyOK  %+v", 200, o.Payload)
}

func (o *GetKeyOK) GetPayload() *models.ClientJWK {
	return o.Payload
}

func (o *GetKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ClientJWK)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeyUnauthorized creates a GetKeyUnauthorized with default headers values
func NewGetKeyUnauthorized() *GetKeyUnauthorized {
	return &GetKeyUnauthorized{}
}

/*
GetKeyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetKeyUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get key unauthorized response has a 2xx status code
func (o *GetKeyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key unauthorized response has a 3xx status code
func (o *GetKeyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key unauthorized response has a 4xx status code
func (o *GetKeyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get key unauthorized response has a 5xx status code
func (o *GetKeyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get key unauthorized response a status code equal to that given
func (o *GetKeyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get key unauthorized response
func (o *GetKeyUnauthorized) Code() int {
	return 401
}

func (o *GetKeyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *GetKeyUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyUnauthorized  %+v", 401, o.Payload)
}

func (o *GetKeyUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetKeyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeyForbidden creates a GetKeyForbidden with default headers values
func NewGetKeyForbidden() *GetKeyForbidden {
	return &GetKeyForbidden{}
}

/*
GetKeyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetKeyForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get key forbidden response has a 2xx status code
func (o *GetKeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key forbidden response has a 3xx status code
func (o *GetKeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key forbidden response has a 4xx status code
func (o *GetKeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get key forbidden response has a 5xx status code
func (o *GetKeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get key forbidden response a status code equal to that given
func (o *GetKeyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get key forbidden response
func (o *GetKeyForbidden) Code() int {
	return 403
}

func (o *GetKeyForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyForbidden  %+v", 403, o.Payload)
}

func (o *GetKeyForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyForbidden  %+v", 403, o.Payload)
}

func (o *GetKeyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetKeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeyNotFound creates a GetKeyNotFound with default headers values
func NewGetKeyNotFound() *GetKeyNotFound {
	return &GetKeyNotFound{}
}

/*
GetKeyNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetKeyNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get key not found response has a 2xx status code
func (o *GetKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key not found response has a 3xx status code
func (o *GetKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key not found response has a 4xx status code
func (o *GetKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get key not found response has a 5xx status code
func (o *GetKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get key not found response a status code equal to that given
func (o *GetKeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get key not found response
func (o *GetKeyNotFound) Code() int {
	return 404
}

func (o *GetKeyNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyNotFound  %+v", 404, o.Payload)
}

func (o *GetKeyNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyNotFound  %+v", 404, o.Payload)
}

func (o *GetKeyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeyTooManyRequests creates a GetKeyTooManyRequests with default headers values
func NewGetKeyTooManyRequests() *GetKeyTooManyRequests {
	return &GetKeyTooManyRequests{}
}

/*
GetKeyTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetKeyTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get key too many requests response has a 2xx status code
func (o *GetKeyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get key too many requests response has a 3xx status code
func (o *GetKeyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get key too many requests response has a 4xx status code
func (o *GetKeyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get key too many requests response has a 5xx status code
func (o *GetKeyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get key too many requests response a status code equal to that given
func (o *GetKeyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get key too many requests response
func (o *GetKeyTooManyRequests) Code() int {
	return 429
}

func (o *GetKeyTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetKeyTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys/{kid}/raw][%d] getKeyTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetKeyTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetKeyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
