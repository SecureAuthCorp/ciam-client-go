// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetKeysReader is a Reader for the GetKeys structure.
type GetKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetKeysUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetKeysForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetKeysNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetKeysTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/keys] getKeys", response, response.Code())
	}
}

// NewGetKeysOK creates a GetKeysOK with default headers values
func NewGetKeysOK() *GetKeysOK {
	return &GetKeysOK{}
}

/*
GetKeysOK describes a response with status code 200, with default header values.

Keys
*/
type GetKeysOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.KeysResponse
}

// IsSuccess returns true when this get keys o k response has a 2xx status code
func (o *GetKeysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get keys o k response has a 3xx status code
func (o *GetKeysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get keys o k response has a 4xx status code
func (o *GetKeysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get keys o k response has a 5xx status code
func (o *GetKeysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get keys o k response a status code equal to that given
func (o *GetKeysOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get keys o k response
func (o *GetKeysOK) Code() int {
	return 200
}

func (o *GetKeysOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysOK  %+v", 200, o.Payload)
}

func (o *GetKeysOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysOK  %+v", 200, o.Payload)
}

func (o *GetKeysOK) GetPayload() *models.KeysResponse {
	return o.Payload
}

func (o *GetKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.KeysResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeysUnauthorized creates a GetKeysUnauthorized with default headers values
func NewGetKeysUnauthorized() *GetKeysUnauthorized {
	return &GetKeysUnauthorized{}
}

/*
GetKeysUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetKeysUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get keys unauthorized response has a 2xx status code
func (o *GetKeysUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get keys unauthorized response has a 3xx status code
func (o *GetKeysUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get keys unauthorized response has a 4xx status code
func (o *GetKeysUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get keys unauthorized response has a 5xx status code
func (o *GetKeysUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get keys unauthorized response a status code equal to that given
func (o *GetKeysUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get keys unauthorized response
func (o *GetKeysUnauthorized) Code() int {
	return 401
}

func (o *GetKeysUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysUnauthorized  %+v", 401, o.Payload)
}

func (o *GetKeysUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysUnauthorized  %+v", 401, o.Payload)
}

func (o *GetKeysUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetKeysUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeysForbidden creates a GetKeysForbidden with default headers values
func NewGetKeysForbidden() *GetKeysForbidden {
	return &GetKeysForbidden{}
}

/*
GetKeysForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetKeysForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get keys forbidden response has a 2xx status code
func (o *GetKeysForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get keys forbidden response has a 3xx status code
func (o *GetKeysForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get keys forbidden response has a 4xx status code
func (o *GetKeysForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get keys forbidden response has a 5xx status code
func (o *GetKeysForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get keys forbidden response a status code equal to that given
func (o *GetKeysForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get keys forbidden response
func (o *GetKeysForbidden) Code() int {
	return 403
}

func (o *GetKeysForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysForbidden  %+v", 403, o.Payload)
}

func (o *GetKeysForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysForbidden  %+v", 403, o.Payload)
}

func (o *GetKeysForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetKeysForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeysNotFound creates a GetKeysNotFound with default headers values
func NewGetKeysNotFound() *GetKeysNotFound {
	return &GetKeysNotFound{}
}

/*
GetKeysNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetKeysNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get keys not found response has a 2xx status code
func (o *GetKeysNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get keys not found response has a 3xx status code
func (o *GetKeysNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get keys not found response has a 4xx status code
func (o *GetKeysNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get keys not found response has a 5xx status code
func (o *GetKeysNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get keys not found response a status code equal to that given
func (o *GetKeysNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get keys not found response
func (o *GetKeysNotFound) Code() int {
	return 404
}

func (o *GetKeysNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysNotFound  %+v", 404, o.Payload)
}

func (o *GetKeysNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysNotFound  %+v", 404, o.Payload)
}

func (o *GetKeysNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetKeysNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetKeysTooManyRequests creates a GetKeysTooManyRequests with default headers values
func NewGetKeysTooManyRequests() *GetKeysTooManyRequests {
	return &GetKeysTooManyRequests{}
}

/*
GetKeysTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetKeysTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get keys too many requests response has a 2xx status code
func (o *GetKeysTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get keys too many requests response has a 3xx status code
func (o *GetKeysTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get keys too many requests response has a 4xx status code
func (o *GetKeysTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get keys too many requests response has a 5xx status code
func (o *GetKeysTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get keys too many requests response a status code equal to that given
func (o *GetKeysTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get keys too many requests response
func (o *GetKeysTooManyRequests) Code() int {
	return 429
}

func (o *GetKeysTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetKeysTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/keys][%d] getKeysTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetKeysTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetKeysTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
