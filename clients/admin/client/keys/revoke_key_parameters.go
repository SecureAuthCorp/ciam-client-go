// Code generated by go-swagger; DO NOT EDIT.

package keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRevokeKeyParams creates a new RevokeKeyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRevokeKeyParams() *RevokeKeyParams {
	return &RevokeKeyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRevokeKeyParamsWithTimeout creates a new RevokeKeyParams object
// with the ability to set a timeout on a request.
func NewRevokeKeyParamsWithTimeout(timeout time.Duration) *RevokeKeyParams {
	return &RevokeKeyParams{
		timeout: timeout,
	}
}

// NewRevokeKeyParamsWithContext creates a new RevokeKeyParams object
// with the ability to set a context for a request.
func NewRevokeKeyParamsWithContext(ctx context.Context) *RevokeKeyParams {
	return &RevokeKeyParams{
		Context: ctx,
	}
}

// NewRevokeKeyParamsWithHTTPClient creates a new RevokeKeyParams object
// with the ability to set a custom HTTPClient for a request.
func NewRevokeKeyParamsWithHTTPClient(client *http.Client) *RevokeKeyParams {
	return &RevokeKeyParams{
		HTTPClient: client,
	}
}

/*
RevokeKeyParams contains all the parameters to send to the API endpoint

	for the revoke key operation.

	Typically these are written to a http.Request.
*/
type RevokeKeyParams struct {

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	/* Kid.

	   Key id
	*/
	Kid string

	/* Use.

	   Key use (sig or enc)

	   Default: "sig"
	*/
	Use *string

	/* Wid.

	   Authorization server id

	   Default: "default"
	*/
	Wid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the revoke key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RevokeKeyParams) WithDefaults() *RevokeKeyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the revoke key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RevokeKeyParams) SetDefaults() {
	var (
		useDefault = string("sig")

		widDefault = string("default")
	)

	val := RevokeKeyParams{
		Use: &useDefault,
		Wid: widDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the revoke key params
func (o *RevokeKeyParams) WithTimeout(timeout time.Duration) *RevokeKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the revoke key params
func (o *RevokeKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the revoke key params
func (o *RevokeKeyParams) WithContext(ctx context.Context) *RevokeKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the revoke key params
func (o *RevokeKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the revoke key params
func (o *RevokeKeyParams) WithHTTPClient(client *http.Client) *RevokeKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the revoke key params
func (o *RevokeKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the revoke key params
func (o *RevokeKeyParams) WithIfMatch(ifMatch *string) *RevokeKeyParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the revoke key params
func (o *RevokeKeyParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithKid adds the kid to the revoke key params
func (o *RevokeKeyParams) WithKid(kid string) *RevokeKeyParams {
	o.SetKid(kid)
	return o
}

// SetKid adds the kid to the revoke key params
func (o *RevokeKeyParams) SetKid(kid string) {
	o.Kid = kid
}

// WithUse adds the use to the revoke key params
func (o *RevokeKeyParams) WithUse(use *string) *RevokeKeyParams {
	o.SetUse(use)
	return o
}

// SetUse adds the use to the revoke key params
func (o *RevokeKeyParams) SetUse(use *string) {
	o.Use = use
}

// WithWid adds the wid to the revoke key params
func (o *RevokeKeyParams) WithWid(wid string) *RevokeKeyParams {
	o.SetWid(wid)
	return o
}

// SetWid adds the wid to the revoke key params
func (o *RevokeKeyParams) SetWid(wid string) {
	o.Wid = wid
}

// WriteToRequest writes these params to a swagger request
func (o *RevokeKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	// path param kid
	if err := r.SetPathParam("kid", o.Kid); err != nil {
		return err
	}

	if o.Use != nil {

		// query param use
		var qrUse string

		if o.Use != nil {
			qrUse = *o.Use
		}
		qUse := qrUse
		if qUse != "" {

			if err := r.SetQueryParam("use", qUse); err != nil {
				return err
			}
		}
	}

	// path param wid
	if err := r.SetPathParam("wid", o.Wid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
