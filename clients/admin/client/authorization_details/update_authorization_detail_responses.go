// Code generated by go-swagger; DO NOT EDIT.

package authorization_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateAuthorizationDetailReader is a Reader for the UpdateAuthorizationDetail structure.
type UpdateAuthorizationDetailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAuthorizationDetailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAuthorizationDetailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAuthorizationDetailBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAuthorizationDetailUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAuthorizationDetailForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAuthorizationDetailNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewUpdateAuthorizationDetailConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateAuthorizationDetailUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateAuthorizationDetailTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /authorization-details/{authorizationDetailID}] updateAuthorizationDetail", response, response.Code())
	}
}

// NewUpdateAuthorizationDetailOK creates a UpdateAuthorizationDetailOK with default headers values
func NewUpdateAuthorizationDetailOK() *UpdateAuthorizationDetailOK {
	return &UpdateAuthorizationDetailOK{}
}

/*
UpdateAuthorizationDetailOK describes a response with status code 200, with default header values.

AuthorizationDetail
*/
type UpdateAuthorizationDetailOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.AuthorizationDetailWithServiceID
}

// IsSuccess returns true when this update authorization detail o k response has a 2xx status code
func (o *UpdateAuthorizationDetailOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update authorization detail o k response has a 3xx status code
func (o *UpdateAuthorizationDetailOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update authorization detail o k response has a 4xx status code
func (o *UpdateAuthorizationDetailOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update authorization detail o k response has a 5xx status code
func (o *UpdateAuthorizationDetailOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update authorization detail o k response a status code equal to that given
func (o *UpdateAuthorizationDetailOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update authorization detail o k response
func (o *UpdateAuthorizationDetailOK) Code() int {
	return 200
}

func (o *UpdateAuthorizationDetailOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailOK %s", 200, payload)
}

func (o *UpdateAuthorizationDetailOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailOK %s", 200, payload)
}

func (o *UpdateAuthorizationDetailOK) GetPayload() *models.AuthorizationDetailWithServiceID {
	return o.Payload
}

func (o *UpdateAuthorizationDetailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.AuthorizationDetailWithServiceID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationDetailBadRequest creates a UpdateAuthorizationDetailBadRequest with default headers values
func NewUpdateAuthorizationDetailBadRequest() *UpdateAuthorizationDetailBadRequest {
	return &UpdateAuthorizationDetailBadRequest{}
}

/*
UpdateAuthorizationDetailBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateAuthorizationDetailBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update authorization detail bad request response has a 2xx status code
func (o *UpdateAuthorizationDetailBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update authorization detail bad request response has a 3xx status code
func (o *UpdateAuthorizationDetailBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update authorization detail bad request response has a 4xx status code
func (o *UpdateAuthorizationDetailBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update authorization detail bad request response has a 5xx status code
func (o *UpdateAuthorizationDetailBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update authorization detail bad request response a status code equal to that given
func (o *UpdateAuthorizationDetailBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update authorization detail bad request response
func (o *UpdateAuthorizationDetailBadRequest) Code() int {
	return 400
}

func (o *UpdateAuthorizationDetailBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailBadRequest %s", 400, payload)
}

func (o *UpdateAuthorizationDetailBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailBadRequest %s", 400, payload)
}

func (o *UpdateAuthorizationDetailBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationDetailBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationDetailUnauthorized creates a UpdateAuthorizationDetailUnauthorized with default headers values
func NewUpdateAuthorizationDetailUnauthorized() *UpdateAuthorizationDetailUnauthorized {
	return &UpdateAuthorizationDetailUnauthorized{}
}

/*
UpdateAuthorizationDetailUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAuthorizationDetailUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update authorization detail unauthorized response has a 2xx status code
func (o *UpdateAuthorizationDetailUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update authorization detail unauthorized response has a 3xx status code
func (o *UpdateAuthorizationDetailUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update authorization detail unauthorized response has a 4xx status code
func (o *UpdateAuthorizationDetailUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update authorization detail unauthorized response has a 5xx status code
func (o *UpdateAuthorizationDetailUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update authorization detail unauthorized response a status code equal to that given
func (o *UpdateAuthorizationDetailUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update authorization detail unauthorized response
func (o *UpdateAuthorizationDetailUnauthorized) Code() int {
	return 401
}

func (o *UpdateAuthorizationDetailUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailUnauthorized %s", 401, payload)
}

func (o *UpdateAuthorizationDetailUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailUnauthorized %s", 401, payload)
}

func (o *UpdateAuthorizationDetailUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationDetailUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationDetailForbidden creates a UpdateAuthorizationDetailForbidden with default headers values
func NewUpdateAuthorizationDetailForbidden() *UpdateAuthorizationDetailForbidden {
	return &UpdateAuthorizationDetailForbidden{}
}

/*
UpdateAuthorizationDetailForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAuthorizationDetailForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update authorization detail forbidden response has a 2xx status code
func (o *UpdateAuthorizationDetailForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update authorization detail forbidden response has a 3xx status code
func (o *UpdateAuthorizationDetailForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update authorization detail forbidden response has a 4xx status code
func (o *UpdateAuthorizationDetailForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update authorization detail forbidden response has a 5xx status code
func (o *UpdateAuthorizationDetailForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update authorization detail forbidden response a status code equal to that given
func (o *UpdateAuthorizationDetailForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update authorization detail forbidden response
func (o *UpdateAuthorizationDetailForbidden) Code() int {
	return 403
}

func (o *UpdateAuthorizationDetailForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailForbidden %s", 403, payload)
}

func (o *UpdateAuthorizationDetailForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailForbidden %s", 403, payload)
}

func (o *UpdateAuthorizationDetailForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationDetailForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationDetailNotFound creates a UpdateAuthorizationDetailNotFound with default headers values
func NewUpdateAuthorizationDetailNotFound() *UpdateAuthorizationDetailNotFound {
	return &UpdateAuthorizationDetailNotFound{}
}

/*
UpdateAuthorizationDetailNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateAuthorizationDetailNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update authorization detail not found response has a 2xx status code
func (o *UpdateAuthorizationDetailNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update authorization detail not found response has a 3xx status code
func (o *UpdateAuthorizationDetailNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update authorization detail not found response has a 4xx status code
func (o *UpdateAuthorizationDetailNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update authorization detail not found response has a 5xx status code
func (o *UpdateAuthorizationDetailNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update authorization detail not found response a status code equal to that given
func (o *UpdateAuthorizationDetailNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update authorization detail not found response
func (o *UpdateAuthorizationDetailNotFound) Code() int {
	return 404
}

func (o *UpdateAuthorizationDetailNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailNotFound %s", 404, payload)
}

func (o *UpdateAuthorizationDetailNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailNotFound %s", 404, payload)
}

func (o *UpdateAuthorizationDetailNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationDetailNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationDetailConflict creates a UpdateAuthorizationDetailConflict with default headers values
func NewUpdateAuthorizationDetailConflict() *UpdateAuthorizationDetailConflict {
	return &UpdateAuthorizationDetailConflict{}
}

/*
UpdateAuthorizationDetailConflict describes a response with status code 409, with default header values.

Unprocessable entity
*/
type UpdateAuthorizationDetailConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this update authorization detail conflict response has a 2xx status code
func (o *UpdateAuthorizationDetailConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update authorization detail conflict response has a 3xx status code
func (o *UpdateAuthorizationDetailConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update authorization detail conflict response has a 4xx status code
func (o *UpdateAuthorizationDetailConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this update authorization detail conflict response has a 5xx status code
func (o *UpdateAuthorizationDetailConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this update authorization detail conflict response a status code equal to that given
func (o *UpdateAuthorizationDetailConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the update authorization detail conflict response
func (o *UpdateAuthorizationDetailConflict) Code() int {
	return 409
}

func (o *UpdateAuthorizationDetailConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailConflict %s", 409, payload)
}

func (o *UpdateAuthorizationDetailConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailConflict %s", 409, payload)
}

func (o *UpdateAuthorizationDetailConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationDetailConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationDetailUnprocessableEntity creates a UpdateAuthorizationDetailUnprocessableEntity with default headers values
func NewUpdateAuthorizationDetailUnprocessableEntity() *UpdateAuthorizationDetailUnprocessableEntity {
	return &UpdateAuthorizationDetailUnprocessableEntity{}
}

/*
UpdateAuthorizationDetailUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateAuthorizationDetailUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update authorization detail unprocessable entity response has a 2xx status code
func (o *UpdateAuthorizationDetailUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update authorization detail unprocessable entity response has a 3xx status code
func (o *UpdateAuthorizationDetailUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update authorization detail unprocessable entity response has a 4xx status code
func (o *UpdateAuthorizationDetailUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update authorization detail unprocessable entity response has a 5xx status code
func (o *UpdateAuthorizationDetailUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update authorization detail unprocessable entity response a status code equal to that given
func (o *UpdateAuthorizationDetailUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update authorization detail unprocessable entity response
func (o *UpdateAuthorizationDetailUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateAuthorizationDetailUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailUnprocessableEntity %s", 422, payload)
}

func (o *UpdateAuthorizationDetailUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailUnprocessableEntity %s", 422, payload)
}

func (o *UpdateAuthorizationDetailUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationDetailUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAuthorizationDetailTooManyRequests creates a UpdateAuthorizationDetailTooManyRequests with default headers values
func NewUpdateAuthorizationDetailTooManyRequests() *UpdateAuthorizationDetailTooManyRequests {
	return &UpdateAuthorizationDetailTooManyRequests{}
}

/*
UpdateAuthorizationDetailTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateAuthorizationDetailTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update authorization detail too many requests response has a 2xx status code
func (o *UpdateAuthorizationDetailTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update authorization detail too many requests response has a 3xx status code
func (o *UpdateAuthorizationDetailTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update authorization detail too many requests response has a 4xx status code
func (o *UpdateAuthorizationDetailTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update authorization detail too many requests response has a 5xx status code
func (o *UpdateAuthorizationDetailTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update authorization detail too many requests response a status code equal to that given
func (o *UpdateAuthorizationDetailTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update authorization detail too many requests response
func (o *UpdateAuthorizationDetailTooManyRequests) Code() int {
	return 429
}

func (o *UpdateAuthorizationDetailTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailTooManyRequests %s", 429, payload)
}

func (o *UpdateAuthorizationDetailTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /authorization-details/{authorizationDetailID}][%d] updateAuthorizationDetailTooManyRequests %s", 429, payload)
}

func (o *UpdateAuthorizationDetailTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateAuthorizationDetailTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
