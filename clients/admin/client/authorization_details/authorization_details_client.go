// Code generated by go-swagger; DO NOT EDIT.

package authorization_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new authorization details API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new authorization details API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new authorization details API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for authorization details API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAuthorizationDetail(params *CreateAuthorizationDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuthorizationDetailCreated, error)

	DeleteAuthorizationDetail(params *DeleteAuthorizationDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthorizationDetailNoContent, error)

	GetAuthorizationDetail(params *GetAuthorizationDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthorizationDetailOK, error)

	ListAuthorizationDetails(params *ListAuthorizationDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAuthorizationDetailsOK, error)

	UpdateAuthorizationDetail(params *UpdateAuthorizationDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthorizationDetailOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateAuthorizationDetail creates authorization detail

Creates a new Authorization Detail object.
*/
func (a *Client) CreateAuthorizationDetail(params *CreateAuthorizationDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAuthorizationDetailCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthorizationDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAuthorizationDetail",
		Method:             "POST",
		PathPattern:        "/authorization-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthorizationDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAuthorizationDetailCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAuthorizationDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAuthorizationDetail deletes authorization detail

Deletes the authorization detail.
*/
func (a *Client) DeleteAuthorizationDetail(params *DeleteAuthorizationDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAuthorizationDetailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthorizationDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAuthorizationDetail",
		Method:             "DELETE",
		PathPattern:        "/authorization-details/{authorizationDetailID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthorizationDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAuthorizationDetailNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAuthorizationDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuthorizationDetail gets authorization detail

Returns an Authorization Detail.
*/
func (a *Client) GetAuthorizationDetail(params *GetAuthorizationDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAuthorizationDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthorizationDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuthorizationDetail",
		Method:             "GET",
		PathPattern:        "/authorization-details/{authorizationDetailID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizationDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthorizationDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuthorizationDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListAuthorizationDetails lists authorization details

List authorization details.
*/
func (a *Client) ListAuthorizationDetails(params *ListAuthorizationDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAuthorizationDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthorizationDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAuthorizationDetails",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/authorization-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuthorizationDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAuthorizationDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAuthorizationDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAuthorizationDetail updates authorization detail

Updates the authorization detail
*/
func (a *Client) UpdateAuthorizationDetail(params *UpdateAuthorizationDetailParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAuthorizationDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthorizationDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAuthorizationDetail",
		Method:             "PUT",
		PathPattern:        "/authorization-details/{authorizationDetailID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthorizationDetailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAuthorizationDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAuthorizationDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
