// Code generated by go-swagger; DO NOT EDIT.

package authorization_details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// NewUpdateAuthorizationDetailParams creates a new UpdateAuthorizationDetailParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateAuthorizationDetailParams() *UpdateAuthorizationDetailParams {
	return &UpdateAuthorizationDetailParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAuthorizationDetailParamsWithTimeout creates a new UpdateAuthorizationDetailParams object
// with the ability to set a timeout on a request.
func NewUpdateAuthorizationDetailParamsWithTimeout(timeout time.Duration) *UpdateAuthorizationDetailParams {
	return &UpdateAuthorizationDetailParams{
		timeout: timeout,
	}
}

// NewUpdateAuthorizationDetailParamsWithContext creates a new UpdateAuthorizationDetailParams object
// with the ability to set a context for a request.
func NewUpdateAuthorizationDetailParamsWithContext(ctx context.Context) *UpdateAuthorizationDetailParams {
	return &UpdateAuthorizationDetailParams{
		Context: ctx,
	}
}

// NewUpdateAuthorizationDetailParamsWithHTTPClient creates a new UpdateAuthorizationDetailParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateAuthorizationDetailParamsWithHTTPClient(client *http.Client) *UpdateAuthorizationDetailParams {
	return &UpdateAuthorizationDetailParams{
		HTTPClient: client,
	}
}

/*
UpdateAuthorizationDetailParams contains all the parameters to send to the API endpoint

	for the update authorization detail operation.

	Typically these are written to a http.Request.
*/
type UpdateAuthorizationDetailParams struct {

	// AuthorizationDetail.
	AuthorizationDetail *models.AuthorizationDetail

	/* AuthorizationDetailID.

	   AuthorizationDetail ID
	*/
	AuthorizationDetailID string

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update authorization detail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAuthorizationDetailParams) WithDefaults() *UpdateAuthorizationDetailParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update authorization detail params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAuthorizationDetailParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) WithTimeout(timeout time.Duration) *UpdateAuthorizationDetailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) WithContext(ctx context.Context) *UpdateAuthorizationDetailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) WithHTTPClient(client *http.Client) *UpdateAuthorizationDetailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorizationDetail adds the authorizationDetail to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) WithAuthorizationDetail(authorizationDetail *models.AuthorizationDetail) *UpdateAuthorizationDetailParams {
	o.SetAuthorizationDetail(authorizationDetail)
	return o
}

// SetAuthorizationDetail adds the authorizationDetail to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) SetAuthorizationDetail(authorizationDetail *models.AuthorizationDetail) {
	o.AuthorizationDetail = authorizationDetail
}

// WithAuthorizationDetailID adds the authorizationDetailID to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) WithAuthorizationDetailID(authorizationDetailID string) *UpdateAuthorizationDetailParams {
	o.SetAuthorizationDetailID(authorizationDetailID)
	return o
}

// SetAuthorizationDetailID adds the authorizationDetailId to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) SetAuthorizationDetailID(authorizationDetailID string) {
	o.AuthorizationDetailID = authorizationDetailID
}

// WithIfMatch adds the ifMatch to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) WithIfMatch(ifMatch *string) *UpdateAuthorizationDetailParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the update authorization detail params
func (o *UpdateAuthorizationDetailParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAuthorizationDetailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.AuthorizationDetail != nil {
		if err := r.SetBodyParam(o.AuthorizationDetail); err != nil {
			return err
		}
	}

	// path param authorizationDetailID
	if err := r.SetPathParam("authorizationDetailID", o.AuthorizationDetailID); err != nil {
		return err
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
