// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetServerThemeReader is a Reader for the GetServerTheme structure.
type GetServerThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServerThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServerThemeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetServerThemeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServerThemeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServerThemeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetServerThemeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/theme] getServerTheme", response, response.Code())
	}
}

// NewGetServerThemeOK creates a GetServerThemeOK with default headers values
func NewGetServerThemeOK() *GetServerThemeOK {
	return &GetServerThemeOK{}
}

/*
GetServerThemeOK describes a response with status code 200, with default header values.

Server to Theme binding
*/
type GetServerThemeOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ServerToTheme
}

// IsSuccess returns true when this get server theme o k response has a 2xx status code
func (o *GetServerThemeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get server theme o k response has a 3xx status code
func (o *GetServerThemeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server theme o k response has a 4xx status code
func (o *GetServerThemeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get server theme o k response has a 5xx status code
func (o *GetServerThemeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get server theme o k response a status code equal to that given
func (o *GetServerThemeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get server theme o k response
func (o *GetServerThemeOK) Code() int {
	return 200
}

func (o *GetServerThemeOK) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeOK  %+v", 200, o.Payload)
}

func (o *GetServerThemeOK) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeOK  %+v", 200, o.Payload)
}

func (o *GetServerThemeOK) GetPayload() *models.ServerToTheme {
	return o.Payload
}

func (o *GetServerThemeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ServerToTheme)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerThemeUnauthorized creates a GetServerThemeUnauthorized with default headers values
func NewGetServerThemeUnauthorized() *GetServerThemeUnauthorized {
	return &GetServerThemeUnauthorized{}
}

/*
GetServerThemeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetServerThemeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server theme unauthorized response has a 2xx status code
func (o *GetServerThemeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server theme unauthorized response has a 3xx status code
func (o *GetServerThemeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server theme unauthorized response has a 4xx status code
func (o *GetServerThemeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server theme unauthorized response has a 5xx status code
func (o *GetServerThemeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get server theme unauthorized response a status code equal to that given
func (o *GetServerThemeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get server theme unauthorized response
func (o *GetServerThemeUnauthorized) Code() int {
	return 401
}

func (o *GetServerThemeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServerThemeUnauthorized) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServerThemeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerThemeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerThemeForbidden creates a GetServerThemeForbidden with default headers values
func NewGetServerThemeForbidden() *GetServerThemeForbidden {
	return &GetServerThemeForbidden{}
}

/*
GetServerThemeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServerThemeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server theme forbidden response has a 2xx status code
func (o *GetServerThemeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server theme forbidden response has a 3xx status code
func (o *GetServerThemeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server theme forbidden response has a 4xx status code
func (o *GetServerThemeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server theme forbidden response has a 5xx status code
func (o *GetServerThemeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get server theme forbidden response a status code equal to that given
func (o *GetServerThemeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get server theme forbidden response
func (o *GetServerThemeForbidden) Code() int {
	return 403
}

func (o *GetServerThemeForbidden) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeForbidden  %+v", 403, o.Payload)
}

func (o *GetServerThemeForbidden) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeForbidden  %+v", 403, o.Payload)
}

func (o *GetServerThemeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerThemeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerThemeNotFound creates a GetServerThemeNotFound with default headers values
func NewGetServerThemeNotFound() *GetServerThemeNotFound {
	return &GetServerThemeNotFound{}
}

/*
GetServerThemeNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetServerThemeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server theme not found response has a 2xx status code
func (o *GetServerThemeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server theme not found response has a 3xx status code
func (o *GetServerThemeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server theme not found response has a 4xx status code
func (o *GetServerThemeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server theme not found response has a 5xx status code
func (o *GetServerThemeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get server theme not found response a status code equal to that given
func (o *GetServerThemeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get server theme not found response
func (o *GetServerThemeNotFound) Code() int {
	return 404
}

func (o *GetServerThemeNotFound) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeNotFound  %+v", 404, o.Payload)
}

func (o *GetServerThemeNotFound) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeNotFound  %+v", 404, o.Payload)
}

func (o *GetServerThemeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerThemeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerThemeTooManyRequests creates a GetServerThemeTooManyRequests with default headers values
func NewGetServerThemeTooManyRequests() *GetServerThemeTooManyRequests {
	return &GetServerThemeTooManyRequests{}
}

/*
GetServerThemeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetServerThemeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server theme too many requests response has a 2xx status code
func (o *GetServerThemeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server theme too many requests response has a 3xx status code
func (o *GetServerThemeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server theme too many requests response has a 4xx status code
func (o *GetServerThemeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server theme too many requests response has a 5xx status code
func (o *GetServerThemeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get server theme too many requests response a status code equal to that given
func (o *GetServerThemeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get server theme too many requests response
func (o *GetServerThemeTooManyRequests) Code() int {
	return 429
}

func (o *GetServerThemeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetServerThemeTooManyRequests) String() string {
	return fmt.Sprintf("[GET /servers/{wid}/theme][%d] getServerThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetServerThemeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerThemeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
