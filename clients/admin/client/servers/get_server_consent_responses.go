// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetServerConsentReader is a Reader for the GetServerConsent structure.
type GetServerConsentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServerConsentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServerConsentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetServerConsentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServerConsentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServerConsentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetServerConsentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/server-consent] getServerConsent", response, response.Code())
	}
}

// NewGetServerConsentOK creates a GetServerConsentOK with default headers values
func NewGetServerConsentOK() *GetServerConsentOK {
	return &GetServerConsentOK{}
}

/*
GetServerConsentOK describes a response with status code 200, with default header values.

Server consent
*/
type GetServerConsentOK struct {
	Payload *models.ServerConsentResponse
}

// IsSuccess returns true when this get server consent o k response has a 2xx status code
func (o *GetServerConsentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get server consent o k response has a 3xx status code
func (o *GetServerConsentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server consent o k response has a 4xx status code
func (o *GetServerConsentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get server consent o k response has a 5xx status code
func (o *GetServerConsentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get server consent o k response a status code equal to that given
func (o *GetServerConsentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get server consent o k response
func (o *GetServerConsentOK) Code() int {
	return 200
}

func (o *GetServerConsentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentOK %s", 200, payload)
}

func (o *GetServerConsentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentOK %s", 200, payload)
}

func (o *GetServerConsentOK) GetPayload() *models.ServerConsentResponse {
	return o.Payload
}

func (o *GetServerConsentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServerConsentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConsentUnauthorized creates a GetServerConsentUnauthorized with default headers values
func NewGetServerConsentUnauthorized() *GetServerConsentUnauthorized {
	return &GetServerConsentUnauthorized{}
}

/*
GetServerConsentUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetServerConsentUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server consent unauthorized response has a 2xx status code
func (o *GetServerConsentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server consent unauthorized response has a 3xx status code
func (o *GetServerConsentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server consent unauthorized response has a 4xx status code
func (o *GetServerConsentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server consent unauthorized response has a 5xx status code
func (o *GetServerConsentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get server consent unauthorized response a status code equal to that given
func (o *GetServerConsentUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get server consent unauthorized response
func (o *GetServerConsentUnauthorized) Code() int {
	return 401
}

func (o *GetServerConsentUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentUnauthorized %s", 401, payload)
}

func (o *GetServerConsentUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentUnauthorized %s", 401, payload)
}

func (o *GetServerConsentUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConsentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConsentForbidden creates a GetServerConsentForbidden with default headers values
func NewGetServerConsentForbidden() *GetServerConsentForbidden {
	return &GetServerConsentForbidden{}
}

/*
GetServerConsentForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetServerConsentForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server consent forbidden response has a 2xx status code
func (o *GetServerConsentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server consent forbidden response has a 3xx status code
func (o *GetServerConsentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server consent forbidden response has a 4xx status code
func (o *GetServerConsentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server consent forbidden response has a 5xx status code
func (o *GetServerConsentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get server consent forbidden response a status code equal to that given
func (o *GetServerConsentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get server consent forbidden response
func (o *GetServerConsentForbidden) Code() int {
	return 403
}

func (o *GetServerConsentForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentForbidden %s", 403, payload)
}

func (o *GetServerConsentForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentForbidden %s", 403, payload)
}

func (o *GetServerConsentForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConsentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConsentNotFound creates a GetServerConsentNotFound with default headers values
func NewGetServerConsentNotFound() *GetServerConsentNotFound {
	return &GetServerConsentNotFound{}
}

/*
GetServerConsentNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetServerConsentNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server consent not found response has a 2xx status code
func (o *GetServerConsentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server consent not found response has a 3xx status code
func (o *GetServerConsentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server consent not found response has a 4xx status code
func (o *GetServerConsentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server consent not found response has a 5xx status code
func (o *GetServerConsentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get server consent not found response a status code equal to that given
func (o *GetServerConsentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get server consent not found response
func (o *GetServerConsentNotFound) Code() int {
	return 404
}

func (o *GetServerConsentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentNotFound %s", 404, payload)
}

func (o *GetServerConsentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentNotFound %s", 404, payload)
}

func (o *GetServerConsentNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConsentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServerConsentTooManyRequests creates a GetServerConsentTooManyRequests with default headers values
func NewGetServerConsentTooManyRequests() *GetServerConsentTooManyRequests {
	return &GetServerConsentTooManyRequests{}
}

/*
GetServerConsentTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetServerConsentTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get server consent too many requests response has a 2xx status code
func (o *GetServerConsentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get server consent too many requests response has a 3xx status code
func (o *GetServerConsentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get server consent too many requests response has a 4xx status code
func (o *GetServerConsentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get server consent too many requests response has a 5xx status code
func (o *GetServerConsentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get server consent too many requests response a status code equal to that given
func (o *GetServerConsentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get server consent too many requests response
func (o *GetServerConsentTooManyRequests) Code() int {
	return 429
}

func (o *GetServerConsentTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentTooManyRequests %s", 429, payload)
}

func (o *GetServerConsentTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/server-consent][%d] getServerConsentTooManyRequests %s", 429, payload)
}

func (o *GetServerConsentTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetServerConsentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
