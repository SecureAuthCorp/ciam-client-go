// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// BindServerReader is a Reader for the BindServer structure.
type BindServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BindServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBindServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewBindServerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBindServerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBindServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewBindServerTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{wid}/bind/{rid}] bindServer", response, response.Code())
	}
}

// NewBindServerOK creates a BindServerOK with default headers values
func NewBindServerOK() *BindServerOK {
	return &BindServerOK{}
}

/*
BindServerOK describes a response with status code 200, with default header values.

Server to server binding
*/
type BindServerOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ServerToServer
}

// IsSuccess returns true when this bind server o k response has a 2xx status code
func (o *BindServerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this bind server o k response has a 3xx status code
func (o *BindServerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server o k response has a 4xx status code
func (o *BindServerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this bind server o k response has a 5xx status code
func (o *BindServerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server o k response a status code equal to that given
func (o *BindServerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the bind server o k response
func (o *BindServerOK) Code() int {
	return 200
}

func (o *BindServerOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerOK %s", 200, payload)
}

func (o *BindServerOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerOK %s", 200, payload)
}

func (o *BindServerOK) GetPayload() *models.ServerToServer {
	return o.Payload
}

func (o *BindServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ServerToServer)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindServerUnauthorized creates a BindServerUnauthorized with default headers values
func NewBindServerUnauthorized() *BindServerUnauthorized {
	return &BindServerUnauthorized{}
}

/*
BindServerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type BindServerUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind server unauthorized response has a 2xx status code
func (o *BindServerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind server unauthorized response has a 3xx status code
func (o *BindServerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server unauthorized response has a 4xx status code
func (o *BindServerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind server unauthorized response has a 5xx status code
func (o *BindServerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server unauthorized response a status code equal to that given
func (o *BindServerUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the bind server unauthorized response
func (o *BindServerUnauthorized) Code() int {
	return 401
}

func (o *BindServerUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerUnauthorized %s", 401, payload)
}

func (o *BindServerUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerUnauthorized %s", 401, payload)
}

func (o *BindServerUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindServerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindServerForbidden creates a BindServerForbidden with default headers values
func NewBindServerForbidden() *BindServerForbidden {
	return &BindServerForbidden{}
}

/*
BindServerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BindServerForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind server forbidden response has a 2xx status code
func (o *BindServerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind server forbidden response has a 3xx status code
func (o *BindServerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server forbidden response has a 4xx status code
func (o *BindServerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind server forbidden response has a 5xx status code
func (o *BindServerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server forbidden response a status code equal to that given
func (o *BindServerForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the bind server forbidden response
func (o *BindServerForbidden) Code() int {
	return 403
}

func (o *BindServerForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerForbidden %s", 403, payload)
}

func (o *BindServerForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerForbidden %s", 403, payload)
}

func (o *BindServerForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindServerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindServerNotFound creates a BindServerNotFound with default headers values
func NewBindServerNotFound() *BindServerNotFound {
	return &BindServerNotFound{}
}

/*
BindServerNotFound describes a response with status code 404, with default header values.

Not found
*/
type BindServerNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind server not found response has a 2xx status code
func (o *BindServerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind server not found response has a 3xx status code
func (o *BindServerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server not found response has a 4xx status code
func (o *BindServerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind server not found response has a 5xx status code
func (o *BindServerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server not found response a status code equal to that given
func (o *BindServerNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the bind server not found response
func (o *BindServerNotFound) Code() int {
	return 404
}

func (o *BindServerNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerNotFound %s", 404, payload)
}

func (o *BindServerNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerNotFound %s", 404, payload)
}

func (o *BindServerNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindServerTooManyRequests creates a BindServerTooManyRequests with default headers values
func NewBindServerTooManyRequests() *BindServerTooManyRequests {
	return &BindServerTooManyRequests{}
}

/*
BindServerTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type BindServerTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind server too many requests response has a 2xx status code
func (o *BindServerTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind server too many requests response has a 3xx status code
func (o *BindServerTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server too many requests response has a 4xx status code
func (o *BindServerTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind server too many requests response has a 5xx status code
func (o *BindServerTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server too many requests response a status code equal to that given
func (o *BindServerTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the bind server too many requests response
func (o *BindServerTooManyRequests) Code() int {
	return 429
}

func (o *BindServerTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerTooManyRequests %s", 429, payload)
}

func (o *BindServerTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/bind/{rid}][%d] bindServerTooManyRequests %s", 429, payload)
}

func (o *BindServerTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindServerTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
