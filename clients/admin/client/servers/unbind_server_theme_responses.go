// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UnbindServerThemeReader is a Reader for the UnbindServerTheme structure.
type UnbindServerThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnbindServerThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnbindServerThemeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUnbindServerThemeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUnbindServerThemeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnbindServerThemeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUnbindServerThemeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{wid}/unbind-theme] unbindServerTheme", response, response.Code())
	}
}

// NewUnbindServerThemeOK creates a UnbindServerThemeOK with default headers values
func NewUnbindServerThemeOK() *UnbindServerThemeOK {
	return &UnbindServerThemeOK{}
}

/*
UnbindServerThemeOK describes a response with status code 200, with default header values.

Server to Theme binding
*/
type UnbindServerThemeOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ServerToTheme
}

// IsSuccess returns true when this unbind server theme o k response has a 2xx status code
func (o *UnbindServerThemeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this unbind server theme o k response has a 3xx status code
func (o *UnbindServerThemeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unbind server theme o k response has a 4xx status code
func (o *UnbindServerThemeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this unbind server theme o k response has a 5xx status code
func (o *UnbindServerThemeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this unbind server theme o k response a status code equal to that given
func (o *UnbindServerThemeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the unbind server theme o k response
func (o *UnbindServerThemeOK) Code() int {
	return 200
}

func (o *UnbindServerThemeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeOK %s", 200, payload)
}

func (o *UnbindServerThemeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeOK %s", 200, payload)
}

func (o *UnbindServerThemeOK) GetPayload() *models.ServerToTheme {
	return o.Payload
}

func (o *UnbindServerThemeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ServerToTheme)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnbindServerThemeUnauthorized creates a UnbindServerThemeUnauthorized with default headers values
func NewUnbindServerThemeUnauthorized() *UnbindServerThemeUnauthorized {
	return &UnbindServerThemeUnauthorized{}
}

/*
UnbindServerThemeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UnbindServerThemeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this unbind server theme unauthorized response has a 2xx status code
func (o *UnbindServerThemeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unbind server theme unauthorized response has a 3xx status code
func (o *UnbindServerThemeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unbind server theme unauthorized response has a 4xx status code
func (o *UnbindServerThemeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this unbind server theme unauthorized response has a 5xx status code
func (o *UnbindServerThemeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this unbind server theme unauthorized response a status code equal to that given
func (o *UnbindServerThemeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the unbind server theme unauthorized response
func (o *UnbindServerThemeUnauthorized) Code() int {
	return 401
}

func (o *UnbindServerThemeUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeUnauthorized %s", 401, payload)
}

func (o *UnbindServerThemeUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeUnauthorized %s", 401, payload)
}

func (o *UnbindServerThemeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UnbindServerThemeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnbindServerThemeForbidden creates a UnbindServerThemeForbidden with default headers values
func NewUnbindServerThemeForbidden() *UnbindServerThemeForbidden {
	return &UnbindServerThemeForbidden{}
}

/*
UnbindServerThemeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UnbindServerThemeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this unbind server theme forbidden response has a 2xx status code
func (o *UnbindServerThemeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unbind server theme forbidden response has a 3xx status code
func (o *UnbindServerThemeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unbind server theme forbidden response has a 4xx status code
func (o *UnbindServerThemeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this unbind server theme forbidden response has a 5xx status code
func (o *UnbindServerThemeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this unbind server theme forbidden response a status code equal to that given
func (o *UnbindServerThemeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the unbind server theme forbidden response
func (o *UnbindServerThemeForbidden) Code() int {
	return 403
}

func (o *UnbindServerThemeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeForbidden %s", 403, payload)
}

func (o *UnbindServerThemeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeForbidden %s", 403, payload)
}

func (o *UnbindServerThemeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UnbindServerThemeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnbindServerThemeNotFound creates a UnbindServerThemeNotFound with default headers values
func NewUnbindServerThemeNotFound() *UnbindServerThemeNotFound {
	return &UnbindServerThemeNotFound{}
}

/*
UnbindServerThemeNotFound describes a response with status code 404, with default header values.

Not found
*/
type UnbindServerThemeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this unbind server theme not found response has a 2xx status code
func (o *UnbindServerThemeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unbind server theme not found response has a 3xx status code
func (o *UnbindServerThemeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unbind server theme not found response has a 4xx status code
func (o *UnbindServerThemeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this unbind server theme not found response has a 5xx status code
func (o *UnbindServerThemeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this unbind server theme not found response a status code equal to that given
func (o *UnbindServerThemeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the unbind server theme not found response
func (o *UnbindServerThemeNotFound) Code() int {
	return 404
}

func (o *UnbindServerThemeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeNotFound %s", 404, payload)
}

func (o *UnbindServerThemeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeNotFound %s", 404, payload)
}

func (o *UnbindServerThemeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UnbindServerThemeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnbindServerThemeTooManyRequests creates a UnbindServerThemeTooManyRequests with default headers values
func NewUnbindServerThemeTooManyRequests() *UnbindServerThemeTooManyRequests {
	return &UnbindServerThemeTooManyRequests{}
}

/*
UnbindServerThemeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UnbindServerThemeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this unbind server theme too many requests response has a 2xx status code
func (o *UnbindServerThemeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unbind server theme too many requests response has a 3xx status code
func (o *UnbindServerThemeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unbind server theme too many requests response has a 4xx status code
func (o *UnbindServerThemeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this unbind server theme too many requests response has a 5xx status code
func (o *UnbindServerThemeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this unbind server theme too many requests response a status code equal to that given
func (o *UnbindServerThemeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the unbind server theme too many requests response
func (o *UnbindServerThemeTooManyRequests) Code() int {
	return 429
}

func (o *UnbindServerThemeTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeTooManyRequests %s", 429, payload)
}

func (o *UnbindServerThemeTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /servers/{wid}/unbind-theme][%d] unbindServerThemeTooManyRequests %s", 429, payload)
}

func (o *UnbindServerThemeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UnbindServerThemeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
