// Code generated by go-swagger; DO NOT EDIT.

package servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// BindServerThemeReader is a Reader for the BindServerTheme structure.
type BindServerThemeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BindServerThemeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBindServerThemeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewBindServerThemeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBindServerThemeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewBindServerThemeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewBindServerThemeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /servers/{wid}/bind-theme/{themeID}] bindServerTheme", response, response.Code())
	}
}

// NewBindServerThemeOK creates a BindServerThemeOK with default headers values
func NewBindServerThemeOK() *BindServerThemeOK {
	return &BindServerThemeOK{}
}

/*
BindServerThemeOK describes a response with status code 200, with default header values.

Server to Theme binding
*/
type BindServerThemeOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ServerToTheme
}

// IsSuccess returns true when this bind server theme o k response has a 2xx status code
func (o *BindServerThemeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this bind server theme o k response has a 3xx status code
func (o *BindServerThemeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server theme o k response has a 4xx status code
func (o *BindServerThemeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this bind server theme o k response has a 5xx status code
func (o *BindServerThemeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server theme o k response a status code equal to that given
func (o *BindServerThemeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the bind server theme o k response
func (o *BindServerThemeOK) Code() int {
	return 200
}

func (o *BindServerThemeOK) Error() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeOK  %+v", 200, o.Payload)
}

func (o *BindServerThemeOK) String() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeOK  %+v", 200, o.Payload)
}

func (o *BindServerThemeOK) GetPayload() *models.ServerToTheme {
	return o.Payload
}

func (o *BindServerThemeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ServerToTheme)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindServerThemeUnauthorized creates a BindServerThemeUnauthorized with default headers values
func NewBindServerThemeUnauthorized() *BindServerThemeUnauthorized {
	return &BindServerThemeUnauthorized{}
}

/*
BindServerThemeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type BindServerThemeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind server theme unauthorized response has a 2xx status code
func (o *BindServerThemeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind server theme unauthorized response has a 3xx status code
func (o *BindServerThemeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server theme unauthorized response has a 4xx status code
func (o *BindServerThemeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind server theme unauthorized response has a 5xx status code
func (o *BindServerThemeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server theme unauthorized response a status code equal to that given
func (o *BindServerThemeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the bind server theme unauthorized response
func (o *BindServerThemeUnauthorized) Code() int {
	return 401
}

func (o *BindServerThemeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *BindServerThemeUnauthorized) String() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeUnauthorized  %+v", 401, o.Payload)
}

func (o *BindServerThemeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindServerThemeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindServerThemeForbidden creates a BindServerThemeForbidden with default headers values
func NewBindServerThemeForbidden() *BindServerThemeForbidden {
	return &BindServerThemeForbidden{}
}

/*
BindServerThemeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BindServerThemeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind server theme forbidden response has a 2xx status code
func (o *BindServerThemeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind server theme forbidden response has a 3xx status code
func (o *BindServerThemeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server theme forbidden response has a 4xx status code
func (o *BindServerThemeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind server theme forbidden response has a 5xx status code
func (o *BindServerThemeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server theme forbidden response a status code equal to that given
func (o *BindServerThemeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the bind server theme forbidden response
func (o *BindServerThemeForbidden) Code() int {
	return 403
}

func (o *BindServerThemeForbidden) Error() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeForbidden  %+v", 403, o.Payload)
}

func (o *BindServerThemeForbidden) String() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeForbidden  %+v", 403, o.Payload)
}

func (o *BindServerThemeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindServerThemeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindServerThemeNotFound creates a BindServerThemeNotFound with default headers values
func NewBindServerThemeNotFound() *BindServerThemeNotFound {
	return &BindServerThemeNotFound{}
}

/*
BindServerThemeNotFound describes a response with status code 404, with default header values.

Not found
*/
type BindServerThemeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind server theme not found response has a 2xx status code
func (o *BindServerThemeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind server theme not found response has a 3xx status code
func (o *BindServerThemeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server theme not found response has a 4xx status code
func (o *BindServerThemeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind server theme not found response has a 5xx status code
func (o *BindServerThemeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server theme not found response a status code equal to that given
func (o *BindServerThemeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the bind server theme not found response
func (o *BindServerThemeNotFound) Code() int {
	return 404
}

func (o *BindServerThemeNotFound) Error() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeNotFound  %+v", 404, o.Payload)
}

func (o *BindServerThemeNotFound) String() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeNotFound  %+v", 404, o.Payload)
}

func (o *BindServerThemeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindServerThemeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBindServerThemeTooManyRequests creates a BindServerThemeTooManyRequests with default headers values
func NewBindServerThemeTooManyRequests() *BindServerThemeTooManyRequests {
	return &BindServerThemeTooManyRequests{}
}

/*
BindServerThemeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type BindServerThemeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this bind server theme too many requests response has a 2xx status code
func (o *BindServerThemeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this bind server theme too many requests response has a 3xx status code
func (o *BindServerThemeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this bind server theme too many requests response has a 4xx status code
func (o *BindServerThemeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this bind server theme too many requests response has a 5xx status code
func (o *BindServerThemeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this bind server theme too many requests response a status code equal to that given
func (o *BindServerThemeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the bind server theme too many requests response
func (o *BindServerThemeTooManyRequests) Code() int {
	return 429
}

func (o *BindServerThemeTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *BindServerThemeTooManyRequests) String() string {
	return fmt.Sprintf("[POST /servers/{wid}/bind-theme/{themeID}][%d] bindServerThemeTooManyRequests  %+v", 429, o.Payload)
}

func (o *BindServerThemeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *BindServerThemeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
