// Code generated by go-swagger; DO NOT EDIT.

package custom_apps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new custom apps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new custom apps API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new custom apps API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for custom apps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCustomApp(params *CreateCustomAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomAppCreated, error)

	DeleteCustomApp(params *DeleteCustomAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomAppNoContent, error)

	GetCustomApp(params *GetCustomAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomAppOK, error)

	ListServerCustomApps(params *ListServerCustomAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServerCustomAppsOK, error)

	UpdateCustomApp(params *UpdateCustomAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomAppOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateCustomApp creates a custom app

Creates a customApp
*/
func (a *Client) CreateCustomApp(params *CreateCustomAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCustomAppCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCustomAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCustomApp",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/custom-apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCustomAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCustomAppCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCustomApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCustomApp deletes custom app

Deletes the CustomApp.
*/
func (a *Client) DeleteCustomApp(params *DeleteCustomAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomAppNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCustomApp",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/custom-apps/{customAppID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCustomAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomAppNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCustomApp gets custom app

Returns a CustomApp and its content.
*/
func (a *Client) GetCustomApp(params *GetCustomAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomApp",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/custom-apps/{customAppID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCustomAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListServerCustomApps lists custom apps

Returns list of customApps for server
*/
func (a *Client) ListServerCustomApps(params *ListServerCustomAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServerCustomAppsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServerCustomAppsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listServerCustomApps",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/custom-apps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListServerCustomAppsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServerCustomAppsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listServerCustomApps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateCustomApp updates a custom app

Updates an existing CustomApp
*/
func (a *Client) UpdateCustomApp(params *UpdateCustomAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCustomAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCustomAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCustomApp",
		Method:             "PUT",
		PathPattern:        "/servers/{wid}/custom-apps/{customAppID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCustomAppReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCustomAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCustomApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
