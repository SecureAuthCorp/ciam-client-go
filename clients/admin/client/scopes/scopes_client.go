// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new scopes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scopes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateScope(params *CreateScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScopeCreated, error)

	DeleteScope(params *DeleteScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopeNoContent, error)

	GetScope(params *GetScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeOK, error)

	ListScopes(params *ListScopesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScopesOK, error)

	UpdateScope(params *UpdateScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScopeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateScope creates scope

	Scope name is required. If scope id is not provided, will be generated.

If you want to assign scope to a service, provide service id.
*/
func (a *Client) CreateScope(params *CreateScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateScopeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createScope",
		Method:             "POST",
		PathPattern:        "/scopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScopeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createScope: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteScope deletes scope

Delete scope.
*/
func (a *Client) DeleteScope(params *DeleteScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteScopeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteScope",
		Method:             "DELETE",
		PathPattern:        "/scopes/{scp}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteScopeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteScope: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScope gets scope

Get scope.
*/
func (a *Client) GetScope(params *GetScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getScope",
		Method:             "GET",
		PathPattern:        "/scopes/{scp}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getScope: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListScopes lists scopes

List scopes.
*/
func (a *Client) ListScopes(params *ListScopesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListScopesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListScopesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listScopes",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/scopes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListScopesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListScopesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listScopes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateScope updates scope

Update scope.
*/
func (a *Client) UpdateScope(params *UpdateScopeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateScope",
		Method:             "PUT",
		PathPattern:        "/scopes/{scp}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateScopeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateScopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateScope: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
