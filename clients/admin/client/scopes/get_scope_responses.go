// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetScopeReader is a Reader for the GetScope structure.
type GetScopeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScopeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScopeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetScopeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetScopeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScopeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetScopeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /scopes/{scp}] getScope", response, response.Code())
	}
}

// NewGetScopeOK creates a GetScopeOK with default headers values
func NewGetScopeOK() *GetScopeOK {
	return &GetScopeOK{}
}

/*
GetScopeOK describes a response with status code 200, with default header values.

Scope with service
*/
type GetScopeOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ScopeWithService
}

// IsSuccess returns true when this get scope o k response has a 2xx status code
func (o *GetScopeOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get scope o k response has a 3xx status code
func (o *GetScopeOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scope o k response has a 4xx status code
func (o *GetScopeOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scope o k response has a 5xx status code
func (o *GetScopeOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get scope o k response a status code equal to that given
func (o *GetScopeOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get scope o k response
func (o *GetScopeOK) Code() int {
	return 200
}

func (o *GetScopeOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeOK %s", 200, payload)
}

func (o *GetScopeOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeOK %s", 200, payload)
}

func (o *GetScopeOK) GetPayload() *models.ScopeWithService {
	return o.Payload
}

func (o *GetScopeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ScopeWithService)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScopeUnauthorized creates a GetScopeUnauthorized with default headers values
func NewGetScopeUnauthorized() *GetScopeUnauthorized {
	return &GetScopeUnauthorized{}
}

/*
GetScopeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetScopeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get scope unauthorized response has a 2xx status code
func (o *GetScopeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scope unauthorized response has a 3xx status code
func (o *GetScopeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scope unauthorized response has a 4xx status code
func (o *GetScopeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scope unauthorized response has a 5xx status code
func (o *GetScopeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get scope unauthorized response a status code equal to that given
func (o *GetScopeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get scope unauthorized response
func (o *GetScopeUnauthorized) Code() int {
	return 401
}

func (o *GetScopeUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeUnauthorized %s", 401, payload)
}

func (o *GetScopeUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeUnauthorized %s", 401, payload)
}

func (o *GetScopeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetScopeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScopeForbidden creates a GetScopeForbidden with default headers values
func NewGetScopeForbidden() *GetScopeForbidden {
	return &GetScopeForbidden{}
}

/*
GetScopeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetScopeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get scope forbidden response has a 2xx status code
func (o *GetScopeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scope forbidden response has a 3xx status code
func (o *GetScopeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scope forbidden response has a 4xx status code
func (o *GetScopeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scope forbidden response has a 5xx status code
func (o *GetScopeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get scope forbidden response a status code equal to that given
func (o *GetScopeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get scope forbidden response
func (o *GetScopeForbidden) Code() int {
	return 403
}

func (o *GetScopeForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeForbidden %s", 403, payload)
}

func (o *GetScopeForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeForbidden %s", 403, payload)
}

func (o *GetScopeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetScopeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScopeNotFound creates a GetScopeNotFound with default headers values
func NewGetScopeNotFound() *GetScopeNotFound {
	return &GetScopeNotFound{}
}

/*
GetScopeNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetScopeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get scope not found response has a 2xx status code
func (o *GetScopeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scope not found response has a 3xx status code
func (o *GetScopeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scope not found response has a 4xx status code
func (o *GetScopeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scope not found response has a 5xx status code
func (o *GetScopeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get scope not found response a status code equal to that given
func (o *GetScopeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get scope not found response
func (o *GetScopeNotFound) Code() int {
	return 404
}

func (o *GetScopeNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeNotFound %s", 404, payload)
}

func (o *GetScopeNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeNotFound %s", 404, payload)
}

func (o *GetScopeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetScopeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScopeTooManyRequests creates a GetScopeTooManyRequests with default headers values
func NewGetScopeTooManyRequests() *GetScopeTooManyRequests {
	return &GetScopeTooManyRequests{}
}

/*
GetScopeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetScopeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get scope too many requests response has a 2xx status code
func (o *GetScopeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scope too many requests response has a 3xx status code
func (o *GetScopeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scope too many requests response has a 4xx status code
func (o *GetScopeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scope too many requests response has a 5xx status code
func (o *GetScopeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get scope too many requests response a status code equal to that given
func (o *GetScopeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get scope too many requests response
func (o *GetScopeTooManyRequests) Code() int {
	return 429
}

func (o *GetScopeTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeTooManyRequests %s", 429, payload)
}

func (o *GetScopeTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /scopes/{scp}][%d] getScopeTooManyRequests %s", 429, payload)
}

func (o *GetScopeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetScopeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
