// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CreateScopeReader is a Reader for the CreateScope structure.
type CreateScopeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateScopeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateScopeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateScopeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateScopeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateScopeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateScopeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateScopeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateScopeUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateScopeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateScopeCreated creates a CreateScopeCreated with default headers values
func NewCreateScopeCreated() *CreateScopeCreated {
	return &CreateScopeCreated{}
}

/*
CreateScopeCreated describes a response with status code 201, with default header values.

Scope
*/
type CreateScopeCreated struct {
	Payload *models.ScopeWithServiceID
}

// IsSuccess returns true when this create scope created response has a 2xx status code
func (o *CreateScopeCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create scope created response has a 3xx status code
func (o *CreateScopeCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scope created response has a 4xx status code
func (o *CreateScopeCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create scope created response has a 5xx status code
func (o *CreateScopeCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create scope created response a status code equal to that given
func (o *CreateScopeCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateScopeCreated) Error() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeCreated  %+v", 201, o.Payload)
}

func (o *CreateScopeCreated) String() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeCreated  %+v", 201, o.Payload)
}

func (o *CreateScopeCreated) GetPayload() *models.ScopeWithServiceID {
	return o.Payload
}

func (o *CreateScopeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScopeWithServiceID)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeBadRequest creates a CreateScopeBadRequest with default headers values
func NewCreateScopeBadRequest() *CreateScopeBadRequest {
	return &CreateScopeBadRequest{}
}

/*
CreateScopeBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type CreateScopeBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this create scope bad request response has a 2xx status code
func (o *CreateScopeBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scope bad request response has a 3xx status code
func (o *CreateScopeBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scope bad request response has a 4xx status code
func (o *CreateScopeBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scope bad request response has a 5xx status code
func (o *CreateScopeBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create scope bad request response a status code equal to that given
func (o *CreateScopeBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateScopeBadRequest) Error() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScopeBadRequest) String() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScopeBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeUnauthorized creates a CreateScopeUnauthorized with default headers values
func NewCreateScopeUnauthorized() *CreateScopeUnauthorized {
	return &CreateScopeUnauthorized{}
}

/*
CreateScopeUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type CreateScopeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this create scope unauthorized response has a 2xx status code
func (o *CreateScopeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scope unauthorized response has a 3xx status code
func (o *CreateScopeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scope unauthorized response has a 4xx status code
func (o *CreateScopeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scope unauthorized response has a 5xx status code
func (o *CreateScopeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create scope unauthorized response a status code equal to that given
func (o *CreateScopeUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateScopeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScopeUnauthorized) String() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScopeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeForbidden creates a CreateScopeForbidden with default headers values
func NewCreateScopeForbidden() *CreateScopeForbidden {
	return &CreateScopeForbidden{}
}

/*
CreateScopeForbidden describes a response with status code 403, with default header values.

HttpError
*/
type CreateScopeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this create scope forbidden response has a 2xx status code
func (o *CreateScopeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scope forbidden response has a 3xx status code
func (o *CreateScopeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scope forbidden response has a 4xx status code
func (o *CreateScopeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scope forbidden response has a 5xx status code
func (o *CreateScopeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create scope forbidden response a status code equal to that given
func (o *CreateScopeForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateScopeForbidden) Error() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeForbidden  %+v", 403, o.Payload)
}

func (o *CreateScopeForbidden) String() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeForbidden  %+v", 403, o.Payload)
}

func (o *CreateScopeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeNotFound creates a CreateScopeNotFound with default headers values
func NewCreateScopeNotFound() *CreateScopeNotFound {
	return &CreateScopeNotFound{}
}

/*
CreateScopeNotFound describes a response with status code 404, with default header values.

HttpError
*/
type CreateScopeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this create scope not found response has a 2xx status code
func (o *CreateScopeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scope not found response has a 3xx status code
func (o *CreateScopeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scope not found response has a 4xx status code
func (o *CreateScopeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scope not found response has a 5xx status code
func (o *CreateScopeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create scope not found response a status code equal to that given
func (o *CreateScopeNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateScopeNotFound) Error() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeNotFound  %+v", 404, o.Payload)
}

func (o *CreateScopeNotFound) String() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeNotFound  %+v", 404, o.Payload)
}

func (o *CreateScopeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeConflict creates a CreateScopeConflict with default headers values
func NewCreateScopeConflict() *CreateScopeConflict {
	return &CreateScopeConflict{}
}

/*
CreateScopeConflict describes a response with status code 409, with default header values.

HttpError
*/
type CreateScopeConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this create scope conflict response has a 2xx status code
func (o *CreateScopeConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scope conflict response has a 3xx status code
func (o *CreateScopeConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scope conflict response has a 4xx status code
func (o *CreateScopeConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scope conflict response has a 5xx status code
func (o *CreateScopeConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create scope conflict response a status code equal to that given
func (o *CreateScopeConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateScopeConflict) Error() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeConflict  %+v", 409, o.Payload)
}

func (o *CreateScopeConflict) String() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeConflict  %+v", 409, o.Payload)
}

func (o *CreateScopeConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeUnprocessableEntity creates a CreateScopeUnprocessableEntity with default headers values
func NewCreateScopeUnprocessableEntity() *CreateScopeUnprocessableEntity {
	return &CreateScopeUnprocessableEntity{}
}

/*
CreateScopeUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type CreateScopeUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this create scope unprocessable entity response has a 2xx status code
func (o *CreateScopeUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scope unprocessable entity response has a 3xx status code
func (o *CreateScopeUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scope unprocessable entity response has a 4xx status code
func (o *CreateScopeUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scope unprocessable entity response has a 5xx status code
func (o *CreateScopeUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create scope unprocessable entity response a status code equal to that given
func (o *CreateScopeUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *CreateScopeUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateScopeUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateScopeUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScopeTooManyRequests creates a CreateScopeTooManyRequests with default headers values
func NewCreateScopeTooManyRequests() *CreateScopeTooManyRequests {
	return &CreateScopeTooManyRequests{}
}

/*
CreateScopeTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type CreateScopeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this create scope too many requests response has a 2xx status code
func (o *CreateScopeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scope too many requests response has a 3xx status code
func (o *CreateScopeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scope too many requests response has a 4xx status code
func (o *CreateScopeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scope too many requests response has a 5xx status code
func (o *CreateScopeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create scope too many requests response a status code equal to that given
func (o *CreateScopeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateScopeTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateScopeTooManyRequests) String() string {
	return fmt.Sprintf("[POST /scopes][%d] createScopeTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateScopeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateScopeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
