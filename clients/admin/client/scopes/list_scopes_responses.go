// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ListScopesReader is a Reader for the ListScopes structure.
type ListScopesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListScopesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListScopesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListScopesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListScopesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListScopesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /servers/{wid}/scopes] listScopes", response, response.Code())
	}
}

// NewListScopesOK creates a ListScopesOK with default headers values
func NewListScopesOK() *ListScopesOK {
	return &ListScopesOK{}
}

/*
ListScopesOK describes a response with status code 200, with default header values.

Scopes with services
*/
type ListScopesOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.ScopesWithServices
}

// IsSuccess returns true when this list scopes o k response has a 2xx status code
func (o *ListScopesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list scopes o k response has a 3xx status code
func (o *ListScopesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list scopes o k response has a 4xx status code
func (o *ListScopesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list scopes o k response has a 5xx status code
func (o *ListScopesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list scopes o k response a status code equal to that given
func (o *ListScopesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list scopes o k response
func (o *ListScopesOK) Code() int {
	return 200
}

func (o *ListScopesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/scopes][%d] listScopesOK %s", 200, payload)
}

func (o *ListScopesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/scopes][%d] listScopesOK %s", 200, payload)
}

func (o *ListScopesOK) GetPayload() *models.ScopesWithServices {
	return o.Payload
}

func (o *ListScopesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.ScopesWithServices)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListScopesUnauthorized creates a ListScopesUnauthorized with default headers values
func NewListScopesUnauthorized() *ListScopesUnauthorized {
	return &ListScopesUnauthorized{}
}

/*
ListScopesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListScopesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list scopes unauthorized response has a 2xx status code
func (o *ListScopesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list scopes unauthorized response has a 3xx status code
func (o *ListScopesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list scopes unauthorized response has a 4xx status code
func (o *ListScopesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list scopes unauthorized response has a 5xx status code
func (o *ListScopesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list scopes unauthorized response a status code equal to that given
func (o *ListScopesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list scopes unauthorized response
func (o *ListScopesUnauthorized) Code() int {
	return 401
}

func (o *ListScopesUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/scopes][%d] listScopesUnauthorized %s", 401, payload)
}

func (o *ListScopesUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/scopes][%d] listScopesUnauthorized %s", 401, payload)
}

func (o *ListScopesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListScopesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListScopesForbidden creates a ListScopesForbidden with default headers values
func NewListScopesForbidden() *ListScopesForbidden {
	return &ListScopesForbidden{}
}

/*
ListScopesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListScopesForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list scopes forbidden response has a 2xx status code
func (o *ListScopesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list scopes forbidden response has a 3xx status code
func (o *ListScopesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list scopes forbidden response has a 4xx status code
func (o *ListScopesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list scopes forbidden response has a 5xx status code
func (o *ListScopesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list scopes forbidden response a status code equal to that given
func (o *ListScopesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list scopes forbidden response
func (o *ListScopesForbidden) Code() int {
	return 403
}

func (o *ListScopesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/scopes][%d] listScopesForbidden %s", 403, payload)
}

func (o *ListScopesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/scopes][%d] listScopesForbidden %s", 403, payload)
}

func (o *ListScopesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListScopesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListScopesTooManyRequests creates a ListScopesTooManyRequests with default headers values
func NewListScopesTooManyRequests() *ListScopesTooManyRequests {
	return &ListScopesTooManyRequests{}
}

/*
ListScopesTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListScopesTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list scopes too many requests response has a 2xx status code
func (o *ListScopesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list scopes too many requests response has a 3xx status code
func (o *ListScopesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list scopes too many requests response has a 4xx status code
func (o *ListScopesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list scopes too many requests response has a 5xx status code
func (o *ListScopesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list scopes too many requests response a status code equal to that given
func (o *ListScopesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list scopes too many requests response
func (o *ListScopesTooManyRequests) Code() int {
	return 429
}

func (o *ListScopesTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/scopes][%d] listScopesTooManyRequests %s", 429, payload)
}

func (o *ListScopesTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /servers/{wid}/scopes][%d] listScopesTooManyRequests %s", 429, payload)
}

func (o *ListScopesTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListScopesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
