// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// DeleteScopeReader is a Reader for the DeleteScope structure.
type DeleteScopeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteScopeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteScopeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteScopeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteScopeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteScopeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteScopeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /scopes/{scp}] deleteScope", response, response.Code())
	}
}

// NewDeleteScopeNoContent creates a DeleteScopeNoContent with default headers values
func NewDeleteScopeNoContent() *DeleteScopeNoContent {
	return &DeleteScopeNoContent{}
}

/*
DeleteScopeNoContent describes a response with status code 204, with default header values.

	Scope has been deleted
*/
type DeleteScopeNoContent struct {
}

// IsSuccess returns true when this delete scope no content response has a 2xx status code
func (o *DeleteScopeNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete scope no content response has a 3xx status code
func (o *DeleteScopeNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scope no content response has a 4xx status code
func (o *DeleteScopeNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete scope no content response has a 5xx status code
func (o *DeleteScopeNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scope no content response a status code equal to that given
func (o *DeleteScopeNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete scope no content response
func (o *DeleteScopeNoContent) Code() int {
	return 204
}

func (o *DeleteScopeNoContent) Error() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeNoContent ", 204)
}

func (o *DeleteScopeNoContent) String() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeNoContent ", 204)
}

func (o *DeleteScopeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteScopeUnauthorized creates a DeleteScopeUnauthorized with default headers values
func NewDeleteScopeUnauthorized() *DeleteScopeUnauthorized {
	return &DeleteScopeUnauthorized{}
}

/*
DeleteScopeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteScopeUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete scope unauthorized response has a 2xx status code
func (o *DeleteScopeUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scope unauthorized response has a 3xx status code
func (o *DeleteScopeUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scope unauthorized response has a 4xx status code
func (o *DeleteScopeUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete scope unauthorized response has a 5xx status code
func (o *DeleteScopeUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scope unauthorized response a status code equal to that given
func (o *DeleteScopeUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete scope unauthorized response
func (o *DeleteScopeUnauthorized) Code() int {
	return 401
}

func (o *DeleteScopeUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteScopeUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteScopeUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteScopeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScopeForbidden creates a DeleteScopeForbidden with default headers values
func NewDeleteScopeForbidden() *DeleteScopeForbidden {
	return &DeleteScopeForbidden{}
}

/*
DeleteScopeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteScopeForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete scope forbidden response has a 2xx status code
func (o *DeleteScopeForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scope forbidden response has a 3xx status code
func (o *DeleteScopeForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scope forbidden response has a 4xx status code
func (o *DeleteScopeForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete scope forbidden response has a 5xx status code
func (o *DeleteScopeForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scope forbidden response a status code equal to that given
func (o *DeleteScopeForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete scope forbidden response
func (o *DeleteScopeForbidden) Code() int {
	return 403
}

func (o *DeleteScopeForbidden) Error() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeForbidden  %+v", 403, o.Payload)
}

func (o *DeleteScopeForbidden) String() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeForbidden  %+v", 403, o.Payload)
}

func (o *DeleteScopeForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteScopeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScopeNotFound creates a DeleteScopeNotFound with default headers values
func NewDeleteScopeNotFound() *DeleteScopeNotFound {
	return &DeleteScopeNotFound{}
}

/*
DeleteScopeNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteScopeNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete scope not found response has a 2xx status code
func (o *DeleteScopeNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scope not found response has a 3xx status code
func (o *DeleteScopeNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scope not found response has a 4xx status code
func (o *DeleteScopeNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete scope not found response has a 5xx status code
func (o *DeleteScopeNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scope not found response a status code equal to that given
func (o *DeleteScopeNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete scope not found response
func (o *DeleteScopeNotFound) Code() int {
	return 404
}

func (o *DeleteScopeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeNotFound  %+v", 404, o.Payload)
}

func (o *DeleteScopeNotFound) String() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeNotFound  %+v", 404, o.Payload)
}

func (o *DeleteScopeNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteScopeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteScopeTooManyRequests creates a DeleteScopeTooManyRequests with default headers values
func NewDeleteScopeTooManyRequests() *DeleteScopeTooManyRequests {
	return &DeleteScopeTooManyRequests{}
}

/*
DeleteScopeTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteScopeTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete scope too many requests response has a 2xx status code
func (o *DeleteScopeTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete scope too many requests response has a 3xx status code
func (o *DeleteScopeTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete scope too many requests response has a 4xx status code
func (o *DeleteScopeTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete scope too many requests response has a 5xx status code
func (o *DeleteScopeTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete scope too many requests response a status code equal to that given
func (o *DeleteScopeTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete scope too many requests response
func (o *DeleteScopeTooManyRequests) Code() int {
	return 429
}

func (o *DeleteScopeTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteScopeTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /scopes/{scp}][%d] deleteScopeTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteScopeTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteScopeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
