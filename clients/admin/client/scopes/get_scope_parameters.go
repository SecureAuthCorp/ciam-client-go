// Code generated by go-swagger; DO NOT EDIT.

package scopes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetScopeParams creates a new GetScopeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetScopeParams() *GetScopeParams {
	return &GetScopeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetScopeParamsWithTimeout creates a new GetScopeParams object
// with the ability to set a timeout on a request.
func NewGetScopeParamsWithTimeout(timeout time.Duration) *GetScopeParams {
	return &GetScopeParams{
		timeout: timeout,
	}
}

// NewGetScopeParamsWithContext creates a new GetScopeParams object
// with the ability to set a context for a request.
func NewGetScopeParamsWithContext(ctx context.Context) *GetScopeParams {
	return &GetScopeParams{
		Context: ctx,
	}
}

// NewGetScopeParamsWithHTTPClient creates a new GetScopeParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetScopeParamsWithHTTPClient(client *http.Client) *GetScopeParams {
	return &GetScopeParams{
		HTTPClient: client,
	}
}

/*
GetScopeParams contains all the parameters to send to the API endpoint

	for the get scope operation.

	Typically these are written to a http.Request.
*/
type GetScopeParams struct {

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	// Scp.
	Scp string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get scope params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScopeParams) WithDefaults() *GetScopeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get scope params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetScopeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get scope params
func (o *GetScopeParams) WithTimeout(timeout time.Duration) *GetScopeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get scope params
func (o *GetScopeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get scope params
func (o *GetScopeParams) WithContext(ctx context.Context) *GetScopeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get scope params
func (o *GetScopeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get scope params
func (o *GetScopeParams) WithHTTPClient(client *http.Client) *GetScopeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get scope params
func (o *GetScopeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIfMatch adds the ifMatch to the get scope params
func (o *GetScopeParams) WithIfMatch(ifMatch *string) *GetScopeParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the get scope params
func (o *GetScopeParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithScp adds the scp to the get scope params
func (o *GetScopeParams) WithScp(scp string) *GetScopeParams {
	o.SetScp(scp)
	return o
}

// SetScp adds the scp to the get scope params
func (o *GetScopeParams) SetScp(scp string) {
	o.Scp = scp
}

// WriteToRequest writes these params to a swagger request
func (o *GetScopeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	// path param scp
	if err := r.SetPathParam("scp", o.Scp); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
