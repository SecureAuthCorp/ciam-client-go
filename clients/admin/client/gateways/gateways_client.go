// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new gateways API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for gateways API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BindGroupToService(params *BindGroupToServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BindGroupToServiceOK, error)

	CreateGateway(params *CreateGatewayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGatewayCreated, error)

	DeleteGateway(params *DeleteGatewayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGatewayNoContent, error)

	GetGateway(params *GetGatewayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGatewayOK, error)

	GetGatewayPackage(params *GetGatewayPackageParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*GetGatewayPackageOK, error)

	ListGatewayAPIGroups(params *ListGatewayAPIGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGatewayAPIGroupsOK, error)

	ListGateways(params *ListGatewaysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGatewaysOK, error)

	UnbindGroupFromService(params *UnbindGroupFromServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnbindGroupFromServiceOK, error)

	UpdateGateway(params *UpdateGatewayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGatewayOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  BindGroupToService binds a group to a service

  It unbinds service first, if it is already connected to an api group.

It removes specification from a service, if it has specification imported already.

It removes any APIs added manually to a service, if it contains any.
*/
func (a *Client) BindGroupToService(params *BindGroupToServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BindGroupToServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBindGroupToServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "bindGroupToService",
		Method:             "POST",
		PathPattern:        "/gateways/{gw}/groups/{apiGroup}/bind",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BindGroupToServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BindGroupToServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bindGroupToService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateGateway creates gateway

  Create gateway.
*/
func (a *Client) CreateGateway(params *CreateGatewayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateGatewayCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGatewayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGateway",
		Method:             "POST",
		PathPattern:        "/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGatewayCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGateway deletes gateway

  This removes configuration for all services connected to this gateway.
*/
func (a *Client) DeleteGateway(params *DeleteGatewayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteGatewayNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGatewayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGateway",
		Method:             "DELETE",
		PathPattern:        "/gateways/{gw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGatewayNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGateway gets gateway

  Get gateway.
*/
func (a *Client) GetGateway(params *GetGatewayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGateway",
		Method:             "GET",
		PathPattern:        "/gateways/{gw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGatewayPackage gets package for a gateway

  Get package for a gateway.
*/
func (a *Client) GetGatewayPackage(params *GetGatewayPackageParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*GetGatewayPackageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewayPackageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGatewayPackage",
		Method:             "GET",
		PathPattern:        "/gateways/{gw}/package",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGatewayPackageReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGatewayPackageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGatewayPackage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGatewayAPIGroups lists gateway api groups

  List gateway api groups.
*/
func (a *Client) ListGatewayAPIGroups(params *ListGatewayAPIGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGatewayAPIGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGatewayAPIGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGatewayAPIGroups",
		Method:             "GET",
		PathPattern:        "/gateways/{gw}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGatewayAPIGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGatewayAPIGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGatewayAPIGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListGateways lists gateways

  List gateways.
*/
func (a *Client) ListGateways(params *ListGatewaysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListGatewaysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGatewaysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGateways",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGatewaysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGatewaysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGateways: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnbindGroupFromService unbinds a group from a service

  Remove all apis and policies.

If policy is used by another service it will not be removed.

If service is connected to a gateway, it will be disconnected.

If a gateway api group is connected to this service, it will be disconnected.
*/
func (a *Client) UnbindGroupFromService(params *UnbindGroupFromServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnbindGroupFromServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnbindGroupFromServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unbindGroupFromService",
		Method:             "DELETE",
		PathPattern:        "/gateways/{gw}/groups/{apiGroup}/unbind",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnbindGroupFromServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnbindGroupFromServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unbindGroupFromService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGateway updates gateway

  Update gateway.
*/
func (a *Client) UpdateGateway(params *UpdateGatewayParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateGatewayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGatewayParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGateway",
		Method:             "PUT",
		PathPattern:        "/gateways/{gw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGatewayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGatewayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGateway: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
