// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// CreateGatewayReader is a Reader for the CreateGateway structure.
type CreateGatewayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateGatewayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateGatewayCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCreateGatewayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateGatewayForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateGatewayNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateGatewayConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateGatewayUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateGatewayTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /gateways] createGateway", response, response.Code())
	}
}

// NewCreateGatewayCreated creates a CreateGatewayCreated with default headers values
func NewCreateGatewayCreated() *CreateGatewayCreated {
	return &CreateGatewayCreated{}
}

/*
CreateGatewayCreated describes a response with status code 201, with default header values.

Gateway with client
*/
type CreateGatewayCreated struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.GatewayWithClient
}

// IsSuccess returns true when this create gateway created response has a 2xx status code
func (o *CreateGatewayCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create gateway created response has a 3xx status code
func (o *CreateGatewayCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create gateway created response has a 4xx status code
func (o *CreateGatewayCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create gateway created response has a 5xx status code
func (o *CreateGatewayCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create gateway created response a status code equal to that given
func (o *CreateGatewayCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create gateway created response
func (o *CreateGatewayCreated) Code() int {
	return 201
}

func (o *CreateGatewayCreated) Error() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayCreated  %+v", 201, o.Payload)
}

func (o *CreateGatewayCreated) String() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayCreated  %+v", 201, o.Payload)
}

func (o *CreateGatewayCreated) GetPayload() *models.GatewayWithClient {
	return o.Payload
}

func (o *CreateGatewayCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.GatewayWithClient)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGatewayUnauthorized creates a CreateGatewayUnauthorized with default headers values
func NewCreateGatewayUnauthorized() *CreateGatewayUnauthorized {
	return &CreateGatewayUnauthorized{}
}

/*
CreateGatewayUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateGatewayUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this create gateway unauthorized response has a 2xx status code
func (o *CreateGatewayUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create gateway unauthorized response has a 3xx status code
func (o *CreateGatewayUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create gateway unauthorized response has a 4xx status code
func (o *CreateGatewayUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create gateway unauthorized response has a 5xx status code
func (o *CreateGatewayUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create gateway unauthorized response a status code equal to that given
func (o *CreateGatewayUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create gateway unauthorized response
func (o *CreateGatewayUnauthorized) Code() int {
	return 401
}

func (o *CreateGatewayUnauthorized) Error() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateGatewayUnauthorized) String() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateGatewayUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGatewayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGatewayForbidden creates a CreateGatewayForbidden with default headers values
func NewCreateGatewayForbidden() *CreateGatewayForbidden {
	return &CreateGatewayForbidden{}
}

/*
CreateGatewayForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateGatewayForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this create gateway forbidden response has a 2xx status code
func (o *CreateGatewayForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create gateway forbidden response has a 3xx status code
func (o *CreateGatewayForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create gateway forbidden response has a 4xx status code
func (o *CreateGatewayForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create gateway forbidden response has a 5xx status code
func (o *CreateGatewayForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create gateway forbidden response a status code equal to that given
func (o *CreateGatewayForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create gateway forbidden response
func (o *CreateGatewayForbidden) Code() int {
	return 403
}

func (o *CreateGatewayForbidden) Error() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayForbidden  %+v", 403, o.Payload)
}

func (o *CreateGatewayForbidden) String() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayForbidden  %+v", 403, o.Payload)
}

func (o *CreateGatewayForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGatewayForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGatewayNotFound creates a CreateGatewayNotFound with default headers values
func NewCreateGatewayNotFound() *CreateGatewayNotFound {
	return &CreateGatewayNotFound{}
}

/*
CreateGatewayNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateGatewayNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this create gateway not found response has a 2xx status code
func (o *CreateGatewayNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create gateway not found response has a 3xx status code
func (o *CreateGatewayNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create gateway not found response has a 4xx status code
func (o *CreateGatewayNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create gateway not found response has a 5xx status code
func (o *CreateGatewayNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create gateway not found response a status code equal to that given
func (o *CreateGatewayNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create gateway not found response
func (o *CreateGatewayNotFound) Code() int {
	return 404
}

func (o *CreateGatewayNotFound) Error() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayNotFound  %+v", 404, o.Payload)
}

func (o *CreateGatewayNotFound) String() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayNotFound  %+v", 404, o.Payload)
}

func (o *CreateGatewayNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGatewayNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGatewayConflict creates a CreateGatewayConflict with default headers values
func NewCreateGatewayConflict() *CreateGatewayConflict {
	return &CreateGatewayConflict{}
}

/*
CreateGatewayConflict describes a response with status code 409, with default header values.

Conflict
*/
type CreateGatewayConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this create gateway conflict response has a 2xx status code
func (o *CreateGatewayConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create gateway conflict response has a 3xx status code
func (o *CreateGatewayConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create gateway conflict response has a 4xx status code
func (o *CreateGatewayConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create gateway conflict response has a 5xx status code
func (o *CreateGatewayConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create gateway conflict response a status code equal to that given
func (o *CreateGatewayConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create gateway conflict response
func (o *CreateGatewayConflict) Code() int {
	return 409
}

func (o *CreateGatewayConflict) Error() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayConflict  %+v", 409, o.Payload)
}

func (o *CreateGatewayConflict) String() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayConflict  %+v", 409, o.Payload)
}

func (o *CreateGatewayConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGatewayConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGatewayUnprocessableEntity creates a CreateGatewayUnprocessableEntity with default headers values
func NewCreateGatewayUnprocessableEntity() *CreateGatewayUnprocessableEntity {
	return &CreateGatewayUnprocessableEntity{}
}

/*
CreateGatewayUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type CreateGatewayUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this create gateway unprocessable entity response has a 2xx status code
func (o *CreateGatewayUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create gateway unprocessable entity response has a 3xx status code
func (o *CreateGatewayUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create gateway unprocessable entity response has a 4xx status code
func (o *CreateGatewayUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create gateway unprocessable entity response has a 5xx status code
func (o *CreateGatewayUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create gateway unprocessable entity response a status code equal to that given
func (o *CreateGatewayUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create gateway unprocessable entity response
func (o *CreateGatewayUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateGatewayUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateGatewayUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateGatewayUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGatewayUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateGatewayTooManyRequests creates a CreateGatewayTooManyRequests with default headers values
func NewCreateGatewayTooManyRequests() *CreateGatewayTooManyRequests {
	return &CreateGatewayTooManyRequests{}
}

/*
CreateGatewayTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type CreateGatewayTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this create gateway too many requests response has a 2xx status code
func (o *CreateGatewayTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create gateway too many requests response has a 3xx status code
func (o *CreateGatewayTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create gateway too many requests response has a 4xx status code
func (o *CreateGatewayTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create gateway too many requests response has a 5xx status code
func (o *CreateGatewayTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create gateway too many requests response a status code equal to that given
func (o *CreateGatewayTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create gateway too many requests response
func (o *CreateGatewayTooManyRequests) Code() int {
	return 429
}

func (o *CreateGatewayTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateGatewayTooManyRequests) String() string {
	return fmt.Sprintf("[POST /gateways][%d] createGatewayTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateGatewayTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateGatewayTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
