// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpdateGatewayReader is a Reader for the UpdateGateway structure.
type UpdateGatewayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGatewayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGatewayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateGatewayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateGatewayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGatewayForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGatewayNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateGatewayUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateGatewayTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /gateways/{gw}] updateGateway", response, response.Code())
	}
}

// NewUpdateGatewayOK creates a UpdateGatewayOK with default headers values
func NewUpdateGatewayOK() *UpdateGatewayOK {
	return &UpdateGatewayOK{}
}

/*
UpdateGatewayOK describes a response with status code 200, with default header values.

Gateway
*/
type UpdateGatewayOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Gateway
}

// IsSuccess returns true when this update gateway o k response has a 2xx status code
func (o *UpdateGatewayOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gateway o k response has a 3xx status code
func (o *UpdateGatewayOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gateway o k response has a 4xx status code
func (o *UpdateGatewayOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gateway o k response has a 5xx status code
func (o *UpdateGatewayOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update gateway o k response a status code equal to that given
func (o *UpdateGatewayOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update gateway o k response
func (o *UpdateGatewayOK) Code() int {
	return 200
}

func (o *UpdateGatewayOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayOK %s", 200, payload)
}

func (o *UpdateGatewayOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayOK %s", 200, payload)
}

func (o *UpdateGatewayOK) GetPayload() *models.Gateway {
	return o.Payload
}

func (o *UpdateGatewayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Gateway)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGatewayBadRequest creates a UpdateGatewayBadRequest with default headers values
func NewUpdateGatewayBadRequest() *UpdateGatewayBadRequest {
	return &UpdateGatewayBadRequest{}
}

/*
UpdateGatewayBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateGatewayBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update gateway bad request response has a 2xx status code
func (o *UpdateGatewayBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gateway bad request response has a 3xx status code
func (o *UpdateGatewayBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gateway bad request response has a 4xx status code
func (o *UpdateGatewayBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gateway bad request response has a 5xx status code
func (o *UpdateGatewayBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update gateway bad request response a status code equal to that given
func (o *UpdateGatewayBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update gateway bad request response
func (o *UpdateGatewayBadRequest) Code() int {
	return 400
}

func (o *UpdateGatewayBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayBadRequest %s", 400, payload)
}

func (o *UpdateGatewayBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayBadRequest %s", 400, payload)
}

func (o *UpdateGatewayBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGatewayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGatewayUnauthorized creates a UpdateGatewayUnauthorized with default headers values
func NewUpdateGatewayUnauthorized() *UpdateGatewayUnauthorized {
	return &UpdateGatewayUnauthorized{}
}

/*
UpdateGatewayUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateGatewayUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this update gateway unauthorized response has a 2xx status code
func (o *UpdateGatewayUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gateway unauthorized response has a 3xx status code
func (o *UpdateGatewayUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gateway unauthorized response has a 4xx status code
func (o *UpdateGatewayUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gateway unauthorized response has a 5xx status code
func (o *UpdateGatewayUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update gateway unauthorized response a status code equal to that given
func (o *UpdateGatewayUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update gateway unauthorized response
func (o *UpdateGatewayUnauthorized) Code() int {
	return 401
}

func (o *UpdateGatewayUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayUnauthorized %s", 401, payload)
}

func (o *UpdateGatewayUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayUnauthorized %s", 401, payload)
}

func (o *UpdateGatewayUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGatewayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGatewayForbidden creates a UpdateGatewayForbidden with default headers values
func NewUpdateGatewayForbidden() *UpdateGatewayForbidden {
	return &UpdateGatewayForbidden{}
}

/*
UpdateGatewayForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGatewayForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this update gateway forbidden response has a 2xx status code
func (o *UpdateGatewayForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gateway forbidden response has a 3xx status code
func (o *UpdateGatewayForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gateway forbidden response has a 4xx status code
func (o *UpdateGatewayForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gateway forbidden response has a 5xx status code
func (o *UpdateGatewayForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update gateway forbidden response a status code equal to that given
func (o *UpdateGatewayForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update gateway forbidden response
func (o *UpdateGatewayForbidden) Code() int {
	return 403
}

func (o *UpdateGatewayForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayForbidden %s", 403, payload)
}

func (o *UpdateGatewayForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayForbidden %s", 403, payload)
}

func (o *UpdateGatewayForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGatewayForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGatewayNotFound creates a UpdateGatewayNotFound with default headers values
func NewUpdateGatewayNotFound() *UpdateGatewayNotFound {
	return &UpdateGatewayNotFound{}
}

/*
UpdateGatewayNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateGatewayNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this update gateway not found response has a 2xx status code
func (o *UpdateGatewayNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gateway not found response has a 3xx status code
func (o *UpdateGatewayNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gateway not found response has a 4xx status code
func (o *UpdateGatewayNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gateway not found response has a 5xx status code
func (o *UpdateGatewayNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update gateway not found response a status code equal to that given
func (o *UpdateGatewayNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update gateway not found response
func (o *UpdateGatewayNotFound) Code() int {
	return 404
}

func (o *UpdateGatewayNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayNotFound %s", 404, payload)
}

func (o *UpdateGatewayNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayNotFound %s", 404, payload)
}

func (o *UpdateGatewayNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGatewayNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGatewayUnprocessableEntity creates a UpdateGatewayUnprocessableEntity with default headers values
func NewUpdateGatewayUnprocessableEntity() *UpdateGatewayUnprocessableEntity {
	return &UpdateGatewayUnprocessableEntity{}
}

/*
UpdateGatewayUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpdateGatewayUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this update gateway unprocessable entity response has a 2xx status code
func (o *UpdateGatewayUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gateway unprocessable entity response has a 3xx status code
func (o *UpdateGatewayUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gateway unprocessable entity response has a 4xx status code
func (o *UpdateGatewayUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gateway unprocessable entity response has a 5xx status code
func (o *UpdateGatewayUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update gateway unprocessable entity response a status code equal to that given
func (o *UpdateGatewayUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update gateway unprocessable entity response
func (o *UpdateGatewayUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateGatewayUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayUnprocessableEntity %s", 422, payload)
}

func (o *UpdateGatewayUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayUnprocessableEntity %s", 422, payload)
}

func (o *UpdateGatewayUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGatewayUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGatewayTooManyRequests creates a UpdateGatewayTooManyRequests with default headers values
func NewUpdateGatewayTooManyRequests() *UpdateGatewayTooManyRequests {
	return &UpdateGatewayTooManyRequests{}
}

/*
UpdateGatewayTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpdateGatewayTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this update gateway too many requests response has a 2xx status code
func (o *UpdateGatewayTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gateway too many requests response has a 3xx status code
func (o *UpdateGatewayTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gateway too many requests response has a 4xx status code
func (o *UpdateGatewayTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gateway too many requests response has a 5xx status code
func (o *UpdateGatewayTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update gateway too many requests response a status code equal to that given
func (o *UpdateGatewayTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the update gateway too many requests response
func (o *UpdateGatewayTooManyRequests) Code() int {
	return 429
}

func (o *UpdateGatewayTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayTooManyRequests %s", 429, payload)
}

func (o *UpdateGatewayTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /gateways/{gw}][%d] updateGatewayTooManyRequests %s", 429, payload)
}

func (o *UpdateGatewayTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGatewayTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
