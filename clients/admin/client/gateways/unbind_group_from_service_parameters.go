// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUnbindGroupFromServiceParams creates a new UnbindGroupFromServiceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUnbindGroupFromServiceParams() *UnbindGroupFromServiceParams {
	return &UnbindGroupFromServiceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUnbindGroupFromServiceParamsWithTimeout creates a new UnbindGroupFromServiceParams object
// with the ability to set a timeout on a request.
func NewUnbindGroupFromServiceParamsWithTimeout(timeout time.Duration) *UnbindGroupFromServiceParams {
	return &UnbindGroupFromServiceParams{
		timeout: timeout,
	}
}

// NewUnbindGroupFromServiceParamsWithContext creates a new UnbindGroupFromServiceParams object
// with the ability to set a context for a request.
func NewUnbindGroupFromServiceParamsWithContext(ctx context.Context) *UnbindGroupFromServiceParams {
	return &UnbindGroupFromServiceParams{
		Context: ctx,
	}
}

// NewUnbindGroupFromServiceParamsWithHTTPClient creates a new UnbindGroupFromServiceParams object
// with the ability to set a custom HTTPClient for a request.
func NewUnbindGroupFromServiceParamsWithHTTPClient(client *http.Client) *UnbindGroupFromServiceParams {
	return &UnbindGroupFromServiceParams{
		HTTPClient: client,
	}
}

/*
UnbindGroupFromServiceParams contains all the parameters to send to the API endpoint

	for the unbind group from service operation.

	Typically these are written to a http.Request.
*/
type UnbindGroupFromServiceParams struct {

	// APIGroup.
	APIGroup string

	// Gw.
	Gw string

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the unbind group from service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UnbindGroupFromServiceParams) WithDefaults() *UnbindGroupFromServiceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the unbind group from service params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UnbindGroupFromServiceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the unbind group from service params
func (o *UnbindGroupFromServiceParams) WithTimeout(timeout time.Duration) *UnbindGroupFromServiceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the unbind group from service params
func (o *UnbindGroupFromServiceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the unbind group from service params
func (o *UnbindGroupFromServiceParams) WithContext(ctx context.Context) *UnbindGroupFromServiceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the unbind group from service params
func (o *UnbindGroupFromServiceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the unbind group from service params
func (o *UnbindGroupFromServiceParams) WithHTTPClient(client *http.Client) *UnbindGroupFromServiceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the unbind group from service params
func (o *UnbindGroupFromServiceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIGroup adds the aPIGroup to the unbind group from service params
func (o *UnbindGroupFromServiceParams) WithAPIGroup(aPIGroup string) *UnbindGroupFromServiceParams {
	o.SetAPIGroup(aPIGroup)
	return o
}

// SetAPIGroup adds the apiGroup to the unbind group from service params
func (o *UnbindGroupFromServiceParams) SetAPIGroup(aPIGroup string) {
	o.APIGroup = aPIGroup
}

// WithGw adds the gw to the unbind group from service params
func (o *UnbindGroupFromServiceParams) WithGw(gw string) *UnbindGroupFromServiceParams {
	o.SetGw(gw)
	return o
}

// SetGw adds the gw to the unbind group from service params
func (o *UnbindGroupFromServiceParams) SetGw(gw string) {
	o.Gw = gw
}

// WithIfMatch adds the ifMatch to the unbind group from service params
func (o *UnbindGroupFromServiceParams) WithIfMatch(ifMatch *string) *UnbindGroupFromServiceParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the unbind group from service params
func (o *UnbindGroupFromServiceParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WriteToRequest writes these params to a swagger request
func (o *UnbindGroupFromServiceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param apiGroup
	if err := r.SetPathParam("apiGroup", o.APIGroup); err != nil {
		return err
	}

	// path param gw
	if err := r.SetPathParam("gw", o.Gw); err != nil {
		return err
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
