// Code generated by go-swagger; DO NOT EDIT.

package gateways

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetGatewayReader is a Reader for the GetGateway structure.
type GetGatewayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGatewayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGatewayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGatewayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGatewayForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGatewayNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetGatewayTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /gateways/{gw}] getGateway", response, response.Code())
	}
}

// NewGetGatewayOK creates a GetGatewayOK with default headers values
func NewGetGatewayOK() *GetGatewayOK {
	return &GetGatewayOK{}
}

/*
GetGatewayOK describes a response with status code 200, with default header values.

Gateway with client
*/
type GetGatewayOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.GatewayWithClient
}

// IsSuccess returns true when this get gateway o k response has a 2xx status code
func (o *GetGatewayOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get gateway o k response has a 3xx status code
func (o *GetGatewayOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gateway o k response has a 4xx status code
func (o *GetGatewayOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get gateway o k response has a 5xx status code
func (o *GetGatewayOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get gateway o k response a status code equal to that given
func (o *GetGatewayOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get gateway o k response
func (o *GetGatewayOK) Code() int {
	return 200
}

func (o *GetGatewayOK) Error() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayOK  %+v", 200, o.Payload)
}

func (o *GetGatewayOK) String() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayOK  %+v", 200, o.Payload)
}

func (o *GetGatewayOK) GetPayload() *models.GatewayWithClient {
	return o.Payload
}

func (o *GetGatewayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.GatewayWithClient)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayUnauthorized creates a GetGatewayUnauthorized with default headers values
func NewGetGatewayUnauthorized() *GetGatewayUnauthorized {
	return &GetGatewayUnauthorized{}
}

/*
GetGatewayUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetGatewayUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get gateway unauthorized response has a 2xx status code
func (o *GetGatewayUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gateway unauthorized response has a 3xx status code
func (o *GetGatewayUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gateway unauthorized response has a 4xx status code
func (o *GetGatewayUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gateway unauthorized response has a 5xx status code
func (o *GetGatewayUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get gateway unauthorized response a status code equal to that given
func (o *GetGatewayUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get gateway unauthorized response
func (o *GetGatewayUnauthorized) Code() int {
	return 401
}

func (o *GetGatewayUnauthorized) Error() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGatewayUnauthorized) String() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGatewayUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGatewayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayForbidden creates a GetGatewayForbidden with default headers values
func NewGetGatewayForbidden() *GetGatewayForbidden {
	return &GetGatewayForbidden{}
}

/*
GetGatewayForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGatewayForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get gateway forbidden response has a 2xx status code
func (o *GetGatewayForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gateway forbidden response has a 3xx status code
func (o *GetGatewayForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gateway forbidden response has a 4xx status code
func (o *GetGatewayForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gateway forbidden response has a 5xx status code
func (o *GetGatewayForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get gateway forbidden response a status code equal to that given
func (o *GetGatewayForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get gateway forbidden response
func (o *GetGatewayForbidden) Code() int {
	return 403
}

func (o *GetGatewayForbidden) Error() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayForbidden  %+v", 403, o.Payload)
}

func (o *GetGatewayForbidden) String() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayForbidden  %+v", 403, o.Payload)
}

func (o *GetGatewayForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGatewayForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayNotFound creates a GetGatewayNotFound with default headers values
func NewGetGatewayNotFound() *GetGatewayNotFound {
	return &GetGatewayNotFound{}
}

/*
GetGatewayNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetGatewayNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get gateway not found response has a 2xx status code
func (o *GetGatewayNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gateway not found response has a 3xx status code
func (o *GetGatewayNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gateway not found response has a 4xx status code
func (o *GetGatewayNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gateway not found response has a 5xx status code
func (o *GetGatewayNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get gateway not found response a status code equal to that given
func (o *GetGatewayNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get gateway not found response
func (o *GetGatewayNotFound) Code() int {
	return 404
}

func (o *GetGatewayNotFound) Error() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayNotFound  %+v", 404, o.Payload)
}

func (o *GetGatewayNotFound) String() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayNotFound  %+v", 404, o.Payload)
}

func (o *GetGatewayNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGatewayNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGatewayTooManyRequests creates a GetGatewayTooManyRequests with default headers values
func NewGetGatewayTooManyRequests() *GetGatewayTooManyRequests {
	return &GetGatewayTooManyRequests{}
}

/*
GetGatewayTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetGatewayTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get gateway too many requests response has a 2xx status code
func (o *GetGatewayTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get gateway too many requests response has a 3xx status code
func (o *GetGatewayTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get gateway too many requests response has a 4xx status code
func (o *GetGatewayTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get gateway too many requests response has a 5xx status code
func (o *GetGatewayTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get gateway too many requests response a status code equal to that given
func (o *GetGatewayTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get gateway too many requests response
func (o *GetGatewayTooManyRequests) Code() int {
	return 429
}

func (o *GetGatewayTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGatewayTooManyRequests) String() string {
	return fmt.Sprintf("[GET /gateways/{gw}][%d] getGatewayTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetGatewayTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetGatewayTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
