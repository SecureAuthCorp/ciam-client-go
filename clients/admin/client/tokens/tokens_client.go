// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tokens API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tokens API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RevokeTokens(params *RevokeTokensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeTokensNoContent, error)

	RevokeTokensByPool(params *RevokeTokensByPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeTokensByPoolNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	RevokeTokens revokes tokens

	Revoke tokens for given set of subjects (min 1, max 100 subjects can be specified).

Tokens includes access and refresh tokens but also authorization codes, authorization requests,
sso sessions and scopes grants.

Optional IDP id if provided will recalculate subjects values if server is using hashed subject type.
*/
func (a *Client) RevokeTokens(params *RevokeTokensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeTokensNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeTokens",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeTokensNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeTokens: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeTokensByPool revokes tokens for users in pool

	Revoke tokens for given set of userIds (min 1, max 100 userIds can be specified).

Tokens includes access and refresh tokens but also authorization codes, authorization requests,
sso sessions and scopes grants.
*/
func (a *Client) RevokeTokensByPool(params *RevokeTokensByPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeTokensByPoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeTokensByPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeTokensByPool",
		Method:             "DELETE",
		PathPattern:        "/pools/{ipID}/tokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeTokensByPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeTokensByPoolNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeTokensByPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
