// Code generated by go-swagger; DO NOT EDIT.

package tokens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// RevokeTokensByPoolReader is a Reader for the RevokeTokensByPool structure.
type RevokeTokensByPoolReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevokeTokensByPoolReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRevokeTokensByPoolNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRevokeTokensByPoolUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRevokeTokensByPoolForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRevokeTokensByPoolNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRevokeTokensByPoolUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /pools/{ipID}/tokens] revokeTokensByPool", response, response.Code())
	}
}

// NewRevokeTokensByPoolNoContent creates a RevokeTokensByPoolNoContent with default headers values
func NewRevokeTokensByPoolNoContent() *RevokeTokensByPoolNoContent {
	return &RevokeTokensByPoolNoContent{}
}

/*
RevokeTokensByPoolNoContent describes a response with status code 204, with default header values.

	tokens revoked
*/
type RevokeTokensByPoolNoContent struct {
}

// IsSuccess returns true when this revoke tokens by pool no content response has a 2xx status code
func (o *RevokeTokensByPoolNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this revoke tokens by pool no content response has a 3xx status code
func (o *RevokeTokensByPoolNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke tokens by pool no content response has a 4xx status code
func (o *RevokeTokensByPoolNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this revoke tokens by pool no content response has a 5xx status code
func (o *RevokeTokensByPoolNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke tokens by pool no content response a status code equal to that given
func (o *RevokeTokensByPoolNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the revoke tokens by pool no content response
func (o *RevokeTokensByPoolNoContent) Code() int {
	return 204
}

func (o *RevokeTokensByPoolNoContent) Error() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolNoContent ", 204)
}

func (o *RevokeTokensByPoolNoContent) String() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolNoContent ", 204)
}

func (o *RevokeTokensByPoolNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevokeTokensByPoolUnauthorized creates a RevokeTokensByPoolUnauthorized with default headers values
func NewRevokeTokensByPoolUnauthorized() *RevokeTokensByPoolUnauthorized {
	return &RevokeTokensByPoolUnauthorized{}
}

/*
RevokeTokensByPoolUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RevokeTokensByPoolUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke tokens by pool unauthorized response has a 2xx status code
func (o *RevokeTokensByPoolUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke tokens by pool unauthorized response has a 3xx status code
func (o *RevokeTokensByPoolUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke tokens by pool unauthorized response has a 4xx status code
func (o *RevokeTokensByPoolUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke tokens by pool unauthorized response has a 5xx status code
func (o *RevokeTokensByPoolUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke tokens by pool unauthorized response a status code equal to that given
func (o *RevokeTokensByPoolUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the revoke tokens by pool unauthorized response
func (o *RevokeTokensByPoolUnauthorized) Code() int {
	return 401
}

func (o *RevokeTokensByPoolUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolUnauthorized  %+v", 401, o.Payload)
}

func (o *RevokeTokensByPoolUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolUnauthorized  %+v", 401, o.Payload)
}

func (o *RevokeTokensByPoolUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeTokensByPoolUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeTokensByPoolForbidden creates a RevokeTokensByPoolForbidden with default headers values
func NewRevokeTokensByPoolForbidden() *RevokeTokensByPoolForbidden {
	return &RevokeTokensByPoolForbidden{}
}

/*
RevokeTokensByPoolForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type RevokeTokensByPoolForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke tokens by pool forbidden response has a 2xx status code
func (o *RevokeTokensByPoolForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke tokens by pool forbidden response has a 3xx status code
func (o *RevokeTokensByPoolForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke tokens by pool forbidden response has a 4xx status code
func (o *RevokeTokensByPoolForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke tokens by pool forbidden response has a 5xx status code
func (o *RevokeTokensByPoolForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke tokens by pool forbidden response a status code equal to that given
func (o *RevokeTokensByPoolForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the revoke tokens by pool forbidden response
func (o *RevokeTokensByPoolForbidden) Code() int {
	return 403
}

func (o *RevokeTokensByPoolForbidden) Error() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolForbidden  %+v", 403, o.Payload)
}

func (o *RevokeTokensByPoolForbidden) String() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolForbidden  %+v", 403, o.Payload)
}

func (o *RevokeTokensByPoolForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeTokensByPoolForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeTokensByPoolNotFound creates a RevokeTokensByPoolNotFound with default headers values
func NewRevokeTokensByPoolNotFound() *RevokeTokensByPoolNotFound {
	return &RevokeTokensByPoolNotFound{}
}

/*
RevokeTokensByPoolNotFound describes a response with status code 404, with default header values.

Not found
*/
type RevokeTokensByPoolNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke tokens by pool not found response has a 2xx status code
func (o *RevokeTokensByPoolNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke tokens by pool not found response has a 3xx status code
func (o *RevokeTokensByPoolNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke tokens by pool not found response has a 4xx status code
func (o *RevokeTokensByPoolNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke tokens by pool not found response has a 5xx status code
func (o *RevokeTokensByPoolNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke tokens by pool not found response a status code equal to that given
func (o *RevokeTokensByPoolNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the revoke tokens by pool not found response
func (o *RevokeTokensByPoolNotFound) Code() int {
	return 404
}

func (o *RevokeTokensByPoolNotFound) Error() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolNotFound  %+v", 404, o.Payload)
}

func (o *RevokeTokensByPoolNotFound) String() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolNotFound  %+v", 404, o.Payload)
}

func (o *RevokeTokensByPoolNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeTokensByPoolNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevokeTokensByPoolUnprocessableEntity creates a RevokeTokensByPoolUnprocessableEntity with default headers values
func NewRevokeTokensByPoolUnprocessableEntity() *RevokeTokensByPoolUnprocessableEntity {
	return &RevokeTokensByPoolUnprocessableEntity{}
}

/*
RevokeTokensByPoolUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type RevokeTokensByPoolUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this revoke tokens by pool unprocessable entity response has a 2xx status code
func (o *RevokeTokensByPoolUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this revoke tokens by pool unprocessable entity response has a 3xx status code
func (o *RevokeTokensByPoolUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this revoke tokens by pool unprocessable entity response has a 4xx status code
func (o *RevokeTokensByPoolUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this revoke tokens by pool unprocessable entity response has a 5xx status code
func (o *RevokeTokensByPoolUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this revoke tokens by pool unprocessable entity response a status code equal to that given
func (o *RevokeTokensByPoolUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the revoke tokens by pool unprocessable entity response
func (o *RevokeTokensByPoolUnprocessableEntity) Code() int {
	return 422
}

func (o *RevokeTokensByPoolUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *RevokeTokensByPoolUnprocessableEntity) String() string {
	return fmt.Sprintf("[DELETE /pools/{ipID}/tokens][%d] revokeTokensByPoolUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *RevokeTokensByPoolUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevokeTokensByPoolUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
