// Code generated by go-swagger; DO NOT EDIT.

package translations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpsertTranslationReader is a Reader for the UpsertTranslation structure.
type UpsertTranslationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertTranslationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertTranslationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpsertTranslationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpsertTranslationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpsertTranslationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpsertTranslationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpsertTranslationUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpsertTranslationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /translation/{locale}] upsertTranslation", response, response.Code())
	}
}

// NewUpsertTranslationOK creates a UpsertTranslationOK with default headers values
func NewUpsertTranslationOK() *UpsertTranslationOK {
	return &UpsertTranslationOK{}
}

/*
UpsertTranslationOK describes a response with status code 200, with default header values.

Translation
*/
type UpsertTranslationOK struct {
	Payload *models.Translation
}

// IsSuccess returns true when this upsert translation o k response has a 2xx status code
func (o *UpsertTranslationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert translation o k response has a 3xx status code
func (o *UpsertTranslationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert translation o k response has a 4xx status code
func (o *UpsertTranslationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert translation o k response has a 5xx status code
func (o *UpsertTranslationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert translation o k response a status code equal to that given
func (o *UpsertTranslationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upsert translation o k response
func (o *UpsertTranslationOK) Code() int {
	return 200
}

func (o *UpsertTranslationOK) Error() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationOK  %+v", 200, o.Payload)
}

func (o *UpsertTranslationOK) String() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationOK  %+v", 200, o.Payload)
}

func (o *UpsertTranslationOK) GetPayload() *models.Translation {
	return o.Payload
}

func (o *UpsertTranslationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Translation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTranslationBadRequest creates a UpsertTranslationBadRequest with default headers values
func NewUpsertTranslationBadRequest() *UpsertTranslationBadRequest {
	return &UpsertTranslationBadRequest{}
}

/*
UpsertTranslationBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpsertTranslationBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert translation bad request response has a 2xx status code
func (o *UpsertTranslationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert translation bad request response has a 3xx status code
func (o *UpsertTranslationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert translation bad request response has a 4xx status code
func (o *UpsertTranslationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert translation bad request response has a 5xx status code
func (o *UpsertTranslationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert translation bad request response a status code equal to that given
func (o *UpsertTranslationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upsert translation bad request response
func (o *UpsertTranslationBadRequest) Code() int {
	return 400
}

func (o *UpsertTranslationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationBadRequest  %+v", 400, o.Payload)
}

func (o *UpsertTranslationBadRequest) String() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationBadRequest  %+v", 400, o.Payload)
}

func (o *UpsertTranslationBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTranslationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTranslationUnauthorized creates a UpsertTranslationUnauthorized with default headers values
func NewUpsertTranslationUnauthorized() *UpsertTranslationUnauthorized {
	return &UpsertTranslationUnauthorized{}
}

/*
UpsertTranslationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpsertTranslationUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert translation unauthorized response has a 2xx status code
func (o *UpsertTranslationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert translation unauthorized response has a 3xx status code
func (o *UpsertTranslationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert translation unauthorized response has a 4xx status code
func (o *UpsertTranslationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert translation unauthorized response has a 5xx status code
func (o *UpsertTranslationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert translation unauthorized response a status code equal to that given
func (o *UpsertTranslationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the upsert translation unauthorized response
func (o *UpsertTranslationUnauthorized) Code() int {
	return 401
}

func (o *UpsertTranslationUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationUnauthorized  %+v", 401, o.Payload)
}

func (o *UpsertTranslationUnauthorized) String() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationUnauthorized  %+v", 401, o.Payload)
}

func (o *UpsertTranslationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTranslationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTranslationForbidden creates a UpsertTranslationForbidden with default headers values
func NewUpsertTranslationForbidden() *UpsertTranslationForbidden {
	return &UpsertTranslationForbidden{}
}

/*
UpsertTranslationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpsertTranslationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert translation forbidden response has a 2xx status code
func (o *UpsertTranslationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert translation forbidden response has a 3xx status code
func (o *UpsertTranslationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert translation forbidden response has a 4xx status code
func (o *UpsertTranslationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert translation forbidden response has a 5xx status code
func (o *UpsertTranslationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert translation forbidden response a status code equal to that given
func (o *UpsertTranslationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upsert translation forbidden response
func (o *UpsertTranslationForbidden) Code() int {
	return 403
}

func (o *UpsertTranslationForbidden) Error() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationForbidden  %+v", 403, o.Payload)
}

func (o *UpsertTranslationForbidden) String() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationForbidden  %+v", 403, o.Payload)
}

func (o *UpsertTranslationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTranslationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTranslationNotFound creates a UpsertTranslationNotFound with default headers values
func NewUpsertTranslationNotFound() *UpsertTranslationNotFound {
	return &UpsertTranslationNotFound{}
}

/*
UpsertTranslationNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpsertTranslationNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert translation not found response has a 2xx status code
func (o *UpsertTranslationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert translation not found response has a 3xx status code
func (o *UpsertTranslationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert translation not found response has a 4xx status code
func (o *UpsertTranslationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert translation not found response has a 5xx status code
func (o *UpsertTranslationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert translation not found response a status code equal to that given
func (o *UpsertTranslationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upsert translation not found response
func (o *UpsertTranslationNotFound) Code() int {
	return 404
}

func (o *UpsertTranslationNotFound) Error() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationNotFound  %+v", 404, o.Payload)
}

func (o *UpsertTranslationNotFound) String() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationNotFound  %+v", 404, o.Payload)
}

func (o *UpsertTranslationNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTranslationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTranslationUnprocessableEntity creates a UpsertTranslationUnprocessableEntity with default headers values
func NewUpsertTranslationUnprocessableEntity() *UpsertTranslationUnprocessableEntity {
	return &UpsertTranslationUnprocessableEntity{}
}

/*
UpsertTranslationUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpsertTranslationUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert translation unprocessable entity response has a 2xx status code
func (o *UpsertTranslationUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert translation unprocessable entity response has a 3xx status code
func (o *UpsertTranslationUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert translation unprocessable entity response has a 4xx status code
func (o *UpsertTranslationUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert translation unprocessable entity response has a 5xx status code
func (o *UpsertTranslationUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert translation unprocessable entity response a status code equal to that given
func (o *UpsertTranslationUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the upsert translation unprocessable entity response
func (o *UpsertTranslationUnprocessableEntity) Code() int {
	return 422
}

func (o *UpsertTranslationUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpsertTranslationUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpsertTranslationUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTranslationUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTranslationTooManyRequests creates a UpsertTranslationTooManyRequests with default headers values
func NewUpsertTranslationTooManyRequests() *UpsertTranslationTooManyRequests {
	return &UpsertTranslationTooManyRequests{}
}

/*
UpsertTranslationTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpsertTranslationTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert translation too many requests response has a 2xx status code
func (o *UpsertTranslationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert translation too many requests response has a 3xx status code
func (o *UpsertTranslationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert translation too many requests response has a 4xx status code
func (o *UpsertTranslationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert translation too many requests response has a 5xx status code
func (o *UpsertTranslationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert translation too many requests response a status code equal to that given
func (o *UpsertTranslationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the upsert translation too many requests response
func (o *UpsertTranslationTooManyRequests) Code() int {
	return 429
}

func (o *UpsertTranslationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpsertTranslationTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /translation/{locale}][%d] upsertTranslationTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpsertTranslationTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTranslationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
