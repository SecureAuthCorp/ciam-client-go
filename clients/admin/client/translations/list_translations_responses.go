// Code generated by go-swagger; DO NOT EDIT.

package translations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ListTranslationsReader is a Reader for the ListTranslations structure.
type ListTranslationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTranslationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTranslationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListTranslationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListTranslationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListTranslationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /translations] listTranslations", response, response.Code())
	}
}

// NewListTranslationsOK creates a ListTranslationsOK with default headers values
func NewListTranslationsOK() *ListTranslationsOK {
	return &ListTranslationsOK{}
}

/*
ListTranslationsOK describes a response with status code 200, with default header values.

Translations
*/
type ListTranslationsOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Translations
}

// IsSuccess returns true when this list translations o k response has a 2xx status code
func (o *ListTranslationsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list translations o k response has a 3xx status code
func (o *ListTranslationsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list translations o k response has a 4xx status code
func (o *ListTranslationsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list translations o k response has a 5xx status code
func (o *ListTranslationsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list translations o k response a status code equal to that given
func (o *ListTranslationsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list translations o k response
func (o *ListTranslationsOK) Code() int {
	return 200
}

func (o *ListTranslationsOK) Error() string {
	return fmt.Sprintf("[GET /translations][%d] listTranslationsOK  %+v", 200, o.Payload)
}

func (o *ListTranslationsOK) String() string {
	return fmt.Sprintf("[GET /translations][%d] listTranslationsOK  %+v", 200, o.Payload)
}

func (o *ListTranslationsOK) GetPayload() *models.Translations {
	return o.Payload
}

func (o *ListTranslationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Translations)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTranslationsUnauthorized creates a ListTranslationsUnauthorized with default headers values
func NewListTranslationsUnauthorized() *ListTranslationsUnauthorized {
	return &ListTranslationsUnauthorized{}
}

/*
ListTranslationsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListTranslationsUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list translations unauthorized response has a 2xx status code
func (o *ListTranslationsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list translations unauthorized response has a 3xx status code
func (o *ListTranslationsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list translations unauthorized response has a 4xx status code
func (o *ListTranslationsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list translations unauthorized response has a 5xx status code
func (o *ListTranslationsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list translations unauthorized response a status code equal to that given
func (o *ListTranslationsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list translations unauthorized response
func (o *ListTranslationsUnauthorized) Code() int {
	return 401
}

func (o *ListTranslationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /translations][%d] listTranslationsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListTranslationsUnauthorized) String() string {
	return fmt.Sprintf("[GET /translations][%d] listTranslationsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListTranslationsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListTranslationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTranslationsForbidden creates a ListTranslationsForbidden with default headers values
func NewListTranslationsForbidden() *ListTranslationsForbidden {
	return &ListTranslationsForbidden{}
}

/*
ListTranslationsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListTranslationsForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list translations forbidden response has a 2xx status code
func (o *ListTranslationsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list translations forbidden response has a 3xx status code
func (o *ListTranslationsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list translations forbidden response has a 4xx status code
func (o *ListTranslationsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list translations forbidden response has a 5xx status code
func (o *ListTranslationsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list translations forbidden response a status code equal to that given
func (o *ListTranslationsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list translations forbidden response
func (o *ListTranslationsForbidden) Code() int {
	return 403
}

func (o *ListTranslationsForbidden) Error() string {
	return fmt.Sprintf("[GET /translations][%d] listTranslationsForbidden  %+v", 403, o.Payload)
}

func (o *ListTranslationsForbidden) String() string {
	return fmt.Sprintf("[GET /translations][%d] listTranslationsForbidden  %+v", 403, o.Payload)
}

func (o *ListTranslationsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListTranslationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTranslationsTooManyRequests creates a ListTranslationsTooManyRequests with default headers values
func NewListTranslationsTooManyRequests() *ListTranslationsTooManyRequests {
	return &ListTranslationsTooManyRequests{}
}

/*
ListTranslationsTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListTranslationsTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list translations too many requests response has a 2xx status code
func (o *ListTranslationsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list translations too many requests response has a 3xx status code
func (o *ListTranslationsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list translations too many requests response has a 4xx status code
func (o *ListTranslationsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list translations too many requests response has a 5xx status code
func (o *ListTranslationsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list translations too many requests response a status code equal to that given
func (o *ListTranslationsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list translations too many requests response
func (o *ListTranslationsTooManyRequests) Code() int {
	return 429
}

func (o *ListTranslationsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /translations][%d] listTranslationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListTranslationsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /translations][%d] listTranslationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListTranslationsTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListTranslationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
