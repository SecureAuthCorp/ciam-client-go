// Code generated by go-swagger; DO NOT EDIT.

package translations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new translations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for translations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteTranslation(params *DeleteTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTranslationNoContent, error)

	GetBuiltinTranslation(params *GetBuiltinTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBuiltinTranslationOK, error)

	GetTranslation(params *GetTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTranslationOK, error)

	ListTranslations(params *ListTranslationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTranslationsOK, error)

	UpsertTranslation(params *UpsertTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertTranslationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteTranslation alphas delete translation

Deletes the translation.
*/
func (a *Client) DeleteTranslation(params *DeleteTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTranslationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTranslation",
		Method:             "DELETE",
		PathPattern:        "/translation/{locale}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTranslationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTranslation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBuiltinTranslation alphas get built in translation

Returns the built-in translation and its content.
*/
func (a *Client) GetBuiltinTranslation(params *GetBuiltinTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBuiltinTranslationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuiltinTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuiltinTranslation",
		Method:             "GET",
		PathPattern:        "/translation/{locale}/builtin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuiltinTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuiltinTranslationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuiltinTranslation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTranslation alphas get translation

Returns the translation and its content.
*/
func (a *Client) GetTranslation(params *GetTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTranslationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTranslation",
		Method:             "GET",
		PathPattern:        "/translation/{locale}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTranslationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTranslation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListTranslations alphas list translations

Returns all the translations.
*/
func (a *Client) ListTranslations(params *ListTranslationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListTranslationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTranslationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTranslations",
		Method:             "GET",
		PathPattern:        "/translations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTranslationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTranslationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTranslations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpsertTranslation alphas update or insert translation

Updates an existing translation, or inserts a new one.
*/
func (a *Client) UpsertTranslation(params *UpsertTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpsertTranslationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpsertTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "upsertTranslation",
		Method:             "PUT",
		PathPattern:        "/translation/{locale}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpsertTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpsertTranslationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for upsertTranslation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
