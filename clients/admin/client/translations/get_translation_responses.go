// Code generated by go-swagger; DO NOT EDIT.

package translations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetTranslationReader is a Reader for the GetTranslation structure.
type GetTranslationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTranslationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTranslationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTranslationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTranslationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTranslationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTranslationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /translation/{locale}] getTranslation", response, response.Code())
	}
}

// NewGetTranslationOK creates a GetTranslationOK with default headers values
func NewGetTranslationOK() *GetTranslationOK {
	return &GetTranslationOK{}
}

/*
GetTranslationOK describes a response with status code 200, with default header values.

Translation
*/
type GetTranslationOK struct {
	Payload *models.Translation
}

// IsSuccess returns true when this get translation o k response has a 2xx status code
func (o *GetTranslationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get translation o k response has a 3xx status code
func (o *GetTranslationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get translation o k response has a 4xx status code
func (o *GetTranslationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get translation o k response has a 5xx status code
func (o *GetTranslationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get translation o k response a status code equal to that given
func (o *GetTranslationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get translation o k response
func (o *GetTranslationOK) Code() int {
	return 200
}

func (o *GetTranslationOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationOK %s", 200, payload)
}

func (o *GetTranslationOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationOK %s", 200, payload)
}

func (o *GetTranslationOK) GetPayload() *models.Translation {
	return o.Payload
}

func (o *GetTranslationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Translation)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTranslationUnauthorized creates a GetTranslationUnauthorized with default headers values
func NewGetTranslationUnauthorized() *GetTranslationUnauthorized {
	return &GetTranslationUnauthorized{}
}

/*
GetTranslationUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTranslationUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get translation unauthorized response has a 2xx status code
func (o *GetTranslationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get translation unauthorized response has a 3xx status code
func (o *GetTranslationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get translation unauthorized response has a 4xx status code
func (o *GetTranslationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get translation unauthorized response has a 5xx status code
func (o *GetTranslationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get translation unauthorized response a status code equal to that given
func (o *GetTranslationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get translation unauthorized response
func (o *GetTranslationUnauthorized) Code() int {
	return 401
}

func (o *GetTranslationUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationUnauthorized %s", 401, payload)
}

func (o *GetTranslationUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationUnauthorized %s", 401, payload)
}

func (o *GetTranslationUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTranslationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTranslationForbidden creates a GetTranslationForbidden with default headers values
func NewGetTranslationForbidden() *GetTranslationForbidden {
	return &GetTranslationForbidden{}
}

/*
GetTranslationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTranslationForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get translation forbidden response has a 2xx status code
func (o *GetTranslationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get translation forbidden response has a 3xx status code
func (o *GetTranslationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get translation forbidden response has a 4xx status code
func (o *GetTranslationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get translation forbidden response has a 5xx status code
func (o *GetTranslationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get translation forbidden response a status code equal to that given
func (o *GetTranslationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get translation forbidden response
func (o *GetTranslationForbidden) Code() int {
	return 403
}

func (o *GetTranslationForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationForbidden %s", 403, payload)
}

func (o *GetTranslationForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationForbidden %s", 403, payload)
}

func (o *GetTranslationForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTranslationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTranslationNotFound creates a GetTranslationNotFound with default headers values
func NewGetTranslationNotFound() *GetTranslationNotFound {
	return &GetTranslationNotFound{}
}

/*
GetTranslationNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetTranslationNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get translation not found response has a 2xx status code
func (o *GetTranslationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get translation not found response has a 3xx status code
func (o *GetTranslationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get translation not found response has a 4xx status code
func (o *GetTranslationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get translation not found response has a 5xx status code
func (o *GetTranslationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get translation not found response a status code equal to that given
func (o *GetTranslationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get translation not found response
func (o *GetTranslationNotFound) Code() int {
	return 404
}

func (o *GetTranslationNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationNotFound %s", 404, payload)
}

func (o *GetTranslationNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationNotFound %s", 404, payload)
}

func (o *GetTranslationNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTranslationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTranslationTooManyRequests creates a GetTranslationTooManyRequests with default headers values
func NewGetTranslationTooManyRequests() *GetTranslationTooManyRequests {
	return &GetTranslationTooManyRequests{}
}

/*
GetTranslationTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetTranslationTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get translation too many requests response has a 2xx status code
func (o *GetTranslationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get translation too many requests response has a 3xx status code
func (o *GetTranslationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get translation too many requests response has a 4xx status code
func (o *GetTranslationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get translation too many requests response has a 5xx status code
func (o *GetTranslationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get translation too many requests response a status code equal to that given
func (o *GetTranslationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get translation too many requests response
func (o *GetTranslationTooManyRequests) Code() int {
	return 429
}

func (o *GetTranslationTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationTooManyRequests %s", 429, payload)
}

func (o *GetTranslationTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /translation/{locale}][%d] getTranslationTooManyRequests %s", 429, payload)
}

func (o *GetTranslationTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTranslationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
