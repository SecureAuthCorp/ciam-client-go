// Code generated by go-swagger; DO NOT EDIT.

package recent_activities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetRecentActivitiesReader is a Reader for the GetRecentActivities structure.
type GetRecentActivitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecentActivitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecentActivitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRecentActivitiesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecentActivitiesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecentActivitiesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /stats/{wid}/recent-activities] getRecentActivities", response, response.Code())
	}
}

// NewGetRecentActivitiesOK creates a GetRecentActivitiesOK with default headers values
func NewGetRecentActivitiesOK() *GetRecentActivitiesOK {
	return &GetRecentActivitiesOK{}
}

/*
GetRecentActivitiesOK describes a response with status code 200, with default header values.

Recent activities
*/
type GetRecentActivitiesOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.RecentActivities
}

// IsSuccess returns true when this get recent activities o k response has a 2xx status code
func (o *GetRecentActivitiesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recent activities o k response has a 3xx status code
func (o *GetRecentActivitiesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recent activities o k response has a 4xx status code
func (o *GetRecentActivitiesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recent activities o k response has a 5xx status code
func (o *GetRecentActivitiesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recent activities o k response a status code equal to that given
func (o *GetRecentActivitiesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get recent activities o k response
func (o *GetRecentActivitiesOK) Code() int {
	return 200
}

func (o *GetRecentActivitiesOK) Error() string {
	return fmt.Sprintf("[GET /stats/{wid}/recent-activities][%d] getRecentActivitiesOK  %+v", 200, o.Payload)
}

func (o *GetRecentActivitiesOK) String() string {
	return fmt.Sprintf("[GET /stats/{wid}/recent-activities][%d] getRecentActivitiesOK  %+v", 200, o.Payload)
}

func (o *GetRecentActivitiesOK) GetPayload() *models.RecentActivities {
	return o.Payload
}

func (o *GetRecentActivitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.RecentActivities)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecentActivitiesUnauthorized creates a GetRecentActivitiesUnauthorized with default headers values
func NewGetRecentActivitiesUnauthorized() *GetRecentActivitiesUnauthorized {
	return &GetRecentActivitiesUnauthorized{}
}

/*
GetRecentActivitiesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRecentActivitiesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get recent activities unauthorized response has a 2xx status code
func (o *GetRecentActivitiesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recent activities unauthorized response has a 3xx status code
func (o *GetRecentActivitiesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recent activities unauthorized response has a 4xx status code
func (o *GetRecentActivitiesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recent activities unauthorized response has a 5xx status code
func (o *GetRecentActivitiesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get recent activities unauthorized response a status code equal to that given
func (o *GetRecentActivitiesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get recent activities unauthorized response
func (o *GetRecentActivitiesUnauthorized) Code() int {
	return 401
}

func (o *GetRecentActivitiesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /stats/{wid}/recent-activities][%d] getRecentActivitiesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecentActivitiesUnauthorized) String() string {
	return fmt.Sprintf("[GET /stats/{wid}/recent-activities][%d] getRecentActivitiesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRecentActivitiesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRecentActivitiesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecentActivitiesForbidden creates a GetRecentActivitiesForbidden with default headers values
func NewGetRecentActivitiesForbidden() *GetRecentActivitiesForbidden {
	return &GetRecentActivitiesForbidden{}
}

/*
GetRecentActivitiesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRecentActivitiesForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get recent activities forbidden response has a 2xx status code
func (o *GetRecentActivitiesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recent activities forbidden response has a 3xx status code
func (o *GetRecentActivitiesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recent activities forbidden response has a 4xx status code
func (o *GetRecentActivitiesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recent activities forbidden response has a 5xx status code
func (o *GetRecentActivitiesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get recent activities forbidden response a status code equal to that given
func (o *GetRecentActivitiesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get recent activities forbidden response
func (o *GetRecentActivitiesForbidden) Code() int {
	return 403
}

func (o *GetRecentActivitiesForbidden) Error() string {
	return fmt.Sprintf("[GET /stats/{wid}/recent-activities][%d] getRecentActivitiesForbidden  %+v", 403, o.Payload)
}

func (o *GetRecentActivitiesForbidden) String() string {
	return fmt.Sprintf("[GET /stats/{wid}/recent-activities][%d] getRecentActivitiesForbidden  %+v", 403, o.Payload)
}

func (o *GetRecentActivitiesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRecentActivitiesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecentActivitiesTooManyRequests creates a GetRecentActivitiesTooManyRequests with default headers values
func NewGetRecentActivitiesTooManyRequests() *GetRecentActivitiesTooManyRequests {
	return &GetRecentActivitiesTooManyRequests{}
}

/*
GetRecentActivitiesTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetRecentActivitiesTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get recent activities too many requests response has a 2xx status code
func (o *GetRecentActivitiesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recent activities too many requests response has a 3xx status code
func (o *GetRecentActivitiesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recent activities too many requests response has a 4xx status code
func (o *GetRecentActivitiesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recent activities too many requests response has a 5xx status code
func (o *GetRecentActivitiesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get recent activities too many requests response a status code equal to that given
func (o *GetRecentActivitiesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get recent activities too many requests response
func (o *GetRecentActivitiesTooManyRequests) Code() int {
	return 429
}

func (o *GetRecentActivitiesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /stats/{wid}/recent-activities][%d] getRecentActivitiesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecentActivitiesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /stats/{wid}/recent-activities][%d] getRecentActivitiesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetRecentActivitiesTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRecentActivitiesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
