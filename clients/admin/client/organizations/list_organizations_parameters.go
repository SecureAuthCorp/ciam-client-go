// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListOrganizationsParams creates a new ListOrganizationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListOrganizationsParams() *ListOrganizationsParams {
	return &ListOrganizationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListOrganizationsParamsWithTimeout creates a new ListOrganizationsParams object
// with the ability to set a timeout on a request.
func NewListOrganizationsParamsWithTimeout(timeout time.Duration) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		timeout: timeout,
	}
}

// NewListOrganizationsParamsWithContext creates a new ListOrganizationsParams object
// with the ability to set a context for a request.
func NewListOrganizationsParamsWithContext(ctx context.Context) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		Context: ctx,
	}
}

// NewListOrganizationsParamsWithHTTPClient creates a new ListOrganizationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListOrganizationsParamsWithHTTPClient(client *http.Client) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		HTTPClient: client,
	}
}

/*
ListOrganizationsParams contains all the parameters to send to the API endpoint

	for the list organizations operation.

	Typically these are written to a http.Request.
*/
type ListOrganizationsParams struct {

	/* AfterOrganizationID.

	     optional list organizations after given id
	AfterServerID
	*/
	AfterOrganizationID *string

	/* BeforeOrganizationID.

	     optional list organizations before given id
	BeforeServerID
	*/
	BeforeOrganizationID *string

	/* IfMatch.

	   A server will only return requested resources if the resource matches one of the listed ETag value

	   Format: etag
	*/
	IfMatch *string

	/* Limit.

	     optional limit results
	Limit

	     Format: int64
	     Default: 20
	*/
	Limit *int64

	/* Order.

	     optional order organizations by given direction
	Order
	*/
	Order *string

	/* ParentID.

	   optional parent workspace id

	   Format: serverID
	*/
	ParentID *string

	/* SearchPhrase.

	     Optional search phrase: organization id OR organization name substring (case insensitive)
	SearchPhrase
	*/
	SearchPhrase *string

	/* Sort.

	     optional sort organizations by given field
	Sort
	*/
	Sort *string

	/* Template.

	   optional flag to filter by template
	*/
	Template *bool

	/* WithChildCount.

	   Count child organizations for each organization
	*/
	WithChildCount *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListOrganizationsParams) WithDefaults() *ListOrganizationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListOrganizationsParams) SetDefaults() {
	var (
		limitDefault = int64(20)
	)

	val := ListOrganizationsParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list organizations params
func (o *ListOrganizationsParams) WithTimeout(timeout time.Duration) *ListOrganizationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list organizations params
func (o *ListOrganizationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list organizations params
func (o *ListOrganizationsParams) WithContext(ctx context.Context) *ListOrganizationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list organizations params
func (o *ListOrganizationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list organizations params
func (o *ListOrganizationsParams) WithHTTPClient(client *http.Client) *ListOrganizationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list organizations params
func (o *ListOrganizationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfterOrganizationID adds the afterOrganizationID to the list organizations params
func (o *ListOrganizationsParams) WithAfterOrganizationID(afterOrganizationID *string) *ListOrganizationsParams {
	o.SetAfterOrganizationID(afterOrganizationID)
	return o
}

// SetAfterOrganizationID adds the afterOrganizationId to the list organizations params
func (o *ListOrganizationsParams) SetAfterOrganizationID(afterOrganizationID *string) {
	o.AfterOrganizationID = afterOrganizationID
}

// WithBeforeOrganizationID adds the beforeOrganizationID to the list organizations params
func (o *ListOrganizationsParams) WithBeforeOrganizationID(beforeOrganizationID *string) *ListOrganizationsParams {
	o.SetBeforeOrganizationID(beforeOrganizationID)
	return o
}

// SetBeforeOrganizationID adds the beforeOrganizationId to the list organizations params
func (o *ListOrganizationsParams) SetBeforeOrganizationID(beforeOrganizationID *string) {
	o.BeforeOrganizationID = beforeOrganizationID
}

// WithIfMatch adds the ifMatch to the list organizations params
func (o *ListOrganizationsParams) WithIfMatch(ifMatch *string) *ListOrganizationsParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the list organizations params
func (o *ListOrganizationsParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithLimit adds the limit to the list organizations params
func (o *ListOrganizationsParams) WithLimit(limit *int64) *ListOrganizationsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list organizations params
func (o *ListOrganizationsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOrder adds the order to the list organizations params
func (o *ListOrganizationsParams) WithOrder(order *string) *ListOrganizationsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the list organizations params
func (o *ListOrganizationsParams) SetOrder(order *string) {
	o.Order = order
}

// WithParentID adds the parentID to the list organizations params
func (o *ListOrganizationsParams) WithParentID(parentID *string) *ListOrganizationsParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the list organizations params
func (o *ListOrganizationsParams) SetParentID(parentID *string) {
	o.ParentID = parentID
}

// WithSearchPhrase adds the searchPhrase to the list organizations params
func (o *ListOrganizationsParams) WithSearchPhrase(searchPhrase *string) *ListOrganizationsParams {
	o.SetSearchPhrase(searchPhrase)
	return o
}

// SetSearchPhrase adds the searchPhrase to the list organizations params
func (o *ListOrganizationsParams) SetSearchPhrase(searchPhrase *string) {
	o.SearchPhrase = searchPhrase
}

// WithSort adds the sort to the list organizations params
func (o *ListOrganizationsParams) WithSort(sort *string) *ListOrganizationsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list organizations params
func (o *ListOrganizationsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTemplate adds the template to the list organizations params
func (o *ListOrganizationsParams) WithTemplate(template *bool) *ListOrganizationsParams {
	o.SetTemplate(template)
	return o
}

// SetTemplate adds the template to the list organizations params
func (o *ListOrganizationsParams) SetTemplate(template *bool) {
	o.Template = template
}

// WithWithChildCount adds the withChildCount to the list organizations params
func (o *ListOrganizationsParams) WithWithChildCount(withChildCount *bool) *ListOrganizationsParams {
	o.SetWithChildCount(withChildCount)
	return o
}

// SetWithChildCount adds the withChildCount to the list organizations params
func (o *ListOrganizationsParams) SetWithChildCount(withChildCount *bool) {
	o.WithChildCount = withChildCount
}

// WriteToRequest writes these params to a swagger request
func (o *ListOrganizationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AfterOrganizationID != nil {

		// query param after_organization_id
		var qrAfterOrganizationID string

		if o.AfterOrganizationID != nil {
			qrAfterOrganizationID = *o.AfterOrganizationID
		}
		qAfterOrganizationID := qrAfterOrganizationID
		if qAfterOrganizationID != "" {

			if err := r.SetQueryParam("after_organization_id", qAfterOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.BeforeOrganizationID != nil {

		// query param before_organization_id
		var qrBeforeOrganizationID string

		if o.BeforeOrganizationID != nil {
			qrBeforeOrganizationID = *o.BeforeOrganizationID
		}
		qBeforeOrganizationID := qrBeforeOrganizationID
		if qBeforeOrganizationID != "" {

			if err := r.SetQueryParam("before_organization_id", qBeforeOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.ParentID != nil {

		// query param parent_id
		var qrParentID string

		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID
		if qParentID != "" {

			if err := r.SetQueryParam("parent_id", qParentID); err != nil {
				return err
			}
		}
	}

	if o.SearchPhrase != nil {

		// query param search_phrase
		var qrSearchPhrase string

		if o.SearchPhrase != nil {
			qrSearchPhrase = *o.SearchPhrase
		}
		qSearchPhrase := qrSearchPhrase
		if qSearchPhrase != "" {

			if err := r.SetQueryParam("search_phrase", qSearchPhrase); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Template != nil {

		// query param template
		var qrTemplate bool

		if o.Template != nil {
			qrTemplate = *o.Template
		}
		qTemplate := swag.FormatBool(qrTemplate)
		if qTemplate != "" {

			if err := r.SetQueryParam("template", qTemplate); err != nil {
				return err
			}
		}
	}

	if o.WithChildCount != nil {

		// query param with_child_count
		var qrWithChildCount bool

		if o.WithChildCount != nil {
			qrWithChildCount = *o.WithChildCount
		}
		qWithChildCount := swag.FormatBool(qrWithChildCount)
		if qWithChildCount != "" {

			if err := r.SetQueryParam("with_child_count", qWithChildCount); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
