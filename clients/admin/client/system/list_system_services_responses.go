// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ListSystemServicesReader is a Reader for the ListSystemServices structure.
type ListSystemServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSystemServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListSystemServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListSystemServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListSystemServicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListSystemServicesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /system/services] listSystemServices", response, response.Code())
	}
}

// NewListSystemServicesOK creates a ListSystemServicesOK with default headers values
func NewListSystemServicesOK() *ListSystemServicesOK {
	return &ListSystemServicesOK{}
}

/*
ListSystemServicesOK describes a response with status code 200, with default header values.

System services
*/
type ListSystemServicesOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.SystemServicesResponse
}

// IsSuccess returns true when this list system services o k response has a 2xx status code
func (o *ListSystemServicesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list system services o k response has a 3xx status code
func (o *ListSystemServicesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list system services o k response has a 4xx status code
func (o *ListSystemServicesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list system services o k response has a 5xx status code
func (o *ListSystemServicesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list system services o k response a status code equal to that given
func (o *ListSystemServicesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list system services o k response
func (o *ListSystemServicesOK) Code() int {
	return 200
}

func (o *ListSystemServicesOK) Error() string {
	return fmt.Sprintf("[GET /system/services][%d] listSystemServicesOK  %+v", 200, o.Payload)
}

func (o *ListSystemServicesOK) String() string {
	return fmt.Sprintf("[GET /system/services][%d] listSystemServicesOK  %+v", 200, o.Payload)
}

func (o *ListSystemServicesOK) GetPayload() *models.SystemServicesResponse {
	return o.Payload
}

func (o *ListSystemServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.SystemServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSystemServicesUnauthorized creates a ListSystemServicesUnauthorized with default headers values
func NewListSystemServicesUnauthorized() *ListSystemServicesUnauthorized {
	return &ListSystemServicesUnauthorized{}
}

/*
ListSystemServicesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListSystemServicesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list system services unauthorized response has a 2xx status code
func (o *ListSystemServicesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list system services unauthorized response has a 3xx status code
func (o *ListSystemServicesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list system services unauthorized response has a 4xx status code
func (o *ListSystemServicesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list system services unauthorized response has a 5xx status code
func (o *ListSystemServicesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list system services unauthorized response a status code equal to that given
func (o *ListSystemServicesUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the list system services unauthorized response
func (o *ListSystemServicesUnauthorized) Code() int {
	return 401
}

func (o *ListSystemServicesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /system/services][%d] listSystemServicesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListSystemServicesUnauthorized) String() string {
	return fmt.Sprintf("[GET /system/services][%d] listSystemServicesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListSystemServicesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListSystemServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSystemServicesForbidden creates a ListSystemServicesForbidden with default headers values
func NewListSystemServicesForbidden() *ListSystemServicesForbidden {
	return &ListSystemServicesForbidden{}
}

/*
ListSystemServicesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListSystemServicesForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this list system services forbidden response has a 2xx status code
func (o *ListSystemServicesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list system services forbidden response has a 3xx status code
func (o *ListSystemServicesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list system services forbidden response has a 4xx status code
func (o *ListSystemServicesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list system services forbidden response has a 5xx status code
func (o *ListSystemServicesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list system services forbidden response a status code equal to that given
func (o *ListSystemServicesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list system services forbidden response
func (o *ListSystemServicesForbidden) Code() int {
	return 403
}

func (o *ListSystemServicesForbidden) Error() string {
	return fmt.Sprintf("[GET /system/services][%d] listSystemServicesForbidden  %+v", 403, o.Payload)
}

func (o *ListSystemServicesForbidden) String() string {
	return fmt.Sprintf("[GET /system/services][%d] listSystemServicesForbidden  %+v", 403, o.Payload)
}

func (o *ListSystemServicesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListSystemServicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSystemServicesTooManyRequests creates a ListSystemServicesTooManyRequests with default headers values
func NewListSystemServicesTooManyRequests() *ListSystemServicesTooManyRequests {
	return &ListSystemServicesTooManyRequests{}
}

/*
ListSystemServicesTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ListSystemServicesTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this list system services too many requests response has a 2xx status code
func (o *ListSystemServicesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list system services too many requests response has a 3xx status code
func (o *ListSystemServicesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list system services too many requests response has a 4xx status code
func (o *ListSystemServicesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list system services too many requests response has a 5xx status code
func (o *ListSystemServicesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list system services too many requests response a status code equal to that given
func (o *ListSystemServicesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the list system services too many requests response
func (o *ListSystemServicesTooManyRequests) Code() int {
	return 429
}

func (o *ListSystemServicesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /system/services][%d] listSystemServicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListSystemServicesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /system/services][%d] listSystemServicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListSystemServicesTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListSystemServicesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
