// Code generated by go-swagger; DO NOT EDIT.

package mfa_methods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// DeleteMFAMethodReader is a Reader for the DeleteMFAMethod structure.
type DeleteMFAMethodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMFAMethodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteMFAMethodNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteMFAMethodUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteMFAMethodForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteMFAMethodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteMFAMethodTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteMFAMethodNoContent creates a DeleteMFAMethodNoContent with default headers values
func NewDeleteMFAMethodNoContent() *DeleteMFAMethodNoContent {
	return &DeleteMFAMethodNoContent{}
}

/* DeleteMFAMethodNoContent describes a response with status code 204, with default header values.

MFA method has been deleted
*/
type DeleteMFAMethodNoContent struct {
}

func (o *DeleteMFAMethodNoContent) Error() string {
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodNoContent ", 204)
}

func (o *DeleteMFAMethodNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMFAMethodUnauthorized creates a DeleteMFAMethodUnauthorized with default headers values
func NewDeleteMFAMethodUnauthorized() *DeleteMFAMethodUnauthorized {
	return &DeleteMFAMethodUnauthorized{}
}

/* DeleteMFAMethodUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type DeleteMFAMethodUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteMFAMethodUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteMFAMethodUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFAMethodUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFAMethodForbidden creates a DeleteMFAMethodForbidden with default headers values
func NewDeleteMFAMethodForbidden() *DeleteMFAMethodForbidden {
	return &DeleteMFAMethodForbidden{}
}

/* DeleteMFAMethodForbidden describes a response with status code 403, with default header values.

HttpError
*/
type DeleteMFAMethodForbidden struct {
	Payload *models.Error
}

func (o *DeleteMFAMethodForbidden) Error() string {
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodForbidden  %+v", 403, o.Payload)
}
func (o *DeleteMFAMethodForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFAMethodForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFAMethodNotFound creates a DeleteMFAMethodNotFound with default headers values
func NewDeleteMFAMethodNotFound() *DeleteMFAMethodNotFound {
	return &DeleteMFAMethodNotFound{}
}

/* DeleteMFAMethodNotFound describes a response with status code 404, with default header values.

HttpError
*/
type DeleteMFAMethodNotFound struct {
	Payload *models.Error
}

func (o *DeleteMFAMethodNotFound) Error() string {
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodNotFound  %+v", 404, o.Payload)
}
func (o *DeleteMFAMethodNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFAMethodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFAMethodTooManyRequests creates a DeleteMFAMethodTooManyRequests with default headers values
func NewDeleteMFAMethodTooManyRequests() *DeleteMFAMethodTooManyRequests {
	return &DeleteMFAMethodTooManyRequests{}
}

/* DeleteMFAMethodTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type DeleteMFAMethodTooManyRequests struct {
	Payload *models.Error
}

func (o *DeleteMFAMethodTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodTooManyRequests  %+v", 429, o.Payload)
}
func (o *DeleteMFAMethodTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFAMethodTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
