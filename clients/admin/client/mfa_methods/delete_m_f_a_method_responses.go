// Code generated by go-swagger; DO NOT EDIT.

package mfa_methods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// DeleteMFAMethodReader is a Reader for the DeleteMFAMethod structure.
type DeleteMFAMethodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMFAMethodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteMFAMethodNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteMFAMethodUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteMFAMethodForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteMFAMethodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteMFAMethodTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /mfa-methods/{mfaID}] deleteMFAMethod", response, response.Code())
	}
}

// NewDeleteMFAMethodNoContent creates a DeleteMFAMethodNoContent with default headers values
func NewDeleteMFAMethodNoContent() *DeleteMFAMethodNoContent {
	return &DeleteMFAMethodNoContent{}
}

/*
DeleteMFAMethodNoContent describes a response with status code 204, with default header values.

	MFA method has been deleted
*/
type DeleteMFAMethodNoContent struct {
}

// IsSuccess returns true when this delete m f a method no content response has a 2xx status code
func (o *DeleteMFAMethodNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete m f a method no content response has a 3xx status code
func (o *DeleteMFAMethodNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a method no content response has a 4xx status code
func (o *DeleteMFAMethodNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete m f a method no content response has a 5xx status code
func (o *DeleteMFAMethodNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a method no content response a status code equal to that given
func (o *DeleteMFAMethodNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete m f a method no content response
func (o *DeleteMFAMethodNoContent) Code() int {
	return 204
}

func (o *DeleteMFAMethodNoContent) Error() string {
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodNoContent", 204)
}

func (o *DeleteMFAMethodNoContent) String() string {
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodNoContent", 204)
}

func (o *DeleteMFAMethodNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteMFAMethodUnauthorized creates a DeleteMFAMethodUnauthorized with default headers values
func NewDeleteMFAMethodUnauthorized() *DeleteMFAMethodUnauthorized {
	return &DeleteMFAMethodUnauthorized{}
}

/*
DeleteMFAMethodUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteMFAMethodUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete m f a method unauthorized response has a 2xx status code
func (o *DeleteMFAMethodUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete m f a method unauthorized response has a 3xx status code
func (o *DeleteMFAMethodUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a method unauthorized response has a 4xx status code
func (o *DeleteMFAMethodUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete m f a method unauthorized response has a 5xx status code
func (o *DeleteMFAMethodUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a method unauthorized response a status code equal to that given
func (o *DeleteMFAMethodUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete m f a method unauthorized response
func (o *DeleteMFAMethodUnauthorized) Code() int {
	return 401
}

func (o *DeleteMFAMethodUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodUnauthorized %s", 401, payload)
}

func (o *DeleteMFAMethodUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodUnauthorized %s", 401, payload)
}

func (o *DeleteMFAMethodUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFAMethodUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFAMethodForbidden creates a DeleteMFAMethodForbidden with default headers values
func NewDeleteMFAMethodForbidden() *DeleteMFAMethodForbidden {
	return &DeleteMFAMethodForbidden{}
}

/*
DeleteMFAMethodForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteMFAMethodForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete m f a method forbidden response has a 2xx status code
func (o *DeleteMFAMethodForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete m f a method forbidden response has a 3xx status code
func (o *DeleteMFAMethodForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a method forbidden response has a 4xx status code
func (o *DeleteMFAMethodForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete m f a method forbidden response has a 5xx status code
func (o *DeleteMFAMethodForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a method forbidden response a status code equal to that given
func (o *DeleteMFAMethodForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete m f a method forbidden response
func (o *DeleteMFAMethodForbidden) Code() int {
	return 403
}

func (o *DeleteMFAMethodForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodForbidden %s", 403, payload)
}

func (o *DeleteMFAMethodForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodForbidden %s", 403, payload)
}

func (o *DeleteMFAMethodForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFAMethodForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFAMethodNotFound creates a DeleteMFAMethodNotFound with default headers values
func NewDeleteMFAMethodNotFound() *DeleteMFAMethodNotFound {
	return &DeleteMFAMethodNotFound{}
}

/*
DeleteMFAMethodNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteMFAMethodNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete m f a method not found response has a 2xx status code
func (o *DeleteMFAMethodNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete m f a method not found response has a 3xx status code
func (o *DeleteMFAMethodNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a method not found response has a 4xx status code
func (o *DeleteMFAMethodNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete m f a method not found response has a 5xx status code
func (o *DeleteMFAMethodNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a method not found response a status code equal to that given
func (o *DeleteMFAMethodNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete m f a method not found response
func (o *DeleteMFAMethodNotFound) Code() int {
	return 404
}

func (o *DeleteMFAMethodNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodNotFound %s", 404, payload)
}

func (o *DeleteMFAMethodNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodNotFound %s", 404, payload)
}

func (o *DeleteMFAMethodNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFAMethodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMFAMethodTooManyRequests creates a DeleteMFAMethodTooManyRequests with default headers values
func NewDeleteMFAMethodTooManyRequests() *DeleteMFAMethodTooManyRequests {
	return &DeleteMFAMethodTooManyRequests{}
}

/*
DeleteMFAMethodTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type DeleteMFAMethodTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this delete m f a method too many requests response has a 2xx status code
func (o *DeleteMFAMethodTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete m f a method too many requests response has a 3xx status code
func (o *DeleteMFAMethodTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete m f a method too many requests response has a 4xx status code
func (o *DeleteMFAMethodTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete m f a method too many requests response has a 5xx status code
func (o *DeleteMFAMethodTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete m f a method too many requests response a status code equal to that given
func (o *DeleteMFAMethodTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the delete m f a method too many requests response
func (o *DeleteMFAMethodTooManyRequests) Code() int {
	return 429
}

func (o *DeleteMFAMethodTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodTooManyRequests %s", 429, payload)
}

func (o *DeleteMFAMethodTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /mfa-methods/{mfaID}][%d] deleteMFAMethodTooManyRequests %s", 429, payload)
}

func (o *DeleteMFAMethodTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteMFAMethodTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
