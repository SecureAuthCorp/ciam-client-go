// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// GetTemplateReader is a Reader for the GetTemplate structure.
type GetTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTemplateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /theme/{themeID}/template/{fsPath}] getTemplate", response, response.Code())
	}
}

// NewGetTemplateOK creates a GetTemplateOK with default headers values
func NewGetTemplateOK() *GetTemplateOK {
	return &GetTemplateOK{}
}

/*
GetTemplateOK describes a response with status code 200, with default header values.

Template
*/
type GetTemplateOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Template
}

// IsSuccess returns true when this get template o k response has a 2xx status code
func (o *GetTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get template o k response has a 3xx status code
func (o *GetTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get template o k response has a 4xx status code
func (o *GetTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get template o k response has a 5xx status code
func (o *GetTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get template o k response a status code equal to that given
func (o *GetTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get template o k response
func (o *GetTemplateOK) Code() int {
	return 200
}

func (o *GetTemplateOK) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateOK  %+v", 200, o.Payload)
}

func (o *GetTemplateOK) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateOK  %+v", 200, o.Payload)
}

func (o *GetTemplateOK) GetPayload() *models.Template {
	return o.Payload
}

func (o *GetTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Template)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTemplateUnauthorized creates a GetTemplateUnauthorized with default headers values
func NewGetTemplateUnauthorized() *GetTemplateUnauthorized {
	return &GetTemplateUnauthorized{}
}

/*
GetTemplateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTemplateUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this get template unauthorized response has a 2xx status code
func (o *GetTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get template unauthorized response has a 3xx status code
func (o *GetTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get template unauthorized response has a 4xx status code
func (o *GetTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get template unauthorized response has a 5xx status code
func (o *GetTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get template unauthorized response a status code equal to that given
func (o *GetTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get template unauthorized response
func (o *GetTemplateUnauthorized) Code() int {
	return 401
}

func (o *GetTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTemplateUnauthorized) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTemplateUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTemplateForbidden creates a GetTemplateForbidden with default headers values
func NewGetTemplateForbidden() *GetTemplateForbidden {
	return &GetTemplateForbidden{}
}

/*
GetTemplateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTemplateForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this get template forbidden response has a 2xx status code
func (o *GetTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get template forbidden response has a 3xx status code
func (o *GetTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get template forbidden response has a 4xx status code
func (o *GetTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get template forbidden response has a 5xx status code
func (o *GetTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get template forbidden response a status code equal to that given
func (o *GetTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get template forbidden response
func (o *GetTemplateForbidden) Code() int {
	return 403
}

func (o *GetTemplateForbidden) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateForbidden  %+v", 403, o.Payload)
}

func (o *GetTemplateForbidden) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateForbidden  %+v", 403, o.Payload)
}

func (o *GetTemplateForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTemplateNotFound creates a GetTemplateNotFound with default headers values
func NewGetTemplateNotFound() *GetTemplateNotFound {
	return &GetTemplateNotFound{}
}

/*
GetTemplateNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetTemplateNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this get template not found response has a 2xx status code
func (o *GetTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get template not found response has a 3xx status code
func (o *GetTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get template not found response has a 4xx status code
func (o *GetTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get template not found response has a 5xx status code
func (o *GetTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get template not found response a status code equal to that given
func (o *GetTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get template not found response
func (o *GetTemplateNotFound) Code() int {
	return 404
}

func (o *GetTemplateNotFound) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateNotFound  %+v", 404, o.Payload)
}

func (o *GetTemplateNotFound) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateNotFound  %+v", 404, o.Payload)
}

func (o *GetTemplateNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTemplateTooManyRequests creates a GetTemplateTooManyRequests with default headers values
func NewGetTemplateTooManyRequests() *GetTemplateTooManyRequests {
	return &GetTemplateTooManyRequests{}
}

/*
GetTemplateTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type GetTemplateTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this get template too many requests response has a 2xx status code
func (o *GetTemplateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get template too many requests response has a 3xx status code
func (o *GetTemplateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get template too many requests response has a 4xx status code
func (o *GetTemplateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get template too many requests response has a 5xx status code
func (o *GetTemplateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get template too many requests response a status code equal to that given
func (o *GetTemplateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get template too many requests response
func (o *GetTemplateTooManyRequests) Code() int {
	return 429
}

func (o *GetTemplateTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTemplateTooManyRequests) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/template/{fsPath}][%d] getTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTemplateTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetTemplateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
