// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// UpsertTemplateReader is a Reader for the UpsertTemplate structure.
type UpsertTemplateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpsertTemplateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpsertTemplateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpsertTemplateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpsertTemplateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpsertTemplateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpsertTemplateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpsertTemplateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpsertTemplateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /theme/{themeID}/template/{fsPath}] upsertTemplate", response, response.Code())
	}
}

// NewUpsertTemplateOK creates a UpsertTemplateOK with default headers values
func NewUpsertTemplateOK() *UpsertTemplateOK {
	return &UpsertTemplateOK{}
}

/*
UpsertTemplateOK describes a response with status code 200, with default header values.

Template
*/
type UpsertTemplateOK struct {

	/* The ETag HTTP header is an identifier for a specific version of a resource

	in:header

	     Format: etag
	*/
	Etag string

	Payload *models.Template
}

// IsSuccess returns true when this upsert template o k response has a 2xx status code
func (o *UpsertTemplateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upsert template o k response has a 3xx status code
func (o *UpsertTemplateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert template o k response has a 4xx status code
func (o *UpsertTemplateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upsert template o k response has a 5xx status code
func (o *UpsertTemplateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert template o k response a status code equal to that given
func (o *UpsertTemplateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the upsert template o k response
func (o *UpsertTemplateOK) Code() int {
	return 200
}

func (o *UpsertTemplateOK) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateOK  %+v", 200, o.Payload)
}

func (o *UpsertTemplateOK) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateOK  %+v", 200, o.Payload)
}

func (o *UpsertTemplateOK) GetPayload() *models.Template {
	return o.Payload
}

func (o *UpsertTemplateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header etag
	hdrEtag := response.GetHeader("etag")

	if hdrEtag != "" {
		o.Etag = hdrEtag
	}

	o.Payload = new(models.Template)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTemplateBadRequest creates a UpsertTemplateBadRequest with default headers values
func NewUpsertTemplateBadRequest() *UpsertTemplateBadRequest {
	return &UpsertTemplateBadRequest{}
}

/*
UpsertTemplateBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpsertTemplateBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert template bad request response has a 2xx status code
func (o *UpsertTemplateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert template bad request response has a 3xx status code
func (o *UpsertTemplateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert template bad request response has a 4xx status code
func (o *UpsertTemplateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert template bad request response has a 5xx status code
func (o *UpsertTemplateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert template bad request response a status code equal to that given
func (o *UpsertTemplateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the upsert template bad request response
func (o *UpsertTemplateBadRequest) Code() int {
	return 400
}

func (o *UpsertTemplateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *UpsertTemplateBadRequest) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateBadRequest  %+v", 400, o.Payload)
}

func (o *UpsertTemplateBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTemplateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTemplateUnauthorized creates a UpsertTemplateUnauthorized with default headers values
func NewUpsertTemplateUnauthorized() *UpsertTemplateUnauthorized {
	return &UpsertTemplateUnauthorized{}
}

/*
UpsertTemplateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpsertTemplateUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert template unauthorized response has a 2xx status code
func (o *UpsertTemplateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert template unauthorized response has a 3xx status code
func (o *UpsertTemplateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert template unauthorized response has a 4xx status code
func (o *UpsertTemplateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert template unauthorized response has a 5xx status code
func (o *UpsertTemplateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert template unauthorized response a status code equal to that given
func (o *UpsertTemplateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the upsert template unauthorized response
func (o *UpsertTemplateUnauthorized) Code() int {
	return 401
}

func (o *UpsertTemplateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *UpsertTemplateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateUnauthorized  %+v", 401, o.Payload)
}

func (o *UpsertTemplateUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTemplateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTemplateForbidden creates a UpsertTemplateForbidden with default headers values
func NewUpsertTemplateForbidden() *UpsertTemplateForbidden {
	return &UpsertTemplateForbidden{}
}

/*
UpsertTemplateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpsertTemplateForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert template forbidden response has a 2xx status code
func (o *UpsertTemplateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert template forbidden response has a 3xx status code
func (o *UpsertTemplateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert template forbidden response has a 4xx status code
func (o *UpsertTemplateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert template forbidden response has a 5xx status code
func (o *UpsertTemplateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert template forbidden response a status code equal to that given
func (o *UpsertTemplateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the upsert template forbidden response
func (o *UpsertTemplateForbidden) Code() int {
	return 403
}

func (o *UpsertTemplateForbidden) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateForbidden  %+v", 403, o.Payload)
}

func (o *UpsertTemplateForbidden) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateForbidden  %+v", 403, o.Payload)
}

func (o *UpsertTemplateForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTemplateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTemplateNotFound creates a UpsertTemplateNotFound with default headers values
func NewUpsertTemplateNotFound() *UpsertTemplateNotFound {
	return &UpsertTemplateNotFound{}
}

/*
UpsertTemplateNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpsertTemplateNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert template not found response has a 2xx status code
func (o *UpsertTemplateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert template not found response has a 3xx status code
func (o *UpsertTemplateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert template not found response has a 4xx status code
func (o *UpsertTemplateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert template not found response has a 5xx status code
func (o *UpsertTemplateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert template not found response a status code equal to that given
func (o *UpsertTemplateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the upsert template not found response
func (o *UpsertTemplateNotFound) Code() int {
	return 404
}

func (o *UpsertTemplateNotFound) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateNotFound  %+v", 404, o.Payload)
}

func (o *UpsertTemplateNotFound) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateNotFound  %+v", 404, o.Payload)
}

func (o *UpsertTemplateNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTemplateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTemplateUnprocessableEntity creates a UpsertTemplateUnprocessableEntity with default headers values
func NewUpsertTemplateUnprocessableEntity() *UpsertTemplateUnprocessableEntity {
	return &UpsertTemplateUnprocessableEntity{}
}

/*
UpsertTemplateUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type UpsertTemplateUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert template unprocessable entity response has a 2xx status code
func (o *UpsertTemplateUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert template unprocessable entity response has a 3xx status code
func (o *UpsertTemplateUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert template unprocessable entity response has a 4xx status code
func (o *UpsertTemplateUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert template unprocessable entity response has a 5xx status code
func (o *UpsertTemplateUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert template unprocessable entity response a status code equal to that given
func (o *UpsertTemplateUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the upsert template unprocessable entity response
func (o *UpsertTemplateUnprocessableEntity) Code() int {
	return 422
}

func (o *UpsertTemplateUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpsertTemplateUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpsertTemplateUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTemplateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpsertTemplateTooManyRequests creates a UpsertTemplateTooManyRequests with default headers values
func NewUpsertTemplateTooManyRequests() *UpsertTemplateTooManyRequests {
	return &UpsertTemplateTooManyRequests{}
}

/*
UpsertTemplateTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type UpsertTemplateTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this upsert template too many requests response has a 2xx status code
func (o *UpsertTemplateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this upsert template too many requests response has a 3xx status code
func (o *UpsertTemplateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upsert template too many requests response has a 4xx status code
func (o *UpsertTemplateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this upsert template too many requests response has a 5xx status code
func (o *UpsertTemplateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this upsert template too many requests response a status code equal to that given
func (o *UpsertTemplateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the upsert template too many requests response
func (o *UpsertTemplateTooManyRequests) Code() int {
	return 429
}

func (o *UpsertTemplateTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpsertTemplateTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /theme/{themeID}/template/{fsPath}][%d] upsertTemplateTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpsertTemplateTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpsertTemplateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
