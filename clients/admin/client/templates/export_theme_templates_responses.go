// Code generated by go-swagger; DO NOT EDIT.

package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ExportThemeTemplatesReader is a Reader for the ExportThemeTemplates structure.
type ExportThemeTemplatesReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *ExportThemeTemplatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportThemeTemplatesOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewExportThemeTemplatesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExportThemeTemplatesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExportThemeTemplatesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewExportThemeTemplatesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExportThemeTemplatesOK creates a ExportThemeTemplatesOK with default headers values
func NewExportThemeTemplatesOK(writer io.Writer) *ExportThemeTemplatesOK {
	return &ExportThemeTemplatesOK{

		Payload: writer,
	}
}

/*
ExportThemeTemplatesOK describes a response with status code 200, with default header values.

Templates archive
*/
type ExportThemeTemplatesOK struct {
	Payload io.Writer
}

// IsSuccess returns true when this export theme templates o k response has a 2xx status code
func (o *ExportThemeTemplatesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this export theme templates o k response has a 3xx status code
func (o *ExportThemeTemplatesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export theme templates o k response has a 4xx status code
func (o *ExportThemeTemplatesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this export theme templates o k response has a 5xx status code
func (o *ExportThemeTemplatesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this export theme templates o k response a status code equal to that given
func (o *ExportThemeTemplatesOK) IsCode(code int) bool {
	return code == 200
}

func (o *ExportThemeTemplatesOK) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesOK  %+v", 200, o.Payload)
}

func (o *ExportThemeTemplatesOK) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesOK  %+v", 200, o.Payload)
}

func (o *ExportThemeTemplatesOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *ExportThemeTemplatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportThemeTemplatesUnauthorized creates a ExportThemeTemplatesUnauthorized with default headers values
func NewExportThemeTemplatesUnauthorized() *ExportThemeTemplatesUnauthorized {
	return &ExportThemeTemplatesUnauthorized{}
}

/*
ExportThemeTemplatesUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type ExportThemeTemplatesUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this export theme templates unauthorized response has a 2xx status code
func (o *ExportThemeTemplatesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export theme templates unauthorized response has a 3xx status code
func (o *ExportThemeTemplatesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export theme templates unauthorized response has a 4xx status code
func (o *ExportThemeTemplatesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this export theme templates unauthorized response has a 5xx status code
func (o *ExportThemeTemplatesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this export theme templates unauthorized response a status code equal to that given
func (o *ExportThemeTemplatesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ExportThemeTemplatesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportThemeTemplatesUnauthorized) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesUnauthorized  %+v", 401, o.Payload)
}

func (o *ExportThemeTemplatesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExportThemeTemplatesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportThemeTemplatesForbidden creates a ExportThemeTemplatesForbidden with default headers values
func NewExportThemeTemplatesForbidden() *ExportThemeTemplatesForbidden {
	return &ExportThemeTemplatesForbidden{}
}

/*
ExportThemeTemplatesForbidden describes a response with status code 403, with default header values.

HttpError
*/
type ExportThemeTemplatesForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this export theme templates forbidden response has a 2xx status code
func (o *ExportThemeTemplatesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export theme templates forbidden response has a 3xx status code
func (o *ExportThemeTemplatesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export theme templates forbidden response has a 4xx status code
func (o *ExportThemeTemplatesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this export theme templates forbidden response has a 5xx status code
func (o *ExportThemeTemplatesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this export theme templates forbidden response a status code equal to that given
func (o *ExportThemeTemplatesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ExportThemeTemplatesForbidden) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesForbidden  %+v", 403, o.Payload)
}

func (o *ExportThemeTemplatesForbidden) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesForbidden  %+v", 403, o.Payload)
}

func (o *ExportThemeTemplatesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExportThemeTemplatesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportThemeTemplatesNotFound creates a ExportThemeTemplatesNotFound with default headers values
func NewExportThemeTemplatesNotFound() *ExportThemeTemplatesNotFound {
	return &ExportThemeTemplatesNotFound{}
}

/*
ExportThemeTemplatesNotFound describes a response with status code 404, with default header values.

HttpError
*/
type ExportThemeTemplatesNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this export theme templates not found response has a 2xx status code
func (o *ExportThemeTemplatesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export theme templates not found response has a 3xx status code
func (o *ExportThemeTemplatesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export theme templates not found response has a 4xx status code
func (o *ExportThemeTemplatesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this export theme templates not found response has a 5xx status code
func (o *ExportThemeTemplatesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this export theme templates not found response a status code equal to that given
func (o *ExportThemeTemplatesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ExportThemeTemplatesNotFound) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesNotFound  %+v", 404, o.Payload)
}

func (o *ExportThemeTemplatesNotFound) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesNotFound  %+v", 404, o.Payload)
}

func (o *ExportThemeTemplatesNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExportThemeTemplatesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExportThemeTemplatesTooManyRequests creates a ExportThemeTemplatesTooManyRequests with default headers values
func NewExportThemeTemplatesTooManyRequests() *ExportThemeTemplatesTooManyRequests {
	return &ExportThemeTemplatesTooManyRequests{}
}

/*
ExportThemeTemplatesTooManyRequests describes a response with status code 429, with default header values.

HttpError
*/
type ExportThemeTemplatesTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this export theme templates too many requests response has a 2xx status code
func (o *ExportThemeTemplatesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this export theme templates too many requests response has a 3xx status code
func (o *ExportThemeTemplatesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this export theme templates too many requests response has a 4xx status code
func (o *ExportThemeTemplatesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this export theme templates too many requests response has a 5xx status code
func (o *ExportThemeTemplatesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this export theme templates too many requests response a status code equal to that given
func (o *ExportThemeTemplatesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ExportThemeTemplatesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExportThemeTemplatesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /theme/{themeID}/templates/zip][%d] exportThemeTemplatesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ExportThemeTemplatesTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ExportThemeTemplatesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
