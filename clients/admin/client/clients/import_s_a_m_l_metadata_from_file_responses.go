// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ImportSAMLMetadataFromFileReader is a Reader for the ImportSAMLMetadataFromFile structure.
type ImportSAMLMetadataFromFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportSAMLMetadataFromFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewImportSAMLMetadataFromFileNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImportSAMLMetadataFromFileBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewImportSAMLMetadataFromFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewImportSAMLMetadataFromFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImportSAMLMetadataFromFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewImportSAMLMetadataFromFileConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewImportSAMLMetadataFromFileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewImportSAMLMetadataFromFileTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /clients/{cid}/saml/metadata/import/file] importSAMLMetadataFromFile", response, response.Code())
	}
}

// NewImportSAMLMetadataFromFileNoContent creates a ImportSAMLMetadataFromFileNoContent with default headers values
func NewImportSAMLMetadataFromFileNoContent() *ImportSAMLMetadataFromFileNoContent {
	return &ImportSAMLMetadataFromFileNoContent{}
}

/*
ImportSAMLMetadataFromFileNoContent describes a response with status code 204, with default header values.

	metadata has been successfully imported
*/
type ImportSAMLMetadataFromFileNoContent struct {
}

// IsSuccess returns true when this import s a m l metadata from file no content response has a 2xx status code
func (o *ImportSAMLMetadataFromFileNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import s a m l metadata from file no content response has a 3xx status code
func (o *ImportSAMLMetadataFromFileNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from file no content response has a 4xx status code
func (o *ImportSAMLMetadataFromFileNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this import s a m l metadata from file no content response has a 5xx status code
func (o *ImportSAMLMetadataFromFileNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from file no content response a status code equal to that given
func (o *ImportSAMLMetadataFromFileNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the import s a m l metadata from file no content response
func (o *ImportSAMLMetadataFromFileNoContent) Code() int {
	return 204
}

func (o *ImportSAMLMetadataFromFileNoContent) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileNoContent ", 204)
}

func (o *ImportSAMLMetadataFromFileNoContent) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileNoContent ", 204)
}

func (o *ImportSAMLMetadataFromFileNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSAMLMetadataFromFileBadRequest creates a ImportSAMLMetadataFromFileBadRequest with default headers values
func NewImportSAMLMetadataFromFileBadRequest() *ImportSAMLMetadataFromFileBadRequest {
	return &ImportSAMLMetadataFromFileBadRequest{}
}

/*
ImportSAMLMetadataFromFileBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ImportSAMLMetadataFromFileBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from file bad request response has a 2xx status code
func (o *ImportSAMLMetadataFromFileBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from file bad request response has a 3xx status code
func (o *ImportSAMLMetadataFromFileBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from file bad request response has a 4xx status code
func (o *ImportSAMLMetadataFromFileBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from file bad request response has a 5xx status code
func (o *ImportSAMLMetadataFromFileBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from file bad request response a status code equal to that given
func (o *ImportSAMLMetadataFromFileBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the import s a m l metadata from file bad request response
func (o *ImportSAMLMetadataFromFileBadRequest) Code() int {
	return 400
}

func (o *ImportSAMLMetadataFromFileBadRequest) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileBadRequest  %+v", 400, o.Payload)
}

func (o *ImportSAMLMetadataFromFileBadRequest) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileBadRequest  %+v", 400, o.Payload)
}

func (o *ImportSAMLMetadataFromFileBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromFileBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromFileUnauthorized creates a ImportSAMLMetadataFromFileUnauthorized with default headers values
func NewImportSAMLMetadataFromFileUnauthorized() *ImportSAMLMetadataFromFileUnauthorized {
	return &ImportSAMLMetadataFromFileUnauthorized{}
}

/*
ImportSAMLMetadataFromFileUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ImportSAMLMetadataFromFileUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from file unauthorized response has a 2xx status code
func (o *ImportSAMLMetadataFromFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from file unauthorized response has a 3xx status code
func (o *ImportSAMLMetadataFromFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from file unauthorized response has a 4xx status code
func (o *ImportSAMLMetadataFromFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from file unauthorized response has a 5xx status code
func (o *ImportSAMLMetadataFromFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from file unauthorized response a status code equal to that given
func (o *ImportSAMLMetadataFromFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the import s a m l metadata from file unauthorized response
func (o *ImportSAMLMetadataFromFileUnauthorized) Code() int {
	return 401
}

func (o *ImportSAMLMetadataFromFileUnauthorized) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportSAMLMetadataFromFileUnauthorized) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportSAMLMetadataFromFileUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromFileForbidden creates a ImportSAMLMetadataFromFileForbidden with default headers values
func NewImportSAMLMetadataFromFileForbidden() *ImportSAMLMetadataFromFileForbidden {
	return &ImportSAMLMetadataFromFileForbidden{}
}

/*
ImportSAMLMetadataFromFileForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ImportSAMLMetadataFromFileForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from file forbidden response has a 2xx status code
func (o *ImportSAMLMetadataFromFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from file forbidden response has a 3xx status code
func (o *ImportSAMLMetadataFromFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from file forbidden response has a 4xx status code
func (o *ImportSAMLMetadataFromFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from file forbidden response has a 5xx status code
func (o *ImportSAMLMetadataFromFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from file forbidden response a status code equal to that given
func (o *ImportSAMLMetadataFromFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the import s a m l metadata from file forbidden response
func (o *ImportSAMLMetadataFromFileForbidden) Code() int {
	return 403
}

func (o *ImportSAMLMetadataFromFileForbidden) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileForbidden  %+v", 403, o.Payload)
}

func (o *ImportSAMLMetadataFromFileForbidden) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileForbidden  %+v", 403, o.Payload)
}

func (o *ImportSAMLMetadataFromFileForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromFileNotFound creates a ImportSAMLMetadataFromFileNotFound with default headers values
func NewImportSAMLMetadataFromFileNotFound() *ImportSAMLMetadataFromFileNotFound {
	return &ImportSAMLMetadataFromFileNotFound{}
}

/*
ImportSAMLMetadataFromFileNotFound describes a response with status code 404, with default header values.

Not found
*/
type ImportSAMLMetadataFromFileNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from file not found response has a 2xx status code
func (o *ImportSAMLMetadataFromFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from file not found response has a 3xx status code
func (o *ImportSAMLMetadataFromFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from file not found response has a 4xx status code
func (o *ImportSAMLMetadataFromFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from file not found response has a 5xx status code
func (o *ImportSAMLMetadataFromFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from file not found response a status code equal to that given
func (o *ImportSAMLMetadataFromFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the import s a m l metadata from file not found response
func (o *ImportSAMLMetadataFromFileNotFound) Code() int {
	return 404
}

func (o *ImportSAMLMetadataFromFileNotFound) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileNotFound  %+v", 404, o.Payload)
}

func (o *ImportSAMLMetadataFromFileNotFound) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileNotFound  %+v", 404, o.Payload)
}

func (o *ImportSAMLMetadataFromFileNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromFileConflict creates a ImportSAMLMetadataFromFileConflict with default headers values
func NewImportSAMLMetadataFromFileConflict() *ImportSAMLMetadataFromFileConflict {
	return &ImportSAMLMetadataFromFileConflict{}
}

/*
ImportSAMLMetadataFromFileConflict describes a response with status code 409, with default header values.

Conflict
*/
type ImportSAMLMetadataFromFileConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from file conflict response has a 2xx status code
func (o *ImportSAMLMetadataFromFileConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from file conflict response has a 3xx status code
func (o *ImportSAMLMetadataFromFileConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from file conflict response has a 4xx status code
func (o *ImportSAMLMetadataFromFileConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from file conflict response has a 5xx status code
func (o *ImportSAMLMetadataFromFileConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from file conflict response a status code equal to that given
func (o *ImportSAMLMetadataFromFileConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the import s a m l metadata from file conflict response
func (o *ImportSAMLMetadataFromFileConflict) Code() int {
	return 409
}

func (o *ImportSAMLMetadataFromFileConflict) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileConflict  %+v", 409, o.Payload)
}

func (o *ImportSAMLMetadataFromFileConflict) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileConflict  %+v", 409, o.Payload)
}

func (o *ImportSAMLMetadataFromFileConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromFileConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromFileUnprocessableEntity creates a ImportSAMLMetadataFromFileUnprocessableEntity with default headers values
func NewImportSAMLMetadataFromFileUnprocessableEntity() *ImportSAMLMetadataFromFileUnprocessableEntity {
	return &ImportSAMLMetadataFromFileUnprocessableEntity{}
}

/*
ImportSAMLMetadataFromFileUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ImportSAMLMetadataFromFileUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from file unprocessable entity response has a 2xx status code
func (o *ImportSAMLMetadataFromFileUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from file unprocessable entity response has a 3xx status code
func (o *ImportSAMLMetadataFromFileUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from file unprocessable entity response has a 4xx status code
func (o *ImportSAMLMetadataFromFileUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from file unprocessable entity response has a 5xx status code
func (o *ImportSAMLMetadataFromFileUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from file unprocessable entity response a status code equal to that given
func (o *ImportSAMLMetadataFromFileUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the import s a m l metadata from file unprocessable entity response
func (o *ImportSAMLMetadataFromFileUnprocessableEntity) Code() int {
	return 422
}

func (o *ImportSAMLMetadataFromFileUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ImportSAMLMetadataFromFileUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ImportSAMLMetadataFromFileUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromFileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromFileTooManyRequests creates a ImportSAMLMetadataFromFileTooManyRequests with default headers values
func NewImportSAMLMetadataFromFileTooManyRequests() *ImportSAMLMetadataFromFileTooManyRequests {
	return &ImportSAMLMetadataFromFileTooManyRequests{}
}

/*
ImportSAMLMetadataFromFileTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ImportSAMLMetadataFromFileTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from file too many requests response has a 2xx status code
func (o *ImportSAMLMetadataFromFileTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from file too many requests response has a 3xx status code
func (o *ImportSAMLMetadataFromFileTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from file too many requests response has a 4xx status code
func (o *ImportSAMLMetadataFromFileTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from file too many requests response has a 5xx status code
func (o *ImportSAMLMetadataFromFileTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from file too many requests response a status code equal to that given
func (o *ImportSAMLMetadataFromFileTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the import s a m l metadata from file too many requests response
func (o *ImportSAMLMetadataFromFileTooManyRequests) Code() int {
	return 429
}

func (o *ImportSAMLMetadataFromFileTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileTooManyRequests  %+v", 429, o.Payload)
}

func (o *ImportSAMLMetadataFromFileTooManyRequests) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/file][%d] importSAMLMetadataFromFileTooManyRequests  %+v", 429, o.Payload)
}

func (o *ImportSAMLMetadataFromFileTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromFileTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
