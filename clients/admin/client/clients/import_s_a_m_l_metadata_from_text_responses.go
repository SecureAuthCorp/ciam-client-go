// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ImportSAMLMetadataFromTextReader is a Reader for the ImportSAMLMetadataFromText structure.
type ImportSAMLMetadataFromTextReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportSAMLMetadataFromTextReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewImportSAMLMetadataFromTextNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImportSAMLMetadataFromTextBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewImportSAMLMetadataFromTextUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewImportSAMLMetadataFromTextForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImportSAMLMetadataFromTextNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewImportSAMLMetadataFromTextConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewImportSAMLMetadataFromTextUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewImportSAMLMetadataFromTextTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /clients/{cid}/saml/metadata/import/text] importSAMLMetadataFromText", response, response.Code())
	}
}

// NewImportSAMLMetadataFromTextNoContent creates a ImportSAMLMetadataFromTextNoContent with default headers values
func NewImportSAMLMetadataFromTextNoContent() *ImportSAMLMetadataFromTextNoContent {
	return &ImportSAMLMetadataFromTextNoContent{}
}

/*
ImportSAMLMetadataFromTextNoContent describes a response with status code 204, with default header values.

	metadata has been successfully imported
*/
type ImportSAMLMetadataFromTextNoContent struct {
}

// IsSuccess returns true when this import s a m l metadata from text no content response has a 2xx status code
func (o *ImportSAMLMetadataFromTextNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import s a m l metadata from text no content response has a 3xx status code
func (o *ImportSAMLMetadataFromTextNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from text no content response has a 4xx status code
func (o *ImportSAMLMetadataFromTextNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this import s a m l metadata from text no content response has a 5xx status code
func (o *ImportSAMLMetadataFromTextNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from text no content response a status code equal to that given
func (o *ImportSAMLMetadataFromTextNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the import s a m l metadata from text no content response
func (o *ImportSAMLMetadataFromTextNoContent) Code() int {
	return 204
}

func (o *ImportSAMLMetadataFromTextNoContent) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextNoContent ", 204)
}

func (o *ImportSAMLMetadataFromTextNoContent) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextNoContent ", 204)
}

func (o *ImportSAMLMetadataFromTextNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSAMLMetadataFromTextBadRequest creates a ImportSAMLMetadataFromTextBadRequest with default headers values
func NewImportSAMLMetadataFromTextBadRequest() *ImportSAMLMetadataFromTextBadRequest {
	return &ImportSAMLMetadataFromTextBadRequest{}
}

/*
ImportSAMLMetadataFromTextBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ImportSAMLMetadataFromTextBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from text bad request response has a 2xx status code
func (o *ImportSAMLMetadataFromTextBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from text bad request response has a 3xx status code
func (o *ImportSAMLMetadataFromTextBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from text bad request response has a 4xx status code
func (o *ImportSAMLMetadataFromTextBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from text bad request response has a 5xx status code
func (o *ImportSAMLMetadataFromTextBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from text bad request response a status code equal to that given
func (o *ImportSAMLMetadataFromTextBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the import s a m l metadata from text bad request response
func (o *ImportSAMLMetadataFromTextBadRequest) Code() int {
	return 400
}

func (o *ImportSAMLMetadataFromTextBadRequest) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextBadRequest  %+v", 400, o.Payload)
}

func (o *ImportSAMLMetadataFromTextBadRequest) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextBadRequest  %+v", 400, o.Payload)
}

func (o *ImportSAMLMetadataFromTextBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromTextBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromTextUnauthorized creates a ImportSAMLMetadataFromTextUnauthorized with default headers values
func NewImportSAMLMetadataFromTextUnauthorized() *ImportSAMLMetadataFromTextUnauthorized {
	return &ImportSAMLMetadataFromTextUnauthorized{}
}

/*
ImportSAMLMetadataFromTextUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ImportSAMLMetadataFromTextUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from text unauthorized response has a 2xx status code
func (o *ImportSAMLMetadataFromTextUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from text unauthorized response has a 3xx status code
func (o *ImportSAMLMetadataFromTextUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from text unauthorized response has a 4xx status code
func (o *ImportSAMLMetadataFromTextUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from text unauthorized response has a 5xx status code
func (o *ImportSAMLMetadataFromTextUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from text unauthorized response a status code equal to that given
func (o *ImportSAMLMetadataFromTextUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the import s a m l metadata from text unauthorized response
func (o *ImportSAMLMetadataFromTextUnauthorized) Code() int {
	return 401
}

func (o *ImportSAMLMetadataFromTextUnauthorized) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportSAMLMetadataFromTextUnauthorized) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextUnauthorized  %+v", 401, o.Payload)
}

func (o *ImportSAMLMetadataFromTextUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromTextUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromTextForbidden creates a ImportSAMLMetadataFromTextForbidden with default headers values
func NewImportSAMLMetadataFromTextForbidden() *ImportSAMLMetadataFromTextForbidden {
	return &ImportSAMLMetadataFromTextForbidden{}
}

/*
ImportSAMLMetadataFromTextForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ImportSAMLMetadataFromTextForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from text forbidden response has a 2xx status code
func (o *ImportSAMLMetadataFromTextForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from text forbidden response has a 3xx status code
func (o *ImportSAMLMetadataFromTextForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from text forbidden response has a 4xx status code
func (o *ImportSAMLMetadataFromTextForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from text forbidden response has a 5xx status code
func (o *ImportSAMLMetadataFromTextForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from text forbidden response a status code equal to that given
func (o *ImportSAMLMetadataFromTextForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the import s a m l metadata from text forbidden response
func (o *ImportSAMLMetadataFromTextForbidden) Code() int {
	return 403
}

func (o *ImportSAMLMetadataFromTextForbidden) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextForbidden  %+v", 403, o.Payload)
}

func (o *ImportSAMLMetadataFromTextForbidden) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextForbidden  %+v", 403, o.Payload)
}

func (o *ImportSAMLMetadataFromTextForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromTextForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromTextNotFound creates a ImportSAMLMetadataFromTextNotFound with default headers values
func NewImportSAMLMetadataFromTextNotFound() *ImportSAMLMetadataFromTextNotFound {
	return &ImportSAMLMetadataFromTextNotFound{}
}

/*
ImportSAMLMetadataFromTextNotFound describes a response with status code 404, with default header values.

Not found
*/
type ImportSAMLMetadataFromTextNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from text not found response has a 2xx status code
func (o *ImportSAMLMetadataFromTextNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from text not found response has a 3xx status code
func (o *ImportSAMLMetadataFromTextNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from text not found response has a 4xx status code
func (o *ImportSAMLMetadataFromTextNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from text not found response has a 5xx status code
func (o *ImportSAMLMetadataFromTextNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from text not found response a status code equal to that given
func (o *ImportSAMLMetadataFromTextNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the import s a m l metadata from text not found response
func (o *ImportSAMLMetadataFromTextNotFound) Code() int {
	return 404
}

func (o *ImportSAMLMetadataFromTextNotFound) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextNotFound  %+v", 404, o.Payload)
}

func (o *ImportSAMLMetadataFromTextNotFound) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextNotFound  %+v", 404, o.Payload)
}

func (o *ImportSAMLMetadataFromTextNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromTextNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromTextConflict creates a ImportSAMLMetadataFromTextConflict with default headers values
func NewImportSAMLMetadataFromTextConflict() *ImportSAMLMetadataFromTextConflict {
	return &ImportSAMLMetadataFromTextConflict{}
}

/*
ImportSAMLMetadataFromTextConflict describes a response with status code 409, with default header values.

Conflict
*/
type ImportSAMLMetadataFromTextConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from text conflict response has a 2xx status code
func (o *ImportSAMLMetadataFromTextConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from text conflict response has a 3xx status code
func (o *ImportSAMLMetadataFromTextConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from text conflict response has a 4xx status code
func (o *ImportSAMLMetadataFromTextConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from text conflict response has a 5xx status code
func (o *ImportSAMLMetadataFromTextConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from text conflict response a status code equal to that given
func (o *ImportSAMLMetadataFromTextConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the import s a m l metadata from text conflict response
func (o *ImportSAMLMetadataFromTextConflict) Code() int {
	return 409
}

func (o *ImportSAMLMetadataFromTextConflict) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextConflict  %+v", 409, o.Payload)
}

func (o *ImportSAMLMetadataFromTextConflict) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextConflict  %+v", 409, o.Payload)
}

func (o *ImportSAMLMetadataFromTextConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromTextConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromTextUnprocessableEntity creates a ImportSAMLMetadataFromTextUnprocessableEntity with default headers values
func NewImportSAMLMetadataFromTextUnprocessableEntity() *ImportSAMLMetadataFromTextUnprocessableEntity {
	return &ImportSAMLMetadataFromTextUnprocessableEntity{}
}

/*
ImportSAMLMetadataFromTextUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ImportSAMLMetadataFromTextUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from text unprocessable entity response has a 2xx status code
func (o *ImportSAMLMetadataFromTextUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from text unprocessable entity response has a 3xx status code
func (o *ImportSAMLMetadataFromTextUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from text unprocessable entity response has a 4xx status code
func (o *ImportSAMLMetadataFromTextUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from text unprocessable entity response has a 5xx status code
func (o *ImportSAMLMetadataFromTextUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from text unprocessable entity response a status code equal to that given
func (o *ImportSAMLMetadataFromTextUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the import s a m l metadata from text unprocessable entity response
func (o *ImportSAMLMetadataFromTextUnprocessableEntity) Code() int {
	return 422
}

func (o *ImportSAMLMetadataFromTextUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ImportSAMLMetadataFromTextUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ImportSAMLMetadataFromTextUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromTextUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataFromTextTooManyRequests creates a ImportSAMLMetadataFromTextTooManyRequests with default headers values
func NewImportSAMLMetadataFromTextTooManyRequests() *ImportSAMLMetadataFromTextTooManyRequests {
	return &ImportSAMLMetadataFromTextTooManyRequests{}
}

/*
ImportSAMLMetadataFromTextTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ImportSAMLMetadataFromTextTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata from text too many requests response has a 2xx status code
func (o *ImportSAMLMetadataFromTextTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata from text too many requests response has a 3xx status code
func (o *ImportSAMLMetadataFromTextTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata from text too many requests response has a 4xx status code
func (o *ImportSAMLMetadataFromTextTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata from text too many requests response has a 5xx status code
func (o *ImportSAMLMetadataFromTextTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata from text too many requests response a status code equal to that given
func (o *ImportSAMLMetadataFromTextTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the import s a m l metadata from text too many requests response
func (o *ImportSAMLMetadataFromTextTooManyRequests) Code() int {
	return 429
}

func (o *ImportSAMLMetadataFromTextTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextTooManyRequests  %+v", 429, o.Payload)
}

func (o *ImportSAMLMetadataFromTextTooManyRequests) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/text][%d] importSAMLMetadataFromTextTooManyRequests  %+v", 429, o.Payload)
}

func (o *ImportSAMLMetadataFromTextTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataFromTextTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
