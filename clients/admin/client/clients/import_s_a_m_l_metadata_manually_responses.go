// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ImportSAMLMetadataManuallyReader is a Reader for the ImportSAMLMetadataManually structure.
type ImportSAMLMetadataManuallyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportSAMLMetadataManuallyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewImportSAMLMetadataManuallyNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewImportSAMLMetadataManuallyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewImportSAMLMetadataManuallyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewImportSAMLMetadataManuallyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewImportSAMLMetadataManuallyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewImportSAMLMetadataManuallyConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewImportSAMLMetadataManuallyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewImportSAMLMetadataManuallyTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /clients/{cid}/saml/metadata/import/manual] importSAMLMetadataManually", response, response.Code())
	}
}

// NewImportSAMLMetadataManuallyNoContent creates a ImportSAMLMetadataManuallyNoContent with default headers values
func NewImportSAMLMetadataManuallyNoContent() *ImportSAMLMetadataManuallyNoContent {
	return &ImportSAMLMetadataManuallyNoContent{}
}

/*
ImportSAMLMetadataManuallyNoContent describes a response with status code 204, with default header values.

	metadata has been successfully imported
*/
type ImportSAMLMetadataManuallyNoContent struct {
}

// IsSuccess returns true when this import s a m l metadata manually no content response has a 2xx status code
func (o *ImportSAMLMetadataManuallyNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import s a m l metadata manually no content response has a 3xx status code
func (o *ImportSAMLMetadataManuallyNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata manually no content response has a 4xx status code
func (o *ImportSAMLMetadataManuallyNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this import s a m l metadata manually no content response has a 5xx status code
func (o *ImportSAMLMetadataManuallyNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata manually no content response a status code equal to that given
func (o *ImportSAMLMetadataManuallyNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the import s a m l metadata manually no content response
func (o *ImportSAMLMetadataManuallyNoContent) Code() int {
	return 204
}

func (o *ImportSAMLMetadataManuallyNoContent) Error() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyNoContent", 204)
}

func (o *ImportSAMLMetadataManuallyNoContent) String() string {
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyNoContent", 204)
}

func (o *ImportSAMLMetadataManuallyNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSAMLMetadataManuallyBadRequest creates a ImportSAMLMetadataManuallyBadRequest with default headers values
func NewImportSAMLMetadataManuallyBadRequest() *ImportSAMLMetadataManuallyBadRequest {
	return &ImportSAMLMetadataManuallyBadRequest{}
}

/*
ImportSAMLMetadataManuallyBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ImportSAMLMetadataManuallyBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata manually bad request response has a 2xx status code
func (o *ImportSAMLMetadataManuallyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata manually bad request response has a 3xx status code
func (o *ImportSAMLMetadataManuallyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata manually bad request response has a 4xx status code
func (o *ImportSAMLMetadataManuallyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata manually bad request response has a 5xx status code
func (o *ImportSAMLMetadataManuallyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata manually bad request response a status code equal to that given
func (o *ImportSAMLMetadataManuallyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the import s a m l metadata manually bad request response
func (o *ImportSAMLMetadataManuallyBadRequest) Code() int {
	return 400
}

func (o *ImportSAMLMetadataManuallyBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyBadRequest %s", 400, payload)
}

func (o *ImportSAMLMetadataManuallyBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyBadRequest %s", 400, payload)
}

func (o *ImportSAMLMetadataManuallyBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataManuallyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataManuallyUnauthorized creates a ImportSAMLMetadataManuallyUnauthorized with default headers values
func NewImportSAMLMetadataManuallyUnauthorized() *ImportSAMLMetadataManuallyUnauthorized {
	return &ImportSAMLMetadataManuallyUnauthorized{}
}

/*
ImportSAMLMetadataManuallyUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ImportSAMLMetadataManuallyUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata manually unauthorized response has a 2xx status code
func (o *ImportSAMLMetadataManuallyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata manually unauthorized response has a 3xx status code
func (o *ImportSAMLMetadataManuallyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata manually unauthorized response has a 4xx status code
func (o *ImportSAMLMetadataManuallyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata manually unauthorized response has a 5xx status code
func (o *ImportSAMLMetadataManuallyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata manually unauthorized response a status code equal to that given
func (o *ImportSAMLMetadataManuallyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the import s a m l metadata manually unauthorized response
func (o *ImportSAMLMetadataManuallyUnauthorized) Code() int {
	return 401
}

func (o *ImportSAMLMetadataManuallyUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyUnauthorized %s", 401, payload)
}

func (o *ImportSAMLMetadataManuallyUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyUnauthorized %s", 401, payload)
}

func (o *ImportSAMLMetadataManuallyUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataManuallyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataManuallyForbidden creates a ImportSAMLMetadataManuallyForbidden with default headers values
func NewImportSAMLMetadataManuallyForbidden() *ImportSAMLMetadataManuallyForbidden {
	return &ImportSAMLMetadataManuallyForbidden{}
}

/*
ImportSAMLMetadataManuallyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ImportSAMLMetadataManuallyForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata manually forbidden response has a 2xx status code
func (o *ImportSAMLMetadataManuallyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata manually forbidden response has a 3xx status code
func (o *ImportSAMLMetadataManuallyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata manually forbidden response has a 4xx status code
func (o *ImportSAMLMetadataManuallyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata manually forbidden response has a 5xx status code
func (o *ImportSAMLMetadataManuallyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata manually forbidden response a status code equal to that given
func (o *ImportSAMLMetadataManuallyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the import s a m l metadata manually forbidden response
func (o *ImportSAMLMetadataManuallyForbidden) Code() int {
	return 403
}

func (o *ImportSAMLMetadataManuallyForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyForbidden %s", 403, payload)
}

func (o *ImportSAMLMetadataManuallyForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyForbidden %s", 403, payload)
}

func (o *ImportSAMLMetadataManuallyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataManuallyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataManuallyNotFound creates a ImportSAMLMetadataManuallyNotFound with default headers values
func NewImportSAMLMetadataManuallyNotFound() *ImportSAMLMetadataManuallyNotFound {
	return &ImportSAMLMetadataManuallyNotFound{}
}

/*
ImportSAMLMetadataManuallyNotFound describes a response with status code 404, with default header values.

Not found
*/
type ImportSAMLMetadataManuallyNotFound struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata manually not found response has a 2xx status code
func (o *ImportSAMLMetadataManuallyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata manually not found response has a 3xx status code
func (o *ImportSAMLMetadataManuallyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata manually not found response has a 4xx status code
func (o *ImportSAMLMetadataManuallyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata manually not found response has a 5xx status code
func (o *ImportSAMLMetadataManuallyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata manually not found response a status code equal to that given
func (o *ImportSAMLMetadataManuallyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the import s a m l metadata manually not found response
func (o *ImportSAMLMetadataManuallyNotFound) Code() int {
	return 404
}

func (o *ImportSAMLMetadataManuallyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyNotFound %s", 404, payload)
}

func (o *ImportSAMLMetadataManuallyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyNotFound %s", 404, payload)
}

func (o *ImportSAMLMetadataManuallyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataManuallyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataManuallyConflict creates a ImportSAMLMetadataManuallyConflict with default headers values
func NewImportSAMLMetadataManuallyConflict() *ImportSAMLMetadataManuallyConflict {
	return &ImportSAMLMetadataManuallyConflict{}
}

/*
ImportSAMLMetadataManuallyConflict describes a response with status code 409, with default header values.

Conflict
*/
type ImportSAMLMetadataManuallyConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata manually conflict response has a 2xx status code
func (o *ImportSAMLMetadataManuallyConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata manually conflict response has a 3xx status code
func (o *ImportSAMLMetadataManuallyConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata manually conflict response has a 4xx status code
func (o *ImportSAMLMetadataManuallyConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata manually conflict response has a 5xx status code
func (o *ImportSAMLMetadataManuallyConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata manually conflict response a status code equal to that given
func (o *ImportSAMLMetadataManuallyConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the import s a m l metadata manually conflict response
func (o *ImportSAMLMetadataManuallyConflict) Code() int {
	return 409
}

func (o *ImportSAMLMetadataManuallyConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyConflict %s", 409, payload)
}

func (o *ImportSAMLMetadataManuallyConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyConflict %s", 409, payload)
}

func (o *ImportSAMLMetadataManuallyConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataManuallyConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataManuallyUnprocessableEntity creates a ImportSAMLMetadataManuallyUnprocessableEntity with default headers values
func NewImportSAMLMetadataManuallyUnprocessableEntity() *ImportSAMLMetadataManuallyUnprocessableEntity {
	return &ImportSAMLMetadataManuallyUnprocessableEntity{}
}

/*
ImportSAMLMetadataManuallyUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable entity
*/
type ImportSAMLMetadataManuallyUnprocessableEntity struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata manually unprocessable entity response has a 2xx status code
func (o *ImportSAMLMetadataManuallyUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata manually unprocessable entity response has a 3xx status code
func (o *ImportSAMLMetadataManuallyUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata manually unprocessable entity response has a 4xx status code
func (o *ImportSAMLMetadataManuallyUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata manually unprocessable entity response has a 5xx status code
func (o *ImportSAMLMetadataManuallyUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata manually unprocessable entity response a status code equal to that given
func (o *ImportSAMLMetadataManuallyUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the import s a m l metadata manually unprocessable entity response
func (o *ImportSAMLMetadataManuallyUnprocessableEntity) Code() int {
	return 422
}

func (o *ImportSAMLMetadataManuallyUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyUnprocessableEntity %s", 422, payload)
}

func (o *ImportSAMLMetadataManuallyUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyUnprocessableEntity %s", 422, payload)
}

func (o *ImportSAMLMetadataManuallyUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataManuallyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSAMLMetadataManuallyTooManyRequests creates a ImportSAMLMetadataManuallyTooManyRequests with default headers values
func NewImportSAMLMetadataManuallyTooManyRequests() *ImportSAMLMetadataManuallyTooManyRequests {
	return &ImportSAMLMetadataManuallyTooManyRequests{}
}

/*
ImportSAMLMetadataManuallyTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ImportSAMLMetadataManuallyTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this import s a m l metadata manually too many requests response has a 2xx status code
func (o *ImportSAMLMetadataManuallyTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this import s a m l metadata manually too many requests response has a 3xx status code
func (o *ImportSAMLMetadataManuallyTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import s a m l metadata manually too many requests response has a 4xx status code
func (o *ImportSAMLMetadataManuallyTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this import s a m l metadata manually too many requests response has a 5xx status code
func (o *ImportSAMLMetadataManuallyTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this import s a m l metadata manually too many requests response a status code equal to that given
func (o *ImportSAMLMetadataManuallyTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the import s a m l metadata manually too many requests response
func (o *ImportSAMLMetadataManuallyTooManyRequests) Code() int {
	return 429
}

func (o *ImportSAMLMetadataManuallyTooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyTooManyRequests %s", 429, payload)
}

func (o *ImportSAMLMetadataManuallyTooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /clients/{cid}/saml/metadata/import/manual][%d] importSAMLMetadataManuallyTooManyRequests %s", 429, payload)
}

func (o *ImportSAMLMetadataManuallyTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ImportSAMLMetadataManuallyTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
