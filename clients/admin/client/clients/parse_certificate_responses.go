// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/admin/models"
)

// ParseCertificateReader is a Reader for the ParseCertificate structure.
type ParseCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ParseCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewParseCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewParseCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewParseCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewParseCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewParseCertificateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /clients/parse-certificate] parseCertificate", response, response.Code())
	}
}

// NewParseCertificateOK creates a ParseCertificateOK with default headers values
func NewParseCertificateOK() *ParseCertificateOK {
	return &ParseCertificateOK{}
}

/*
ParseCertificateOK describes a response with status code 200, with default header values.

CertificateInfo
*/
type ParseCertificateOK struct {
	Payload *models.CertificateInfo
}

// IsSuccess returns true when this parse certificate o k response has a 2xx status code
func (o *ParseCertificateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this parse certificate o k response has a 3xx status code
func (o *ParseCertificateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this parse certificate o k response has a 4xx status code
func (o *ParseCertificateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this parse certificate o k response has a 5xx status code
func (o *ParseCertificateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this parse certificate o k response a status code equal to that given
func (o *ParseCertificateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the parse certificate o k response
func (o *ParseCertificateOK) Code() int {
	return 200
}

func (o *ParseCertificateOK) Error() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateOK  %+v", 200, o.Payload)
}

func (o *ParseCertificateOK) String() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateOK  %+v", 200, o.Payload)
}

func (o *ParseCertificateOK) GetPayload() *models.CertificateInfo {
	return o.Payload
}

func (o *ParseCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewParseCertificateBadRequest creates a ParseCertificateBadRequest with default headers values
func NewParseCertificateBadRequest() *ParseCertificateBadRequest {
	return &ParseCertificateBadRequest{}
}

/*
ParseCertificateBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ParseCertificateBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this parse certificate bad request response has a 2xx status code
func (o *ParseCertificateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this parse certificate bad request response has a 3xx status code
func (o *ParseCertificateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this parse certificate bad request response has a 4xx status code
func (o *ParseCertificateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this parse certificate bad request response has a 5xx status code
func (o *ParseCertificateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this parse certificate bad request response a status code equal to that given
func (o *ParseCertificateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the parse certificate bad request response
func (o *ParseCertificateBadRequest) Code() int {
	return 400
}

func (o *ParseCertificateBadRequest) Error() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *ParseCertificateBadRequest) String() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateBadRequest  %+v", 400, o.Payload)
}

func (o *ParseCertificateBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ParseCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewParseCertificateUnauthorized creates a ParseCertificateUnauthorized with default headers values
func NewParseCertificateUnauthorized() *ParseCertificateUnauthorized {
	return &ParseCertificateUnauthorized{}
}

/*
ParseCertificateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ParseCertificateUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this parse certificate unauthorized response has a 2xx status code
func (o *ParseCertificateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this parse certificate unauthorized response has a 3xx status code
func (o *ParseCertificateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this parse certificate unauthorized response has a 4xx status code
func (o *ParseCertificateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this parse certificate unauthorized response has a 5xx status code
func (o *ParseCertificateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this parse certificate unauthorized response a status code equal to that given
func (o *ParseCertificateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the parse certificate unauthorized response
func (o *ParseCertificateUnauthorized) Code() int {
	return 401
}

func (o *ParseCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateUnauthorized  %+v", 401, o.Payload)
}

func (o *ParseCertificateUnauthorized) String() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateUnauthorized  %+v", 401, o.Payload)
}

func (o *ParseCertificateUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ParseCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewParseCertificateForbidden creates a ParseCertificateForbidden with default headers values
func NewParseCertificateForbidden() *ParseCertificateForbidden {
	return &ParseCertificateForbidden{}
}

/*
ParseCertificateForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ParseCertificateForbidden struct {
	Payload *models.Error
}

// IsSuccess returns true when this parse certificate forbidden response has a 2xx status code
func (o *ParseCertificateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this parse certificate forbidden response has a 3xx status code
func (o *ParseCertificateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this parse certificate forbidden response has a 4xx status code
func (o *ParseCertificateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this parse certificate forbidden response has a 5xx status code
func (o *ParseCertificateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this parse certificate forbidden response a status code equal to that given
func (o *ParseCertificateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the parse certificate forbidden response
func (o *ParseCertificateForbidden) Code() int {
	return 403
}

func (o *ParseCertificateForbidden) Error() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateForbidden  %+v", 403, o.Payload)
}

func (o *ParseCertificateForbidden) String() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateForbidden  %+v", 403, o.Payload)
}

func (o *ParseCertificateForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ParseCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewParseCertificateTooManyRequests creates a ParseCertificateTooManyRequests with default headers values
func NewParseCertificateTooManyRequests() *ParseCertificateTooManyRequests {
	return &ParseCertificateTooManyRequests{}
}

/*
ParseCertificateTooManyRequests describes a response with status code 429, with default header values.

Too many requests
*/
type ParseCertificateTooManyRequests struct {
	Payload *models.Error
}

// IsSuccess returns true when this parse certificate too many requests response has a 2xx status code
func (o *ParseCertificateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this parse certificate too many requests response has a 3xx status code
func (o *ParseCertificateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this parse certificate too many requests response has a 4xx status code
func (o *ParseCertificateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this parse certificate too many requests response has a 5xx status code
func (o *ParseCertificateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this parse certificate too many requests response a status code equal to that given
func (o *ParseCertificateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the parse certificate too many requests response
func (o *ParseCertificateTooManyRequests) Code() int {
	return 429
}

func (o *ParseCertificateTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateTooManyRequests  %+v", 429, o.Payload)
}

func (o *ParseCertificateTooManyRequests) String() string {
	return fmt.Sprintf("[POST /clients/parse-certificate][%d] parseCertificateTooManyRequests  %+v", 429, o.Payload)
}

func (o *ParseCertificateTooManyRequests) GetPayload() *models.Error {
	return o.Payload
}

func (o *ParseCertificateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
