// Code generated by go-swagger; DO NOT EDIT.

package claims

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new claims API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new claims API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new claims API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for claims API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateClaim(params *CreateClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClaimCreated, error)

	DeleteClaim(params *DeleteClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClaimNoContent, error)

	ListClaims(params *ListClaimsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListClaimsOK, error)

	UpdateClaim(params *UpdateClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClaimOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateClaim creates claim

	Claim allows to add custom attribute to outgoing id / access token.

Authorization Server, Name, Mapping and Type are required fields.

ID if not provided will be generated.
*/
func (a *Client) CreateClaim(params *CreateClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateClaimCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createClaim",
		Method:             "POST",
		PathPattern:        "/claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateClaimCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteClaim deletes claim

Delete claim.
*/
func (a *Client) DeleteClaim(params *DeleteClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteClaimNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteClaim",
		Method:             "DELETE",
		PathPattern:        "/claims/{claim}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteClaimNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListClaims lists claims

List claims.
*/
func (a *Client) ListClaims(params *ListClaimsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListClaimsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClaimsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listClaims",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/claims",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListClaimsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListClaimsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listClaims: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateClaim updates claim

Update claim.
*/
func (a *Client) UpdateClaim(params *UpdateClaimParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateClaimParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateClaim",
		Method:             "PUT",
		PathPattern:        "/claims/{claim}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateClaimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateClaimOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateClaim: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
