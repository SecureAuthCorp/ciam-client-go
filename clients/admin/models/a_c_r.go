// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ACR ACR
//
// swagger:model ACR
type ACR struct {

	// An authorization server (workspace) identifier holding the ACR.
	// Example: default
	// Required: true
	AuthorizationServerID string `json:"authorization_server_id" yaml:"authorization_server_id"`

	// If set to `true`, the ACR is disabled and can't be used
	Disabled bool `json:"disabled,omitempty" yaml:"disabled,omitempty"`

	// ACR unique identifier
	ID string `json:"id,omitempty" yaml:"id,omitempty"`

	// General purpose metadata
	Metadata map[string]interface{} `json:"metadata,omitempty" yaml:"metadata,omitempty"`

	// ID of the tenant
	// Example: default
	// Required: true
	TenantID string `json:"tenant_id" yaml:"tenant_id"`

	// ACR value
	// Must be unique within the server and contains only the following characters: `a-zA-Z0-9\/:=._-`
	// Example: urn:secureauth:factor:password
	// Required: true
	Value string `json:"value" yaml:"value"`
}

// Validate validates this a c r
func (m *ACR) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ACR) validateAuthorizationServerID(formats strfmt.Registry) error {

	if err := validate.RequiredString("authorization_server_id", "body", m.AuthorizationServerID); err != nil {
		return err
	}

	return nil
}

func (m *ACR) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *ACR) validateValue(formats strfmt.Registry) error {

	if err := validate.RequiredString("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this a c r based on context it is used
func (m *ACR) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ACR) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ACR) UnmarshalBinary(b []byte) error {
	var res ACR
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
