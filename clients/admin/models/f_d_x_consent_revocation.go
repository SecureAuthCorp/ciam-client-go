// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FDXConsentRevocation Revocation data
//
// swagger:model FDXConsentRevocation
type FDXConsentRevocation struct {

	// Revocation initiator
	// Example: \"INDIVIDUAL\
	// Enum: [DATA_ACCESS_PLATFORM DATA_PROVIDER DATA_RECIPIENT INDIVIDUAL MERCHANT VENDOR]
	Initiator string `json:"initiator,omitempty"`

	// Revocation reason
	// Example: \"USER_ACTION\
	// Enum: [BUSINESS_RULE USER_ACTION]
	Reason string `json:"reason,omitempty"`
}

// Validate validates this f d x consent revocation
func (m *FDXConsentRevocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitiator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fDXConsentRevocationTypeInitiatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DATA_ACCESS_PLATFORM","DATA_PROVIDER","DATA_RECIPIENT","INDIVIDUAL","MERCHANT","VENDOR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXConsentRevocationTypeInitiatorPropEnum = append(fDXConsentRevocationTypeInitiatorPropEnum, v)
	}
}

const (

	// FDXConsentRevocationInitiatorDATAACCESSPLATFORM captures enum value "DATA_ACCESS_PLATFORM"
	FDXConsentRevocationInitiatorDATAACCESSPLATFORM string = "DATA_ACCESS_PLATFORM"

	// FDXConsentRevocationInitiatorDATAPROVIDER captures enum value "DATA_PROVIDER"
	FDXConsentRevocationInitiatorDATAPROVIDER string = "DATA_PROVIDER"

	// FDXConsentRevocationInitiatorDATARECIPIENT captures enum value "DATA_RECIPIENT"
	FDXConsentRevocationInitiatorDATARECIPIENT string = "DATA_RECIPIENT"

	// FDXConsentRevocationInitiatorINDIVIDUAL captures enum value "INDIVIDUAL"
	FDXConsentRevocationInitiatorINDIVIDUAL string = "INDIVIDUAL"

	// FDXConsentRevocationInitiatorMERCHANT captures enum value "MERCHANT"
	FDXConsentRevocationInitiatorMERCHANT string = "MERCHANT"

	// FDXConsentRevocationInitiatorVENDOR captures enum value "VENDOR"
	FDXConsentRevocationInitiatorVENDOR string = "VENDOR"
)

// prop value enum
func (m *FDXConsentRevocation) validateInitiatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXConsentRevocationTypeInitiatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXConsentRevocation) validateInitiator(formats strfmt.Registry) error {
	if swag.IsZero(m.Initiator) { // not required
		return nil
	}

	// value enum
	if err := m.validateInitiatorEnum("initiator", "body", m.Initiator); err != nil {
		return err
	}

	return nil
}

var fDXConsentRevocationTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BUSINESS_RULE","USER_ACTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fDXConsentRevocationTypeReasonPropEnum = append(fDXConsentRevocationTypeReasonPropEnum, v)
	}
}

const (

	// FDXConsentRevocationReasonBUSINESSRULE captures enum value "BUSINESS_RULE"
	FDXConsentRevocationReasonBUSINESSRULE string = "BUSINESS_RULE"

	// FDXConsentRevocationReasonUSERACTION captures enum value "USER_ACTION"
	FDXConsentRevocationReasonUSERACTION string = "USER_ACTION"
)

// prop value enum
func (m *FDXConsentRevocation) validateReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fDXConsentRevocationTypeReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FDXConsentRevocation) validateReason(formats strfmt.Registry) error {
	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this f d x consent revocation based on context it is used
func (m *FDXConsentRevocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FDXConsentRevocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FDXConsentRevocation) UnmarshalBinary(b []byte) error {
	var res FDXConsentRevocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
