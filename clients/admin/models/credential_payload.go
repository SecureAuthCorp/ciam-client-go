// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialPayload CredentialPayload credential payload
//
// swagger:model CredentialPayload
type CredentialPayload struct {

	// credential ID
	CredentialID string `json:"credential_id,omitempty" yaml:"credential_id,omitempty"`

	// credential type
	// Enum: [password webauthn totp]
	CredentialType string `json:"credential_type,omitempty" yaml:"credential_type,omitempty"`

	// operation type
	OperationType string `json:"operation_type,omitempty" yaml:"operation_type,omitempty"`

	// user ID
	UserID string `json:"user_id,omitempty" yaml:"user_id,omitempty"`
}

// Validate validates this credential payload
func (m *CredentialPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var credentialPayloadTypeCredentialTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["password","webauthn","totp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialPayloadTypeCredentialTypePropEnum = append(credentialPayloadTypeCredentialTypePropEnum, v)
	}
}

const (

	// CredentialPayloadCredentialTypePassword captures enum value "password"
	CredentialPayloadCredentialTypePassword string = "password"

	// CredentialPayloadCredentialTypeWebauthn captures enum value "webauthn"
	CredentialPayloadCredentialTypeWebauthn string = "webauthn"

	// CredentialPayloadCredentialTypeTotp captures enum value "totp"
	CredentialPayloadCredentialTypeTotp string = "totp"
)

// prop value enum
func (m *CredentialPayload) validateCredentialTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialPayloadTypeCredentialTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialPayload) validateCredentialType(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCredentialTypeEnum("credential_type", "body", m.CredentialType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this credential payload based on context it is used
func (m *CredentialPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialPayload) UnmarshalBinary(b []byte) error {
	var res CredentialPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
