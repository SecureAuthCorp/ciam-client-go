// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RiskContext risk context
//
// swagger:model RiskContext
type RiskContext struct {

	// dbfp fingerprint
	DbfpFingerprint string `json:"dbfp_fingerprint,omitempty" yaml:"dbfp_fingerprint,omitempty"`

	// id
	ID RiskID `json:"id,omitempty" yaml:"id,omitempty"`

	// loa
	Loa RiskLOA `json:"loa,omitempty" yaml:"loa,omitempty"`
}

// Validate validates this risk context
func (m *RiskContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoa(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskContext) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *RiskContext) validateLoa(formats strfmt.Registry) error {
	if swag.IsZero(m.Loa) { // not required
		return nil
	}

	if err := m.Loa.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loa")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loa")
		}
		return err
	}

	return nil
}

// ContextValidate validate this risk context based on the context it is used
func (m *RiskContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoa(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskContext) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *RiskContext) contextValidateLoa(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Loa) { // not required
		return nil
	}

	if err := m.Loa.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("loa")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("loa")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RiskContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RiskContext) UnmarshalBinary(b []byte) error {
	var res RiskContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
