// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerInfo server info
//
// swagger:model ServerInfo
type ServerInfo struct {

	// Your server's label color in a HEX format.
	// Example: #007FFF
	Color string `json:"color,omitempty" yaml:"color,omitempty"`

	// Display description of the workspace
	// Example: Server description
	Description string `json:"description,omitempty" yaml:"description,omitempty"`

	// Logo URI
	LogoURI string `json:"logo_uri,omitempty" yaml:"logo_uri,omitempty"`

	// Display name of the workspace
	//
	// If not provided, a random ID is generated.
	// Example: default
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// The profile of a server
	//
	// ACP is delivered with preconfigured workspace templates that enable quick and easy setup for
	// specific configuration patterns. For example, you can instantly create an Open Banking
	// compliant workspace that has all of the required mechanisms and settings already in place.
	// Example: default
	// Enum: [default demo workforce consumer partners third_party fapi_advanced fapi_rw fapi_ro openbanking_uk_fapi_advanced openbanking_uk openbanking_br openbanking_br_unico cdr_australia cdr_australia_fapi_rw fdx openbanking_ksa fapi_20_security fapi_20_message_signing connect_id]
	Profile string `json:"profile,omitempty" yaml:"profile,omitempty"`

	// Server type
	//
	// It is an internal property used to recognize if the server is created for an admin portal,
	// a developer portal, or if it is a system or a regular workspace.
	// Example: regular
	// Enum: [admin developer system regular organization]
	Type string `json:"type,omitempty" yaml:"type,omitempty"`
}

// Validate validates this server info
func (m *ServerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var serverInfoTypeProfilePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","demo","workforce","consumer","partners","third_party","fapi_advanced","fapi_rw","fapi_ro","openbanking_uk_fapi_advanced","openbanking_uk","openbanking_br","openbanking_br_unico","cdr_australia","cdr_australia_fapi_rw","fdx","openbanking_ksa","fapi_20_security","fapi_20_message_signing","connect_id"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverInfoTypeProfilePropEnum = append(serverInfoTypeProfilePropEnum, v)
	}
}

const (

	// ServerInfoProfileDefault captures enum value "default"
	ServerInfoProfileDefault string = "default"

	// ServerInfoProfileDemo captures enum value "demo"
	ServerInfoProfileDemo string = "demo"

	// ServerInfoProfileWorkforce captures enum value "workforce"
	ServerInfoProfileWorkforce string = "workforce"

	// ServerInfoProfileConsumer captures enum value "consumer"
	ServerInfoProfileConsumer string = "consumer"

	// ServerInfoProfilePartners captures enum value "partners"
	ServerInfoProfilePartners string = "partners"

	// ServerInfoProfileThirdParty captures enum value "third_party"
	ServerInfoProfileThirdParty string = "third_party"

	// ServerInfoProfileFapiAdvanced captures enum value "fapi_advanced"
	ServerInfoProfileFapiAdvanced string = "fapi_advanced"

	// ServerInfoProfileFapiRw captures enum value "fapi_rw"
	ServerInfoProfileFapiRw string = "fapi_rw"

	// ServerInfoProfileFapiRo captures enum value "fapi_ro"
	ServerInfoProfileFapiRo string = "fapi_ro"

	// ServerInfoProfileOpenbankingUkFapiAdvanced captures enum value "openbanking_uk_fapi_advanced"
	ServerInfoProfileOpenbankingUkFapiAdvanced string = "openbanking_uk_fapi_advanced"

	// ServerInfoProfileOpenbankingUk captures enum value "openbanking_uk"
	ServerInfoProfileOpenbankingUk string = "openbanking_uk"

	// ServerInfoProfileOpenbankingBr captures enum value "openbanking_br"
	ServerInfoProfileOpenbankingBr string = "openbanking_br"

	// ServerInfoProfileOpenbankingBrUnico captures enum value "openbanking_br_unico"
	ServerInfoProfileOpenbankingBrUnico string = "openbanking_br_unico"

	// ServerInfoProfileCdrAustralia captures enum value "cdr_australia"
	ServerInfoProfileCdrAustralia string = "cdr_australia"

	// ServerInfoProfileCdrAustraliaFapiRw captures enum value "cdr_australia_fapi_rw"
	ServerInfoProfileCdrAustraliaFapiRw string = "cdr_australia_fapi_rw"

	// ServerInfoProfileFdx captures enum value "fdx"
	ServerInfoProfileFdx string = "fdx"

	// ServerInfoProfileOpenbankingKsa captures enum value "openbanking_ksa"
	ServerInfoProfileOpenbankingKsa string = "openbanking_ksa"

	// ServerInfoProfileFapi20Security captures enum value "fapi_20_security"
	ServerInfoProfileFapi20Security string = "fapi_20_security"

	// ServerInfoProfileFapi20MessageSigning captures enum value "fapi_20_message_signing"
	ServerInfoProfileFapi20MessageSigning string = "fapi_20_message_signing"

	// ServerInfoProfileConnectID captures enum value "connect_id"
	ServerInfoProfileConnectID string = "connect_id"
)

// prop value enum
func (m *ServerInfo) validateProfileEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverInfoTypeProfilePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerInfo) validateProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.Profile) { // not required
		return nil
	}

	// value enum
	if err := m.validateProfileEnum("profile", "body", m.Profile); err != nil {
		return err
	}

	return nil
}

var serverInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","developer","system","regular","organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverInfoTypeTypePropEnum = append(serverInfoTypeTypePropEnum, v)
	}
}

const (

	// ServerInfoTypeAdmin captures enum value "admin"
	ServerInfoTypeAdmin string = "admin"

	// ServerInfoTypeDeveloper captures enum value "developer"
	ServerInfoTypeDeveloper string = "developer"

	// ServerInfoTypeSystem captures enum value "system"
	ServerInfoTypeSystem string = "system"

	// ServerInfoTypeRegular captures enum value "regular"
	ServerInfoTypeRegular string = "regular"

	// ServerInfoTypeOrganization captures enum value "organization"
	ServerInfoTypeOrganization string = "organization"
)

// prop value enum
func (m *ServerInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverInfoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerInfo) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server info based on context it is used
func (m *ServerInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerInfo) UnmarshalBinary(b []byte) error {
	var res ServerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
