// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AutomaticKeyRotation automatic key rotation
//
// swagger:model AutomaticKeyRotation
type AutomaticKeyRotation struct {

	// cron
	// Required: true
	Cron string `json:"cron" yaml:"cron"`

	// enabled
	// Required: true
	Enabled bool `json:"enabled" yaml:"enabled"`

	// scheduled at
	// Read Only: true
	// Format: date-time
	ScheduledAt strfmt.DateTime `json:"scheduled_at,omitempty" yaml:"scheduled_at,omitempty"`

	// starting from
	// Format: date-time
	StartingFrom strfmt.DateTime `json:"starting_from,omitempty" yaml:"starting_from,omitempty"`
}

// Validate validates this automatic key rotation
func (m *AutomaticKeyRotation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCron(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartingFrom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutomaticKeyRotation) validateCron(formats strfmt.Registry) error {

	if err := validate.RequiredString("cron", "body", m.Cron); err != nil {
		return err
	}

	return nil
}

func (m *AutomaticKeyRotation) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", bool(m.Enabled)); err != nil {
		return err
	}

	return nil
}

func (m *AutomaticKeyRotation) validateScheduledAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledAt) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduled_at", "body", "date-time", m.ScheduledAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AutomaticKeyRotation) validateStartingFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.StartingFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("starting_from", "body", "date-time", m.StartingFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this automatic key rotation based on the context it is used
func (m *AutomaticKeyRotation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScheduledAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AutomaticKeyRotation) contextValidateScheduledAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "scheduled_at", "body", strfmt.DateTime(m.ScheduledAt)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AutomaticKeyRotation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AutomaticKeyRotation) UnmarshalBinary(b []byte) error {
	var res AutomaticKeyRotation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
