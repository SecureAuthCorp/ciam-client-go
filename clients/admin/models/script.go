// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Script script
//
// swagger:model Script
type Script struct {

	// ID of the authorization server (workspace) where the script is created
	// Required: true
	AuthorizationServerID string `json:"authorization_server_id" yaml:"authorization_server_id"`

	// Script body
	Body string `json:"body,omitempty" yaml:"body,omitempty"`

	// env version
	EnvVersion FnEnvVersion `json:"env_version,omitempty" yaml:"env_version,omitempty"`

	// Unique ID of your script
	//
	// If not provided, a random ID is generated.
	ID string `json:"id,omitempty" yaml:"id,omitempty"`

	// Display name of your script
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// ID of the tenant where the script is created
	// Required: true
	TenantID string `json:"tenant_id" yaml:"tenant_id"`

	// Input data for testing this script
	TestInput string `json:"test_input,omitempty" yaml:"test_input,omitempty"`
}

// Validate validates this script
func (m *Script) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Script) validateAuthorizationServerID(formats strfmt.Registry) error {

	if err := validate.RequiredString("authorization_server_id", "body", m.AuthorizationServerID); err != nil {
		return err
	}

	return nil
}

func (m *Script) validateEnvVersion(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvVersion) { // not required
		return nil
	}

	if err := m.EnvVersion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("env_version")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("env_version")
		}
		return err
	}

	return nil
}

func (m *Script) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this script based on the context it is used
func (m *Script) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnvVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Script) contextValidateEnvVersion(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.EnvVersion) { // not required
		return nil
	}

	if err := m.EnvVersion.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("env_version")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("env_version")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Script) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Script) UnmarshalBinary(b []byte) error {
	var res Script
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
