// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditEventPayloads audit event payloads
//
// swagger:model AuditEventPayloads
type AuditEventPayloads struct {

	// access token denied
	AccessTokenDenied *AccessRequestDataWithError `json:"access_token_denied,omitempty" yaml:"access_token_denied,omitempty"`

	// access token issued
	AccessTokenIssued *AccessRequestData `json:"access_token_issued,omitempty" yaml:"access_token_issued,omitempty"`

	// authorization code denied
	AuthorizationCodeDenied *AccessRequestDataWithError `json:"authorization_code_denied,omitempty" yaml:"authorization_code_denied,omitempty"`

	// authorization code issued
	AuthorizationCodeIssued *AccessRequestData `json:"authorization_code_issued,omitempty" yaml:"authorization_code_issued,omitempty"`

	// bruteforce deleted
	BruteforceDeleted *BruteForcePayload `json:"bruteforce_deleted,omitempty" yaml:"bruteforce_deleted,omitempty"`

	// bruteforce updated
	BruteforceUpdated *BruteForcePayload `json:"bruteforce_updated,omitempty" yaml:"bruteforce_updated,omitempty"`

	// claims granted
	ClaimsGranted *ClaimsGrantedPayload `json:"claims_granted,omitempty" yaml:"claims_granted,omitempty"`

	// client consents revoked
	ClientConsentsRevoked *ClientConsentsAuditEventPayload `json:"client_consents_revoked,omitempty" yaml:"client_consents_revoked,omitempty"`

	// client created
	ClientCreated *ClientAuditPayload `json:"client_created,omitempty" yaml:"client_created,omitempty"`

	// client deleted
	ClientDeleted *ClientAuditPayload `json:"client_deleted,omitempty" yaml:"client_deleted,omitempty"`

	// client updated
	ClientUpdated *ClientAuditPayload `json:"client_updated,omitempty" yaml:"client_updated,omitempty"`

	// consent accepted
	ConsentAccepted *ConsentAuditEventPayload `json:"consent_accepted,omitempty" yaml:"consent_accepted,omitempty"`

	// consent created
	ConsentCreated *ConsentAuditEventPayload `json:"consent_created,omitempty" yaml:"consent_created,omitempty"`

	// consent notified
	ConsentNotified *ConsentNotifiedPayload `json:"consent_notified,omitempty" yaml:"consent_notified,omitempty"`

	// consent rejected
	ConsentRejected *ConsentAuditEventPayload `json:"consent_rejected,omitempty" yaml:"consent_rejected,omitempty"`

	// consent revoked
	ConsentRevoked *ConsentAuditEventPayload `json:"consent_revoked,omitempty" yaml:"consent_revoked,omitempty"`

	// consent updated
	ConsentUpdated *ConsentAuditEventPayload `json:"consent_updated,omitempty" yaml:"consent_updated,omitempty"`

	// credential created
	CredentialCreated *CredentialPayload `json:"credential_created,omitempty" yaml:"credential_created,omitempty"`

	// credential updated
	CredentialUpdated *CredentialPayload `json:"credential_updated,omitempty" yaml:"credential_updated,omitempty"`

	// customer consents revoked
	CustomerConsentsRevoked *CustomerConsentsAuditEventPayload `json:"customer_consents_revoked,omitempty" yaml:"customer_consents_revoked,omitempty"`

	// dcr created
	DcrCreated *DCRCreatedEventPayload `json:"dcr_created,omitempty" yaml:"dcr_created,omitempty"`

	// dcr rejected
	DcrRejected *DCRRejectedEventPayload `json:"dcr_rejected,omitempty" yaml:"dcr_rejected,omitempty"`

	// gateway policy authorized
	GatewayPolicyAuthorized *RequestValidatedPayload `json:"gateway_policy_authorized,omitempty" yaml:"gateway_policy_authorized,omitempty"`

	// gateway policy unauthorized
	GatewayPolicyUnauthorized *RequestValidatedPayload `json:"gateway_policy_unauthorized,omitempty" yaml:"gateway_policy_unauthorized,omitempty"`

	// gateway request authorized
	GatewayRequestAuthorized *RequestValidatedPayload `json:"gateway_request_authorized,omitempty" yaml:"gateway_request_authorized,omitempty"`

	// gateway request unauthorized
	GatewayRequestUnauthorized *RequestValidatedPayload `json:"gateway_request_unauthorized,omitempty" yaml:"gateway_request_unauthorized,omitempty"`

	// import created
	ImportCreated *ConfigImportEventPayload `json:"import_created,omitempty" yaml:"import_created,omitempty"`

	// import failed
	ImportFailed *ConfigImportEventPayload `json:"import_failed,omitempty" yaml:"import_failed,omitempty"`

	// jit created
	JitCreated *JITCreatedPayload `json:"jit_created,omitempty" yaml:"jit_created,omitempty"`

	// jit failed
	JitFailed *JITFailedPayload `json:"jit_failed,omitempty" yaml:"jit_failed,omitempty"`

	// jit updated
	JitUpdated *JITUpdatedPayload `json:"jit_updated,omitempty" yaml:"jit_updated,omitempty"`

	// login accepted
	LoginAccepted *LoginPayload `json:"login_accepted,omitempty" yaml:"login_accepted,omitempty"`

	// login attempted
	LoginAttempted *LoginPayload `json:"login_attempted,omitempty" yaml:"login_attempted,omitempty"`

	// login failed
	LoginFailed *LoginFailedPayload `json:"login_failed,omitempty" yaml:"login_failed,omitempty"`

	// organization created
	OrganizationCreated *OrganizationPayload `json:"organization_created,omitempty" yaml:"organization_created,omitempty"`

	// organization deleted
	OrganizationDeleted *OrganizationPayload `json:"organization_deleted,omitempty" yaml:"organization_deleted,omitempty"`

	// organization updated
	OrganizationUpdated *OrganizationPayload `json:"organization_updated,omitempty" yaml:"organization_updated,omitempty"`

	// otp accepted
	OtpAccepted *OTPPayload `json:"otp_accepted,omitempty" yaml:"otp_accepted,omitempty"`

	// otp not sent
	OtpNotSent *OTPPayload `json:"otp_not_sent,omitempty" yaml:"otp_not_sent,omitempty"`

	// otp rejected
	OtpRejected *OTPPayload `json:"otp_rejected,omitempty" yaml:"otp_rejected,omitempty"`

	// otp requested
	OtpRequested *OTPPayload `json:"otp_requested,omitempty" yaml:"otp_requested,omitempty"`

	// otp sent
	OtpSent *OTPPayload `json:"otp_sent,omitempty" yaml:"otp_sent,omitempty"`

	// password accepted
	PasswordAccepted *PasswordPayload `json:"password_accepted,omitempty" yaml:"password_accepted,omitempty"`

	// password confirmed
	PasswordConfirmed *PasswordPayload `json:"password_confirmed,omitempty" yaml:"password_confirmed,omitempty"`

	// password rejected
	PasswordRejected *PasswordPayload `json:"password_rejected,omitempty" yaml:"password_rejected,omitempty"`

	// password requested
	PasswordRequested *PasswordPayload `json:"password_requested,omitempty" yaml:"password_requested,omitempty"`

	// password updated
	PasswordUpdated *PasswordPayload `json:"password_updated,omitempty" yaml:"password_updated,omitempty"`

	// policy authorized
	PolicyAuthorized *PolicyEvaluatedPayload `json:"policy_authorized,omitempty" yaml:"policy_authorized,omitempty"`

	// policy unauthorized
	PolicyUnauthorized *PolicyEvaluatedPayload `json:"policy_unauthorized,omitempty" yaml:"policy_unauthorized,omitempty"`

	// pool created
	PoolCreated *PoolAuditPayload `json:"pool_created,omitempty" yaml:"pool_created,omitempty"`

	// pool deleted
	PoolDeleted *PoolAuditPayload `json:"pool_deleted,omitempty" yaml:"pool_deleted,omitempty"`

	// pool updated
	PoolUpdated *PoolAuditPayload `json:"pool_updated,omitempty" yaml:"pool_updated,omitempty"`

	// role granted
	RoleGranted *RoleGrantAuditPayload `json:"role_granted,omitempty" yaml:"role_granted,omitempty"`

	// role revoked
	RoleRevoked *RoleGrantAuditPayload `json:"role_revoked,omitempty" yaml:"role_revoked,omitempty"`

	// saml assertion denied
	SamlAssertionDenied *AccessRequestDataWithError `json:"saml_assertion_denied,omitempty" yaml:"saml_assertion_denied,omitempty"`

	// saml assertion issued
	SamlAssertionIssued *AccessRequestData `json:"saml_assertion_issued,omitempty" yaml:"saml_assertion_issued,omitempty"`

	// schema created
	SchemaCreated *SchemaAuditPayload `json:"schema_created,omitempty" yaml:"schema_created,omitempty"`

	// schema deleted
	SchemaDeleted *SchemaAuditPayload `json:"schema_deleted,omitempty" yaml:"schema_deleted,omitempty"`

	// schema updated
	SchemaUpdated *SchemaAuditPayload `json:"schema_updated,omitempty" yaml:"schema_updated,omitempty"`

	// scopes granted
	ScopesGranted *ScopesGrantedPayload `json:"scopes_granted,omitempty" yaml:"scopes_granted,omitempty"`

	// script executed
	ScriptExecuted *ScriptExecutionAuditPayload `json:"script_executed,omitempty" yaml:"script_executed,omitempty"`

	// server created
	ServerCreated *ServerAuditPayload `json:"server_created,omitempty" yaml:"server_created,omitempty"`

	// server deleted
	ServerDeleted *ServerAuditPayload `json:"server_deleted,omitempty" yaml:"server_deleted,omitempty"`

	// server updated
	ServerUpdated *ServerAuditPayload `json:"server_updated,omitempty" yaml:"server_updated,omitempty"`

	// service created
	ServiceCreated *ServiceAuditPayload `json:"service_created,omitempty" yaml:"service_created,omitempty"`

	// service deleted
	ServiceDeleted *ServiceAuditPayload `json:"service_deleted,omitempty" yaml:"service_deleted,omitempty"`

	// service updated
	ServiceUpdated *ServiceAuditPayload `json:"service_updated,omitempty" yaml:"service_updated,omitempty"`

	// task failed
	TaskFailed *TaskAuditPayload `json:"task_failed,omitempty" yaml:"task_failed,omitempty"`

	// task succeeded
	TaskSucceeded *TaskAuditPayload `json:"task_succeeded,omitempty" yaml:"task_succeeded,omitempty"`

	// tokens revoked
	TokensRevoked *TokensRevokedPayload `json:"tokens_revoked,omitempty" yaml:"tokens_revoked,omitempty"`

	// user authenticated
	UserAuthenticated *UserAuthenticatedPayload `json:"user_authenticated,omitempty" yaml:"user_authenticated,omitempty"`

	// user created
	UserCreated *UserPayload `json:"user_created,omitempty" yaml:"user_created,omitempty"`

	// user deleted
	UserDeleted *UserPayload `json:"user_deleted,omitempty" yaml:"user_deleted,omitempty"`

	// user updated
	UserUpdated *UserPayload `json:"user_updated,omitempty" yaml:"user_updated,omitempty"`
}

// Validate validates this audit event payloads
func (m *AuditEventPayloads) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTokenDenied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessTokenIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationCodeDenied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationCodeIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBruteforceDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBruteforceUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClaimsGranted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientConsentsRevoked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentNotified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentRejected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentRevoked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerConsentsRevoked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcrCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDcrRejected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayPolicyAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayPolicyUnauthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayRequestAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayRequestUnauthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJitCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJitFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJitUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginAttempted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpNotSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpRejected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpRequested(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordConfirmed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordRejected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordRequested(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyUnauthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoolUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleGranted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleRevoked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlAssertionDenied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlAssertionIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemaUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopesGranted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptExecuted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskSucceeded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokensRevoked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAuthenticated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEventPayloads) validateAccessTokenDenied(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessTokenDenied) { // not required
		return nil
	}

	if m.AccessTokenDenied != nil {
		if err := m.AccessTokenDenied.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_token_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateAccessTokenIssued(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessTokenIssued) { // not required
		return nil
	}

	if m.AccessTokenIssued != nil {
		if err := m.AccessTokenIssued.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_token_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateAuthorizationCodeDenied(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationCodeDenied) { // not required
		return nil
	}

	if m.AuthorizationCodeDenied != nil {
		if err := m.AuthorizationCodeDenied.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_code_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_code_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateAuthorizationCodeIssued(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationCodeIssued) { // not required
		return nil
	}

	if m.AuthorizationCodeIssued != nil {
		if err := m.AuthorizationCodeIssued.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_code_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_code_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateBruteforceDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.BruteforceDeleted) { // not required
		return nil
	}

	if m.BruteforceDeleted != nil {
		if err := m.BruteforceDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bruteforce_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bruteforce_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateBruteforceUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.BruteforceUpdated) { // not required
		return nil
	}

	if m.BruteforceUpdated != nil {
		if err := m.BruteforceUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bruteforce_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bruteforce_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateClaimsGranted(formats strfmt.Registry) error {
	if swag.IsZero(m.ClaimsGranted) { // not required
		return nil
	}

	if m.ClaimsGranted != nil {
		if err := m.ClaimsGranted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("claims_granted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("claims_granted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateClientConsentsRevoked(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientConsentsRevoked) { // not required
		return nil
	}

	if m.ClientConsentsRevoked != nil {
		if err := m.ClientConsentsRevoked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_consents_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_consents_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateClientCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientCreated) { // not required
		return nil
	}

	if m.ClientCreated != nil {
		if err := m.ClientCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateClientDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientDeleted) { // not required
		return nil
	}

	if m.ClientDeleted != nil {
		if err := m.ClientDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateClientUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientUpdated) { // not required
		return nil
	}

	if m.ClientUpdated != nil {
		if err := m.ClientUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentAccepted(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentAccepted) { // not required
		return nil
	}

	if m.ConsentAccepted != nil {
		if err := m.ConsentAccepted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentCreated) { // not required
		return nil
	}

	if m.ConsentCreated != nil {
		if err := m.ConsentCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentNotified(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentNotified) { // not required
		return nil
	}

	if m.ConsentNotified != nil {
		if err := m.ConsentNotified.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_notified")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_notified")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentRejected(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentRejected) { // not required
		return nil
	}

	if m.ConsentRejected != nil {
		if err := m.ConsentRejected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentRevoked(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentRevoked) { // not required
		return nil
	}

	if m.ConsentRevoked != nil {
		if err := m.ConsentRevoked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentUpdated) { // not required
		return nil
	}

	if m.ConsentUpdated != nil {
		if err := m.ConsentUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateCredentialCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialCreated) { // not required
		return nil
	}

	if m.CredentialCreated != nil {
		if err := m.CredentialCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateCredentialUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialUpdated) { // not required
		return nil
	}

	if m.CredentialUpdated != nil {
		if err := m.CredentialUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateCustomerConsentsRevoked(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomerConsentsRevoked) { // not required
		return nil
	}

	if m.CustomerConsentsRevoked != nil {
		if err := m.CustomerConsentsRevoked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer_consents_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer_consents_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateDcrCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.DcrCreated) { // not required
		return nil
	}

	if m.DcrCreated != nil {
		if err := m.DcrCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dcr_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dcr_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateDcrRejected(formats strfmt.Registry) error {
	if swag.IsZero(m.DcrRejected) { // not required
		return nil
	}

	if m.DcrRejected != nil {
		if err := m.DcrRejected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dcr_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dcr_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateGatewayPolicyAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayPolicyAuthorized) { // not required
		return nil
	}

	if m.GatewayPolicyAuthorized != nil {
		if err := m.GatewayPolicyAuthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_policy_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_policy_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateGatewayPolicyUnauthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayPolicyUnauthorized) { // not required
		return nil
	}

	if m.GatewayPolicyUnauthorized != nil {
		if err := m.GatewayPolicyUnauthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_policy_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_policy_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateGatewayRequestAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayRequestAuthorized) { // not required
		return nil
	}

	if m.GatewayRequestAuthorized != nil {
		if err := m.GatewayRequestAuthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_request_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_request_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateGatewayRequestUnauthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayRequestUnauthorized) { // not required
		return nil
	}

	if m.GatewayRequestUnauthorized != nil {
		if err := m.GatewayRequestUnauthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_request_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_request_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateImportCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportCreated) { // not required
		return nil
	}

	if m.ImportCreated != nil {
		if err := m.ImportCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateImportFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportFailed) { // not required
		return nil
	}

	if m.ImportFailed != nil {
		if err := m.ImportFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateJitCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.JitCreated) { // not required
		return nil
	}

	if m.JitCreated != nil {
		if err := m.JitCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jit_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jit_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateJitFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.JitFailed) { // not required
		return nil
	}

	if m.JitFailed != nil {
		if err := m.JitFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jit_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jit_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateJitUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.JitUpdated) { // not required
		return nil
	}

	if m.JitUpdated != nil {
		if err := m.JitUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jit_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jit_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateLoginAccepted(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginAccepted) { // not required
		return nil
	}

	if m.LoginAccepted != nil {
		if err := m.LoginAccepted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateLoginAttempted(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginAttempted) { // not required
		return nil
	}

	if m.LoginAttempted != nil {
		if err := m.LoginAttempted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_attempted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_attempted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateLoginFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginFailed) { // not required
		return nil
	}

	if m.LoginFailed != nil {
		if err := m.LoginFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOrganizationCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationCreated) { // not required
		return nil
	}

	if m.OrganizationCreated != nil {
		if err := m.OrganizationCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOrganizationDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationDeleted) { // not required
		return nil
	}

	if m.OrganizationDeleted != nil {
		if err := m.OrganizationDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOrganizationUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationUpdated) { // not required
		return nil
	}

	if m.OrganizationUpdated != nil {
		if err := m.OrganizationUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOtpAccepted(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpAccepted) { // not required
		return nil
	}

	if m.OtpAccepted != nil {
		if err := m.OtpAccepted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOtpNotSent(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpNotSent) { // not required
		return nil
	}

	if m.OtpNotSent != nil {
		if err := m.OtpNotSent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_not_sent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_not_sent")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOtpRejected(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpRejected) { // not required
		return nil
	}

	if m.OtpRejected != nil {
		if err := m.OtpRejected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOtpRequested(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpRequested) { // not required
		return nil
	}

	if m.OtpRequested != nil {
		if err := m.OtpRequested.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_requested")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_requested")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOtpSent(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpSent) { // not required
		return nil
	}

	if m.OtpSent != nil {
		if err := m.OtpSent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_sent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_sent")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePasswordAccepted(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordAccepted) { // not required
		return nil
	}

	if m.PasswordAccepted != nil {
		if err := m.PasswordAccepted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePasswordConfirmed(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordConfirmed) { // not required
		return nil
	}

	if m.PasswordConfirmed != nil {
		if err := m.PasswordConfirmed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_confirmed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_confirmed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePasswordRejected(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordRejected) { // not required
		return nil
	}

	if m.PasswordRejected != nil {
		if err := m.PasswordRejected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePasswordRequested(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordRequested) { // not required
		return nil
	}

	if m.PasswordRequested != nil {
		if err := m.PasswordRequested.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_requested")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_requested")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePasswordUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordUpdated) { // not required
		return nil
	}

	if m.PasswordUpdated != nil {
		if err := m.PasswordUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePolicyAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyAuthorized) { // not required
		return nil
	}

	if m.PolicyAuthorized != nil {
		if err := m.PolicyAuthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePolicyUnauthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyUnauthorized) { // not required
		return nil
	}

	if m.PolicyUnauthorized != nil {
		if err := m.PolicyUnauthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePoolCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.PoolCreated) { // not required
		return nil
	}

	if m.PoolCreated != nil {
		if err := m.PoolCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePoolDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.PoolDeleted) { // not required
		return nil
	}

	if m.PoolDeleted != nil {
		if err := m.PoolDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePoolUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.PoolUpdated) { // not required
		return nil
	}

	if m.PoolUpdated != nil {
		if err := m.PoolUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateRoleGranted(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleGranted) { // not required
		return nil
	}

	if m.RoleGranted != nil {
		if err := m.RoleGranted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_granted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_granted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateRoleRevoked(formats strfmt.Registry) error {
	if swag.IsZero(m.RoleRevoked) { // not required
		return nil
	}

	if m.RoleRevoked != nil {
		if err := m.RoleRevoked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateSamlAssertionDenied(formats strfmt.Registry) error {
	if swag.IsZero(m.SamlAssertionDenied) { // not required
		return nil
	}

	if m.SamlAssertionDenied != nil {
		if err := m.SamlAssertionDenied.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml_assertion_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml_assertion_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateSamlAssertionIssued(formats strfmt.Registry) error {
	if swag.IsZero(m.SamlAssertionIssued) { // not required
		return nil
	}

	if m.SamlAssertionIssued != nil {
		if err := m.SamlAssertionIssued.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml_assertion_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml_assertion_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateSchemaCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaCreated) { // not required
		return nil
	}

	if m.SchemaCreated != nil {
		if err := m.SchemaCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateSchemaDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaDeleted) { // not required
		return nil
	}

	if m.SchemaDeleted != nil {
		if err := m.SchemaDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateSchemaUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.SchemaUpdated) { // not required
		return nil
	}

	if m.SchemaUpdated != nil {
		if err := m.SchemaUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateScopesGranted(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopesGranted) { // not required
		return nil
	}

	if m.ScopesGranted != nil {
		if err := m.ScopesGranted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scopes_granted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scopes_granted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateScriptExecuted(formats strfmt.Registry) error {
	if swag.IsZero(m.ScriptExecuted) { // not required
		return nil
	}

	if m.ScriptExecuted != nil {
		if err := m.ScriptExecuted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("script_executed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("script_executed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateServerCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerCreated) { // not required
		return nil
	}

	if m.ServerCreated != nil {
		if err := m.ServerCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateServerDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerDeleted) { // not required
		return nil
	}

	if m.ServerDeleted != nil {
		if err := m.ServerDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateServerUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.ServerUpdated) { // not required
		return nil
	}

	if m.ServerUpdated != nil {
		if err := m.ServerUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateServiceCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceCreated) { // not required
		return nil
	}

	if m.ServiceCreated != nil {
		if err := m.ServiceCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateServiceDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceDeleted) { // not required
		return nil
	}

	if m.ServiceDeleted != nil {
		if err := m.ServiceDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateServiceUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceUpdated) { // not required
		return nil
	}

	if m.ServiceUpdated != nil {
		if err := m.ServiceUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateTaskFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskFailed) { // not required
		return nil
	}

	if m.TaskFailed != nil {
		if err := m.TaskFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("task_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateTaskSucceeded(formats strfmt.Registry) error {
	if swag.IsZero(m.TaskSucceeded) { // not required
		return nil
	}

	if m.TaskSucceeded != nil {
		if err := m.TaskSucceeded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task_succeeded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("task_succeeded")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateTokensRevoked(formats strfmt.Registry) error {
	if swag.IsZero(m.TokensRevoked) { // not required
		return nil
	}

	if m.TokensRevoked != nil {
		if err := m.TokensRevoked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokens_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokens_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateUserAuthenticated(formats strfmt.Registry) error {
	if swag.IsZero(m.UserAuthenticated) { // not required
		return nil
	}

	if m.UserAuthenticated != nil {
		if err := m.UserAuthenticated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_authenticated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_authenticated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateUserCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.UserCreated) { // not required
		return nil
	}

	if m.UserCreated != nil {
		if err := m.UserCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateUserDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDeleted) { // not required
		return nil
	}

	if m.UserDeleted != nil {
		if err := m.UserDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateUserUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.UserUpdated) { // not required
		return nil
	}

	if m.UserUpdated != nil {
		if err := m.UserUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_updated")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this audit event payloads based on the context it is used
func (m *AuditEventPayloads) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessTokenDenied(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccessTokenIssued(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthorizationCodeDenied(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthorizationCodeIssued(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBruteforceDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBruteforceUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClaimsGranted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientConsentsRevoked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentAccepted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentNotified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentRejected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentRevoked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentialCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentialUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomerConsentsRevoked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDcrCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDcrRejected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayPolicyAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayPolicyUnauthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayRequestAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayRequestUnauthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJitCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJitFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJitUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginAccepted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginAttempted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizationCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizationDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizationUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtpAccepted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtpNotSent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtpRejected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtpRequested(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtpSent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordAccepted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordConfirmed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordRejected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordRequested(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyUnauthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoolCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoolDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoolUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleGranted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleRevoked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSamlAssertionDenied(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSamlAssertionIssued(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemaCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemaDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchemaUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopesGranted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScriptExecuted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServerUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaskSucceeded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokensRevoked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserAuthenticated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEventPayloads) contextValidateAccessTokenDenied(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessTokenDenied != nil {

		if swag.IsZero(m.AccessTokenDenied) { // not required
			return nil
		}

		if err := m.AccessTokenDenied.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_token_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateAccessTokenIssued(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessTokenIssued != nil {

		if swag.IsZero(m.AccessTokenIssued) { // not required
			return nil
		}

		if err := m.AccessTokenIssued.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_token_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateAuthorizationCodeDenied(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorizationCodeDenied != nil {

		if swag.IsZero(m.AuthorizationCodeDenied) { // not required
			return nil
		}

		if err := m.AuthorizationCodeDenied.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_code_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_code_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateAuthorizationCodeIssued(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorizationCodeIssued != nil {

		if swag.IsZero(m.AuthorizationCodeIssued) { // not required
			return nil
		}

		if err := m.AuthorizationCodeIssued.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_code_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_code_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateBruteforceDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.BruteforceDeleted != nil {

		if swag.IsZero(m.BruteforceDeleted) { // not required
			return nil
		}

		if err := m.BruteforceDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bruteforce_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bruteforce_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateBruteforceUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.BruteforceUpdated != nil {

		if swag.IsZero(m.BruteforceUpdated) { // not required
			return nil
		}

		if err := m.BruteforceUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bruteforce_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bruteforce_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateClaimsGranted(ctx context.Context, formats strfmt.Registry) error {

	if m.ClaimsGranted != nil {

		if swag.IsZero(m.ClaimsGranted) { // not required
			return nil
		}

		if err := m.ClaimsGranted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("claims_granted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("claims_granted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateClientConsentsRevoked(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientConsentsRevoked != nil {

		if swag.IsZero(m.ClientConsentsRevoked) { // not required
			return nil
		}

		if err := m.ClientConsentsRevoked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_consents_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_consents_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateClientCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientCreated != nil {

		if swag.IsZero(m.ClientCreated) { // not required
			return nil
		}

		if err := m.ClientCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateClientDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientDeleted != nil {

		if swag.IsZero(m.ClientDeleted) { // not required
			return nil
		}

		if err := m.ClientDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateClientUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientUpdated != nil {

		if swag.IsZero(m.ClientUpdated) { // not required
			return nil
		}

		if err := m.ClientUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentAccepted(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentAccepted != nil {

		if swag.IsZero(m.ConsentAccepted) { // not required
			return nil
		}

		if err := m.ConsentAccepted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentCreated != nil {

		if swag.IsZero(m.ConsentCreated) { // not required
			return nil
		}

		if err := m.ConsentCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentNotified(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentNotified != nil {

		if swag.IsZero(m.ConsentNotified) { // not required
			return nil
		}

		if err := m.ConsentNotified.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_notified")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_notified")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentRejected(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentRejected != nil {

		if swag.IsZero(m.ConsentRejected) { // not required
			return nil
		}

		if err := m.ConsentRejected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentRevoked(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentRevoked != nil {

		if swag.IsZero(m.ConsentRevoked) { // not required
			return nil
		}

		if err := m.ConsentRevoked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentUpdated != nil {

		if swag.IsZero(m.ConsentUpdated) { // not required
			return nil
		}

		if err := m.ConsentUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateCredentialCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.CredentialCreated != nil {

		if swag.IsZero(m.CredentialCreated) { // not required
			return nil
		}

		if err := m.CredentialCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateCredentialUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.CredentialUpdated != nil {

		if swag.IsZero(m.CredentialUpdated) { // not required
			return nil
		}

		if err := m.CredentialUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credential_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateCustomerConsentsRevoked(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomerConsentsRevoked != nil {

		if swag.IsZero(m.CustomerConsentsRevoked) { // not required
			return nil
		}

		if err := m.CustomerConsentsRevoked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customer_consents_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customer_consents_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateDcrCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.DcrCreated != nil {

		if swag.IsZero(m.DcrCreated) { // not required
			return nil
		}

		if err := m.DcrCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dcr_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dcr_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateDcrRejected(ctx context.Context, formats strfmt.Registry) error {

	if m.DcrRejected != nil {

		if swag.IsZero(m.DcrRejected) { // not required
			return nil
		}

		if err := m.DcrRejected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dcr_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dcr_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateGatewayPolicyAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayPolicyAuthorized != nil {

		if swag.IsZero(m.GatewayPolicyAuthorized) { // not required
			return nil
		}

		if err := m.GatewayPolicyAuthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_policy_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_policy_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateGatewayPolicyUnauthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayPolicyUnauthorized != nil {

		if swag.IsZero(m.GatewayPolicyUnauthorized) { // not required
			return nil
		}

		if err := m.GatewayPolicyUnauthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_policy_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_policy_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateGatewayRequestAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayRequestAuthorized != nil {

		if swag.IsZero(m.GatewayRequestAuthorized) { // not required
			return nil
		}

		if err := m.GatewayRequestAuthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_request_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_request_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateGatewayRequestUnauthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayRequestUnauthorized != nil {

		if swag.IsZero(m.GatewayRequestUnauthorized) { // not required
			return nil
		}

		if err := m.GatewayRequestUnauthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_request_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_request_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateImportCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportCreated != nil {

		if swag.IsZero(m.ImportCreated) { // not required
			return nil
		}

		if err := m.ImportCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateImportFailed(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportFailed != nil {

		if swag.IsZero(m.ImportFailed) { // not required
			return nil
		}

		if err := m.ImportFailed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("import_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("import_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateJitCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.JitCreated != nil {

		if swag.IsZero(m.JitCreated) { // not required
			return nil
		}

		if err := m.JitCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jit_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jit_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateJitFailed(ctx context.Context, formats strfmt.Registry) error {

	if m.JitFailed != nil {

		if swag.IsZero(m.JitFailed) { // not required
			return nil
		}

		if err := m.JitFailed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jit_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jit_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateJitUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.JitUpdated != nil {

		if swag.IsZero(m.JitUpdated) { // not required
			return nil
		}

		if err := m.JitUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jit_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jit_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateLoginAccepted(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginAccepted != nil {

		if swag.IsZero(m.LoginAccepted) { // not required
			return nil
		}

		if err := m.LoginAccepted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateLoginAttempted(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginAttempted != nil {

		if swag.IsZero(m.LoginAttempted) { // not required
			return nil
		}

		if err := m.LoginAttempted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_attempted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_attempted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateLoginFailed(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginFailed != nil {

		if swag.IsZero(m.LoginFailed) { // not required
			return nil
		}

		if err := m.LoginFailed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOrganizationCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.OrganizationCreated != nil {

		if swag.IsZero(m.OrganizationCreated) { // not required
			return nil
		}

		if err := m.OrganizationCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOrganizationDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.OrganizationDeleted != nil {

		if swag.IsZero(m.OrganizationDeleted) { // not required
			return nil
		}

		if err := m.OrganizationDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOrganizationUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.OrganizationUpdated != nil {

		if swag.IsZero(m.OrganizationUpdated) { // not required
			return nil
		}

		if err := m.OrganizationUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOtpAccepted(ctx context.Context, formats strfmt.Registry) error {

	if m.OtpAccepted != nil {

		if swag.IsZero(m.OtpAccepted) { // not required
			return nil
		}

		if err := m.OtpAccepted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOtpNotSent(ctx context.Context, formats strfmt.Registry) error {

	if m.OtpNotSent != nil {

		if swag.IsZero(m.OtpNotSent) { // not required
			return nil
		}

		if err := m.OtpNotSent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_not_sent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_not_sent")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOtpRejected(ctx context.Context, formats strfmt.Registry) error {

	if m.OtpRejected != nil {

		if swag.IsZero(m.OtpRejected) { // not required
			return nil
		}

		if err := m.OtpRejected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOtpRequested(ctx context.Context, formats strfmt.Registry) error {

	if m.OtpRequested != nil {

		if swag.IsZero(m.OtpRequested) { // not required
			return nil
		}

		if err := m.OtpRequested.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_requested")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_requested")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOtpSent(ctx context.Context, formats strfmt.Registry) error {

	if m.OtpSent != nil {

		if swag.IsZero(m.OtpSent) { // not required
			return nil
		}

		if err := m.OtpSent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_sent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_sent")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePasswordAccepted(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordAccepted != nil {

		if swag.IsZero(m.PasswordAccepted) { // not required
			return nil
		}

		if err := m.PasswordAccepted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePasswordConfirmed(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordConfirmed != nil {

		if swag.IsZero(m.PasswordConfirmed) { // not required
			return nil
		}

		if err := m.PasswordConfirmed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_confirmed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_confirmed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePasswordRejected(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordRejected != nil {

		if swag.IsZero(m.PasswordRejected) { // not required
			return nil
		}

		if err := m.PasswordRejected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePasswordRequested(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordRequested != nil {

		if swag.IsZero(m.PasswordRequested) { // not required
			return nil
		}

		if err := m.PasswordRequested.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_requested")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_requested")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePasswordUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordUpdated != nil {

		if swag.IsZero(m.PasswordUpdated) { // not required
			return nil
		}

		if err := m.PasswordUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("password_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePolicyAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyAuthorized != nil {

		if swag.IsZero(m.PolicyAuthorized) { // not required
			return nil
		}

		if err := m.PolicyAuthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePolicyUnauthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyUnauthorized != nil {

		if swag.IsZero(m.PolicyUnauthorized) { // not required
			return nil
		}

		if err := m.PolicyUnauthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePoolCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.PoolCreated != nil {

		if swag.IsZero(m.PoolCreated) { // not required
			return nil
		}

		if err := m.PoolCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePoolDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.PoolDeleted != nil {

		if swag.IsZero(m.PoolDeleted) { // not required
			return nil
		}

		if err := m.PoolDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePoolUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.PoolUpdated != nil {

		if swag.IsZero(m.PoolUpdated) { // not required
			return nil
		}

		if err := m.PoolUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateRoleGranted(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleGranted != nil {

		if swag.IsZero(m.RoleGranted) { // not required
			return nil
		}

		if err := m.RoleGranted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_granted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_granted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateRoleRevoked(ctx context.Context, formats strfmt.Registry) error {

	if m.RoleRevoked != nil {

		if swag.IsZero(m.RoleRevoked) { // not required
			return nil
		}

		if err := m.RoleRevoked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateSamlAssertionDenied(ctx context.Context, formats strfmt.Registry) error {

	if m.SamlAssertionDenied != nil {

		if swag.IsZero(m.SamlAssertionDenied) { // not required
			return nil
		}

		if err := m.SamlAssertionDenied.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml_assertion_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml_assertion_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateSamlAssertionIssued(ctx context.Context, formats strfmt.Registry) error {

	if m.SamlAssertionIssued != nil {

		if swag.IsZero(m.SamlAssertionIssued) { // not required
			return nil
		}

		if err := m.SamlAssertionIssued.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml_assertion_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml_assertion_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateSchemaCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.SchemaCreated != nil {

		if swag.IsZero(m.SchemaCreated) { // not required
			return nil
		}

		if err := m.SchemaCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateSchemaDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.SchemaDeleted != nil {

		if swag.IsZero(m.SchemaDeleted) { // not required
			return nil
		}

		if err := m.SchemaDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateSchemaUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.SchemaUpdated != nil {

		if swag.IsZero(m.SchemaUpdated) { // not required
			return nil
		}

		if err := m.SchemaUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateScopesGranted(ctx context.Context, formats strfmt.Registry) error {

	if m.ScopesGranted != nil {

		if swag.IsZero(m.ScopesGranted) { // not required
			return nil
		}

		if err := m.ScopesGranted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scopes_granted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scopes_granted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateScriptExecuted(ctx context.Context, formats strfmt.Registry) error {

	if m.ScriptExecuted != nil {

		if swag.IsZero(m.ScriptExecuted) { // not required
			return nil
		}

		if err := m.ScriptExecuted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("script_executed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("script_executed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateServerCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.ServerCreated != nil {

		if swag.IsZero(m.ServerCreated) { // not required
			return nil
		}

		if err := m.ServerCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateServerDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.ServerDeleted != nil {

		if swag.IsZero(m.ServerDeleted) { // not required
			return nil
		}

		if err := m.ServerDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateServerUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.ServerUpdated != nil {

		if swag.IsZero(m.ServerUpdated) { // not required
			return nil
		}

		if err := m.ServerUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("server_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("server_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateServiceCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceCreated != nil {

		if swag.IsZero(m.ServiceCreated) { // not required
			return nil
		}

		if err := m.ServiceCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateServiceDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceDeleted != nil {

		if swag.IsZero(m.ServiceDeleted) { // not required
			return nil
		}

		if err := m.ServiceDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateServiceUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceUpdated != nil {

		if swag.IsZero(m.ServiceUpdated) { // not required
			return nil
		}

		if err := m.ServiceUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateTaskFailed(ctx context.Context, formats strfmt.Registry) error {

	if m.TaskFailed != nil {

		if swag.IsZero(m.TaskFailed) { // not required
			return nil
		}

		if err := m.TaskFailed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("task_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateTaskSucceeded(ctx context.Context, formats strfmt.Registry) error {

	if m.TaskSucceeded != nil {

		if swag.IsZero(m.TaskSucceeded) { // not required
			return nil
		}

		if err := m.TaskSucceeded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task_succeeded")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("task_succeeded")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateTokensRevoked(ctx context.Context, formats strfmt.Registry) error {

	if m.TokensRevoked != nil {

		if swag.IsZero(m.TokensRevoked) { // not required
			return nil
		}

		if err := m.TokensRevoked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tokens_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tokens_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateUserAuthenticated(ctx context.Context, formats strfmt.Registry) error {

	if m.UserAuthenticated != nil {

		if swag.IsZero(m.UserAuthenticated) { // not required
			return nil
		}

		if err := m.UserAuthenticated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_authenticated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_authenticated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateUserCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.UserCreated != nil {

		if swag.IsZero(m.UserCreated) { // not required
			return nil
		}

		if err := m.UserCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateUserDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDeleted != nil {

		if swag.IsZero(m.UserDeleted) { // not required
			return nil
		}

		if err := m.UserDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateUserUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.UserUpdated != nil {

		if swag.IsZero(m.UserUpdated) { // not required
			return nil
		}

		if err := m.UserUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user_updated")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditEventPayloads) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditEventPayloads) UnmarshalBinary(b []byte) error {
	var res AuditEventPayloads
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
