// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditEventPayloads audit event payloads
//
// swagger:model AuditEventPayloads
type AuditEventPayloads struct {

	// access token denied
	AccessTokenDenied *RequestUnauthorizedPayload `json:"access_token_denied,omitempty"`

	// access token issued
	AccessTokenIssued *AccessRequestData `json:"access_token_issued,omitempty"`

	// authorization code denied
	AuthorizationCodeDenied *RequestUnauthorizedPayload `json:"authorization_code_denied,omitempty"`

	// authorization code issued
	AuthorizationCodeIssued *AccessRequestData `json:"authorization_code_issued,omitempty"`

	// client created
	ClientCreated *ClientAuditPayload `json:"client_created,omitempty"`

	// client deleted
	ClientDeleted *ClientAuditPayload `json:"client_deleted,omitempty"`

	// client updated
	ClientUpdated *ClientAuditPayload `json:"client_updated,omitempty"`

	// consent accepted
	ConsentAccepted *ConsentAuditEventPayload `json:"consent_accepted,omitempty"`

	// consent created
	ConsentCreated *ConsentAuditEventPayload `json:"consent_created,omitempty"`

	// consent rejected
	ConsentRejected *ConsentAuditEventPayload `json:"consent_rejected,omitempty"`

	// consent revoked
	ConsentRevoked *ConsentAuditEventPayload `json:"consent_revoked,omitempty"`

	// gateway policy authorized
	GatewayPolicyAuthorized *RequestValidatedPayload `json:"gateway_policy_authorized,omitempty"`

	// gateway policy unauthorized
	GatewayPolicyUnauthorized *RequestValidatedPayload `json:"gateway_policy_unauthorized,omitempty"`

	// gateway request authorized
	GatewayRequestAuthorized *RequestValidatedPayload `json:"gateway_request_authorized,omitempty"`

	// gateway request unauthorized
	GatewayRequestUnauthorized *RequestValidatedPayload `json:"gateway_request_unauthorized,omitempty"`

	// login accepted
	LoginAccepted *LoginPayload `json:"login_accepted,omitempty"`

	// login attempted
	LoginAttempted *LoginPayload `json:"login_attempted,omitempty"`

	// login failed
	LoginFailed *LoginFailedPayload `json:"login_failed,omitempty"`

	// otp not sent
	OtpNotSent *RecoveryPayload `json:"otp_not_sent,omitempty"`

	// otp sent
	OtpSent *RecoveryPayload `json:"otp_sent,omitempty"`

	// policy authorized
	PolicyAuthorized *PolicyEvaluatedPayload `json:"policy_authorized,omitempty"`

	// policy unauthorized
	PolicyUnauthorized *PolicyEvaluatedPayload `json:"policy_unauthorized,omitempty"`

	// recovery authorized
	RecoveryAuthorized *RecoveryPayload `json:"recovery_authorized,omitempty"`

	// recovery requested
	RecoveryRequested *RecoveryPayload `json:"recovery_requested,omitempty"`

	// recovery unauthorized
	RecoveryUnauthorized *RecoveryPayload `json:"recovery_unauthorized,omitempty"`

	// request authorized
	RequestAuthorized *RequestAuthorizedPayload `json:"request_authorized,omitempty"`

	// request unauthorized
	RequestUnauthorized *RequestUnauthorizedPayload `json:"request_unauthorized,omitempty"`

	// scopes granted payload
	ScopesGrantedPayload *ScopesGrantedPayload `json:"scopes_granted_payload,omitempty"`
}

// Validate validates this audit event payloads
func (m *AuditEventPayloads) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessTokenDenied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessTokenIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationCodeDenied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationCodeIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentRejected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentRevoked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayPolicyAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayPolicyUnauthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayRequestAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayRequestUnauthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginAttempted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoginFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpNotSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtpSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyUnauthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryRequested(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryUnauthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestAuthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestUnauthorized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopesGrantedPayload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEventPayloads) validateAccessTokenDenied(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessTokenDenied) { // not required
		return nil
	}

	if m.AccessTokenDenied != nil {
		if err := m.AccessTokenDenied.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_token_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateAccessTokenIssued(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessTokenIssued) { // not required
		return nil
	}

	if m.AccessTokenIssued != nil {
		if err := m.AccessTokenIssued.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_token_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateAuthorizationCodeDenied(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationCodeDenied) { // not required
		return nil
	}

	if m.AuthorizationCodeDenied != nil {
		if err := m.AuthorizationCodeDenied.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_code_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_code_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateAuthorizationCodeIssued(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationCodeIssued) { // not required
		return nil
	}

	if m.AuthorizationCodeIssued != nil {
		if err := m.AuthorizationCodeIssued.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_code_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_code_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateClientCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientCreated) { // not required
		return nil
	}

	if m.ClientCreated != nil {
		if err := m.ClientCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateClientDeleted(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientDeleted) { // not required
		return nil
	}

	if m.ClientDeleted != nil {
		if err := m.ClientDeleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateClientUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientUpdated) { // not required
		return nil
	}

	if m.ClientUpdated != nil {
		if err := m.ClientUpdated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentAccepted(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentAccepted) { // not required
		return nil
	}

	if m.ConsentAccepted != nil {
		if err := m.ConsentAccepted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentCreated) { // not required
		return nil
	}

	if m.ConsentCreated != nil {
		if err := m.ConsentCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentRejected(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentRejected) { // not required
		return nil
	}

	if m.ConsentRejected != nil {
		if err := m.ConsentRejected.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateConsentRevoked(formats strfmt.Registry) error {
	if swag.IsZero(m.ConsentRevoked) { // not required
		return nil
	}

	if m.ConsentRevoked != nil {
		if err := m.ConsentRevoked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateGatewayPolicyAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayPolicyAuthorized) { // not required
		return nil
	}

	if m.GatewayPolicyAuthorized != nil {
		if err := m.GatewayPolicyAuthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_policy_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_policy_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateGatewayPolicyUnauthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayPolicyUnauthorized) { // not required
		return nil
	}

	if m.GatewayPolicyUnauthorized != nil {
		if err := m.GatewayPolicyUnauthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_policy_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_policy_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateGatewayRequestAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayRequestAuthorized) { // not required
		return nil
	}

	if m.GatewayRequestAuthorized != nil {
		if err := m.GatewayRequestAuthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_request_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_request_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateGatewayRequestUnauthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayRequestUnauthorized) { // not required
		return nil
	}

	if m.GatewayRequestUnauthorized != nil {
		if err := m.GatewayRequestUnauthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_request_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_request_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateLoginAccepted(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginAccepted) { // not required
		return nil
	}

	if m.LoginAccepted != nil {
		if err := m.LoginAccepted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateLoginAttempted(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginAttempted) { // not required
		return nil
	}

	if m.LoginAttempted != nil {
		if err := m.LoginAttempted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_attempted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_attempted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateLoginFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.LoginFailed) { // not required
		return nil
	}

	if m.LoginFailed != nil {
		if err := m.LoginFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOtpNotSent(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpNotSent) { // not required
		return nil
	}

	if m.OtpNotSent != nil {
		if err := m.OtpNotSent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_not_sent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_not_sent")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateOtpSent(formats strfmt.Registry) error {
	if swag.IsZero(m.OtpSent) { // not required
		return nil
	}

	if m.OtpSent != nil {
		if err := m.OtpSent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_sent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_sent")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePolicyAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyAuthorized) { // not required
		return nil
	}

	if m.PolicyAuthorized != nil {
		if err := m.PolicyAuthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validatePolicyUnauthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyUnauthorized) { // not required
		return nil
	}

	if m.PolicyUnauthorized != nil {
		if err := m.PolicyUnauthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateRecoveryAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryAuthorized) { // not required
		return nil
	}

	if m.RecoveryAuthorized != nil {
		if err := m.RecoveryAuthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recovery_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recovery_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateRecoveryRequested(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryRequested) { // not required
		return nil
	}

	if m.RecoveryRequested != nil {
		if err := m.RecoveryRequested.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recovery_requested")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recovery_requested")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateRecoveryUnauthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryUnauthorized) { // not required
		return nil
	}

	if m.RecoveryUnauthorized != nil {
		if err := m.RecoveryUnauthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recovery_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recovery_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateRequestAuthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestAuthorized) { // not required
		return nil
	}

	if m.RequestAuthorized != nil {
		if err := m.RequestAuthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("request_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateRequestUnauthorized(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestUnauthorized) { // not required
		return nil
	}

	if m.RequestUnauthorized != nil {
		if err := m.RequestUnauthorized.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("request_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) validateScopesGrantedPayload(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopesGrantedPayload) { // not required
		return nil
	}

	if m.ScopesGrantedPayload != nil {
		if err := m.ScopesGrantedPayload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scopes_granted_payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scopes_granted_payload")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this audit event payloads based on the context it is used
func (m *AuditEventPayloads) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessTokenDenied(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccessTokenIssued(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthorizationCodeDenied(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthorizationCodeIssued(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentAccepted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentRejected(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConsentRevoked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayPolicyAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayPolicyUnauthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayRequestAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayRequestUnauthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginAccepted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginAttempted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoginFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtpNotSent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOtpSent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyUnauthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryRequested(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryUnauthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestAuthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestUnauthorized(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopesGrantedPayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditEventPayloads) contextValidateAccessTokenDenied(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessTokenDenied != nil {
		if err := m.AccessTokenDenied.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_token_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateAccessTokenIssued(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessTokenIssued != nil {
		if err := m.AccessTokenIssued.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("access_token_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("access_token_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateAuthorizationCodeDenied(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorizationCodeDenied != nil {
		if err := m.AuthorizationCodeDenied.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_code_denied")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_code_denied")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateAuthorizationCodeIssued(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorizationCodeIssued != nil {
		if err := m.AuthorizationCodeIssued.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_code_issued")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_code_issued")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateClientCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientCreated != nil {
		if err := m.ClientCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateClientDeleted(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientDeleted != nil {
		if err := m.ClientDeleted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_deleted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_deleted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateClientUpdated(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientUpdated != nil {
		if err := m.ClientUpdated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_updated")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_updated")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentAccepted(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentAccepted != nil {
		if err := m.ConsentAccepted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentCreated(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentCreated != nil {
		if err := m.ConsentCreated.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_created")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_created")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentRejected(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentRejected != nil {
		if err := m.ConsentRejected.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_rejected")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_rejected")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateConsentRevoked(ctx context.Context, formats strfmt.Registry) error {

	if m.ConsentRevoked != nil {
		if err := m.ConsentRevoked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("consent_revoked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("consent_revoked")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateGatewayPolicyAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayPolicyAuthorized != nil {
		if err := m.GatewayPolicyAuthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_policy_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_policy_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateGatewayPolicyUnauthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayPolicyUnauthorized != nil {
		if err := m.GatewayPolicyUnauthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_policy_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_policy_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateGatewayRequestAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayRequestAuthorized != nil {
		if err := m.GatewayRequestAuthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_request_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_request_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateGatewayRequestUnauthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayRequestUnauthorized != nil {
		if err := m.GatewayRequestUnauthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway_request_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gateway_request_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateLoginAccepted(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginAccepted != nil {
		if err := m.LoginAccepted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_accepted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_accepted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateLoginAttempted(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginAttempted != nil {
		if err := m.LoginAttempted.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_attempted")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_attempted")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateLoginFailed(ctx context.Context, formats strfmt.Registry) error {

	if m.LoginFailed != nil {
		if err := m.LoginFailed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("login_failed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("login_failed")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOtpNotSent(ctx context.Context, formats strfmt.Registry) error {

	if m.OtpNotSent != nil {
		if err := m.OtpNotSent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_not_sent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_not_sent")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateOtpSent(ctx context.Context, formats strfmt.Registry) error {

	if m.OtpSent != nil {
		if err := m.OtpSent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("otp_sent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("otp_sent")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePolicyAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyAuthorized != nil {
		if err := m.PolicyAuthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidatePolicyUnauthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyUnauthorized != nil {
		if err := m.PolicyUnauthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateRecoveryAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryAuthorized != nil {
		if err := m.RecoveryAuthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recovery_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recovery_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateRecoveryRequested(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryRequested != nil {
		if err := m.RecoveryRequested.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recovery_requested")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recovery_requested")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateRecoveryUnauthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryUnauthorized != nil {
		if err := m.RecoveryUnauthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recovery_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recovery_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateRequestAuthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.RequestAuthorized != nil {
		if err := m.RequestAuthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request_authorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("request_authorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateRequestUnauthorized(ctx context.Context, formats strfmt.Registry) error {

	if m.RequestUnauthorized != nil {
		if err := m.RequestUnauthorized.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("request_unauthorized")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("request_unauthorized")
			}
			return err
		}
	}

	return nil
}

func (m *AuditEventPayloads) contextValidateScopesGrantedPayload(ctx context.Context, formats strfmt.Registry) error {

	if m.ScopesGrantedPayload != nil {
		if err := m.ScopesGrantedPayload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scopes_granted_payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scopes_granted_payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditEventPayloads) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditEventPayloads) UnmarshalBinary(b []byte) error {
	var res AuditEventPayloads
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
