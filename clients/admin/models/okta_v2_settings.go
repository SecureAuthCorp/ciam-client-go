// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OktaV2Settings OktaV2 IDP specific settings
//
// swagger:model OktaV2Settings
type OktaV2Settings struct {

	// Client authentication method
	// Enum: ["client_secret","private_key_jwt","none"]
	AuthenticationMethod string `json:"authentication_method,omitempty" yaml:"authentication_method,omitempty"`

	// ID of a custom authorization server
	//
	// If the `use_org_authorization_server` parameter is set to `false`, use this field to specify
	// the ID of a custom authorization server.
	//
	// If not provided, the `default` value is used.
	AuthorizationServerID string `json:"authorization_server_id,omitempty" yaml:"authorization_server_id,omitempty"`

	// OAuth client application identifier
	// Example: client
	ClientID string `json:"client_id,omitempty" yaml:"client_id,omitempty"`

	// String represented domain of the Okta Authentication Service for your organization
	// Example: dev-316761.okta.com
	Domain string `json:"domain,omitempty" yaml:"domain,omitempty"`

	// If enabled, users' data is collected by calling the `userinfo` endpoint.
	GetUserInfo bool `json:"get_user_info,omitempty" yaml:"get_user_info,omitempty"`

	// An array of additional scopes your client requests
	// Example: ["email","profile","openid"]
	Scopes []string `json:"scopes" yaml:"scopes"`

	// Whether to send the identifier as a `login_hint` parameter to the IDP
	SendLoginHint bool `json:"send_login_hint,omitempty" yaml:"send_login_hint,omitempty"`

	// If set to `true`, the built-in authorization server is used
	UseOrgAuthorizationServer bool `json:"use_org_authorization_server,omitempty" yaml:"use_org_authorization_server,omitempty"`

	// Use PKCE
	UsePkce bool `json:"use_pkce,omitempty" yaml:"use_pkce,omitempty"`
}

// Validate validates this okta v2 settings
func (m *OktaV2Settings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oktaV2SettingsTypeAuthenticationMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret","private_key_jwt","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oktaV2SettingsTypeAuthenticationMethodPropEnum = append(oktaV2SettingsTypeAuthenticationMethodPropEnum, v)
	}
}

const (

	// OktaV2SettingsAuthenticationMethodClientSecret captures enum value "client_secret"
	OktaV2SettingsAuthenticationMethodClientSecret string = "client_secret"

	// OktaV2SettingsAuthenticationMethodPrivateKeyJwt captures enum value "private_key_jwt"
	OktaV2SettingsAuthenticationMethodPrivateKeyJwt string = "private_key_jwt"

	// OktaV2SettingsAuthenticationMethodNone captures enum value "none"
	OktaV2SettingsAuthenticationMethodNone string = "none"
)

// prop value enum
func (m *OktaV2Settings) validateAuthenticationMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oktaV2SettingsTypeAuthenticationMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OktaV2Settings) validateAuthenticationMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationMethodEnum("authentication_method", "body", m.AuthenticationMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this okta v2 settings based on context it is used
func (m *OktaV2Settings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OktaV2Settings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OktaV2Settings) UnmarshalBinary(b []byte) error {
	var res OktaV2Settings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
