// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Element An Element represents an XML element, its attributes, and its child tokens.
//
// swagger:model Element
type Element struct {

	// attr
	Attr []*Attr `json:"Attr" yaml:"Attr"`

	// child
	Child []*Token `json:"Child" yaml:"Child"`

	// space
	Space string `json:"Space,omitempty" yaml:"Space,omitempty"`
}

// Validate validates this element
func (m *Element) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChild(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Element) validateAttr(formats strfmt.Registry) error {
	if swag.IsZero(m.Attr) { // not required
		return nil
	}

	for i := 0; i < len(m.Attr); i++ {
		if swag.IsZero(m.Attr[i]) { // not required
			continue
		}

		if m.Attr[i] != nil {
			if err := m.Attr[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Attr" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Attr" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Element) validateChild(formats strfmt.Registry) error {
	if swag.IsZero(m.Child) { // not required
		return nil
	}

	for i := 0; i < len(m.Child); i++ {
		if swag.IsZero(m.Child[i]) { // not required
			continue
		}

		if m.Child[i] != nil {
			if err := m.Child[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Child" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Child" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this element based on the context it is used
func (m *Element) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Element) contextValidateAttr(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attr); i++ {

		if m.Attr[i] != nil {

			if swag.IsZero(m.Attr[i]) { // not required
				return nil
			}

			if err := m.Attr[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Attr" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Attr" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Element) contextValidateChild(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Child); i++ {

		if m.Child[i] != nil {

			if swag.IsZero(m.Child[i]) { // not required
				return nil
			}

			if err := m.Child[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Child" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Child" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Element) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Element) UnmarshalBinary(b []byte) error {
	var res Element
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
