// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LoginFailedPayload login failed payload
//
// swagger:model LoginFailedPayload
type LoginFailedPayload struct {

	// cause
	Cause string `json:"cause,omitempty" yaml:"cause,omitempty"`

	// details
	Details interface{} `json:"details,omitempty" yaml:"details,omitempty"`

	// error
	Error string `json:"error,omitempty" yaml:"error,omitempty"`

	// error description
	ErrorDescription string `json:"error_description,omitempty" yaml:"error_description,omitempty"`

	// error hint
	ErrorHint string `json:"error_hint,omitempty" yaml:"error_hint,omitempty"`

	// idp
	Idp *IDPPayload `json:"idp,omitempty" yaml:"idp,omitempty"`

	// status code
	StatusCode int64 `json:"status_code,omitempty" yaml:"status_code,omitempty"`
}

// Validate validates this login failed payload
func (m *LoginFailedPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoginFailedPayload) validateIdp(formats strfmt.Registry) error {
	if swag.IsZero(m.Idp) { // not required
		return nil
	}

	if m.Idp != nil {
		if err := m.Idp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("idp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this login failed payload based on the context it is used
func (m *LoginFailedPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LoginFailedPayload) contextValidateIdp(ctx context.Context, formats strfmt.Registry) error {

	if m.Idp != nil {

		if swag.IsZero(m.Idp) { // not required
			return nil
		}

		if err := m.Idp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("idp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LoginFailedPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LoginFailedPayload) UnmarshalBinary(b []byte) error {
	var res LoginFailedPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
