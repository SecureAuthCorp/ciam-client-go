// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleGrantAuditPayload role grant audit payload
//
// swagger:model RoleGrantAuditPayload
type RoleGrantAuditPayload struct {

	// resource
	Resource *RoleResource `json:"resource,omitempty" yaml:"resource,omitempty"`

	// role
	// Enum: [admin business_admin auditor manager user_manager member]
	Role string `json:"role,omitempty" yaml:"role,omitempty"`

	// subject
	Subject *RoleSubject `json:"subject,omitempty" yaml:"subject,omitempty"`
}

// Validate validates this role grant audit payload
func (m *RoleGrantAuditPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleGrantAuditPayload) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

var roleGrantAuditPayloadTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","business_admin","auditor","manager","user_manager","member"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleGrantAuditPayloadTypeRolePropEnum = append(roleGrantAuditPayloadTypeRolePropEnum, v)
	}
}

const (

	// RoleGrantAuditPayloadRoleAdmin captures enum value "admin"
	RoleGrantAuditPayloadRoleAdmin string = "admin"

	// RoleGrantAuditPayloadRoleBusinessAdmin captures enum value "business_admin"
	RoleGrantAuditPayloadRoleBusinessAdmin string = "business_admin"

	// RoleGrantAuditPayloadRoleAuditor captures enum value "auditor"
	RoleGrantAuditPayloadRoleAuditor string = "auditor"

	// RoleGrantAuditPayloadRoleManager captures enum value "manager"
	RoleGrantAuditPayloadRoleManager string = "manager"

	// RoleGrantAuditPayloadRoleUserManager captures enum value "user_manager"
	RoleGrantAuditPayloadRoleUserManager string = "user_manager"

	// RoleGrantAuditPayloadRoleMember captures enum value "member"
	RoleGrantAuditPayloadRoleMember string = "member"
)

// prop value enum
func (m *RoleGrantAuditPayload) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleGrantAuditPayloadTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleGrantAuditPayload) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *RoleGrantAuditPayload) validateSubject(formats strfmt.Registry) error {
	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this role grant audit payload based on the context it is used
func (m *RoleGrantAuditPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleGrantAuditPayload) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {

		if swag.IsZero(m.Resource) { // not required
			return nil
		}

		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

func (m *RoleGrantAuditPayload) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if m.Subject != nil {

		if swag.IsZero(m.Subject) { // not required
			return nil
		}

		if err := m.Subject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleGrantAuditPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleGrantAuditPayload) UnmarshalBinary(b []byte) error {
	var res RoleGrantAuditPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
