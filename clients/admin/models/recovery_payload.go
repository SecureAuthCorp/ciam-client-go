// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecoveryPayload recovery audit event
//
// swagger:model RecoveryPayload
type RecoveryPayload struct {

	// Recovery address for a given mechanism, the format depends on selected mechanism.
	// For SMS mechanism, it's a telephone number, for email, it's an email address.
	Address string `json:"address,omitempty"`

	// Selected recovery mechanism.
	// Enum: [sms email]
	Mechanism string `json:"mechanism,omitempty"`
}

// Validate validates this recovery payload
func (m *RecoveryPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMechanism(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recoveryPayloadTypeMechanismPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sms","email"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recoveryPayloadTypeMechanismPropEnum = append(recoveryPayloadTypeMechanismPropEnum, v)
	}
}

const (

	// RecoveryPayloadMechanismSms captures enum value "sms"
	RecoveryPayloadMechanismSms string = "sms"

	// RecoveryPayloadMechanismEmail captures enum value "email"
	RecoveryPayloadMechanismEmail string = "email"
)

// prop value enum
func (m *RecoveryPayload) validateMechanismEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recoveryPayloadTypeMechanismPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecoveryPayload) validateMechanism(formats strfmt.Registry) error {
	if swag.IsZero(m.Mechanism) { // not required
		return nil
	}

	// value enum
	if err := m.validateMechanismEnum("mechanism", "body", m.Mechanism); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recovery payload based on context it is used
func (m *RecoveryPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecoveryPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoveryPayload) UnmarshalBinary(b []byte) error {
	var res RecoveryPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
