// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Environment environment
//
// swagger:model Environment
type Environment struct {

	// add fake tenantUrl to query params for routing other than default (needed for backward compatibility with CIP for vanity domains)
	AddFakeTenantURLToLoginRequestForNonDefaultRouting bool `json:"add_fake_tenant_url_to_login_request_for_non_default_routing,omitempty"`

	// enable admin portal face lifting
	AdminPortalFaceLifting bool `json:"admin_portal_face_lifting,omitempty"`

	// enable admin workspace access (tenant)
	AdminWorkspaceAccess bool `json:"admin_workspace_access,omitempty"`

	// audit events duration
	// Format: duration
	AuditEventsDuration strfmt.Duration `json:"audit_events_duration,omitempty"`

	// block access to tenant for traffic not originated from the vanity domain
	BlockNonVanityDomainAccess bool `json:"block_non_vanity_domain_access,omitempty"`

	// brute force limits
	BruteForceLimits *DefaultBruteForceLimits `json:"brute_force_limits,omitempty"`

	// cache access tokens
	CacheAccessTokens bool `json:"cache_access_tokens,omitempty"`

	// enable Arrangement cache for CDR
	CdrArrangementCache bool `json:"cdr_arrangement_cache,omitempty"`

	// disable unique software id for CDR
	CdrDisableUniqueSoftwareID bool `json:"cdr_disable_unique_software_id,omitempty"`

	// enable follower reads for CDR
	CdrFollowerReads bool `json:"cdr_follower_reads,omitempty"`

	// enable ciba (system)
	Ciba bool `json:"ciba,omitempty"`

	// store client secrets as a one way hash (tenant)
	ClientSecretsStoredAsOneWayHash bool `json:"client_secrets_stored_as_one_way_hash,omitempty"`

	// enable Cloudentity IDP (tenant)
	CloudentityIdp bool `json:"cloudentity_idp,omitempty"`

	// commit
	Commit string `json:"commit,omitempty"`

	// enable ConnectID profile
	ConnectID bool `json:"connect_id,omitempty"`

	// enable additional debug logs
	Debug bool `json:"debug,omitempty"`

	// enable usage of dedicated faas rego/js environment (MANUAL DEPLOYMENT OF DEDICATED ENVS IS REQUIRED FIRST)
	DedicatedFaas bool `json:"dedicated_faas,omitempty"`

	// enable demo app endpoints (system)
	DemoApp bool `json:"demo_app,omitempty"`

	// reloads templates and adds local redirects urls to frontend apps (system)
	DevMode bool `json:"dev_mode,omitempty"`

	// disable audit events
	DisableAuditEvents bool `json:"disable_audit_events,omitempty"`

	// display workspace wizard
	DisplayWorkspaceWizard bool `json:"display_workspace_wizard,omitempty"`

	// do not validate cert for private key jwt
	DoNotValidateCertForPrivateKeyJwt bool `json:"do_not_validate_cert_for_private_key_jwt,omitempty"`

	// drop tokens on password reset
	DropTokensOnPasswordReset bool `json:"drop_tokens_on_password_reset,omitempty"`

	// extended audit events retention
	ExtendedAuditEventsRetention bool `json:"extended_audit_events_retention,omitempty"`

	// enable Dynamic Client Registration for FDX
	FdxDcr bool `json:"fdx_dcr,omitempty"`

	// grpc url
	GrpcURL string `json:"grpc_url,omitempty"`

	// identifier-based discovery
	IdentifierBasedDiscovery bool `json:"identifier_based_discovery,omitempty"`

	// enable case insensitive for users identifiers and addresses
	IdentifierCaseInsensitive bool `json:"identifier_case_insensitive,omitempty"`

	// when enabled and the display_workspace_wizard feature flag is set to true, a demo workspace with a set of preconfigured IDPs is created and no welcome screen is displayed (tenant)
	InitializeDemoWorkspace bool `json:"initialize_demo_workspace,omitempty"`

	// INSECURE disable csrf (tenant)
	InsecureDisableCsrf bool `json:"insecure_disable_csrf,omitempty"`

	// enable insecure token exchange public clients (tenant)
	InsecureTokenExchangePublicClients bool `json:"insecure_token_exchange_public_clients,omitempty"`

	// enable global import and export configuration endpoints (system)
	IntegrationEndpoints bool `json:"integration_endpoints,omitempty"`

	// Just in time provisioning (JIT)
	Jit bool `json:"jit,omitempty"`

	// enable login with select_account param (tenant)
	LoginWithSelectAccount bool `json:"login_with_select_account,omitempty"`

	// make admin APIs open
	OpenAdminApis bool `json:"open_admin_apis,omitempty"`

	// enable openbanking ksa workspace and security profile
	OpenbankingKsa bool `json:"openbanking_ksa,omitempty"`

	// enable organizations
	Organizations bool `json:"organizations,omitempty"`

	// enable permissions
	Permissions bool `json:"permissions,omitempty"`

	// enable planet scale authorization
	PlanetScaleAuthorization bool `json:"planet_scale_authorization,omitempty"`

	// enable when ACP is running on-prem and Pyron is used as a gateway (tenant)
	PyronOnPrem bool `json:"pyron_on_prem,omitempty"`

	// enable quick access functionality on UI (system)
	QuickAccess bool `json:"quick_access,omitempty"`

	// enable roles
	Roles bool `json:"roles,omitempty"`

	// enable scope transient_otp (tenant)
	ScopeTransientOtp bool `json:"scope_transient_otp,omitempty"`

	// script runtimes
	ScriptRuntimes []*ScriptRuntime `json:"script_runtimes"`

	// enable the javascript transformer (tenant)
	ScriptTransformer bool `json:"script_transformer,omitempty"`

	// enable Single Sign-On (SSO) in workspaces
	SingleSignOn bool `json:"single_sign_on,omitempty"`

	// enable swagger ui (system)
	SwaggerUI bool `json:"swagger_ui,omitempty"`

	// system flags
	SystemFlags []string `json:"system_flags"`

	// enable system workspace access (tenant)
	SystemWorkspaceAccess bool `json:"system_workspace_access,omitempty"`

	// tenant flags
	TenantFlags []string `json:"tenant_flags"`

	// enable themed messages
	ThemedMessages bool `json:"themed_messages,omitempty"`

	// enable hierarchical dumps system APIs (system)
	TreeDump bool `json:"tree_dump,omitempty"`

	// enable hierarchical dumps tenant APIs
	TreeDumpTenant bool `json:"tree_dump_tenant,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// enable webauthn
	Webauthn bool `json:"webauthn,omitempty"`

	// with analytics
	WithAnalytics bool `json:"with_analytics,omitempty"`

	// with permissions
	WithPermissions bool `json:"with_permissions,omitempty"`

	// with roles
	WithRoles bool `json:"with_roles,omitempty"`
}

// Validate validates this environment
func (m *Environment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditEventsDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBruteForceLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptRuntimes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Environment) validateAuditEventsDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditEventsDuration) { // not required
		return nil
	}

	if err := validate.FormatOf("audit_events_duration", "body", "duration", m.AuditEventsDuration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Environment) validateBruteForceLimits(formats strfmt.Registry) error {
	if swag.IsZero(m.BruteForceLimits) { // not required
		return nil
	}

	if m.BruteForceLimits != nil {
		if err := m.BruteForceLimits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brute_force_limits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brute_force_limits")
			}
			return err
		}
	}

	return nil
}

func (m *Environment) validateScriptRuntimes(formats strfmt.Registry) error {
	if swag.IsZero(m.ScriptRuntimes) { // not required
		return nil
	}

	for i := 0; i < len(m.ScriptRuntimes); i++ {
		if swag.IsZero(m.ScriptRuntimes[i]) { // not required
			continue
		}

		if m.ScriptRuntimes[i] != nil {
			if err := m.ScriptRuntimes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("script_runtimes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("script_runtimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this environment based on the context it is used
func (m *Environment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBruteForceLimits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScriptRuntimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Environment) contextValidateBruteForceLimits(ctx context.Context, formats strfmt.Registry) error {

	if m.BruteForceLimits != nil {

		if swag.IsZero(m.BruteForceLimits) { // not required
			return nil
		}

		if err := m.BruteForceLimits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("brute_force_limits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("brute_force_limits")
			}
			return err
		}
	}

	return nil
}

func (m *Environment) contextValidateScriptRuntimes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScriptRuntimes); i++ {

		if m.ScriptRuntimes[i] != nil {

			if swag.IsZero(m.ScriptRuntimes[i]) { // not required
				return nil
			}

			if err := m.ScriptRuntimes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("script_runtimes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("script_runtimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Environment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Environment) UnmarshalBinary(b []byte) error {
	var res Environment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
