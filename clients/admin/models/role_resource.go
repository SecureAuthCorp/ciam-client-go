// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleResource role resource
//
// swagger:model RoleResource
type RoleResource struct {

	// identity pool id
	IdentityPoolID string `json:"identity_pool_id,omitempty" yaml:"identity_pool_id,omitempty"`

	// role
	// Enum: [admin business_admin auditor manager user_manager member]
	Role string `json:"role,omitempty" yaml:"role,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty"`

	// type
	// Enum: [tenant workspace identity_pool]
	Type string `json:"type,omitempty" yaml:"type,omitempty"`

	// workspace id
	WorkspaceID string `json:"workspace_id,omitempty" yaml:"workspace_id,omitempty"`
}

// Validate validates this role resource
func (m *RoleResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var roleResourceTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","business_admin","auditor","manager","user_manager","member"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleResourceTypeRolePropEnum = append(roleResourceTypeRolePropEnum, v)
	}
}

const (

	// RoleResourceRoleAdmin captures enum value "admin"
	RoleResourceRoleAdmin string = "admin"

	// RoleResourceRoleBusinessAdmin captures enum value "business_admin"
	RoleResourceRoleBusinessAdmin string = "business_admin"

	// RoleResourceRoleAuditor captures enum value "auditor"
	RoleResourceRoleAuditor string = "auditor"

	// RoleResourceRoleManager captures enum value "manager"
	RoleResourceRoleManager string = "manager"

	// RoleResourceRoleUserManager captures enum value "user_manager"
	RoleResourceRoleUserManager string = "user_manager"

	// RoleResourceRoleMember captures enum value "member"
	RoleResourceRoleMember string = "member"
)

// prop value enum
func (m *RoleResource) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleResourceTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleResource) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

var roleResourceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tenant","workspace","identity_pool"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roleResourceTypeTypePropEnum = append(roleResourceTypeTypePropEnum, v)
	}
}

const (

	// RoleResourceTypeTenant captures enum value "tenant"
	RoleResourceTypeTenant string = "tenant"

	// RoleResourceTypeWorkspace captures enum value "workspace"
	RoleResourceTypeWorkspace string = "workspace"

	// RoleResourceTypeIdentityPool captures enum value "identity_pool"
	RoleResourceTypeIdentityPool string = "identity_pool"
)

// prop value enum
func (m *RoleResource) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, roleResourceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RoleResource) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this role resource based on context it is used
func (m *RoleResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RoleResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleResource) UnmarshalBinary(b []byte) error {
	var res RoleResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
