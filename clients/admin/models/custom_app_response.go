// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomAppResponse CustomApp object on list or get
//
// swagger:model CustomAppResponse
type CustomAppResponse struct {

	// client
	Client *ClientAdminResponse `json:"client,omitempty" yaml:"client,omitempty"`

	// ClientID used for the CustomApp
	ClientID string `json:"client_id,omitempty" yaml:"client_id,omitempty"`

	// ID of the CustomApp
	// Required: true
	ID string `json:"id" yaml:"id"`

	// Name of the CustomApp
	Name string `json:"name,omitempty" yaml:"name,omitempty"`

	// ID of the server
	// Required: true
	ServerID string `json:"server_id" yaml:"server_id"`

	// ID of the tenant
	// Example: default
	// Required: true
	TenantID string `json:"tenant_id" yaml:"tenant_id"`

	// Type of the custom app
	// Example: post-authn
	// Enum: [post-authn]
	Type string `json:"type,omitempty" yaml:"type,omitempty"`

	// url of the CustomApp
	// Required: true
	URL string `json:"url" yaml:"url"`
}

// Validate validates this custom app response
func (m *CustomAppResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomAppResponse) validateClient(formats strfmt.Registry) error {
	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *CustomAppResponse) validateID(formats strfmt.Registry) error {

	if err := validate.RequiredString("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CustomAppResponse) validateServerID(formats strfmt.Registry) error {

	if err := validate.RequiredString("server_id", "body", m.ServerID); err != nil {
		return err
	}

	return nil
}

func (m *CustomAppResponse) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

var customAppResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["post-authn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customAppResponseTypeTypePropEnum = append(customAppResponseTypeTypePropEnum, v)
	}
}

const (

	// CustomAppResponseTypePostDashAuthn captures enum value "post-authn"
	CustomAppResponseTypePostDashAuthn string = "post-authn"
)

// prop value enum
func (m *CustomAppResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customAppResponseTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomAppResponse) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CustomAppResponse) validateURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this custom app response based on the context it is used
func (m *CustomAppResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomAppResponse) contextValidateClient(ctx context.Context, formats strfmt.Registry) error {

	if m.Client != nil {

		if swag.IsZero(m.Client) { // not required
			return nil
		}

		if err := m.Client.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomAppResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomAppResponse) UnmarshalBinary(b []byte) error {
	var res CustomAppResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
