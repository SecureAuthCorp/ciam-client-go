// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BruteForcePayload BruteForcePayload brute force payload
//
// swagger:model BruteForcePayload
type BruteForcePayload struct {

	// block duration
	// Example: 1m0s
	// Required: true
	// Format: duration
	BlockDuration strfmt.Duration `json:"block_duration"`

	// Max number of attempts
	// Example: 5
	// Required: true
	MaxAttempts int64 `json:"max_attempts"`

	// protected type
	// Required: true
	ProtectedType *ProtectedType `json:"protected_type"`

	// tenant ID
	// Example: default
	// Required: true
	TenantID string `json:"tenant_id"`
}

// Validate validates this brute force payload
func (m *BruteForcePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectedType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BruteForcePayload) validateBlockDuration(formats strfmt.Registry) error {

	if err := validate.Required("block_duration", "body", strfmt.Duration(m.BlockDuration)); err != nil {
		return err
	}

	if err := validate.FormatOf("block_duration", "body", "duration", m.BlockDuration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BruteForcePayload) validateMaxAttempts(formats strfmt.Registry) error {

	if err := validate.Required("max_attempts", "body", int64(m.MaxAttempts)); err != nil {
		return err
	}

	return nil
}

func (m *BruteForcePayload) validateProtectedType(formats strfmt.Registry) error {

	if err := validate.Required("protected_type", "body", m.ProtectedType); err != nil {
		return err
	}

	if err := validate.Required("protected_type", "body", m.ProtectedType); err != nil {
		return err
	}

	if m.ProtectedType != nil {
		if err := m.ProtectedType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protected_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protected_type")
			}
			return err
		}
	}

	return nil
}

func (m *BruteForcePayload) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this brute force payload based on the context it is used
func (m *BruteForcePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProtectedType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BruteForcePayload) contextValidateProtectedType(ctx context.Context, formats strfmt.Registry) error {

	if m.ProtectedType != nil {

		if err := m.ProtectedType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protected_type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("protected_type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BruteForcePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BruteForcePayload) UnmarshalBinary(b []byte) error {
	var res BruteForcePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
