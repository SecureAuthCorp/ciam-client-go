// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Client Defines a client application and its properties.
//
// swagger:model Client
type Client struct {

	// The client application type.
	//
	// Client applications can be either of a `web` or `native` types.
	//
	// Web applications include clients like server web applications or service apps.
	//
	// Native applications include single-page applications (SPAs) and mobile or desktop
	// applications.
	//
	// Apply security measures according to the type of your application.
	// Example: web
	ApplicationType string `json:"application_type,omitempty"`

	// An array of dynamically calculated application types that can be used for filtering
	// Example: ["single_page","server_web","mobile_desktop","service","legacy","dcr"]
	// Read Only: true
	ApplicationTypes []string `json:"application_types"`

	// Identity of the intended recipients (the audience).
	//
	// Typically, the audience is a single resource server or a list of resource servers.
	//
	// It is considered a good practice to limit the audience of the token for security purposes.
	Audience []string `json:"audience"`

	// Authorization details types
	//
	// Indicates what authorization details types the client can use.
	AuthorizationDetailsTypes []AuthorizationDetailType `json:"authorization_details_types"`

	// Algorithm used for encrypting authorization responses.
	//
	// If both signing and encryption are requested, the response is first signed, and then encrypted.
	// As a result, a Nested JWT is obtained, as defined in JWT [RFC7519].
	//
	// If omitted, no encryption is applied by default.
	// Example: RSA-OAEP-256
	// Enum: [RSA-OAEP RSA-OAEP-256]
	AuthorizationEncryptedResponseAlg string `json:"authorization_encrypted_response_alg,omitempty"`

	// Algorithm used for encrypting authorization responses.
	//
	// With `authorization_encrypted_response_alg` specified, the default value is `A128CBC-HS256`.
	// When `authorization_encrypted_response_enc` is included, `authorization_encrypted_response_alg`
	// MUST also be provided in a request.
	// Example: A128CBC-HS256
	// Enum: [A256GCM A128CBC-HS256]
	AuthorizationEncryptedResponseEnc string `json:"authorization_encrypted_response_enc,omitempty"`

	// An authorization server (workspace) identifier holding the client application.
	// Example: default
	// Required: true
	AuthorizationServerID string `json:"authorization_server_id"`

	// Algorithm used for signing authorization responses.
	//
	// With this parameter specified, the response is signed using JWS and according to the configured algorithm.
	//
	// `none` isn't allowed.
	// Example: RS256
	AuthorizationSignedResponseAlg string `json:"authorization_signed_response_alg,omitempty"`

	// OPTIONAL. The JWS alg algorithm value used by the client application to sign authentication requests.
	//
	// When omitted, the client application doesn't send signed authentication requests.
	BackchannelAuthenticationRequestSigningAlg string `json:"backchannel_authentication_request_signing_alg,omitempty"`

	// REQUIRED for requests when the client application uses CIBA as an authorization grant type, and the token
	// delivery mode is set to `ping` or `push`.
	//
	// This parameter is the endpoint where an OP (OpenID Provider) posts a notification after end-user authentication.
	//
	// Input: an HTTPS URL.
	BackchannelClientNotificationEndpoint string `json:"backchannel_client_notification_endpoint,omitempty"`

	// REQUIRED for requests when the client application uses CIBA as an authorization grant type.
	//
	// Input: `poll`, `ping`, or `push`.
	BackchannelTokenDeliveryMode string `json:"backchannel_token_delivery_mode,omitempty"`

	// OPTIONAL. A boolean value indicating the `user_code` parameter support by the client application.
	//
	// If omitted, the default value is `false`.
	//
	// This applies only when the `backchannel_user_code_parameter_supported` OP parameter is `true`.
	BackchannelUserCodeParameter bool `json:"backchannel_user_code_parameter,omitempty"`

	// OAuth client application identifier
	//
	// If not provided, a random client ID is generated.
	ClientID string `json:"client_id,omitempty"`

	// The client identifier time of issue.
	//
	// The value is the number of seconds between 1970-01-01T00:00:00Z (UTC) and the date/time of issue.
	ClientIDIssuedAt int64 `json:"client_id_issued_at,omitempty"`

	// Human-readable name of a client application.
	// Example: My app
	ClientName string `json:"client_name,omitempty"`

	// OAuth client secret
	//
	// If not provided, a random client secret is generated.
	// Min Length: 32
	ClientSecret string `json:"client_secret,omitempty"`

	// The client secret expiration time.
	//
	// If the client secret does not expire, `client_secret_expires_at` = `0`.
	ClientSecretExpiresAt int64 `json:"client_secret_expires_at,omitempty"`

	// Defines whether the client application is active or not.
	//
	// Only clients with the `Active` status can preform authorization, authentication, and PAR requests.
	// Enum: [active inactive]
	ClientStatus string `json:"client_status,omitempty"`

	// client type
	// Enum: [oauth2 saml]
	ClientType string `json:"client_type,omitempty"`

	// URI of a client application.
	ClientURI string `json:"client_uri,omitempty"`

	// confirmation
	Confirmation *Confirmation `json:"confirmation,omitempty"`

	// Date when the client application was created.
	// Example: 2022-04-07T19:17:31.323187Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Description of the client application.
	Description string `json:"description,omitempty"`

	// Optional developer owner of the client application.
	DeveloperID string `json:"developer_id,omitempty"`

	// developer metadata
	DeveloperMetadata Metadata `json:"developer_metadata,omitempty"`

	// Boolean value specifying whether the client always uses DPoP for token requests
	// If true, the authorization server will reject token requests from this client that do not contain the DPoP header.
	DpopBoundAccessTokens bool `json:"dpop_bound_access_tokens,omitempty"`

	// dynamically registered
	DynamicallyRegistered bool `json:"dynamically_registered,omitempty"`

	// fdx
	Fdx *FDXMetadata `json:"fdx,omitempty"`

	// An array of allowed OAuth client grant types.
	//
	// The `grantTypes` array stores OAuth flows that are allowed for a given client application.
	//
	// [Read more](https://cloudentity.com/developers/basics/oauth-grant-types/grant-types-overview/) about grant types.
	// Example: ["password","refresh_token","client_credentials","implicit","authorization_code"]
	GrantTypes []string `json:"grant_types"`

	// An array of hashed rotated client secrets
	HashedRotatedSecrets []string `json:"hashed_rotated_secrets"`

	// Hashed client secret
	//
	// Hashing client secrets provides additional security for your secrets storage as it hides
	// plaintext secrets from being viewed both in the UI and the database.
	HashedSecret string `json:"hashed_secret,omitempty"`

	// JWE alg algorithm for encrypting the ID token issued to this client application.
	// Enum: [RSA-OAEP RSA-OAEP-256]
	IDTokenEncryptedResponseAlg string `json:"id_token_encrypted_response_alg,omitempty"`

	// JWE enc algorithm for encrypting the ID token issued to this client application.
	// Enum: [A256GCM A128CBC-HS256]
	IDTokenEncryptedResponseEnc string `json:"id_token_encrypted_response_enc,omitempty"`

	// Algorithm for signing ID tokens issued for a client application.
	//
	// The default value depends on authorization server configuration.
	// Example: ES256
	// Enum: [RS256 ES256 PS256]
	IDTokenSignedResponseAlg string `json:"id_token_signed_response_alg,omitempty"`

	// An introspection endpoint authentication method configured for the client application (read-only).
	//
	// If empty, the `token_endpoint_auth_method` is used.
	//
	// Cloudentity supports the following client authentication methods:
	// `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
	// `self_signed_tls_client_auth`, `tls_client_auth`, `none`.
	//
	// [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
	// Example: client_secret_basic
	// Enum: [client_secret_basic client_secret_post client_secret_jwt private_key_jwt self_signed_tls_client_auth tls_client_auth none]
	IntrospectionEndpointAuthMethod string `json:"introspection_endpoint_auth_method,omitempty"`

	// jwks
	Jwks *ClientJWKs `json:"jwks,omitempty"`

	// A URL of JSON Web Key Set with the public keys used by a client application to authenticate to Cloudentity.
	JwksURI string `json:"jwks_uri,omitempty"`

	// Logo URI.
	LogoURI string `json:"logo_uri,omitempty"`

	// metadata
	Metadata Metadata `json:"metadata,omitempty"`

	// obbr
	Obbr *OBBRMetadata `json:"obbr,omitempty"`

	// External organization identifier. It is a unique string assigned by the CDR Register to identify an Accredited
	// Data Recipient Brand.
	//
	// The value obtained is used as the `aud` claim for message signing, for example, when a JSON Web Token (JWT) is
	// required for authorization, and represents the audience(s) the JWT is intended for.
	// Example: 5647fe90-f6bc-11eb-9a03-0242ac130003
	OrganisationID string `json:"organisation_id,omitempty"`

	// Policy URL to read about how the profile data is used.
	PolicyURI string `json:"policy_uri,omitempty"`

	// Array of URLs to which a relying party may request that the user be redirected after a logout has been performed.
	PostLogoutRedirectUris []string `json:"post_logout_redirect_uris"`

	// privacy
	Privacy *ClientPrivacy `json:"privacy,omitempty"`

	// redirect uris
	RedirectUris RedirectURIs `json:"redirect_uris,omitempty"`

	// registration token
	RegistrationToken *RegistrationToken `json:"registration_token,omitempty"`

	// Optional JWE alg algorithm the client is declaring that it may use for encrypting Request Objects
	// Example: RSA-OAEP
	// Enum: [RSA-OAEP RSA-OAEP-256]
	RequestObjectEncryptionAlg string `json:"request_object_encryption_alg,omitempty"`

	// Optional JWE enc algorithm the client is declaring that it may use for encrypting Request Objects
	// When `request_object_encryption_enc` is included, `request_object_encryption_alg` MUST also be provided.
	// Example: A256GCM
	// Enum: [A256GCM A128CBC-HS256]
	RequestObjectEncryptionEnc string `json:"request_object_encryption_enc,omitempty"`

	// Request object signing algorithm for the token endpoint
	//
	// Cloudentity supports signing tokens with the RS256, ES256, and PS256 algorithms. If you do not want
	// to use a signing algorithm, set the value of this parameter to `none`.
	// Example: none
	// Enum: [any none RS256 ES256 PS256]
	RequestObjectSigningAlg string `json:"request_object_signing_alg,omitempty"`

	// Array of absolute URIs that points to the Request Object that holds authorization request parameters.
	RequestUris []string `json:"request_uris"`

	// Boolean parameter indicating whether the only means of initiating an authorization request the client is allowed to use is PAR.
	RequirePushedAuthorizationRequests bool `json:"require_pushed_authorization_requests,omitempty"`

	// response types
	ResponseTypes ResponseTypes `json:"response_types,omitempty"`

	// A revocation endpoint authentication method configured for the client application (read-only).
	// If empty, the `token_endpoint_auth_method` is used.
	//
	// Cloudentity supports the following client authentication methods:
	// `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
	// `self_signed_tls_client_auth`, `tls_client_auth`, `none`.
	//
	// [Read more](https://cloudentity.com/developers/basics/oauth-client-authentication/client-authentication-overview/) about client authentication.
	// Example: client_secret_basic
	// Enum: [client_secret_basic client_secret_post client_secret_jwt private_key_jwt self_signed_tls_client_auth tls_client_auth none]
	RevocationEndpointAuthMethod string `json:"revocation_endpoint_auth_method,omitempty"`

	// An array of rotated OAuth client secrets
	RotatedSecrets []string `json:"rotated_secrets"`

	// saml metadata
	SamlMetadata *EntityDescriptor `json:"saml_metadata,omitempty"`

	// saml service provider id
	SamlServiceProviderID string `json:"saml_service_provider_id,omitempty"`

	// Space-separated list of scopes for compatibility with the OAuth specification.
	// Example: email offline_access openid
	Scope string `json:"scope,omitempty"`

	// An array of string represented scopes assigned to a client application
	// Example: ["email","offline_access","openid"]
	Scopes []string `json:"scopes"`

	// OPTIONAL. [A URL using the HTTPS scheme](https://openid.net/specs/openid-connect-registration-1_0.html#SectorIdentifierValidation).
	// It must reference a JSON file with the array of `redirect_uri` values.
	//
	// Pass this parameter when you use multiple domains in your `redirect_uris` or need a mechanism to allow changes in
	// domain without affecting consumer consent.
	//
	// [Read more](https://openid.net/specs/openid-connect-core-1_0.html)
	SectorIdentifierURI string `json:"sector_identifier_uri,omitempty"`

	// A unique identifier string (e.g., a Universally Unique Identifier
	// (UUID)) assigned by the client developer or software publisher.
	//
	// The `software_id` MUST remain the same across
	// multiple updates or versions of the same software package. The
	// value of this field is not intended to be human-readable and is
	// usually opaque to the client and authorization server.
	SoftwareID string `json:"software_id,omitempty"`

	// A digitally signed or MACed JSON Web Token (JWT) [RFC7519] that
	// asserts metadata values about the client software.  In some cases,
	// a software statement is issued directly by the client
	// developer.  In other cases, a software statement is issued by
	// a third-party organization for use by the client developer.
	//
	// In both cases, the trust relationship the authorization server has
	// with the issuer of the software statement is intended to be used
	// as an input to the evaluation of whether the registration request
	// is accepted.
	//
	// A software statement can be presented to an
	// authorization server as part of the client registration request.
	SoftwareStatement string `json:"software_statement,omitempty"`

	// software statement payload
	SoftwareStatementPayload Metadata `json:"software_statement_payload,omitempty"`

	// A version identifier string for the client software identified by
	// `software_id`. The value of the `software_version` MUST be changed
	// with any update of the client software identified by the same
	// `software_id`.
	SoftwareVersion string `json:"software_version,omitempty"`

	// Subject identifier type
	//
	// Stores information if the subject identifier is of the `public` or the `pairwise` type.
	//
	// Subject identifiers identify an end-user. They are locally unique and never reassigned within the Issuer,
	// and are intended to be consumed by client applications. There are two types
	// of subject identifiers: `public` and `pairwise`.
	//
	// For the `public` type, the value of the `sub` (subject) token claim is the same for all clients.
	//
	// For the `pairwise` type, a different `sub` (subject) token claim is provided for each client.
	// Using the `pairwise` subject identifier makes it impossible for client applications to correlate the end-user's
	// activity without their permission.
	// Example: public
	// Enum: [public pairwise]
	SubjectType string `json:"subject_type,omitempty"`

	// Defines whether the client application is a system tenant's application or not.
	System bool `json:"system,omitempty"`

	// ID of a tenant where the client application is added
	// Example: default
	// Required: true
	TenantID string `json:"tenant_id"`

	// A string containing the value of an expected dNSName SAN entry in the certificate.
	TLSClientAuthSanDNS string `json:"tls_client_auth_san_dns,omitempty"`

	// A string containing the value of an expected rfc822Name SAN entry in the certificate.
	TLSClientAuthSanEmail string `json:"tls_client_auth_san_email,omitempty"`

	// A string representation of an IP address in either dotted decimal notation (for IPv4) or colon-delimited hexadecimal (for IPv6, as defined in [RFC5952]) that is expected to be present as an iPAddress SAN entry in the certificate.
	TLSClientAuthSanIP string `json:"tls_client_auth_san_ip,omitempty"`

	// A string containing the value of an expected uniformResourceIdentifier SAN entry in the certificate.
	TLSClientAuthSanURI string `json:"tls_client_auth_san_uri,omitempty"`

	// An [RFC4514] string representation of the expected subject distinguished name of the certificate.
	TLSClientAuthSubjectDn string `json:"tls_client_auth_subject_dn,omitempty"`

	// Boolean value indicating server support for mutual TLS client certificate-bound access tokens. If omitted, the default value is "false".
	TLSClientCertificateBoundAccessTokens bool `json:"tls_client_certificate_bound_access_tokens,omitempty"`

	// Token endpoint authentication method configured for a client application
	//
	// Cloudentity supports the following client authentication methods:
	// `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`,
	// `self_signed_tls_client_auth`, `tls_client_auth`, `none`.
	//
	// To learn more, go to the Authorization Basics > Client Authentication section of this guide.
	// Example: client_secret_basic
	// Enum: [client_secret_basic client_secret_post client_secret_jwt private_key_jwt self_signed_tls_client_auth tls_client_auth none]
	TokenEndpointAuthMethod string `json:"token_endpoint_auth_method,omitempty"`

	// Signing algorithm for the token endpoint
	//
	// This field is optional. If empty, a client can use any algorithm supported by the server (see `token_endpoint_auth_signing_alg_values_supported` in the well-known endpoing).
	//
	// If provided, depending on the server configuration, client can use of one: HS256, RS256, ES256, PS256 algorithms.
	//
	// If your token endpoint authentication is set to the `private_key_jwt` method, the
	// `token_endpoint_auth_signing_alg` parameter must be either RS256, ES256, or PS256.
	//
	// If your token endpoint authentication is set to the `client_secret_jwt` method,
	// the `token_endpoint_auth_signing_alg` parameter must be HS256.
	// Example: ES256
	// Enum: [RS256 ES256 PS256 HS256 ]
	TokenEndpointAuthSigningAlg string `json:"token_endpoint_auth_signing_alg,omitempty"`

	// token exchange
	TokenExchange *ClientTokenExchangeConfiguration `json:"token_exchange,omitempty"`

	// token ttls
	TokenTtls *TokenTTLs `json:"token_ttls,omitempty"`

	// Terms of Service URL.
	TosURI string `json:"tos_uri,omitempty"`

	// Defines whether the client application is trusted or not.
	//
	// For trusted clients, consent pages are skipped during the authorization process.
	Trusted bool `json:"trusted,omitempty"`

	// Date when the client application was updated.
	// Example: 2022-05-08T01:11:51.1262916Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// If enabled the client application will be able to set its own token TTLs.
	UseCustomTokenTtls bool `json:"use_custom_token_ttls,omitempty"`

	// JWS alg algorithm REQUIRED for signing UserInfo Responses.
	//
	// If specified, the response is a JWT serialized and signed with JWS.
	//
	// If omitted, then by default, UserInfo Response returns the Claims
	// as an UTF-8 encoded JSON object using the application/json content-type.
	// Example: none
	// Enum: [none RS256 ES256]
	UserinfoSignedResponseAlg string `json:"userinfo_signed_response_alg,omitempty"`
}

// Validate validates this client
func (m *Client) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationDetailsTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationEncryptedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationEncryptedResponseEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeveloperMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFdx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrantTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenEncryptedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenEncryptedResponseEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDTokenSignedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntrospectionEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJwks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObbr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectUris(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrationToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectEncryptionAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectEncryptionEnc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestObjectSigningAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevocationEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSamlMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwareStatementPayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpointAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenEndpointAuthSigningAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenTtls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserinfoSignedResponseAlg(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clientApplicationTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["single_page","server_web","mobile_desktop","service","legacy","dcr"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientApplicationTypesItemsEnum = append(clientApplicationTypesItemsEnum, v)
	}
}

func (m *Client) validateApplicationTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientApplicationTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateApplicationTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicationTypes); i++ {

		// value enum
		if err := m.validateApplicationTypesItemsEnum("application_types"+"."+strconv.Itoa(i), "body", m.ApplicationTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Client) validateAuthorizationDetailsTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationDetailsTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.AuthorizationDetailsTypes); i++ {

		if err := m.AuthorizationDetailsTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_details_types" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_details_types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

var clientTypeAuthorizationEncryptedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeAuthorizationEncryptedResponseAlgPropEnum = append(clientTypeAuthorizationEncryptedResponseAlgPropEnum, v)
	}
}

const (

	// ClientAuthorizationEncryptedResponseAlgRSADashOAEP captures enum value "RSA-OAEP"
	ClientAuthorizationEncryptedResponseAlgRSADashOAEP string = "RSA-OAEP"

	// ClientAuthorizationEncryptedResponseAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	ClientAuthorizationEncryptedResponseAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *Client) validateAuthorizationEncryptedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeAuthorizationEncryptedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateAuthorizationEncryptedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationEncryptedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationEncryptedResponseAlgEnum("authorization_encrypted_response_alg", "body", m.AuthorizationEncryptedResponseAlg); err != nil {
		return err
	}

	return nil
}

var clientTypeAuthorizationEncryptedResponseEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeAuthorizationEncryptedResponseEncPropEnum = append(clientTypeAuthorizationEncryptedResponseEncPropEnum, v)
	}
}

const (

	// ClientAuthorizationEncryptedResponseEncA256GCM captures enum value "A256GCM"
	ClientAuthorizationEncryptedResponseEncA256GCM string = "A256GCM"

	// ClientAuthorizationEncryptedResponseEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	ClientAuthorizationEncryptedResponseEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *Client) validateAuthorizationEncryptedResponseEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeAuthorizationEncryptedResponseEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateAuthorizationEncryptedResponseEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationEncryptedResponseEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationEncryptedResponseEncEnum("authorization_encrypted_response_enc", "body", m.AuthorizationEncryptedResponseEnc); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateAuthorizationServerID(formats strfmt.Registry) error {

	if err := validate.RequiredString("authorization_server_id", "body", m.AuthorizationServerID); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateClientSecret(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientSecret) { // not required
		return nil
	}

	if err := validate.MinLength("client_secret", "body", m.ClientSecret, 32); err != nil {
		return err
	}

	return nil
}

var clientTypeClientStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeClientStatusPropEnum = append(clientTypeClientStatusPropEnum, v)
	}
}

const (

	// ClientClientStatusActive captures enum value "active"
	ClientClientStatusActive string = "active"

	// ClientClientStatusInactive captures enum value "inactive"
	ClientClientStatusInactive string = "inactive"
)

// prop value enum
func (m *Client) validateClientStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeClientStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateClientStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientStatusEnum("client_status", "body", m.ClientStatus); err != nil {
		return err
	}

	return nil
}

var clientTypeClientTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oauth2","saml"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeClientTypePropEnum = append(clientTypeClientTypePropEnum, v)
	}
}

const (

	// ClientClientTypeOauth2 captures enum value "oauth2"
	ClientClientTypeOauth2 string = "oauth2"

	// ClientClientTypeSaml captures enum value "saml"
	ClientClientTypeSaml string = "saml"
)

// prop value enum
func (m *Client) validateClientTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeClientTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateClientType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClientTypeEnum("client_type", "body", m.ClientType); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateConfirmation(formats strfmt.Registry) error {
	if swag.IsZero(m.Confirmation) { // not required
		return nil
	}

	if m.Confirmation != nil {
		if err := m.Confirmation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("confirmation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("confirmation")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateDeveloperMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.DeveloperMetadata) { // not required
		return nil
	}

	if m.DeveloperMetadata != nil {
		if err := m.DeveloperMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("developer_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("developer_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validateFdx(formats strfmt.Registry) error {
	if swag.IsZero(m.Fdx) { // not required
		return nil
	}

	if m.Fdx != nil {
		if err := m.Fdx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fdx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fdx")
			}
			return err
		}
	}

	return nil
}

var clientGrantTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["authorization_code","implicit","client_credentials","refresh_token","password","urn:ietf:params:oauth:grant-type:jwt-bearer","urn:openid:params:grant-type:ciba","urn:ietf:params:oauth:grant-type:token-exchange","urn:ietf:params:oauth:grant-type:device_code"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientGrantTypesItemsEnum = append(clientGrantTypesItemsEnum, v)
	}
}

func (m *Client) validateGrantTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientGrantTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateGrantTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.GrantTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.GrantTypes); i++ {

		// value enum
		if err := m.validateGrantTypesItemsEnum("grant_types"+"."+strconv.Itoa(i), "body", m.GrantTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var clientTypeIDTokenEncryptedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeIDTokenEncryptedResponseAlgPropEnum = append(clientTypeIDTokenEncryptedResponseAlgPropEnum, v)
	}
}

const (

	// ClientIDTokenEncryptedResponseAlgRSADashOAEP captures enum value "RSA-OAEP"
	ClientIDTokenEncryptedResponseAlgRSADashOAEP string = "RSA-OAEP"

	// ClientIDTokenEncryptedResponseAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	ClientIDTokenEncryptedResponseAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *Client) validateIDTokenEncryptedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeIDTokenEncryptedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateIDTokenEncryptedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenEncryptedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenEncryptedResponseAlgEnum("id_token_encrypted_response_alg", "body", m.IDTokenEncryptedResponseAlg); err != nil {
		return err
	}

	return nil
}

var clientTypeIDTokenEncryptedResponseEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeIDTokenEncryptedResponseEncPropEnum = append(clientTypeIDTokenEncryptedResponseEncPropEnum, v)
	}
}

const (

	// ClientIDTokenEncryptedResponseEncA256GCM captures enum value "A256GCM"
	ClientIDTokenEncryptedResponseEncA256GCM string = "A256GCM"

	// ClientIDTokenEncryptedResponseEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	ClientIDTokenEncryptedResponseEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *Client) validateIDTokenEncryptedResponseEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeIDTokenEncryptedResponseEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateIDTokenEncryptedResponseEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenEncryptedResponseEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenEncryptedResponseEncEnum("id_token_encrypted_response_enc", "body", m.IDTokenEncryptedResponseEnc); err != nil {
		return err
	}

	return nil
}

var clientTypeIDTokenSignedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RS256","ES256","PS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeIDTokenSignedResponseAlgPropEnum = append(clientTypeIDTokenSignedResponseAlgPropEnum, v)
	}
}

const (

	// ClientIDTokenSignedResponseAlgRS256 captures enum value "RS256"
	ClientIDTokenSignedResponseAlgRS256 string = "RS256"

	// ClientIDTokenSignedResponseAlgES256 captures enum value "ES256"
	ClientIDTokenSignedResponseAlgES256 string = "ES256"

	// ClientIDTokenSignedResponseAlgPS256 captures enum value "PS256"
	ClientIDTokenSignedResponseAlgPS256 string = "PS256"
)

// prop value enum
func (m *Client) validateIDTokenSignedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeIDTokenSignedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateIDTokenSignedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.IDTokenSignedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDTokenSignedResponseAlgEnum("id_token_signed_response_alg", "body", m.IDTokenSignedResponseAlg); err != nil {
		return err
	}

	return nil
}

var clientTypeIntrospectionEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeIntrospectionEndpointAuthMethodPropEnum = append(clientTypeIntrospectionEndpointAuthMethodPropEnum, v)
	}
}

const (

	// ClientIntrospectionEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	ClientIntrospectionEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// ClientIntrospectionEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	ClientIntrospectionEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// ClientIntrospectionEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	ClientIntrospectionEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// ClientIntrospectionEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	ClientIntrospectionEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// ClientIntrospectionEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	ClientIntrospectionEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// ClientIntrospectionEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	ClientIntrospectionEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// ClientIntrospectionEndpointAuthMethodNone captures enum value "none"
	ClientIntrospectionEndpointAuthMethodNone string = "none"
)

// prop value enum
func (m *Client) validateIntrospectionEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeIntrospectionEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateIntrospectionEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.IntrospectionEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateIntrospectionEndpointAuthMethodEnum("introspection_endpoint_auth_method", "body", m.IntrospectionEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateJwks(formats strfmt.Registry) error {
	if swag.IsZero(m.Jwks) { // not required
		return nil
	}

	if m.Jwks != nil {
		if err := m.Jwks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwks")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validateObbr(formats strfmt.Registry) error {
	if swag.IsZero(m.Obbr) { // not required
		return nil
	}

	if m.Obbr != nil {
		if err := m.Obbr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("obbr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("obbr")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validatePrivacy(formats strfmt.Registry) error {
	if swag.IsZero(m.Privacy) { // not required
		return nil
	}

	if m.Privacy != nil {
		if err := m.Privacy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privacy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privacy")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validateRedirectUris(formats strfmt.Registry) error {
	if swag.IsZero(m.RedirectUris) { // not required
		return nil
	}

	if err := m.RedirectUris.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("redirect_uris")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("redirect_uris")
		}
		return err
	}

	return nil
}

func (m *Client) validateRegistrationToken(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationToken) { // not required
		return nil
	}

	if m.RegistrationToken != nil {
		if err := m.RegistrationToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registration_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registration_token")
			}
			return err
		}
	}

	return nil
}

var clientTypeRequestObjectEncryptionAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RSA-OAEP","RSA-OAEP-256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeRequestObjectEncryptionAlgPropEnum = append(clientTypeRequestObjectEncryptionAlgPropEnum, v)
	}
}

const (

	// ClientRequestObjectEncryptionAlgRSADashOAEP captures enum value "RSA-OAEP"
	ClientRequestObjectEncryptionAlgRSADashOAEP string = "RSA-OAEP"

	// ClientRequestObjectEncryptionAlgRSADashOAEPDash256 captures enum value "RSA-OAEP-256"
	ClientRequestObjectEncryptionAlgRSADashOAEPDash256 string = "RSA-OAEP-256"
)

// prop value enum
func (m *Client) validateRequestObjectEncryptionAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeRequestObjectEncryptionAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateRequestObjectEncryptionAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectEncryptionAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectEncryptionAlgEnum("request_object_encryption_alg", "body", m.RequestObjectEncryptionAlg); err != nil {
		return err
	}

	return nil
}

var clientTypeRequestObjectEncryptionEncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["A256GCM","A128CBC-HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeRequestObjectEncryptionEncPropEnum = append(clientTypeRequestObjectEncryptionEncPropEnum, v)
	}
}

const (

	// ClientRequestObjectEncryptionEncA256GCM captures enum value "A256GCM"
	ClientRequestObjectEncryptionEncA256GCM string = "A256GCM"

	// ClientRequestObjectEncryptionEncA128CBCDashHS256 captures enum value "A128CBC-HS256"
	ClientRequestObjectEncryptionEncA128CBCDashHS256 string = "A128CBC-HS256"
)

// prop value enum
func (m *Client) validateRequestObjectEncryptionEncEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeRequestObjectEncryptionEncPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateRequestObjectEncryptionEnc(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectEncryptionEnc) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectEncryptionEncEnum("request_object_encryption_enc", "body", m.RequestObjectEncryptionEnc); err != nil {
		return err
	}

	return nil
}

var clientTypeRequestObjectSigningAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","none","RS256","ES256","PS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeRequestObjectSigningAlgPropEnum = append(clientTypeRequestObjectSigningAlgPropEnum, v)
	}
}

const (

	// ClientRequestObjectSigningAlgAny captures enum value "any"
	ClientRequestObjectSigningAlgAny string = "any"

	// ClientRequestObjectSigningAlgNone captures enum value "none"
	ClientRequestObjectSigningAlgNone string = "none"

	// ClientRequestObjectSigningAlgRS256 captures enum value "RS256"
	ClientRequestObjectSigningAlgRS256 string = "RS256"

	// ClientRequestObjectSigningAlgES256 captures enum value "ES256"
	ClientRequestObjectSigningAlgES256 string = "ES256"

	// ClientRequestObjectSigningAlgPS256 captures enum value "PS256"
	ClientRequestObjectSigningAlgPS256 string = "PS256"
)

// prop value enum
func (m *Client) validateRequestObjectSigningAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeRequestObjectSigningAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateRequestObjectSigningAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestObjectSigningAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequestObjectSigningAlgEnum("request_object_signing_alg", "body", m.RequestObjectSigningAlg); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateResponseTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseTypes) { // not required
		return nil
	}

	if err := m.ResponseTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("response_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("response_types")
		}
		return err
	}

	return nil
}

var clientTypeRevocationEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeRevocationEndpointAuthMethodPropEnum = append(clientTypeRevocationEndpointAuthMethodPropEnum, v)
	}
}

const (

	// ClientRevocationEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	ClientRevocationEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// ClientRevocationEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	ClientRevocationEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// ClientRevocationEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	ClientRevocationEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// ClientRevocationEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	ClientRevocationEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// ClientRevocationEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	ClientRevocationEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// ClientRevocationEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	ClientRevocationEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// ClientRevocationEndpointAuthMethodNone captures enum value "none"
	ClientRevocationEndpointAuthMethodNone string = "none"
)

// prop value enum
func (m *Client) validateRevocationEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeRevocationEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateRevocationEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.RevocationEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateRevocationEndpointAuthMethodEnum("revocation_endpoint_auth_method", "body", m.RevocationEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateSamlMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.SamlMetadata) { // not required
		return nil
	}

	if m.SamlMetadata != nil {
		if err := m.SamlMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validateSoftwareStatementPayload(formats strfmt.Registry) error {
	if swag.IsZero(m.SoftwareStatementPayload) { // not required
		return nil
	}

	if m.SoftwareStatementPayload != nil {
		if err := m.SoftwareStatementPayload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("software_statement_payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("software_statement_payload")
			}
			return err
		}
	}

	return nil
}

var clientTypeSubjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","pairwise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeSubjectTypePropEnum = append(clientTypeSubjectTypePropEnum, v)
	}
}

const (

	// ClientSubjectTypePublic captures enum value "public"
	ClientSubjectTypePublic string = "public"

	// ClientSubjectTypePairwise captures enum value "pairwise"
	ClientSubjectTypePairwise string = "pairwise"
)

// prop value enum
func (m *Client) validateSubjectTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeSubjectTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateSubjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubjectTypeEnum("subject_type", "body", m.SubjectType); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

var clientTypeTokenEndpointAuthMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client_secret_basic","client_secret_post","client_secret_jwt","private_key_jwt","self_signed_tls_client_auth","tls_client_auth","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeTokenEndpointAuthMethodPropEnum = append(clientTypeTokenEndpointAuthMethodPropEnum, v)
	}
}

const (

	// ClientTokenEndpointAuthMethodClientSecretBasic captures enum value "client_secret_basic"
	ClientTokenEndpointAuthMethodClientSecretBasic string = "client_secret_basic"

	// ClientTokenEndpointAuthMethodClientSecretPost captures enum value "client_secret_post"
	ClientTokenEndpointAuthMethodClientSecretPost string = "client_secret_post"

	// ClientTokenEndpointAuthMethodClientSecretJwt captures enum value "client_secret_jwt"
	ClientTokenEndpointAuthMethodClientSecretJwt string = "client_secret_jwt"

	// ClientTokenEndpointAuthMethodPrivateKeyJwt captures enum value "private_key_jwt"
	ClientTokenEndpointAuthMethodPrivateKeyJwt string = "private_key_jwt"

	// ClientTokenEndpointAuthMethodSelfSignedTLSClientAuth captures enum value "self_signed_tls_client_auth"
	ClientTokenEndpointAuthMethodSelfSignedTLSClientAuth string = "self_signed_tls_client_auth"

	// ClientTokenEndpointAuthMethodTLSClientAuth captures enum value "tls_client_auth"
	ClientTokenEndpointAuthMethodTLSClientAuth string = "tls_client_auth"

	// ClientTokenEndpointAuthMethodNone captures enum value "none"
	ClientTokenEndpointAuthMethodNone string = "none"
)

// prop value enum
func (m *Client) validateTokenEndpointAuthMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeTokenEndpointAuthMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateTokenEndpointAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenEndpointAuthMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenEndpointAuthMethodEnum("token_endpoint_auth_method", "body", m.TokenEndpointAuthMethod); err != nil {
		return err
	}

	return nil
}

var clientTypeTokenEndpointAuthSigningAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RS256","ES256","PS256","HS256",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeTokenEndpointAuthSigningAlgPropEnum = append(clientTypeTokenEndpointAuthSigningAlgPropEnum, v)
	}
}

const (

	// ClientTokenEndpointAuthSigningAlgRS256 captures enum value "RS256"
	ClientTokenEndpointAuthSigningAlgRS256 string = "RS256"

	// ClientTokenEndpointAuthSigningAlgES256 captures enum value "ES256"
	ClientTokenEndpointAuthSigningAlgES256 string = "ES256"

	// ClientTokenEndpointAuthSigningAlgPS256 captures enum value "PS256"
	ClientTokenEndpointAuthSigningAlgPS256 string = "PS256"

	// ClientTokenEndpointAuthSigningAlgHS256 captures enum value "HS256"
	ClientTokenEndpointAuthSigningAlgHS256 string = "HS256"

	// ClientTokenEndpointAuthSigningAlgEmpty captures enum value ""
	ClientTokenEndpointAuthSigningAlgEmpty string = ""
)

// prop value enum
func (m *Client) validateTokenEndpointAuthSigningAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeTokenEndpointAuthSigningAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateTokenEndpointAuthSigningAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenEndpointAuthSigningAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenEndpointAuthSigningAlgEnum("token_endpoint_auth_signing_alg", "body", m.TokenEndpointAuthSigningAlg); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateTokenExchange(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenExchange) { // not required
		return nil
	}

	if m.TokenExchange != nil {
		if err := m.TokenExchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_exchange")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validateTokenTtls(formats strfmt.Registry) error {
	if swag.IsZero(m.TokenTtls) { // not required
		return nil
	}

	if m.TokenTtls != nil {
		if err := m.TokenTtls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_ttls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_ttls")
			}
			return err
		}
	}

	return nil
}

func (m *Client) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var clientTypeUserinfoSignedResponseAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","RS256","ES256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeUserinfoSignedResponseAlgPropEnum = append(clientTypeUserinfoSignedResponseAlgPropEnum, v)
	}
}

const (

	// ClientUserinfoSignedResponseAlgNone captures enum value "none"
	ClientUserinfoSignedResponseAlgNone string = "none"

	// ClientUserinfoSignedResponseAlgRS256 captures enum value "RS256"
	ClientUserinfoSignedResponseAlgRS256 string = "RS256"

	// ClientUserinfoSignedResponseAlgES256 captures enum value "ES256"
	ClientUserinfoSignedResponseAlgES256 string = "ES256"
)

// prop value enum
func (m *Client) validateUserinfoSignedResponseAlgEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeUserinfoSignedResponseAlgPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateUserinfoSignedResponseAlg(formats strfmt.Registry) error {
	if swag.IsZero(m.UserinfoSignedResponseAlg) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserinfoSignedResponseAlgEnum("userinfo_signed_response_alg", "body", m.UserinfoSignedResponseAlg); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this client based on the context it is used
func (m *Client) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuthorizationDetailsTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfirmation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeveloperMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFdx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJwks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObbr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrivacy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRedirectUris(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrationToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSamlMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwareStatementPayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenExchange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokenTtls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Client) contextValidateApplicationTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "application_types", "body", []string(m.ApplicationTypes)); err != nil {
		return err
	}

	return nil
}

func (m *Client) contextValidateAuthorizationDetailsTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuthorizationDetailsTypes); i++ {

		if swag.IsZero(m.AuthorizationDetailsTypes[i]) { // not required
			return nil
		}

		if err := m.AuthorizationDetailsTypes[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorization_details_types" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorization_details_types" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Client) contextValidateConfirmation(ctx context.Context, formats strfmt.Registry) error {

	if m.Confirmation != nil {

		if swag.IsZero(m.Confirmation) { // not required
			return nil
		}

		if err := m.Confirmation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("confirmation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("confirmation")
			}
			return err
		}
	}

	return nil
}

func (m *Client) contextValidateDeveloperMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.DeveloperMetadata) { // not required
		return nil
	}

	if err := m.DeveloperMetadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("developer_metadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("developer_metadata")
		}
		return err
	}

	return nil
}

func (m *Client) contextValidateFdx(ctx context.Context, formats strfmt.Registry) error {

	if m.Fdx != nil {

		if swag.IsZero(m.Fdx) { // not required
			return nil
		}

		if err := m.Fdx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fdx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fdx")
			}
			return err
		}
	}

	return nil
}

func (m *Client) contextValidateJwks(ctx context.Context, formats strfmt.Registry) error {

	if m.Jwks != nil {

		if swag.IsZero(m.Jwks) { // not required
			return nil
		}

		if err := m.Jwks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jwks")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jwks")
			}
			return err
		}
	}

	return nil
}

func (m *Client) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("metadata")
		}
		return err
	}

	return nil
}

func (m *Client) contextValidateObbr(ctx context.Context, formats strfmt.Registry) error {

	if m.Obbr != nil {

		if swag.IsZero(m.Obbr) { // not required
			return nil
		}

		if err := m.Obbr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("obbr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("obbr")
			}
			return err
		}
	}

	return nil
}

func (m *Client) contextValidatePrivacy(ctx context.Context, formats strfmt.Registry) error {

	if m.Privacy != nil {

		if swag.IsZero(m.Privacy) { // not required
			return nil
		}

		if err := m.Privacy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privacy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privacy")
			}
			return err
		}
	}

	return nil
}

func (m *Client) contextValidateRedirectUris(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RedirectUris.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("redirect_uris")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("redirect_uris")
		}
		return err
	}

	return nil
}

func (m *Client) contextValidateRegistrationToken(ctx context.Context, formats strfmt.Registry) error {

	if m.RegistrationToken != nil {

		if swag.IsZero(m.RegistrationToken) { // not required
			return nil
		}

		if err := m.RegistrationToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registration_token")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registration_token")
			}
			return err
		}
	}

	return nil
}

func (m *Client) contextValidateResponseTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ResponseTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("response_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("response_types")
		}
		return err
	}

	return nil
}

func (m *Client) contextValidateSamlMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.SamlMetadata != nil {

		if swag.IsZero(m.SamlMetadata) { // not required
			return nil
		}

		if err := m.SamlMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("saml_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("saml_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Client) contextValidateSoftwareStatementPayload(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SoftwareStatementPayload) { // not required
		return nil
	}

	if err := m.SoftwareStatementPayload.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("software_statement_payload")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("software_statement_payload")
		}
		return err
	}

	return nil
}

func (m *Client) contextValidateTokenExchange(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenExchange != nil {

		if swag.IsZero(m.TokenExchange) { // not required
			return nil
		}

		if err := m.TokenExchange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_exchange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_exchange")
			}
			return err
		}
	}

	return nil
}

func (m *Client) contextValidateTokenTtls(ctx context.Context, formats strfmt.Registry) error {

	if m.TokenTtls != nil {

		if swag.IsZero(m.TokenTtls) { // not required
			return nil
		}

		if err := m.TokenTtls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("token_ttls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("token_ttls")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Client) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Client) UnmarshalBinary(b []byte) error {
	var res Client
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
