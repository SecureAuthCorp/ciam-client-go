// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// License license
//
// swagger:model License
type License struct {

	// License expiration date
	// Example: 2023-03-01T09:02:27.127932Z
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expiration_date,omitempty" yaml:"expiration_date,omitempty"`

	// Type of license
	// Example: trial
	// Enum: [trial enterprise]
	LicenseType string `json:"license_type,omitempty" yaml:"license_type,omitempty"`

	// License start date
	// Example: 2023-03-01T09:02:27.127932Z
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

// Validate validates this license
func (m *License) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *License) validateExpirationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_date", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var licenseTypeLicenseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["trial","enterprise"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseTypeLicenseTypePropEnum = append(licenseTypeLicenseTypePropEnum, v)
	}
}

const (

	// LicenseLicenseTypeTrial captures enum value "trial"
	LicenseLicenseTypeTrial string = "trial"

	// LicenseLicenseTypeEnterprise captures enum value "enterprise"
	LicenseLicenseTypeEnterprise string = "enterprise"
)

// prop value enum
func (m *License) validateLicenseTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, licenseTypeLicenseTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *License) validateLicenseType(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseType) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseTypeEnum("license_type", "body", m.LicenseType); err != nil {
		return err
	}

	return nil
}

func (m *License) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this license based on context it is used
func (m *License) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *License) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *License) UnmarshalBinary(b []byte) error {
	var res License
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
