// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RiskEngineSettings risk engine settings
//
// swagger:model RiskEngineSettings
type RiskEngineSettings struct {

	// Timeout for the GPS.
	// Example: 1s
	// Required: true
	// Format: duration
	DbfpGpsTimeout strfmt.Duration `json:"dbfp_gps_timeout" yaml:"dbfp_gps_timeout"`

	// Timeout for the DBFP script.
	// Example: 1s
	// Required: true
	// Format: duration
	DbfpTimeout strfmt.Duration `json:"dbfp_timeout" yaml:"dbfp_timeout"`

	// URL to the DBFP script.
	// Example: https://dbfp.acceptto.com/bfp.js
	// Required: true
	DbfpURL string `json:"dbfp_url" yaml:"dbfp_url"`

	// Risk Engine TenantID
	// Example: 04ab95bd-5f5d-411f-bf3d-c56b01880190\
	TenantID string `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty"`

	// Risk Engine timeout
	// Example: 200ms
	// Required: true
	// Format: duration
	Timeout strfmt.Duration `json:"timeout" yaml:"timeout"`

	// URL to the Risk Engine server
	// Example: https://cyber-inference.mm-dev.acceptto.com/
	// Required: true
	URL string `json:"url" yaml:"url"`
}

// Validate validates this risk engine settings
func (m *RiskEngineSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDbfpGpsTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbfpTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbfpURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskEngineSettings) validateDbfpGpsTimeout(formats strfmt.Registry) error {

	if err := validate.Required("dbfp_gps_timeout", "body", strfmt.Duration(m.DbfpGpsTimeout)); err != nil {
		return err
	}

	if err := validate.FormatOf("dbfp_gps_timeout", "body", "duration", m.DbfpGpsTimeout.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RiskEngineSettings) validateDbfpTimeout(formats strfmt.Registry) error {

	if err := validate.Required("dbfp_timeout", "body", strfmt.Duration(m.DbfpTimeout)); err != nil {
		return err
	}

	if err := validate.FormatOf("dbfp_timeout", "body", "duration", m.DbfpTimeout.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RiskEngineSettings) validateDbfpURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("dbfp_url", "body", m.DbfpURL); err != nil {
		return err
	}

	return nil
}

func (m *RiskEngineSettings) validateTimeout(formats strfmt.Registry) error {

	if err := validate.Required("timeout", "body", strfmt.Duration(m.Timeout)); err != nil {
		return err
	}

	if err := validate.FormatOf("timeout", "body", "duration", m.Timeout.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RiskEngineSettings) validateURL(formats strfmt.Registry) error {

	if err := validate.RequiredString("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this risk engine settings based on context it is used
func (m *RiskEngineSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RiskEngineSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RiskEngineSettings) UnmarshalBinary(b []byte) error {
	var res RiskEngineSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
