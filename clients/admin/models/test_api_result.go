// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestAPIResult test API result
//
// swagger:model TestAPIResult
type TestAPIResult struct {

	// graphql types
	GraphqlTypes GraphQLTypes `json:"graphql_types,omitempty" yaml:"graphql_types,omitempty"`

	// match
	Match bool `json:"match,omitempty" yaml:"match,omitempty"`

	// policy id
	PolicyID string `json:"policy_id,omitempty" yaml:"policy_id,omitempty"`
}

// Validate validates this test API result
func (m *TestAPIResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGraphqlTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestAPIResult) validateGraphqlTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.GraphqlTypes) { // not required
		return nil
	}

	if err := m.GraphqlTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("graphql_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("graphql_types")
		}
		return err
	}

	return nil
}

// ContextValidate validate this test API result based on the context it is used
func (m *TestAPIResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGraphqlTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestAPIResult) contextValidateGraphqlTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GraphqlTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("graphql_types")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("graphql_types")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestAPIResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestAPIResult) UnmarshalBinary(b []byte) error {
	var res TestAPIResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
