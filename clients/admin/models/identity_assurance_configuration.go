// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IdentityAssuranceConfiguration identity assurance configuration
//
// swagger:model IdentityAssuranceConfiguration
type IdentityAssuranceConfiguration struct {

	// JSON array containing all attachment types supported by the OP.  REQUIRED when OP supports attachments. Possible values are external and embedded.
	Attachments []string `json:"attachments"`

	// claims in verified claims
	ClaimsInVerifiedClaims []string `json:"claims_in_verified_claims"`

	// REQUIRED when OP supports external attachments. JSON array containing all supported digest algorithms which can be used as alg property within
	// the digest object of external attachments. If the OP supports external attachments, at least the algorithm sha-256 MUST be supported by the OP as well.
	DigestAlgorithms []string `json:"digest_algorithms"`

	// JSON array containing all identity document types utilized by the OP for identity verification. REQUIRED when evidence_supported contains "document".
	Documents []string `json:"documents"`

	// JSON array containing the check methods the OP supports for evidences of type "document".
	DocumentsCheckMethods []string `json:"documents_check_methods"`

	// JSON array containing the methods the OP supports for evidences of type "document".
	DocumentsMethods []string `json:"documents_methods"`

	// JSON array containing all electronic record types the OP supports. REQUIRED when evidence_supported contains "electronic_record".
	ElectronicRecords []string `json:"electronic_records"`

	// Boolean value indicating support for verified_claims, i.e., the OpenID Connect for Identity Assurance extension.
	EnableVerifiedClaims bool `json:"enable_verified_claims,omitempty"`

	// JSON array containing all types of identity evidence the OP uses.
	Evidence []string `json:"evidence"`

	// JSON array containing all supported trust frameworks.
	TrustFrameworks []string `json:"trust_frameworks"`
}

// Validate validates this identity assurance configuration
func (m *IdentityAssuranceConfiguration) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this identity assurance configuration based on context it is used
func (m *IdentityAssuranceConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IdentityAssuranceConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentityAssuranceConfiguration) UnmarshalBinary(b []byte) error {
	var res IdentityAssuranceConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
