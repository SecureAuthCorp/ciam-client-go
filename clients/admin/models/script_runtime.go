// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScriptRuntime script runtime
//
// swagger:model ScriptRuntime
type ScriptRuntime struct {

	// Preinstalled nodejs libraries
	Dependencies map[string]string `json:"dependencies,omitempty" yaml:"dependencies,omitempty"`

	// Node executor environment runtime version
	EnvVersion string `json:"env_version,omitempty" yaml:"env_version,omitempty"`

	// Nodejs engine version
	NodeVersion string `json:"node_version,omitempty" yaml:"node_version,omitempty"`

	// Nodejs executor end-of-life date
	// Format: date-time
	ValidUntil strfmt.DateTime `json:"valid_until,omitempty" yaml:"valid_until,omitempty"`
}

// Validate validates this script runtime
func (m *ScriptRuntime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValidUntil(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScriptRuntime) validateValidUntil(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("valid_until", "body", "date-time", m.ValidUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this script runtime based on context it is used
func (m *ScriptRuntime) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScriptRuntime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptRuntime) UnmarshalBinary(b []byte) error {
	var res ScriptRuntime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
