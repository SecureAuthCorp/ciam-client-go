// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DefaultBruteForceLimits default brute force limits
//
// swagger:model DefaultBruteForceLimits
type DefaultBruteForceLimits struct {

	// client authentication
	ClientAuthentication *DefaultBruteForceLimit `json:"client_authentication,omitempty" yaml:"client_authentication,omitempty"`

	// device handling
	DeviceHandling *DefaultBruteForceLimit `json:"device_handling,omitempty" yaml:"device_handling,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`

	// identity activate self registered
	IdentityActivateSelfRegistered *DefaultBruteForceLimit `json:"identity_activate_self_registered,omitempty" yaml:"identity_activate_self_registered,omitempty"`

	// identity activate with extended code
	IdentityActivateWithExtendedCode *DefaultBruteForceLimit `json:"identity_activate_with_extended_code,omitempty" yaml:"identity_activate_with_extended_code,omitempty"`

	// identity address verification
	IdentityAddressVerification *DefaultBruteForceLimit `json:"identity_address_verification,omitempty" yaml:"identity_address_verification,omitempty"`

	// identity authentication
	IdentityAuthentication *DefaultBruteForceLimit `json:"identity_authentication,omitempty" yaml:"identity_authentication,omitempty"`

	// identity change password
	IdentityChangePassword *DefaultBruteForceLimit `json:"identity_change_password,omitempty" yaml:"identity_change_password,omitempty"`

	// identity code inspect
	IdentityCodeInspect *DefaultBruteForceLimit `json:"identity_code_inspect,omitempty" yaml:"identity_code_inspect,omitempty"`

	// identity code verify
	IdentityCodeVerify *DefaultBruteForceLimit `json:"identity_code_verify,omitempty" yaml:"identity_code_verify,omitempty"`

	// identity confirm password
	IdentityConfirmPassword *DefaultBruteForceLimit `json:"identity_confirm_password,omitempty" yaml:"identity_confirm_password,omitempty"`

	// identity registration
	IdentityRegistration *DefaultBruteForceLimit `json:"identity_registration,omitempty" yaml:"identity_registration,omitempty"`

	// identity self activation
	IdentitySelfActivation *DefaultBruteForceLimit `json:"identity_self_activation,omitempty" yaml:"identity_self_activation,omitempty"`

	// identity self change password
	IdentitySelfChangePassword *DefaultBruteForceLimit `json:"identity_self_change_password,omitempty" yaml:"identity_self_change_password,omitempty"`

	// identity self register
	IdentitySelfRegister *DefaultBruteForceLimit `json:"identity_self_register,omitempty" yaml:"identity_self_register,omitempty"`

	// identity set credential
	IdentitySetCredential *DefaultBruteForceLimit `json:"identity_set_credential,omitempty" yaml:"identity_set_credential,omitempty"`

	// identity verify password
	IdentityVerifyPassword *DefaultBruteForceLimit `json:"identity_verify_password,omitempty" yaml:"identity_verify_password,omitempty"`

	// mfa
	Mfa *DefaultBruteForceLimit `json:"mfa,omitempty" yaml:"mfa,omitempty"`
}

// Validate validates this default brute force limits
func (m *DefaultBruteForceLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceHandling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityActivateSelfRegistered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityActivateWithExtendedCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityAddressVerification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityChangePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityCodeInspect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityCodeVerify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityConfirmPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityRegistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentitySelfActivation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentitySelfChangePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentitySelfRegister(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentitySetCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentityVerifyPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMfa(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefaultBruteForceLimits) validateClientAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientAuthentication) { // not required
		return nil
	}

	if m.ClientAuthentication != nil {
		if err := m.ClientAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_authentication")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateDeviceHandling(formats strfmt.Registry) error {
	if swag.IsZero(m.DeviceHandling) { // not required
		return nil
	}

	if m.DeviceHandling != nil {
		if err := m.DeviceHandling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_handling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_handling")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityActivateSelfRegistered(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityActivateSelfRegistered) { // not required
		return nil
	}

	if m.IdentityActivateSelfRegistered != nil {
		if err := m.IdentityActivateSelfRegistered.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_activate_self_registered")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_activate_self_registered")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityActivateWithExtendedCode(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityActivateWithExtendedCode) { // not required
		return nil
	}

	if m.IdentityActivateWithExtendedCode != nil {
		if err := m.IdentityActivateWithExtendedCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_activate_with_extended_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_activate_with_extended_code")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityAddressVerification(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityAddressVerification) { // not required
		return nil
	}

	if m.IdentityAddressVerification != nil {
		if err := m.IdentityAddressVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_address_verification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_address_verification")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityAuthentication) { // not required
		return nil
	}

	if m.IdentityAuthentication != nil {
		if err := m.IdentityAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_authentication")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityChangePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityChangePassword) { // not required
		return nil
	}

	if m.IdentityChangePassword != nil {
		if err := m.IdentityChangePassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_change_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_change_password")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityCodeInspect(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityCodeInspect) { // not required
		return nil
	}

	if m.IdentityCodeInspect != nil {
		if err := m.IdentityCodeInspect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_code_inspect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_code_inspect")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityCodeVerify(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityCodeVerify) { // not required
		return nil
	}

	if m.IdentityCodeVerify != nil {
		if err := m.IdentityCodeVerify.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_code_verify")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_code_verify")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityConfirmPassword(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityConfirmPassword) { // not required
		return nil
	}

	if m.IdentityConfirmPassword != nil {
		if err := m.IdentityConfirmPassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_confirm_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_confirm_password")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityRegistration(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityRegistration) { // not required
		return nil
	}

	if m.IdentityRegistration != nil {
		if err := m.IdentityRegistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_registration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_registration")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentitySelfActivation(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentitySelfActivation) { // not required
		return nil
	}

	if m.IdentitySelfActivation != nil {
		if err := m.IdentitySelfActivation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_self_activation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_self_activation")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentitySelfChangePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentitySelfChangePassword) { // not required
		return nil
	}

	if m.IdentitySelfChangePassword != nil {
		if err := m.IdentitySelfChangePassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_self_change_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_self_change_password")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentitySelfRegister(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentitySelfRegister) { // not required
		return nil
	}

	if m.IdentitySelfRegister != nil {
		if err := m.IdentitySelfRegister.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_self_register")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_self_register")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentitySetCredential(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentitySetCredential) { // not required
		return nil
	}

	if m.IdentitySetCredential != nil {
		if err := m.IdentitySetCredential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_set_credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_set_credential")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateIdentityVerifyPassword(formats strfmt.Registry) error {
	if swag.IsZero(m.IdentityVerifyPassword) { // not required
		return nil
	}

	if m.IdentityVerifyPassword != nil {
		if err := m.IdentityVerifyPassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_verify_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_verify_password")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) validateMfa(formats strfmt.Registry) error {
	if swag.IsZero(m.Mfa) { // not required
		return nil
	}

	if m.Mfa != nil {
		if err := m.Mfa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mfa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mfa")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this default brute force limits based on the context it is used
func (m *DefaultBruteForceLimits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceHandling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityActivateSelfRegistered(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityActivateWithExtendedCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityAddressVerification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityChangePassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityCodeInspect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityCodeVerify(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityConfirmPassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityRegistration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentitySelfActivation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentitySelfChangePassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentitySelfRegister(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentitySetCredential(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentityVerifyPassword(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMfa(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DefaultBruteForceLimits) contextValidateClientAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientAuthentication != nil {

		if swag.IsZero(m.ClientAuthentication) { // not required
			return nil
		}

		if err := m.ClientAuthentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client_authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("client_authentication")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateDeviceHandling(ctx context.Context, formats strfmt.Registry) error {

	if m.DeviceHandling != nil {

		if swag.IsZero(m.DeviceHandling) { // not required
			return nil
		}

		if err := m.DeviceHandling.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device_handling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("device_handling")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityActivateSelfRegistered(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityActivateSelfRegistered != nil {

		if swag.IsZero(m.IdentityActivateSelfRegistered) { // not required
			return nil
		}

		if err := m.IdentityActivateSelfRegistered.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_activate_self_registered")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_activate_self_registered")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityActivateWithExtendedCode(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityActivateWithExtendedCode != nil {

		if swag.IsZero(m.IdentityActivateWithExtendedCode) { // not required
			return nil
		}

		if err := m.IdentityActivateWithExtendedCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_activate_with_extended_code")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_activate_with_extended_code")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityAddressVerification(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityAddressVerification != nil {

		if swag.IsZero(m.IdentityAddressVerification) { // not required
			return nil
		}

		if err := m.IdentityAddressVerification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_address_verification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_address_verification")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityAuthentication != nil {

		if swag.IsZero(m.IdentityAuthentication) { // not required
			return nil
		}

		if err := m.IdentityAuthentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_authentication")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityChangePassword(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityChangePassword != nil {

		if swag.IsZero(m.IdentityChangePassword) { // not required
			return nil
		}

		if err := m.IdentityChangePassword.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_change_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_change_password")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityCodeInspect(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityCodeInspect != nil {

		if swag.IsZero(m.IdentityCodeInspect) { // not required
			return nil
		}

		if err := m.IdentityCodeInspect.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_code_inspect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_code_inspect")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityCodeVerify(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityCodeVerify != nil {

		if swag.IsZero(m.IdentityCodeVerify) { // not required
			return nil
		}

		if err := m.IdentityCodeVerify.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_code_verify")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_code_verify")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityConfirmPassword(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityConfirmPassword != nil {

		if swag.IsZero(m.IdentityConfirmPassword) { // not required
			return nil
		}

		if err := m.IdentityConfirmPassword.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_confirm_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_confirm_password")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityRegistration(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityRegistration != nil {

		if swag.IsZero(m.IdentityRegistration) { // not required
			return nil
		}

		if err := m.IdentityRegistration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_registration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_registration")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentitySelfActivation(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentitySelfActivation != nil {

		if swag.IsZero(m.IdentitySelfActivation) { // not required
			return nil
		}

		if err := m.IdentitySelfActivation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_self_activation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_self_activation")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentitySelfChangePassword(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentitySelfChangePassword != nil {

		if swag.IsZero(m.IdentitySelfChangePassword) { // not required
			return nil
		}

		if err := m.IdentitySelfChangePassword.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_self_change_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_self_change_password")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentitySelfRegister(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentitySelfRegister != nil {

		if swag.IsZero(m.IdentitySelfRegister) { // not required
			return nil
		}

		if err := m.IdentitySelfRegister.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_self_register")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_self_register")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentitySetCredential(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentitySetCredential != nil {

		if swag.IsZero(m.IdentitySetCredential) { // not required
			return nil
		}

		if err := m.IdentitySetCredential.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_set_credential")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_set_credential")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateIdentityVerifyPassword(ctx context.Context, formats strfmt.Registry) error {

	if m.IdentityVerifyPassword != nil {

		if swag.IsZero(m.IdentityVerifyPassword) { // not required
			return nil
		}

		if err := m.IdentityVerifyPassword.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity_verify_password")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity_verify_password")
			}
			return err
		}
	}

	return nil
}

func (m *DefaultBruteForceLimits) contextValidateMfa(ctx context.Context, formats strfmt.Registry) error {

	if m.Mfa != nil {

		if swag.IsZero(m.Mfa) { // not required
			return nil
		}

		if err := m.Mfa.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mfa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mfa")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DefaultBruteForceLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DefaultBruteForceLimits) UnmarshalBinary(b []byte) error {
	var res DefaultBruteForceLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
