// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScriptDebug script debug
//
// swagger:model ScriptDebug
type ScriptDebug struct {

	// ID of the authorization server (workspace) where the script is created
	// Required: true
	AuthorizationServerID string `json:"authorization_server_id" yaml:"authorization_server_id"`

	// Expiration interval
	// Example: 60s
	// Format: duration
	Duration strfmt.Duration `json:"duration,omitempty" yaml:"duration,omitempty"`

	// ID of the script to be debugged
	// Required: true
	ScriptID string `json:"script_id" yaml:"script_id"`

	// Time that script debugging was enabled
	// Format: date-time
	StartedAt strfmt.DateTime `json:"started_at,omitempty" yaml:"started_at,omitempty"`

	// ID of the tenant where the script is created
	// Required: true
	TenantID string `json:"tenant_id" yaml:"tenant_id"`
}

// Validate validates this script debug
func (m *ScriptDebug) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationServerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScriptDebug) validateAuthorizationServerID(formats strfmt.Registry) error {

	if err := validate.RequiredString("authorization_server_id", "body", m.AuthorizationServerID); err != nil {
		return err
	}

	return nil
}

func (m *ScriptDebug) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if err := validate.FormatOf("duration", "body", "duration", m.Duration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScriptDebug) validateScriptID(formats strfmt.Registry) error {

	if err := validate.RequiredString("script_id", "body", m.ScriptID); err != nil {
		return err
	}

	return nil
}

func (m *ScriptDebug) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScriptDebug) validateTenantID(formats strfmt.Registry) error {

	if err := validate.RequiredString("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this script debug based on context it is used
func (m *ScriptDebug) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScriptDebug) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptDebug) UnmarshalBinary(b []byte) error {
	var res ScriptDebug
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
