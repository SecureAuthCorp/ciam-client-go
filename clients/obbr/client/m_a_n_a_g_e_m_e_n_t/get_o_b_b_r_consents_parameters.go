// Code generated by go-swagger; DO NOT EDIT.

package m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOBBRConsentsParams creates a new GetOBBRConsentsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOBBRConsentsParams() *GetOBBRConsentsParams {
	return &GetOBBRConsentsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOBBRConsentsParamsWithTimeout creates a new GetOBBRConsentsParams object
// with the ability to set a timeout on a request.
func NewGetOBBRConsentsParamsWithTimeout(timeout time.Duration) *GetOBBRConsentsParams {
	return &GetOBBRConsentsParams{
		timeout: timeout,
	}
}

// NewGetOBBRConsentsParamsWithContext creates a new GetOBBRConsentsParams object
// with the ability to set a context for a request.
func NewGetOBBRConsentsParamsWithContext(ctx context.Context) *GetOBBRConsentsParams {
	return &GetOBBRConsentsParams{
		Context: ctx,
	}
}

// NewGetOBBRConsentsParamsWithHTTPClient creates a new GetOBBRConsentsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOBBRConsentsParamsWithHTTPClient(client *http.Client) *GetOBBRConsentsParams {
	return &GetOBBRConsentsParams{
		HTTPClient: client,
	}
}

/*
GetOBBRConsentsParams contains all the parameters to send to the API endpoint

	for the get o b b r consents operation.

	Typically these are written to a http.Request.
*/
type GetOBBRConsentsParams struct {

	/* Accounts.

	     List of accounts.

	It can refer to user bank accounts the client application is allowed to access.
	*/
	Accounts []string

	/* AfterConsentID.

	     A consent identifier.

	Use it to navigate through the request pagination when the number of consents is greater than
	the `limit` set for results in the response.

	With `after_consent_id`, the list you obtain starts from the subsequent consent after the specified one. Also,
	the response depends on the `sort` and `order` parameters, if any are passed.
	*/
	AfterConsentID *string

	/* BeforeConsentID.

	     A consent identifier.

	Use it to navigate through the request pagination when the number of consents is greater than
	the limit set for results in the response.

	With `before_consent_id`, the list you obtain comprises consents up to the specified one. The specified consent
	isn't included. Also, the response depends on the `sort` and `order` parameters, if any are passed.
	*/
	BeforeConsentID *string

	/* ClientID.

	   A client application identifier.
	*/
	ClientID *string

	/* Cnpj.

	     Optional. A
	[14-digit identification number](https://openbanking-brasil.github.io/specs-seguranca/open-banking-brasil-financial-api-1_ID3.html#section-5.2.2.4)
	of a company in Cadastro Nacional da Pessoa Jurídica (Brazilian National Registry of Legal Entities).
	*/
	Cnpj *string

	/* Cpf.

	     Optional. An
	[11-digit taxpayer identification number](https://openbanking-brasil.github.io/specs-seguranca/open-banking-brasil-financial-api-1_ID3.html#name-requesting-the-cpf-claim)
	in Cadastro de Pessoas Físicas (Natural Persons Register).
	*/
	Cpf *string

	/* DateFrom.

	     Optional. Consent creation date.

	Sets the start date of the consent retrieval date range.
	*/
	DateFrom *string

	/* DateTo.

	     Optional. Consent creation date.

	Sets the end date of the consent retrieval date range.
	*/
	DateTo *string

	/* Limit.

	   Limit the number of results returned in the response.

	   Format: int64
	   Default: 20
	*/
	Limit *int64

	/* Order.

	     Input: `acs` or `desc`.

	Set the order of results returned in the response.

	     Default: "desc"
	*/
	Order *string

	/* Sort.

	   Sort results returned in the response.
	*/
	Sort *string

	/* Status.

	   List of the consent statuses.
	*/
	Status []string

	/* Types.

	   Consent types.
	*/
	Types []string

	/* Wid.

	   Workspace id

	   Default: "default"
	*/
	Wid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get o b b r consents params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOBBRConsentsParams) WithDefaults() *GetOBBRConsentsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get o b b r consents params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOBBRConsentsParams) SetDefaults() {
	var (
		limitDefault = int64(20)

		orderDefault = string("desc")

		widDefault = string("default")
	)

	val := GetOBBRConsentsParams{
		Limit: &limitDefault,
		Order: &orderDefault,
		Wid:   widDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithTimeout(timeout time.Duration) *GetOBBRConsentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithContext(ctx context.Context) *GetOBBRConsentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithHTTPClient(client *http.Client) *GetOBBRConsentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccounts adds the accounts to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithAccounts(accounts []string) *GetOBBRConsentsParams {
	o.SetAccounts(accounts)
	return o
}

// SetAccounts adds the accounts to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetAccounts(accounts []string) {
	o.Accounts = accounts
}

// WithAfterConsentID adds the afterConsentID to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithAfterConsentID(afterConsentID *string) *GetOBBRConsentsParams {
	o.SetAfterConsentID(afterConsentID)
	return o
}

// SetAfterConsentID adds the afterConsentId to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetAfterConsentID(afterConsentID *string) {
	o.AfterConsentID = afterConsentID
}

// WithBeforeConsentID adds the beforeConsentID to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithBeforeConsentID(beforeConsentID *string) *GetOBBRConsentsParams {
	o.SetBeforeConsentID(beforeConsentID)
	return o
}

// SetBeforeConsentID adds the beforeConsentId to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetBeforeConsentID(beforeConsentID *string) {
	o.BeforeConsentID = beforeConsentID
}

// WithClientID adds the clientID to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithClientID(clientID *string) *GetOBBRConsentsParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithCnpj adds the cnpj to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithCnpj(cnpj *string) *GetOBBRConsentsParams {
	o.SetCnpj(cnpj)
	return o
}

// SetCnpj adds the cnpj to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetCnpj(cnpj *string) {
	o.Cnpj = cnpj
}

// WithCpf adds the cpf to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithCpf(cpf *string) *GetOBBRConsentsParams {
	o.SetCpf(cpf)
	return o
}

// SetCpf adds the cpf to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetCpf(cpf *string) {
	o.Cpf = cpf
}

// WithDateFrom adds the dateFrom to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithDateFrom(dateFrom *string) *GetOBBRConsentsParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetDateFrom(dateFrom *string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithDateTo(dateTo *string) *GetOBBRConsentsParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetDateTo(dateTo *string) {
	o.DateTo = dateTo
}

// WithLimit adds the limit to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithLimit(limit *int64) *GetOBBRConsentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOrder adds the order to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithOrder(order *string) *GetOBBRConsentsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetOrder(order *string) {
	o.Order = order
}

// WithSort adds the sort to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithSort(sort *string) *GetOBBRConsentsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStatus adds the status to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithStatus(status []string) *GetOBBRConsentsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetStatus(status []string) {
	o.Status = status
}

// WithTypes adds the types to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithTypes(types []string) *GetOBBRConsentsParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetTypes(types []string) {
	o.Types = types
}

// WithWid adds the wid to the get o b b r consents params
func (o *GetOBBRConsentsParams) WithWid(wid string) *GetOBBRConsentsParams {
	o.SetWid(wid)
	return o
}

// SetWid adds the wid to the get o b b r consents params
func (o *GetOBBRConsentsParams) SetWid(wid string) {
	o.Wid = wid
}

// WriteToRequest writes these params to a swagger request
func (o *GetOBBRConsentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Accounts != nil {

		// binding items for accounts
		joinedAccounts := o.bindParamAccounts(reg)

		// query array param accounts
		if err := r.SetQueryParam("accounts", joinedAccounts...); err != nil {
			return err
		}
	}

	if o.AfterConsentID != nil {

		// query param after_consent_id
		var qrAfterConsentID string

		if o.AfterConsentID != nil {
			qrAfterConsentID = *o.AfterConsentID
		}
		qAfterConsentID := qrAfterConsentID
		if qAfterConsentID != "" {

			if err := r.SetQueryParam("after_consent_id", qAfterConsentID); err != nil {
				return err
			}
		}
	}

	if o.BeforeConsentID != nil {

		// query param before_consent_id
		var qrBeforeConsentID string

		if o.BeforeConsentID != nil {
			qrBeforeConsentID = *o.BeforeConsentID
		}
		qBeforeConsentID := qrBeforeConsentID
		if qBeforeConsentID != "" {

			if err := r.SetQueryParam("before_consent_id", qBeforeConsentID); err != nil {
				return err
			}
		}
	}

	if o.ClientID != nil {

		// query param client_id
		var qrClientID string

		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {

			if err := r.SetQueryParam("client_id", qClientID); err != nil {
				return err
			}
		}
	}

	if o.Cnpj != nil {

		// query param cnpj
		var qrCnpj string

		if o.Cnpj != nil {
			qrCnpj = *o.Cnpj
		}
		qCnpj := qrCnpj
		if qCnpj != "" {

			if err := r.SetQueryParam("cnpj", qCnpj); err != nil {
				return err
			}
		}
	}

	if o.Cpf != nil {

		// query param cpf
		var qrCpf string

		if o.Cpf != nil {
			qrCpf = *o.Cpf
		}
		qCpf := qrCpf
		if qCpf != "" {

			if err := r.SetQueryParam("cpf", qCpf); err != nil {
				return err
			}
		}
	}

	if o.DateFrom != nil {

		// query param date_from
		var qrDateFrom string

		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom
		if qDateFrom != "" {

			if err := r.SetQueryParam("date_from", qDateFrom); err != nil {
				return err
			}
		}
	}

	if o.DateTo != nil {

		// query param date_to
		var qrDateTo string

		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo
		if qDateTo != "" {

			if err := r.SetQueryParam("date_to", qDateTo); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort string

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// binding items for status
		joinedStatus := o.bindParamStatus(reg)

		// query array param status
		if err := r.SetQueryParam("status", joinedStatus...); err != nil {
			return err
		}
	}

	if o.Types != nil {

		// binding items for types
		joinedTypes := o.bindParamTypes(reg)

		// query array param types
		if err := r.SetQueryParam("types", joinedTypes...); err != nil {
			return err
		}
	}

	// path param wid
	if err := r.SetPathParam("wid", o.Wid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOBBRConsents binds the parameter accounts
func (o *GetOBBRConsentsParams) bindParamAccounts(formats strfmt.Registry) []string {
	accountsIR := o.Accounts

	var accountsIC []string
	for _, accountsIIR := range accountsIR { // explode []string

		accountsIIV := accountsIIR // string as string
		accountsIC = append(accountsIC, accountsIIV)
	}

	// items.CollectionFormat: ""
	accountsIS := swag.JoinByFormat(accountsIC, "")

	return accountsIS
}

// bindParamGetOBBRConsents binds the parameter status
func (o *GetOBBRConsentsParams) bindParamStatus(formats strfmt.Registry) []string {
	statusIR := o.Status

	var statusIC []string
	for _, statusIIR := range statusIR { // explode []string

		statusIIV := statusIIR // string as string
		statusIC = append(statusIC, statusIIV)
	}

	// items.CollectionFormat: ""
	statusIS := swag.JoinByFormat(statusIC, "")

	return statusIS
}

// bindParamGetOBBRConsents binds the parameter types
func (o *GetOBBRConsentsParams) bindParamTypes(formats strfmt.Registry) []string {
	typesIR := o.Types

	var typesIC []string
	for _, typesIIR := range typesIR { // explode []string

		typesIIV := typesIIR // string as string
		typesIC = append(typesIC, typesIIV)
	}

	// items.CollectionFormat: ""
	typesIS := swag.JoinByFormat(typesIC, "")

	return typesIS
}
