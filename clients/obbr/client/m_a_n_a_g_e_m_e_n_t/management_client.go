// Code generated by go-swagger; DO NOT EDIT.

package m_a_n_a_g_e_m_e_n_t

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new m a n a g e m e n t API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for m a n a g e m e n t API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConsumeOBBRConsent(params *ConsumeOBBRConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConsumeOBBRConsentOK, error)

	GetOBBRConsent(params *GetOBBRConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRConsentOK, error)

	GetOBBRConsents(params *GetOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRConsentsOK, error)

	ListOBBRConsents(params *ListOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBBRConsentsOK, error)

	RevokeOBBRConsent(params *RevokeOBBRConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBBRConsentNoContent, error)

	RevokeOBBRConsents(params *RevokeOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBBRConsentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ConsumeOBBRConsent consumes open banking brazil consent by ID

	Retrieve the details of an Open Banking Brazil data access or payment initiation consent. Specify the required

consent identifier along with the identifier of the related workspace in the path.

The response contains detailed data about the consent, including both versions of `customer_data_access_consent`,
`customer_payment_consent`, and `customer_insurance_data_access_consent`.

For authorization, pass the `Authorization: Bearer` header with a token as the bearer value. To obtain the token with
the necessary scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) ConsumeOBBRConsent(params *ConsumeOBBRConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConsumeOBBRConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsumeOBBRConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "consumeOBBRConsent",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/open-banking-brasil/consents/{consentID}/consume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConsumeOBBRConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsumeOBBRConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for consumeOBBRConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOBBRConsent gets open banking brazil consent by ID

	Call this endpoint to get the details of a consent within the specified workspace.

For authorization, pass the `Authorization: Bearer` header with a token as the bearer value. To obtain the token
and the necessary scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetOBBRConsent(params *GetOBBRConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBBRConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBBRConsent",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/open-banking-brasil/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBBRConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBBRConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBBRConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetOBBRConsents gets open banking brazil consents

	Retrieve the list of Open Banking Brazil consents per workspace. Pass the required workspace identifier in the path.

To narrow the list, use the query parameters. Currently, this endpoint supports v1 and v2 consents.

For authorization, pass the `Authorization: Bearer` header with a token as the bearer value. To obtain the token
with the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetOBBRConsents(params *GetOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBBRConsents",
		Method:             "GET",
		PathPattern:        "/servers/{wid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListOBBRConsents lists open banking brazil consents

	Retrieve the list of Open Banking Brazil consents per workplace. Pass the required workplace identifier in the path.

This endpoint currently supports v1 and v2 consents. To narrow the list, filter the response with the request body
parameters.

For authorization, pass the `Authorization: Bearer` header with a token as the bearer value. To obtain the token with
the necessary scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) ListOBBRConsents(params *ListOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOBBRConsents",
		Method:             "POST",
		PathPattern:        "/servers/{wid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeOBBRConsent revokes open banking brazil consent by ID

	Revoke an Open Banking Brazil consent by ID. Pass the identifiers of the required consent and the related workspace

in the path.

Currently, v1 and v2 consents are supported.

For authorization, pass the `Authorization: Bearer` header with a token as the bearer value. To obtain the token
and the necessary scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) RevokeOBBRConsent(params *RevokeOBBRConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBBRConsentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOBBRConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOBBRConsent",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/open-banking-brasil/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeOBBRConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOBBRConsentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOBBRConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	RevokeOBBRConsents revokes open banking brazil consents

	Revoke Open Banking Brazil consents by a client ID or combination of client ID and consent types.

For this, pass the `client_id` query parameter with the value set to the required client identifier. It revokes
all consents for the given client application.

Currently, v1 and v2 consents are supported.

For authorization, pass the `Authorization: Bearer` with a token as the bearer value. To obtain the token with the
necessary scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) RevokeOBBRConsents(params *RevokeOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOBBRConsents",
		Method:             "DELETE",
		PathPattern:        "/servers/{wid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
