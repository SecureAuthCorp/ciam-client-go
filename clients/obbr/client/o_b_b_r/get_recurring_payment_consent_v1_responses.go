// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obbr/models"
)

// GetRecurringPaymentConsentV1Reader is a Reader for the GetRecurringPaymentConsentV1 structure.
type GetRecurringPaymentConsentV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecurringPaymentConsentV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRecurringPaymentConsentV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRecurringPaymentConsentV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRecurringPaymentConsentV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRecurringPaymentConsentV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetRecurringPaymentConsentV1MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetRecurringPaymentConsentV1NotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetRecurringPaymentConsentV1UnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetRecurringPaymentConsentV1UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetRecurringPaymentConsentV1TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRecurringPaymentConsentV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}] GetRecurringPaymentConsentV1", response, response.Code())
	}
}

// NewGetRecurringPaymentConsentV1OK creates a GetRecurringPaymentConsentV1OK with default headers values
func NewGetRecurringPaymentConsentV1OK() *GetRecurringPaymentConsentV1OK {
	return &GetRecurringPaymentConsentV1OK{}
}

/*
GetRecurringPaymentConsentV1OK describes a response with status code 200, with default header values.

Customer recurring payment consent
*/
type GetRecurringPaymentConsentV1OK struct {
	Payload *models.BrazilCustomerRecurringPaymentConsentResponseV1
}

// IsSuccess returns true when this get recurring payment consent v1 o k response has a 2xx status code
func (o *GetRecurringPaymentConsentV1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get recurring payment consent v1 o k response has a 3xx status code
func (o *GetRecurringPaymentConsentV1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 o k response has a 4xx status code
func (o *GetRecurringPaymentConsentV1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recurring payment consent v1 o k response has a 5xx status code
func (o *GetRecurringPaymentConsentV1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 o k response a status code equal to that given
func (o *GetRecurringPaymentConsentV1OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get recurring payment consent v1 o k response
func (o *GetRecurringPaymentConsentV1OK) Code() int {
	return 200
}

func (o *GetRecurringPaymentConsentV1OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1OK %s", 200, payload)
}

func (o *GetRecurringPaymentConsentV1OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1OK %s", 200, payload)
}

func (o *GetRecurringPaymentConsentV1OK) GetPayload() *models.BrazilCustomerRecurringPaymentConsentResponseV1 {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BrazilCustomerRecurringPaymentConsentResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1BadRequest creates a GetRecurringPaymentConsentV1BadRequest with default headers values
func NewGetRecurringPaymentConsentV1BadRequest() *GetRecurringPaymentConsentV1BadRequest {
	return &GetRecurringPaymentConsentV1BadRequest{}
}

/*
GetRecurringPaymentConsentV1BadRequest describes a response with status code 400, with default header values.

Error
*/
type GetRecurringPaymentConsentV1BadRequest struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 bad request response has a 2xx status code
func (o *GetRecurringPaymentConsentV1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 bad request response has a 3xx status code
func (o *GetRecurringPaymentConsentV1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 bad request response has a 4xx status code
func (o *GetRecurringPaymentConsentV1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring payment consent v1 bad request response has a 5xx status code
func (o *GetRecurringPaymentConsentV1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 bad request response a status code equal to that given
func (o *GetRecurringPaymentConsentV1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get recurring payment consent v1 bad request response
func (o *GetRecurringPaymentConsentV1BadRequest) Code() int {
	return 400
}

func (o *GetRecurringPaymentConsentV1BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1BadRequest %s", 400, payload)
}

func (o *GetRecurringPaymentConsentV1BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1BadRequest %s", 400, payload)
}

func (o *GetRecurringPaymentConsentV1BadRequest) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1Unauthorized creates a GetRecurringPaymentConsentV1Unauthorized with default headers values
func NewGetRecurringPaymentConsentV1Unauthorized() *GetRecurringPaymentConsentV1Unauthorized {
	return &GetRecurringPaymentConsentV1Unauthorized{}
}

/*
GetRecurringPaymentConsentV1Unauthorized describes a response with status code 401, with default header values.

Error
*/
type GetRecurringPaymentConsentV1Unauthorized struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 unauthorized response has a 2xx status code
func (o *GetRecurringPaymentConsentV1Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 unauthorized response has a 3xx status code
func (o *GetRecurringPaymentConsentV1Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 unauthorized response has a 4xx status code
func (o *GetRecurringPaymentConsentV1Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring payment consent v1 unauthorized response has a 5xx status code
func (o *GetRecurringPaymentConsentV1Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 unauthorized response a status code equal to that given
func (o *GetRecurringPaymentConsentV1Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get recurring payment consent v1 unauthorized response
func (o *GetRecurringPaymentConsentV1Unauthorized) Code() int {
	return 401
}

func (o *GetRecurringPaymentConsentV1Unauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1Unauthorized %s", 401, payload)
}

func (o *GetRecurringPaymentConsentV1Unauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1Unauthorized %s", 401, payload)
}

func (o *GetRecurringPaymentConsentV1Unauthorized) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1Forbidden creates a GetRecurringPaymentConsentV1Forbidden with default headers values
func NewGetRecurringPaymentConsentV1Forbidden() *GetRecurringPaymentConsentV1Forbidden {
	return &GetRecurringPaymentConsentV1Forbidden{}
}

/*
GetRecurringPaymentConsentV1Forbidden describes a response with status code 403, with default header values.

Error
*/
type GetRecurringPaymentConsentV1Forbidden struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 forbidden response has a 2xx status code
func (o *GetRecurringPaymentConsentV1Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 forbidden response has a 3xx status code
func (o *GetRecurringPaymentConsentV1Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 forbidden response has a 4xx status code
func (o *GetRecurringPaymentConsentV1Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring payment consent v1 forbidden response has a 5xx status code
func (o *GetRecurringPaymentConsentV1Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 forbidden response a status code equal to that given
func (o *GetRecurringPaymentConsentV1Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get recurring payment consent v1 forbidden response
func (o *GetRecurringPaymentConsentV1Forbidden) Code() int {
	return 403
}

func (o *GetRecurringPaymentConsentV1Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1Forbidden %s", 403, payload)
}

func (o *GetRecurringPaymentConsentV1Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1Forbidden %s", 403, payload)
}

func (o *GetRecurringPaymentConsentV1Forbidden) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1MethodNotAllowed creates a GetRecurringPaymentConsentV1MethodNotAllowed with default headers values
func NewGetRecurringPaymentConsentV1MethodNotAllowed() *GetRecurringPaymentConsentV1MethodNotAllowed {
	return &GetRecurringPaymentConsentV1MethodNotAllowed{}
}

/*
GetRecurringPaymentConsentV1MethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type GetRecurringPaymentConsentV1MethodNotAllowed struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 method not allowed response has a 2xx status code
func (o *GetRecurringPaymentConsentV1MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 method not allowed response has a 3xx status code
func (o *GetRecurringPaymentConsentV1MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 method not allowed response has a 4xx status code
func (o *GetRecurringPaymentConsentV1MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring payment consent v1 method not allowed response has a 5xx status code
func (o *GetRecurringPaymentConsentV1MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 method not allowed response a status code equal to that given
func (o *GetRecurringPaymentConsentV1MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get recurring payment consent v1 method not allowed response
func (o *GetRecurringPaymentConsentV1MethodNotAllowed) Code() int {
	return 405
}

func (o *GetRecurringPaymentConsentV1MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1MethodNotAllowed %s", 405, payload)
}

func (o *GetRecurringPaymentConsentV1MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1MethodNotAllowed %s", 405, payload)
}

func (o *GetRecurringPaymentConsentV1MethodNotAllowed) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1NotAcceptable creates a GetRecurringPaymentConsentV1NotAcceptable with default headers values
func NewGetRecurringPaymentConsentV1NotAcceptable() *GetRecurringPaymentConsentV1NotAcceptable {
	return &GetRecurringPaymentConsentV1NotAcceptable{}
}

/*
GetRecurringPaymentConsentV1NotAcceptable describes a response with status code 406, with default header values.

Error
*/
type GetRecurringPaymentConsentV1NotAcceptable struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 not acceptable response has a 2xx status code
func (o *GetRecurringPaymentConsentV1NotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 not acceptable response has a 3xx status code
func (o *GetRecurringPaymentConsentV1NotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 not acceptable response has a 4xx status code
func (o *GetRecurringPaymentConsentV1NotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring payment consent v1 not acceptable response has a 5xx status code
func (o *GetRecurringPaymentConsentV1NotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 not acceptable response a status code equal to that given
func (o *GetRecurringPaymentConsentV1NotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the get recurring payment consent v1 not acceptable response
func (o *GetRecurringPaymentConsentV1NotAcceptable) Code() int {
	return 406
}

func (o *GetRecurringPaymentConsentV1NotAcceptable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1NotAcceptable %s", 406, payload)
}

func (o *GetRecurringPaymentConsentV1NotAcceptable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1NotAcceptable %s", 406, payload)
}

func (o *GetRecurringPaymentConsentV1NotAcceptable) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1NotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1UnsupportedMediaType creates a GetRecurringPaymentConsentV1UnsupportedMediaType with default headers values
func NewGetRecurringPaymentConsentV1UnsupportedMediaType() *GetRecurringPaymentConsentV1UnsupportedMediaType {
	return &GetRecurringPaymentConsentV1UnsupportedMediaType{}
}

/*
GetRecurringPaymentConsentV1UnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type GetRecurringPaymentConsentV1UnsupportedMediaType struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 unsupported media type response has a 2xx status code
func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 unsupported media type response has a 3xx status code
func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 unsupported media type response has a 4xx status code
func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring payment consent v1 unsupported media type response has a 5xx status code
func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 unsupported media type response a status code equal to that given
func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the get recurring payment consent v1 unsupported media type response
func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) Code() int {
	return 415
}

func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1UnsupportedMediaType %s", 415, payload)
}

func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1UnsupportedMediaType %s", 415, payload)
}

func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1UnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1UnprocessableEntity creates a GetRecurringPaymentConsentV1UnprocessableEntity with default headers values
func NewGetRecurringPaymentConsentV1UnprocessableEntity() *GetRecurringPaymentConsentV1UnprocessableEntity {
	return &GetRecurringPaymentConsentV1UnprocessableEntity{}
}

/*
GetRecurringPaymentConsentV1UnprocessableEntity describes a response with status code 422, with default header values.

Error
*/
type GetRecurringPaymentConsentV1UnprocessableEntity struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 unprocessable entity response has a 2xx status code
func (o *GetRecurringPaymentConsentV1UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 unprocessable entity response has a 3xx status code
func (o *GetRecurringPaymentConsentV1UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 unprocessable entity response has a 4xx status code
func (o *GetRecurringPaymentConsentV1UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring payment consent v1 unprocessable entity response has a 5xx status code
func (o *GetRecurringPaymentConsentV1UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 unprocessable entity response a status code equal to that given
func (o *GetRecurringPaymentConsentV1UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get recurring payment consent v1 unprocessable entity response
func (o *GetRecurringPaymentConsentV1UnprocessableEntity) Code() int {
	return 422
}

func (o *GetRecurringPaymentConsentV1UnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1UnprocessableEntity %s", 422, payload)
}

func (o *GetRecurringPaymentConsentV1UnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1UnprocessableEntity %s", 422, payload)
}

func (o *GetRecurringPaymentConsentV1UnprocessableEntity) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1TooManyRequests creates a GetRecurringPaymentConsentV1TooManyRequests with default headers values
func NewGetRecurringPaymentConsentV1TooManyRequests() *GetRecurringPaymentConsentV1TooManyRequests {
	return &GetRecurringPaymentConsentV1TooManyRequests{}
}

/*
GetRecurringPaymentConsentV1TooManyRequests describes a response with status code 429, with default header values.

Error
*/
type GetRecurringPaymentConsentV1TooManyRequests struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 too many requests response has a 2xx status code
func (o *GetRecurringPaymentConsentV1TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 too many requests response has a 3xx status code
func (o *GetRecurringPaymentConsentV1TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 too many requests response has a 4xx status code
func (o *GetRecurringPaymentConsentV1TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get recurring payment consent v1 too many requests response has a 5xx status code
func (o *GetRecurringPaymentConsentV1TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get recurring payment consent v1 too many requests response a status code equal to that given
func (o *GetRecurringPaymentConsentV1TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get recurring payment consent v1 too many requests response
func (o *GetRecurringPaymentConsentV1TooManyRequests) Code() int {
	return 429
}

func (o *GetRecurringPaymentConsentV1TooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1TooManyRequests %s", 429, payload)
}

func (o *GetRecurringPaymentConsentV1TooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1TooManyRequests %s", 429, payload)
}

func (o *GetRecurringPaymentConsentV1TooManyRequests) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRecurringPaymentConsentV1InternalServerError creates a GetRecurringPaymentConsentV1InternalServerError with default headers values
func NewGetRecurringPaymentConsentV1InternalServerError() *GetRecurringPaymentConsentV1InternalServerError {
	return &GetRecurringPaymentConsentV1InternalServerError{}
}

/*
GetRecurringPaymentConsentV1InternalServerError describes a response with status code 500, with default header values.

Error
*/
type GetRecurringPaymentConsentV1InternalServerError struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get recurring payment consent v1 internal server error response has a 2xx status code
func (o *GetRecurringPaymentConsentV1InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get recurring payment consent v1 internal server error response has a 3xx status code
func (o *GetRecurringPaymentConsentV1InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get recurring payment consent v1 internal server error response has a 4xx status code
func (o *GetRecurringPaymentConsentV1InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get recurring payment consent v1 internal server error response has a 5xx status code
func (o *GetRecurringPaymentConsentV1InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get recurring payment consent v1 internal server error response a status code equal to that given
func (o *GetRecurringPaymentConsentV1InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get recurring payment consent v1 internal server error response
func (o *GetRecurringPaymentConsentV1InternalServerError) Code() int {
	return 500
}

func (o *GetRecurringPaymentConsentV1InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1InternalServerError %s", 500, payload)
}

func (o *GetRecurringPaymentConsentV1InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] getRecurringPaymentConsentV1InternalServerError %s", 500, payload)
}

func (o *GetRecurringPaymentConsentV1InternalServerError) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetRecurringPaymentConsentV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
