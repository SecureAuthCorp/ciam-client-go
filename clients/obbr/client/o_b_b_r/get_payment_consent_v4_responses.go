// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obbr/models"
)

// GetPaymentConsentV4Reader is a Reader for the GetPaymentConsentV4 structure.
type GetPaymentConsentV4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaymentConsentV4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaymentConsentV4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaymentConsentV4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPaymentConsentV4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPaymentConsentV4Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetPaymentConsentV4MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetPaymentConsentV4NotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetPaymentConsentV4UnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetPaymentConsentV4UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPaymentConsentV4TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPaymentConsentV4InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /open-banking/payments/v4/consents/{consentID}] GetPaymentConsentV4", response, response.Code())
	}
}

// NewGetPaymentConsentV4OK creates a GetPaymentConsentV4OK with default headers values
func NewGetPaymentConsentV4OK() *GetPaymentConsentV4OK {
	return &GetPaymentConsentV4OK{}
}

/*
GetPaymentConsentV4OK describes a response with status code 200, with default header values.

Customer payment consent
*/
type GetPaymentConsentV4OK struct {
	Payload *models.BrazilCustomerPaymentConsentResponseV4
}

// IsSuccess returns true when this get payment consent v4 o k response has a 2xx status code
func (o *GetPaymentConsentV4OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get payment consent v4 o k response has a 3xx status code
func (o *GetPaymentConsentV4OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 o k response has a 4xx status code
func (o *GetPaymentConsentV4OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get payment consent v4 o k response has a 5xx status code
func (o *GetPaymentConsentV4OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 o k response a status code equal to that given
func (o *GetPaymentConsentV4OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get payment consent v4 o k response
func (o *GetPaymentConsentV4OK) Code() int {
	return 200
}

func (o *GetPaymentConsentV4OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4OK %s", 200, payload)
}

func (o *GetPaymentConsentV4OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4OK %s", 200, payload)
}

func (o *GetPaymentConsentV4OK) GetPayload() *models.BrazilCustomerPaymentConsentResponseV4 {
	return o.Payload
}

func (o *GetPaymentConsentV4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BrazilCustomerPaymentConsentResponseV4)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4BadRequest creates a GetPaymentConsentV4BadRequest with default headers values
func NewGetPaymentConsentV4BadRequest() *GetPaymentConsentV4BadRequest {
	return &GetPaymentConsentV4BadRequest{}
}

/*
GetPaymentConsentV4BadRequest describes a response with status code 400, with default header values.

Error
*/
type GetPaymentConsentV4BadRequest struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 bad request response has a 2xx status code
func (o *GetPaymentConsentV4BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 bad request response has a 3xx status code
func (o *GetPaymentConsentV4BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 bad request response has a 4xx status code
func (o *GetPaymentConsentV4BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v4 bad request response has a 5xx status code
func (o *GetPaymentConsentV4BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 bad request response a status code equal to that given
func (o *GetPaymentConsentV4BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get payment consent v4 bad request response
func (o *GetPaymentConsentV4BadRequest) Code() int {
	return 400
}

func (o *GetPaymentConsentV4BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4BadRequest %s", 400, payload)
}

func (o *GetPaymentConsentV4BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4BadRequest %s", 400, payload)
}

func (o *GetPaymentConsentV4BadRequest) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4Unauthorized creates a GetPaymentConsentV4Unauthorized with default headers values
func NewGetPaymentConsentV4Unauthorized() *GetPaymentConsentV4Unauthorized {
	return &GetPaymentConsentV4Unauthorized{}
}

/*
GetPaymentConsentV4Unauthorized describes a response with status code 401, with default header values.

Error
*/
type GetPaymentConsentV4Unauthorized struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 unauthorized response has a 2xx status code
func (o *GetPaymentConsentV4Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 unauthorized response has a 3xx status code
func (o *GetPaymentConsentV4Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 unauthorized response has a 4xx status code
func (o *GetPaymentConsentV4Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v4 unauthorized response has a 5xx status code
func (o *GetPaymentConsentV4Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 unauthorized response a status code equal to that given
func (o *GetPaymentConsentV4Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get payment consent v4 unauthorized response
func (o *GetPaymentConsentV4Unauthorized) Code() int {
	return 401
}

func (o *GetPaymentConsentV4Unauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4Unauthorized %s", 401, payload)
}

func (o *GetPaymentConsentV4Unauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4Unauthorized %s", 401, payload)
}

func (o *GetPaymentConsentV4Unauthorized) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4Forbidden creates a GetPaymentConsentV4Forbidden with default headers values
func NewGetPaymentConsentV4Forbidden() *GetPaymentConsentV4Forbidden {
	return &GetPaymentConsentV4Forbidden{}
}

/*
GetPaymentConsentV4Forbidden describes a response with status code 403, with default header values.

Error
*/
type GetPaymentConsentV4Forbidden struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 forbidden response has a 2xx status code
func (o *GetPaymentConsentV4Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 forbidden response has a 3xx status code
func (o *GetPaymentConsentV4Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 forbidden response has a 4xx status code
func (o *GetPaymentConsentV4Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v4 forbidden response has a 5xx status code
func (o *GetPaymentConsentV4Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 forbidden response a status code equal to that given
func (o *GetPaymentConsentV4Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get payment consent v4 forbidden response
func (o *GetPaymentConsentV4Forbidden) Code() int {
	return 403
}

func (o *GetPaymentConsentV4Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4Forbidden %s", 403, payload)
}

func (o *GetPaymentConsentV4Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4Forbidden %s", 403, payload)
}

func (o *GetPaymentConsentV4Forbidden) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4MethodNotAllowed creates a GetPaymentConsentV4MethodNotAllowed with default headers values
func NewGetPaymentConsentV4MethodNotAllowed() *GetPaymentConsentV4MethodNotAllowed {
	return &GetPaymentConsentV4MethodNotAllowed{}
}

/*
GetPaymentConsentV4MethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type GetPaymentConsentV4MethodNotAllowed struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 method not allowed response has a 2xx status code
func (o *GetPaymentConsentV4MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 method not allowed response has a 3xx status code
func (o *GetPaymentConsentV4MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 method not allowed response has a 4xx status code
func (o *GetPaymentConsentV4MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v4 method not allowed response has a 5xx status code
func (o *GetPaymentConsentV4MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 method not allowed response a status code equal to that given
func (o *GetPaymentConsentV4MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get payment consent v4 method not allowed response
func (o *GetPaymentConsentV4MethodNotAllowed) Code() int {
	return 405
}

func (o *GetPaymentConsentV4MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4MethodNotAllowed %s", 405, payload)
}

func (o *GetPaymentConsentV4MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4MethodNotAllowed %s", 405, payload)
}

func (o *GetPaymentConsentV4MethodNotAllowed) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4NotAcceptable creates a GetPaymentConsentV4NotAcceptable with default headers values
func NewGetPaymentConsentV4NotAcceptable() *GetPaymentConsentV4NotAcceptable {
	return &GetPaymentConsentV4NotAcceptable{}
}

/*
GetPaymentConsentV4NotAcceptable describes a response with status code 406, with default header values.

Error
*/
type GetPaymentConsentV4NotAcceptable struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 not acceptable response has a 2xx status code
func (o *GetPaymentConsentV4NotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 not acceptable response has a 3xx status code
func (o *GetPaymentConsentV4NotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 not acceptable response has a 4xx status code
func (o *GetPaymentConsentV4NotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v4 not acceptable response has a 5xx status code
func (o *GetPaymentConsentV4NotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 not acceptable response a status code equal to that given
func (o *GetPaymentConsentV4NotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the get payment consent v4 not acceptable response
func (o *GetPaymentConsentV4NotAcceptable) Code() int {
	return 406
}

func (o *GetPaymentConsentV4NotAcceptable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4NotAcceptable %s", 406, payload)
}

func (o *GetPaymentConsentV4NotAcceptable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4NotAcceptable %s", 406, payload)
}

func (o *GetPaymentConsentV4NotAcceptable) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4NotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4UnsupportedMediaType creates a GetPaymentConsentV4UnsupportedMediaType with default headers values
func NewGetPaymentConsentV4UnsupportedMediaType() *GetPaymentConsentV4UnsupportedMediaType {
	return &GetPaymentConsentV4UnsupportedMediaType{}
}

/*
GetPaymentConsentV4UnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type GetPaymentConsentV4UnsupportedMediaType struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 unsupported media type response has a 2xx status code
func (o *GetPaymentConsentV4UnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 unsupported media type response has a 3xx status code
func (o *GetPaymentConsentV4UnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 unsupported media type response has a 4xx status code
func (o *GetPaymentConsentV4UnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v4 unsupported media type response has a 5xx status code
func (o *GetPaymentConsentV4UnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 unsupported media type response a status code equal to that given
func (o *GetPaymentConsentV4UnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the get payment consent v4 unsupported media type response
func (o *GetPaymentConsentV4UnsupportedMediaType) Code() int {
	return 415
}

func (o *GetPaymentConsentV4UnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4UnsupportedMediaType %s", 415, payload)
}

func (o *GetPaymentConsentV4UnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4UnsupportedMediaType %s", 415, payload)
}

func (o *GetPaymentConsentV4UnsupportedMediaType) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4UnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4UnprocessableEntity creates a GetPaymentConsentV4UnprocessableEntity with default headers values
func NewGetPaymentConsentV4UnprocessableEntity() *GetPaymentConsentV4UnprocessableEntity {
	return &GetPaymentConsentV4UnprocessableEntity{}
}

/*
GetPaymentConsentV4UnprocessableEntity describes a response with status code 422, with default header values.

Error
*/
type GetPaymentConsentV4UnprocessableEntity struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 unprocessable entity response has a 2xx status code
func (o *GetPaymentConsentV4UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 unprocessable entity response has a 3xx status code
func (o *GetPaymentConsentV4UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 unprocessable entity response has a 4xx status code
func (o *GetPaymentConsentV4UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v4 unprocessable entity response has a 5xx status code
func (o *GetPaymentConsentV4UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 unprocessable entity response a status code equal to that given
func (o *GetPaymentConsentV4UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get payment consent v4 unprocessable entity response
func (o *GetPaymentConsentV4UnprocessableEntity) Code() int {
	return 422
}

func (o *GetPaymentConsentV4UnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4UnprocessableEntity %s", 422, payload)
}

func (o *GetPaymentConsentV4UnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4UnprocessableEntity %s", 422, payload)
}

func (o *GetPaymentConsentV4UnprocessableEntity) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4TooManyRequests creates a GetPaymentConsentV4TooManyRequests with default headers values
func NewGetPaymentConsentV4TooManyRequests() *GetPaymentConsentV4TooManyRequests {
	return &GetPaymentConsentV4TooManyRequests{}
}

/*
GetPaymentConsentV4TooManyRequests describes a response with status code 429, with default header values.

Error
*/
type GetPaymentConsentV4TooManyRequests struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 too many requests response has a 2xx status code
func (o *GetPaymentConsentV4TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 too many requests response has a 3xx status code
func (o *GetPaymentConsentV4TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 too many requests response has a 4xx status code
func (o *GetPaymentConsentV4TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v4 too many requests response has a 5xx status code
func (o *GetPaymentConsentV4TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v4 too many requests response a status code equal to that given
func (o *GetPaymentConsentV4TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get payment consent v4 too many requests response
func (o *GetPaymentConsentV4TooManyRequests) Code() int {
	return 429
}

func (o *GetPaymentConsentV4TooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4TooManyRequests %s", 429, payload)
}

func (o *GetPaymentConsentV4TooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4TooManyRequests %s", 429, payload)
}

func (o *GetPaymentConsentV4TooManyRequests) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV4InternalServerError creates a GetPaymentConsentV4InternalServerError with default headers values
func NewGetPaymentConsentV4InternalServerError() *GetPaymentConsentV4InternalServerError {
	return &GetPaymentConsentV4InternalServerError{}
}

/*
GetPaymentConsentV4InternalServerError describes a response with status code 500, with default header values.

Error
*/
type GetPaymentConsentV4InternalServerError struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v4 internal server error response has a 2xx status code
func (o *GetPaymentConsentV4InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v4 internal server error response has a 3xx status code
func (o *GetPaymentConsentV4InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v4 internal server error response has a 4xx status code
func (o *GetPaymentConsentV4InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get payment consent v4 internal server error response has a 5xx status code
func (o *GetPaymentConsentV4InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get payment consent v4 internal server error response a status code equal to that given
func (o *GetPaymentConsentV4InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get payment consent v4 internal server error response
func (o *GetPaymentConsentV4InternalServerError) Code() int {
	return 500
}

func (o *GetPaymentConsentV4InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4InternalServerError %s", 500, payload)
}

func (o *GetPaymentConsentV4InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v4/consents/{consentID}][%d] getPaymentConsentV4InternalServerError %s", 500, payload)
}

func (o *GetPaymentConsentV4InternalServerError) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV4InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
