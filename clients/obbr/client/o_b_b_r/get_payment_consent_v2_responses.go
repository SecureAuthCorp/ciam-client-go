// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obbr/models"
)

// GetPaymentConsentV2Reader is a Reader for the GetPaymentConsentV2 structure.
type GetPaymentConsentV2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaymentConsentV2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaymentConsentV2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaymentConsentV2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPaymentConsentV2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPaymentConsentV2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetPaymentConsentV2MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetPaymentConsentV2NotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetPaymentConsentV2UnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetPaymentConsentV2UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPaymentConsentV2TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPaymentConsentV2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /open-banking/payments/v2/consents/{consentID}] GetPaymentConsentV2", response, response.Code())
	}
}

// NewGetPaymentConsentV2OK creates a GetPaymentConsentV2OK with default headers values
func NewGetPaymentConsentV2OK() *GetPaymentConsentV2OK {
	return &GetPaymentConsentV2OK{}
}

/*
GetPaymentConsentV2OK describes a response with status code 200, with default header values.

Customer payment consent
*/
type GetPaymentConsentV2OK struct {
	Payload *models.BrazilCustomerPaymentConsentResponseV2
}

// IsSuccess returns true when this get payment consent v2 o k response has a 2xx status code
func (o *GetPaymentConsentV2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get payment consent v2 o k response has a 3xx status code
func (o *GetPaymentConsentV2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 o k response has a 4xx status code
func (o *GetPaymentConsentV2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get payment consent v2 o k response has a 5xx status code
func (o *GetPaymentConsentV2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 o k response a status code equal to that given
func (o *GetPaymentConsentV2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get payment consent v2 o k response
func (o *GetPaymentConsentV2OK) Code() int {
	return 200
}

func (o *GetPaymentConsentV2OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2OK %s", 200, payload)
}

func (o *GetPaymentConsentV2OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2OK %s", 200, payload)
}

func (o *GetPaymentConsentV2OK) GetPayload() *models.BrazilCustomerPaymentConsentResponseV2 {
	return o.Payload
}

func (o *GetPaymentConsentV2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BrazilCustomerPaymentConsentResponseV2)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2BadRequest creates a GetPaymentConsentV2BadRequest with default headers values
func NewGetPaymentConsentV2BadRequest() *GetPaymentConsentV2BadRequest {
	return &GetPaymentConsentV2BadRequest{}
}

/*
GetPaymentConsentV2BadRequest describes a response with status code 400, with default header values.

Error
*/
type GetPaymentConsentV2BadRequest struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 bad request response has a 2xx status code
func (o *GetPaymentConsentV2BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 bad request response has a 3xx status code
func (o *GetPaymentConsentV2BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 bad request response has a 4xx status code
func (o *GetPaymentConsentV2BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v2 bad request response has a 5xx status code
func (o *GetPaymentConsentV2BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 bad request response a status code equal to that given
func (o *GetPaymentConsentV2BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get payment consent v2 bad request response
func (o *GetPaymentConsentV2BadRequest) Code() int {
	return 400
}

func (o *GetPaymentConsentV2BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2BadRequest %s", 400, payload)
}

func (o *GetPaymentConsentV2BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2BadRequest %s", 400, payload)
}

func (o *GetPaymentConsentV2BadRequest) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2Unauthorized creates a GetPaymentConsentV2Unauthorized with default headers values
func NewGetPaymentConsentV2Unauthorized() *GetPaymentConsentV2Unauthorized {
	return &GetPaymentConsentV2Unauthorized{}
}

/*
GetPaymentConsentV2Unauthorized describes a response with status code 401, with default header values.

Error
*/
type GetPaymentConsentV2Unauthorized struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 unauthorized response has a 2xx status code
func (o *GetPaymentConsentV2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 unauthorized response has a 3xx status code
func (o *GetPaymentConsentV2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 unauthorized response has a 4xx status code
func (o *GetPaymentConsentV2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v2 unauthorized response has a 5xx status code
func (o *GetPaymentConsentV2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 unauthorized response a status code equal to that given
func (o *GetPaymentConsentV2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get payment consent v2 unauthorized response
func (o *GetPaymentConsentV2Unauthorized) Code() int {
	return 401
}

func (o *GetPaymentConsentV2Unauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2Unauthorized %s", 401, payload)
}

func (o *GetPaymentConsentV2Unauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2Unauthorized %s", 401, payload)
}

func (o *GetPaymentConsentV2Unauthorized) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2Forbidden creates a GetPaymentConsentV2Forbidden with default headers values
func NewGetPaymentConsentV2Forbidden() *GetPaymentConsentV2Forbidden {
	return &GetPaymentConsentV2Forbidden{}
}

/*
GetPaymentConsentV2Forbidden describes a response with status code 403, with default header values.

Error
*/
type GetPaymentConsentV2Forbidden struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 forbidden response has a 2xx status code
func (o *GetPaymentConsentV2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 forbidden response has a 3xx status code
func (o *GetPaymentConsentV2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 forbidden response has a 4xx status code
func (o *GetPaymentConsentV2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v2 forbidden response has a 5xx status code
func (o *GetPaymentConsentV2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 forbidden response a status code equal to that given
func (o *GetPaymentConsentV2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get payment consent v2 forbidden response
func (o *GetPaymentConsentV2Forbidden) Code() int {
	return 403
}

func (o *GetPaymentConsentV2Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2Forbidden %s", 403, payload)
}

func (o *GetPaymentConsentV2Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2Forbidden %s", 403, payload)
}

func (o *GetPaymentConsentV2Forbidden) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2MethodNotAllowed creates a GetPaymentConsentV2MethodNotAllowed with default headers values
func NewGetPaymentConsentV2MethodNotAllowed() *GetPaymentConsentV2MethodNotAllowed {
	return &GetPaymentConsentV2MethodNotAllowed{}
}

/*
GetPaymentConsentV2MethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type GetPaymentConsentV2MethodNotAllowed struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 method not allowed response has a 2xx status code
func (o *GetPaymentConsentV2MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 method not allowed response has a 3xx status code
func (o *GetPaymentConsentV2MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 method not allowed response has a 4xx status code
func (o *GetPaymentConsentV2MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v2 method not allowed response has a 5xx status code
func (o *GetPaymentConsentV2MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 method not allowed response a status code equal to that given
func (o *GetPaymentConsentV2MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get payment consent v2 method not allowed response
func (o *GetPaymentConsentV2MethodNotAllowed) Code() int {
	return 405
}

func (o *GetPaymentConsentV2MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2MethodNotAllowed %s", 405, payload)
}

func (o *GetPaymentConsentV2MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2MethodNotAllowed %s", 405, payload)
}

func (o *GetPaymentConsentV2MethodNotAllowed) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2NotAcceptable creates a GetPaymentConsentV2NotAcceptable with default headers values
func NewGetPaymentConsentV2NotAcceptable() *GetPaymentConsentV2NotAcceptable {
	return &GetPaymentConsentV2NotAcceptable{}
}

/*
GetPaymentConsentV2NotAcceptable describes a response with status code 406, with default header values.

Error
*/
type GetPaymentConsentV2NotAcceptable struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 not acceptable response has a 2xx status code
func (o *GetPaymentConsentV2NotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 not acceptable response has a 3xx status code
func (o *GetPaymentConsentV2NotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 not acceptable response has a 4xx status code
func (o *GetPaymentConsentV2NotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v2 not acceptable response has a 5xx status code
func (o *GetPaymentConsentV2NotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 not acceptable response a status code equal to that given
func (o *GetPaymentConsentV2NotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the get payment consent v2 not acceptable response
func (o *GetPaymentConsentV2NotAcceptable) Code() int {
	return 406
}

func (o *GetPaymentConsentV2NotAcceptable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2NotAcceptable %s", 406, payload)
}

func (o *GetPaymentConsentV2NotAcceptable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2NotAcceptable %s", 406, payload)
}

func (o *GetPaymentConsentV2NotAcceptable) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2NotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2UnsupportedMediaType creates a GetPaymentConsentV2UnsupportedMediaType with default headers values
func NewGetPaymentConsentV2UnsupportedMediaType() *GetPaymentConsentV2UnsupportedMediaType {
	return &GetPaymentConsentV2UnsupportedMediaType{}
}

/*
GetPaymentConsentV2UnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type GetPaymentConsentV2UnsupportedMediaType struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 unsupported media type response has a 2xx status code
func (o *GetPaymentConsentV2UnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 unsupported media type response has a 3xx status code
func (o *GetPaymentConsentV2UnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 unsupported media type response has a 4xx status code
func (o *GetPaymentConsentV2UnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v2 unsupported media type response has a 5xx status code
func (o *GetPaymentConsentV2UnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 unsupported media type response a status code equal to that given
func (o *GetPaymentConsentV2UnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the get payment consent v2 unsupported media type response
func (o *GetPaymentConsentV2UnsupportedMediaType) Code() int {
	return 415
}

func (o *GetPaymentConsentV2UnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2UnsupportedMediaType %s", 415, payload)
}

func (o *GetPaymentConsentV2UnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2UnsupportedMediaType %s", 415, payload)
}

func (o *GetPaymentConsentV2UnsupportedMediaType) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2UnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2UnprocessableEntity creates a GetPaymentConsentV2UnprocessableEntity with default headers values
func NewGetPaymentConsentV2UnprocessableEntity() *GetPaymentConsentV2UnprocessableEntity {
	return &GetPaymentConsentV2UnprocessableEntity{}
}

/*
GetPaymentConsentV2UnprocessableEntity describes a response with status code 422, with default header values.

Error
*/
type GetPaymentConsentV2UnprocessableEntity struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 unprocessable entity response has a 2xx status code
func (o *GetPaymentConsentV2UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 unprocessable entity response has a 3xx status code
func (o *GetPaymentConsentV2UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 unprocessable entity response has a 4xx status code
func (o *GetPaymentConsentV2UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v2 unprocessable entity response has a 5xx status code
func (o *GetPaymentConsentV2UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 unprocessable entity response a status code equal to that given
func (o *GetPaymentConsentV2UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get payment consent v2 unprocessable entity response
func (o *GetPaymentConsentV2UnprocessableEntity) Code() int {
	return 422
}

func (o *GetPaymentConsentV2UnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2UnprocessableEntity %s", 422, payload)
}

func (o *GetPaymentConsentV2UnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2UnprocessableEntity %s", 422, payload)
}

func (o *GetPaymentConsentV2UnprocessableEntity) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2TooManyRequests creates a GetPaymentConsentV2TooManyRequests with default headers values
func NewGetPaymentConsentV2TooManyRequests() *GetPaymentConsentV2TooManyRequests {
	return &GetPaymentConsentV2TooManyRequests{}
}

/*
GetPaymentConsentV2TooManyRequests describes a response with status code 429, with default header values.

Error
*/
type GetPaymentConsentV2TooManyRequests struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 too many requests response has a 2xx status code
func (o *GetPaymentConsentV2TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 too many requests response has a 3xx status code
func (o *GetPaymentConsentV2TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 too many requests response has a 4xx status code
func (o *GetPaymentConsentV2TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v2 too many requests response has a 5xx status code
func (o *GetPaymentConsentV2TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v2 too many requests response a status code equal to that given
func (o *GetPaymentConsentV2TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get payment consent v2 too many requests response
func (o *GetPaymentConsentV2TooManyRequests) Code() int {
	return 429
}

func (o *GetPaymentConsentV2TooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2TooManyRequests %s", 429, payload)
}

func (o *GetPaymentConsentV2TooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2TooManyRequests %s", 429, payload)
}

func (o *GetPaymentConsentV2TooManyRequests) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV2InternalServerError creates a GetPaymentConsentV2InternalServerError with default headers values
func NewGetPaymentConsentV2InternalServerError() *GetPaymentConsentV2InternalServerError {
	return &GetPaymentConsentV2InternalServerError{}
}

/*
GetPaymentConsentV2InternalServerError describes a response with status code 500, with default header values.

Error
*/
type GetPaymentConsentV2InternalServerError struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v2 internal server error response has a 2xx status code
func (o *GetPaymentConsentV2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v2 internal server error response has a 3xx status code
func (o *GetPaymentConsentV2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v2 internal server error response has a 4xx status code
func (o *GetPaymentConsentV2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get payment consent v2 internal server error response has a 5xx status code
func (o *GetPaymentConsentV2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get payment consent v2 internal server error response a status code equal to that given
func (o *GetPaymentConsentV2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get payment consent v2 internal server error response
func (o *GetPaymentConsentV2InternalServerError) Code() int {
	return 500
}

func (o *GetPaymentConsentV2InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2InternalServerError %s", 500, payload)
}

func (o *GetPaymentConsentV2InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /open-banking/payments/v2/consents/{consentID}][%d] getPaymentConsentV2InternalServerError %s", 500, payload)
}

func (o *GetPaymentConsentV2InternalServerError) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
