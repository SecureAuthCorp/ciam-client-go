// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obbr/models"
)

// PatchRecurringPaymentConsentV1Reader is a Reader for the PatchRecurringPaymentConsentV1 structure.
type PatchRecurringPaymentConsentV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRecurringPaymentConsentV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPatchRecurringPaymentConsentV1Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchRecurringPaymentConsentV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchRecurringPaymentConsentV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchRecurringPaymentConsentV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewPatchRecurringPaymentConsentV1MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewPatchRecurringPaymentConsentV1NotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPatchRecurringPaymentConsentV1UnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchRecurringPaymentConsentV1UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchRecurringPaymentConsentV1TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchRecurringPaymentConsentV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}] PatchRecurringPaymentConsentV1", response, response.Code())
	}
}

// NewPatchRecurringPaymentConsentV1Created creates a PatchRecurringPaymentConsentV1Created with default headers values
func NewPatchRecurringPaymentConsentV1Created() *PatchRecurringPaymentConsentV1Created {
	return &PatchRecurringPaymentConsentV1Created{}
}

/*
PatchRecurringPaymentConsentV1Created describes a response with status code 201, with default header values.

Customer recurring payment consent
*/
type PatchRecurringPaymentConsentV1Created struct {
	Payload *models.BrazilCustomerRecurringPaymentConsentResponseV1
}

// IsSuccess returns true when this patch recurring payment consent v1 created response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1Created) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch recurring payment consent v1 created response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1Created) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 created response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1Created) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recurring payment consent v1 created response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1Created) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 created response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1Created) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the patch recurring payment consent v1 created response
func (o *PatchRecurringPaymentConsentV1Created) Code() int {
	return 201
}

func (o *PatchRecurringPaymentConsentV1Created) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1Created  %+v", 201, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1Created) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1Created  %+v", 201, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1Created) GetPayload() *models.BrazilCustomerRecurringPaymentConsentResponseV1 {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BrazilCustomerRecurringPaymentConsentResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1BadRequest creates a PatchRecurringPaymentConsentV1BadRequest with default headers values
func NewPatchRecurringPaymentConsentV1BadRequest() *PatchRecurringPaymentConsentV1BadRequest {
	return &PatchRecurringPaymentConsentV1BadRequest{}
}

/*
PatchRecurringPaymentConsentV1BadRequest describes a response with status code 400, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1BadRequest struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 bad request response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 bad request response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 bad request response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recurring payment consent v1 bad request response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 bad request response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch recurring payment consent v1 bad request response
func (o *PatchRecurringPaymentConsentV1BadRequest) Code() int {
	return 400
}

func (o *PatchRecurringPaymentConsentV1BadRequest) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1BadRequest  %+v", 400, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1BadRequest) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1BadRequest  %+v", 400, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1BadRequest) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1Unauthorized creates a PatchRecurringPaymentConsentV1Unauthorized with default headers values
func NewPatchRecurringPaymentConsentV1Unauthorized() *PatchRecurringPaymentConsentV1Unauthorized {
	return &PatchRecurringPaymentConsentV1Unauthorized{}
}

/*
PatchRecurringPaymentConsentV1Unauthorized describes a response with status code 401, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1Unauthorized struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 unauthorized response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 unauthorized response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 unauthorized response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recurring payment consent v1 unauthorized response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 unauthorized response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the patch recurring payment consent v1 unauthorized response
func (o *PatchRecurringPaymentConsentV1Unauthorized) Code() int {
	return 401
}

func (o *PatchRecurringPaymentConsentV1Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1Unauthorized  %+v", 401, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1Unauthorized) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1Unauthorized  %+v", 401, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1Unauthorized) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1Forbidden creates a PatchRecurringPaymentConsentV1Forbidden with default headers values
func NewPatchRecurringPaymentConsentV1Forbidden() *PatchRecurringPaymentConsentV1Forbidden {
	return &PatchRecurringPaymentConsentV1Forbidden{}
}

/*
PatchRecurringPaymentConsentV1Forbidden describes a response with status code 403, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1Forbidden struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 forbidden response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 forbidden response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 forbidden response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recurring payment consent v1 forbidden response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 forbidden response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the patch recurring payment consent v1 forbidden response
func (o *PatchRecurringPaymentConsentV1Forbidden) Code() int {
	return 403
}

func (o *PatchRecurringPaymentConsentV1Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1Forbidden  %+v", 403, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1Forbidden) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1Forbidden  %+v", 403, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1Forbidden) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1MethodNotAllowed creates a PatchRecurringPaymentConsentV1MethodNotAllowed with default headers values
func NewPatchRecurringPaymentConsentV1MethodNotAllowed() *PatchRecurringPaymentConsentV1MethodNotAllowed {
	return &PatchRecurringPaymentConsentV1MethodNotAllowed{}
}

/*
PatchRecurringPaymentConsentV1MethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1MethodNotAllowed struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 method not allowed response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 method not allowed response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 method not allowed response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recurring payment consent v1 method not allowed response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 method not allowed response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the patch recurring payment consent v1 method not allowed response
func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) Code() int {
	return 405
}

func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1MethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1MethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1NotAcceptable creates a PatchRecurringPaymentConsentV1NotAcceptable with default headers values
func NewPatchRecurringPaymentConsentV1NotAcceptable() *PatchRecurringPaymentConsentV1NotAcceptable {
	return &PatchRecurringPaymentConsentV1NotAcceptable{}
}

/*
PatchRecurringPaymentConsentV1NotAcceptable describes a response with status code 406, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1NotAcceptable struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 not acceptable response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1NotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 not acceptable response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1NotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 not acceptable response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1NotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recurring payment consent v1 not acceptable response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1NotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 not acceptable response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1NotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the patch recurring payment consent v1 not acceptable response
func (o *PatchRecurringPaymentConsentV1NotAcceptable) Code() int {
	return 406
}

func (o *PatchRecurringPaymentConsentV1NotAcceptable) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1NotAcceptable  %+v", 406, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1NotAcceptable) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1NotAcceptable  %+v", 406, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1NotAcceptable) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1NotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1UnsupportedMediaType creates a PatchRecurringPaymentConsentV1UnsupportedMediaType with default headers values
func NewPatchRecurringPaymentConsentV1UnsupportedMediaType() *PatchRecurringPaymentConsentV1UnsupportedMediaType {
	return &PatchRecurringPaymentConsentV1UnsupportedMediaType{}
}

/*
PatchRecurringPaymentConsentV1UnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1UnsupportedMediaType struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 unsupported media type response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 unsupported media type response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 unsupported media type response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recurring payment consent v1 unsupported media type response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 unsupported media type response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the patch recurring payment consent v1 unsupported media type response
func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) Code() int {
	return 415
}

func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1UnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1UnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1UnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1UnprocessableEntity creates a PatchRecurringPaymentConsentV1UnprocessableEntity with default headers values
func NewPatchRecurringPaymentConsentV1UnprocessableEntity() *PatchRecurringPaymentConsentV1UnprocessableEntity {
	return &PatchRecurringPaymentConsentV1UnprocessableEntity{}
}

/*
PatchRecurringPaymentConsentV1UnprocessableEntity describes a response with status code 422, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1UnprocessableEntity struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 unprocessable entity response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 unprocessable entity response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 unprocessable entity response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recurring payment consent v1 unprocessable entity response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 unprocessable entity response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the patch recurring payment consent v1 unprocessable entity response
func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) Code() int {
	return 422
}

func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1TooManyRequests creates a PatchRecurringPaymentConsentV1TooManyRequests with default headers values
func NewPatchRecurringPaymentConsentV1TooManyRequests() *PatchRecurringPaymentConsentV1TooManyRequests {
	return &PatchRecurringPaymentConsentV1TooManyRequests{}
}

/*
PatchRecurringPaymentConsentV1TooManyRequests describes a response with status code 429, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1TooManyRequests struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 too many requests response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 too many requests response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 too many requests response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch recurring payment consent v1 too many requests response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch recurring payment consent v1 too many requests response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the patch recurring payment consent v1 too many requests response
func (o *PatchRecurringPaymentConsentV1TooManyRequests) Code() int {
	return 429
}

func (o *PatchRecurringPaymentConsentV1TooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1TooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1TooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1TooManyRequests  %+v", 429, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1TooManyRequests) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRecurringPaymentConsentV1InternalServerError creates a PatchRecurringPaymentConsentV1InternalServerError with default headers values
func NewPatchRecurringPaymentConsentV1InternalServerError() *PatchRecurringPaymentConsentV1InternalServerError {
	return &PatchRecurringPaymentConsentV1InternalServerError{}
}

/*
PatchRecurringPaymentConsentV1InternalServerError describes a response with status code 500, with default header values.

Error
*/
type PatchRecurringPaymentConsentV1InternalServerError struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this patch recurring payment consent v1 internal server error response has a 2xx status code
func (o *PatchRecurringPaymentConsentV1InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch recurring payment consent v1 internal server error response has a 3xx status code
func (o *PatchRecurringPaymentConsentV1InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch recurring payment consent v1 internal server error response has a 4xx status code
func (o *PatchRecurringPaymentConsentV1InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch recurring payment consent v1 internal server error response has a 5xx status code
func (o *PatchRecurringPaymentConsentV1InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch recurring payment consent v1 internal server error response a status code equal to that given
func (o *PatchRecurringPaymentConsentV1InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the patch recurring payment consent v1 internal server error response
func (o *PatchRecurringPaymentConsentV1InternalServerError) Code() int {
	return 500
}

func (o *PatchRecurringPaymentConsentV1InternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1InternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1InternalServerError) String() string {
	return fmt.Sprintf("[PATCH /open-banking/automatic-payments/v1/recurring-consents/{consentID}][%d] patchRecurringPaymentConsentV1InternalServerError  %+v", 500, o.Payload)
}

func (o *PatchRecurringPaymentConsentV1InternalServerError) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *PatchRecurringPaymentConsentV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
