// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obbr/models"
)

// GetPaymentConsentV3Reader is a Reader for the GetPaymentConsentV3 structure.
type GetPaymentConsentV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaymentConsentV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaymentConsentV3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaymentConsentV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPaymentConsentV3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPaymentConsentV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewGetPaymentConsentV3MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewGetPaymentConsentV3NotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetPaymentConsentV3UnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetPaymentConsentV3UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPaymentConsentV3TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPaymentConsentV3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /open-banking/payments/v3/consents/{consentID}] GetPaymentConsentV3", response, response.Code())
	}
}

// NewGetPaymentConsentV3OK creates a GetPaymentConsentV3OK with default headers values
func NewGetPaymentConsentV3OK() *GetPaymentConsentV3OK {
	return &GetPaymentConsentV3OK{}
}

/*
GetPaymentConsentV3OK describes a response with status code 200, with default header values.

Customer payment consent
*/
type GetPaymentConsentV3OK struct {
	Payload *models.BrazilCustomerPaymentConsentResponseV3
}

// IsSuccess returns true when this get payment consent v3 o k response has a 2xx status code
func (o *GetPaymentConsentV3OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get payment consent v3 o k response has a 3xx status code
func (o *GetPaymentConsentV3OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 o k response has a 4xx status code
func (o *GetPaymentConsentV3OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get payment consent v3 o k response has a 5xx status code
func (o *GetPaymentConsentV3OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 o k response a status code equal to that given
func (o *GetPaymentConsentV3OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get payment consent v3 o k response
func (o *GetPaymentConsentV3OK) Code() int {
	return 200
}

func (o *GetPaymentConsentV3OK) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3OK  %+v", 200, o.Payload)
}

func (o *GetPaymentConsentV3OK) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3OK  %+v", 200, o.Payload)
}

func (o *GetPaymentConsentV3OK) GetPayload() *models.BrazilCustomerPaymentConsentResponseV3 {
	return o.Payload
}

func (o *GetPaymentConsentV3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BrazilCustomerPaymentConsentResponseV3)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3BadRequest creates a GetPaymentConsentV3BadRequest with default headers values
func NewGetPaymentConsentV3BadRequest() *GetPaymentConsentV3BadRequest {
	return &GetPaymentConsentV3BadRequest{}
}

/*
GetPaymentConsentV3BadRequest describes a response with status code 400, with default header values.

Error
*/
type GetPaymentConsentV3BadRequest struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 bad request response has a 2xx status code
func (o *GetPaymentConsentV3BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 bad request response has a 3xx status code
func (o *GetPaymentConsentV3BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 bad request response has a 4xx status code
func (o *GetPaymentConsentV3BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v3 bad request response has a 5xx status code
func (o *GetPaymentConsentV3BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 bad request response a status code equal to that given
func (o *GetPaymentConsentV3BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get payment consent v3 bad request response
func (o *GetPaymentConsentV3BadRequest) Code() int {
	return 400
}

func (o *GetPaymentConsentV3BadRequest) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3BadRequest  %+v", 400, o.Payload)
}

func (o *GetPaymentConsentV3BadRequest) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3BadRequest  %+v", 400, o.Payload)
}

func (o *GetPaymentConsentV3BadRequest) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3Unauthorized creates a GetPaymentConsentV3Unauthorized with default headers values
func NewGetPaymentConsentV3Unauthorized() *GetPaymentConsentV3Unauthorized {
	return &GetPaymentConsentV3Unauthorized{}
}

/*
GetPaymentConsentV3Unauthorized describes a response with status code 401, with default header values.

Error
*/
type GetPaymentConsentV3Unauthorized struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 unauthorized response has a 2xx status code
func (o *GetPaymentConsentV3Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 unauthorized response has a 3xx status code
func (o *GetPaymentConsentV3Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 unauthorized response has a 4xx status code
func (o *GetPaymentConsentV3Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v3 unauthorized response has a 5xx status code
func (o *GetPaymentConsentV3Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 unauthorized response a status code equal to that given
func (o *GetPaymentConsentV3Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get payment consent v3 unauthorized response
func (o *GetPaymentConsentV3Unauthorized) Code() int {
	return 401
}

func (o *GetPaymentConsentV3Unauthorized) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3Unauthorized  %+v", 401, o.Payload)
}

func (o *GetPaymentConsentV3Unauthorized) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3Unauthorized  %+v", 401, o.Payload)
}

func (o *GetPaymentConsentV3Unauthorized) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3Forbidden creates a GetPaymentConsentV3Forbidden with default headers values
func NewGetPaymentConsentV3Forbidden() *GetPaymentConsentV3Forbidden {
	return &GetPaymentConsentV3Forbidden{}
}

/*
GetPaymentConsentV3Forbidden describes a response with status code 403, with default header values.

Error
*/
type GetPaymentConsentV3Forbidden struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 forbidden response has a 2xx status code
func (o *GetPaymentConsentV3Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 forbidden response has a 3xx status code
func (o *GetPaymentConsentV3Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 forbidden response has a 4xx status code
func (o *GetPaymentConsentV3Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v3 forbidden response has a 5xx status code
func (o *GetPaymentConsentV3Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 forbidden response a status code equal to that given
func (o *GetPaymentConsentV3Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get payment consent v3 forbidden response
func (o *GetPaymentConsentV3Forbidden) Code() int {
	return 403
}

func (o *GetPaymentConsentV3Forbidden) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3Forbidden  %+v", 403, o.Payload)
}

func (o *GetPaymentConsentV3Forbidden) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3Forbidden  %+v", 403, o.Payload)
}

func (o *GetPaymentConsentV3Forbidden) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3MethodNotAllowed creates a GetPaymentConsentV3MethodNotAllowed with default headers values
func NewGetPaymentConsentV3MethodNotAllowed() *GetPaymentConsentV3MethodNotAllowed {
	return &GetPaymentConsentV3MethodNotAllowed{}
}

/*
GetPaymentConsentV3MethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type GetPaymentConsentV3MethodNotAllowed struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 method not allowed response has a 2xx status code
func (o *GetPaymentConsentV3MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 method not allowed response has a 3xx status code
func (o *GetPaymentConsentV3MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 method not allowed response has a 4xx status code
func (o *GetPaymentConsentV3MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v3 method not allowed response has a 5xx status code
func (o *GetPaymentConsentV3MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 method not allowed response a status code equal to that given
func (o *GetPaymentConsentV3MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the get payment consent v3 method not allowed response
func (o *GetPaymentConsentV3MethodNotAllowed) Code() int {
	return 405
}

func (o *GetPaymentConsentV3MethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3MethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetPaymentConsentV3MethodNotAllowed) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3MethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetPaymentConsentV3MethodNotAllowed) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3NotAcceptable creates a GetPaymentConsentV3NotAcceptable with default headers values
func NewGetPaymentConsentV3NotAcceptable() *GetPaymentConsentV3NotAcceptable {
	return &GetPaymentConsentV3NotAcceptable{}
}

/*
GetPaymentConsentV3NotAcceptable describes a response with status code 406, with default header values.

Error
*/
type GetPaymentConsentV3NotAcceptable struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 not acceptable response has a 2xx status code
func (o *GetPaymentConsentV3NotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 not acceptable response has a 3xx status code
func (o *GetPaymentConsentV3NotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 not acceptable response has a 4xx status code
func (o *GetPaymentConsentV3NotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v3 not acceptable response has a 5xx status code
func (o *GetPaymentConsentV3NotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 not acceptable response a status code equal to that given
func (o *GetPaymentConsentV3NotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the get payment consent v3 not acceptable response
func (o *GetPaymentConsentV3NotAcceptable) Code() int {
	return 406
}

func (o *GetPaymentConsentV3NotAcceptable) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3NotAcceptable  %+v", 406, o.Payload)
}

func (o *GetPaymentConsentV3NotAcceptable) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3NotAcceptable  %+v", 406, o.Payload)
}

func (o *GetPaymentConsentV3NotAcceptable) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3NotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3UnsupportedMediaType creates a GetPaymentConsentV3UnsupportedMediaType with default headers values
func NewGetPaymentConsentV3UnsupportedMediaType() *GetPaymentConsentV3UnsupportedMediaType {
	return &GetPaymentConsentV3UnsupportedMediaType{}
}

/*
GetPaymentConsentV3UnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type GetPaymentConsentV3UnsupportedMediaType struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 unsupported media type response has a 2xx status code
func (o *GetPaymentConsentV3UnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 unsupported media type response has a 3xx status code
func (o *GetPaymentConsentV3UnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 unsupported media type response has a 4xx status code
func (o *GetPaymentConsentV3UnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v3 unsupported media type response has a 5xx status code
func (o *GetPaymentConsentV3UnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 unsupported media type response a status code equal to that given
func (o *GetPaymentConsentV3UnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the get payment consent v3 unsupported media type response
func (o *GetPaymentConsentV3UnsupportedMediaType) Code() int {
	return 415
}

func (o *GetPaymentConsentV3UnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3UnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetPaymentConsentV3UnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3UnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetPaymentConsentV3UnsupportedMediaType) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3UnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3UnprocessableEntity creates a GetPaymentConsentV3UnprocessableEntity with default headers values
func NewGetPaymentConsentV3UnprocessableEntity() *GetPaymentConsentV3UnprocessableEntity {
	return &GetPaymentConsentV3UnprocessableEntity{}
}

/*
GetPaymentConsentV3UnprocessableEntity describes a response with status code 422, with default header values.

Error
*/
type GetPaymentConsentV3UnprocessableEntity struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 unprocessable entity response has a 2xx status code
func (o *GetPaymentConsentV3UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 unprocessable entity response has a 3xx status code
func (o *GetPaymentConsentV3UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 unprocessable entity response has a 4xx status code
func (o *GetPaymentConsentV3UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v3 unprocessable entity response has a 5xx status code
func (o *GetPaymentConsentV3UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 unprocessable entity response a status code equal to that given
func (o *GetPaymentConsentV3UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get payment consent v3 unprocessable entity response
func (o *GetPaymentConsentV3UnprocessableEntity) Code() int {
	return 422
}

func (o *GetPaymentConsentV3UnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetPaymentConsentV3UnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetPaymentConsentV3UnprocessableEntity) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3TooManyRequests creates a GetPaymentConsentV3TooManyRequests with default headers values
func NewGetPaymentConsentV3TooManyRequests() *GetPaymentConsentV3TooManyRequests {
	return &GetPaymentConsentV3TooManyRequests{}
}

/*
GetPaymentConsentV3TooManyRequests describes a response with status code 429, with default header values.

Error
*/
type GetPaymentConsentV3TooManyRequests struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 too many requests response has a 2xx status code
func (o *GetPaymentConsentV3TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 too many requests response has a 3xx status code
func (o *GetPaymentConsentV3TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 too many requests response has a 4xx status code
func (o *GetPaymentConsentV3TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get payment consent v3 too many requests response has a 5xx status code
func (o *GetPaymentConsentV3TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get payment consent v3 too many requests response a status code equal to that given
func (o *GetPaymentConsentV3TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get payment consent v3 too many requests response
func (o *GetPaymentConsentV3TooManyRequests) Code() int {
	return 429
}

func (o *GetPaymentConsentV3TooManyRequests) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3TooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPaymentConsentV3TooManyRequests) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3TooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPaymentConsentV3TooManyRequests) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaymentConsentV3InternalServerError creates a GetPaymentConsentV3InternalServerError with default headers values
func NewGetPaymentConsentV3InternalServerError() *GetPaymentConsentV3InternalServerError {
	return &GetPaymentConsentV3InternalServerError{}
}

/*
GetPaymentConsentV3InternalServerError describes a response with status code 500, with default header values.

Error
*/
type GetPaymentConsentV3InternalServerError struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this get payment consent v3 internal server error response has a 2xx status code
func (o *GetPaymentConsentV3InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get payment consent v3 internal server error response has a 3xx status code
func (o *GetPaymentConsentV3InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get payment consent v3 internal server error response has a 4xx status code
func (o *GetPaymentConsentV3InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get payment consent v3 internal server error response has a 5xx status code
func (o *GetPaymentConsentV3InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get payment consent v3 internal server error response a status code equal to that given
func (o *GetPaymentConsentV3InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get payment consent v3 internal server error response
func (o *GetPaymentConsentV3InternalServerError) Code() int {
	return 500
}

func (o *GetPaymentConsentV3InternalServerError) Error() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3InternalServerError  %+v", 500, o.Payload)
}

func (o *GetPaymentConsentV3InternalServerError) String() string {
	return fmt.Sprintf("[GET /open-banking/payments/v3/consents/{consentID}][%d] getPaymentConsentV3InternalServerError  %+v", 500, o.Payload)
}

func (o *GetPaymentConsentV3InternalServerError) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *GetPaymentConsentV3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
