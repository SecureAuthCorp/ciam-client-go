// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obbr/models"
)

// CreatePaymentConsentV4Reader is a Reader for the CreatePaymentConsentV4 structure.
type CreatePaymentConsentV4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreatePaymentConsentV4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreatePaymentConsentV4Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreatePaymentConsentV4BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreatePaymentConsentV4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreatePaymentConsentV4Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreatePaymentConsentV4MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewCreatePaymentConsentV4NotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreatePaymentConsentV4UnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreatePaymentConsentV4UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreatePaymentConsentV4TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreatePaymentConsentV4InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /open-banking/payments/v4/consents] CreatePaymentConsentV4", response, response.Code())
	}
}

// NewCreatePaymentConsentV4Created creates a CreatePaymentConsentV4Created with default headers values
func NewCreatePaymentConsentV4Created() *CreatePaymentConsentV4Created {
	return &CreatePaymentConsentV4Created{}
}

/*
CreatePaymentConsentV4Created describes a response with status code 201, with default header values.

Customer payment consent
*/
type CreatePaymentConsentV4Created struct {
	Payload *models.BrazilCustomerPaymentConsentResponseV4
}

// IsSuccess returns true when this create payment consent v4 created response has a 2xx status code
func (o *CreatePaymentConsentV4Created) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create payment consent v4 created response has a 3xx status code
func (o *CreatePaymentConsentV4Created) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 created response has a 4xx status code
func (o *CreatePaymentConsentV4Created) IsClientError() bool {
	return false
}

// IsServerError returns true when this create payment consent v4 created response has a 5xx status code
func (o *CreatePaymentConsentV4Created) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 created response a status code equal to that given
func (o *CreatePaymentConsentV4Created) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create payment consent v4 created response
func (o *CreatePaymentConsentV4Created) Code() int {
	return 201
}

func (o *CreatePaymentConsentV4Created) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4Created  %+v", 201, o.Payload)
}

func (o *CreatePaymentConsentV4Created) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4Created  %+v", 201, o.Payload)
}

func (o *CreatePaymentConsentV4Created) GetPayload() *models.BrazilCustomerPaymentConsentResponseV4 {
	return o.Payload
}

func (o *CreatePaymentConsentV4Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BrazilCustomerPaymentConsentResponseV4)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4BadRequest creates a CreatePaymentConsentV4BadRequest with default headers values
func NewCreatePaymentConsentV4BadRequest() *CreatePaymentConsentV4BadRequest {
	return &CreatePaymentConsentV4BadRequest{}
}

/*
CreatePaymentConsentV4BadRequest describes a response with status code 400, with default header values.

Error
*/
type CreatePaymentConsentV4BadRequest struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 bad request response has a 2xx status code
func (o *CreatePaymentConsentV4BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 bad request response has a 3xx status code
func (o *CreatePaymentConsentV4BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 bad request response has a 4xx status code
func (o *CreatePaymentConsentV4BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create payment consent v4 bad request response has a 5xx status code
func (o *CreatePaymentConsentV4BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 bad request response a status code equal to that given
func (o *CreatePaymentConsentV4BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create payment consent v4 bad request response
func (o *CreatePaymentConsentV4BadRequest) Code() int {
	return 400
}

func (o *CreatePaymentConsentV4BadRequest) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4BadRequest  %+v", 400, o.Payload)
}

func (o *CreatePaymentConsentV4BadRequest) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4BadRequest  %+v", 400, o.Payload)
}

func (o *CreatePaymentConsentV4BadRequest) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4Unauthorized creates a CreatePaymentConsentV4Unauthorized with default headers values
func NewCreatePaymentConsentV4Unauthorized() *CreatePaymentConsentV4Unauthorized {
	return &CreatePaymentConsentV4Unauthorized{}
}

/*
CreatePaymentConsentV4Unauthorized describes a response with status code 401, with default header values.

Error
*/
type CreatePaymentConsentV4Unauthorized struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 unauthorized response has a 2xx status code
func (o *CreatePaymentConsentV4Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 unauthorized response has a 3xx status code
func (o *CreatePaymentConsentV4Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 unauthorized response has a 4xx status code
func (o *CreatePaymentConsentV4Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create payment consent v4 unauthorized response has a 5xx status code
func (o *CreatePaymentConsentV4Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 unauthorized response a status code equal to that given
func (o *CreatePaymentConsentV4Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create payment consent v4 unauthorized response
func (o *CreatePaymentConsentV4Unauthorized) Code() int {
	return 401
}

func (o *CreatePaymentConsentV4Unauthorized) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4Unauthorized  %+v", 401, o.Payload)
}

func (o *CreatePaymentConsentV4Unauthorized) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4Unauthorized  %+v", 401, o.Payload)
}

func (o *CreatePaymentConsentV4Unauthorized) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4Forbidden creates a CreatePaymentConsentV4Forbidden with default headers values
func NewCreatePaymentConsentV4Forbidden() *CreatePaymentConsentV4Forbidden {
	return &CreatePaymentConsentV4Forbidden{}
}

/*
CreatePaymentConsentV4Forbidden describes a response with status code 403, with default header values.

Error
*/
type CreatePaymentConsentV4Forbidden struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 forbidden response has a 2xx status code
func (o *CreatePaymentConsentV4Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 forbidden response has a 3xx status code
func (o *CreatePaymentConsentV4Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 forbidden response has a 4xx status code
func (o *CreatePaymentConsentV4Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create payment consent v4 forbidden response has a 5xx status code
func (o *CreatePaymentConsentV4Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 forbidden response a status code equal to that given
func (o *CreatePaymentConsentV4Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create payment consent v4 forbidden response
func (o *CreatePaymentConsentV4Forbidden) Code() int {
	return 403
}

func (o *CreatePaymentConsentV4Forbidden) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4Forbidden  %+v", 403, o.Payload)
}

func (o *CreatePaymentConsentV4Forbidden) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4Forbidden  %+v", 403, o.Payload)
}

func (o *CreatePaymentConsentV4Forbidden) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4MethodNotAllowed creates a CreatePaymentConsentV4MethodNotAllowed with default headers values
func NewCreatePaymentConsentV4MethodNotAllowed() *CreatePaymentConsentV4MethodNotAllowed {
	return &CreatePaymentConsentV4MethodNotAllowed{}
}

/*
CreatePaymentConsentV4MethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type CreatePaymentConsentV4MethodNotAllowed struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 method not allowed response has a 2xx status code
func (o *CreatePaymentConsentV4MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 method not allowed response has a 3xx status code
func (o *CreatePaymentConsentV4MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 method not allowed response has a 4xx status code
func (o *CreatePaymentConsentV4MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create payment consent v4 method not allowed response has a 5xx status code
func (o *CreatePaymentConsentV4MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 method not allowed response a status code equal to that given
func (o *CreatePaymentConsentV4MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create payment consent v4 method not allowed response
func (o *CreatePaymentConsentV4MethodNotAllowed) Code() int {
	return 405
}

func (o *CreatePaymentConsentV4MethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4MethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CreatePaymentConsentV4MethodNotAllowed) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4MethodNotAllowed  %+v", 405, o.Payload)
}

func (o *CreatePaymentConsentV4MethodNotAllowed) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4NotAcceptable creates a CreatePaymentConsentV4NotAcceptable with default headers values
func NewCreatePaymentConsentV4NotAcceptable() *CreatePaymentConsentV4NotAcceptable {
	return &CreatePaymentConsentV4NotAcceptable{}
}

/*
CreatePaymentConsentV4NotAcceptable describes a response with status code 406, with default header values.

Error
*/
type CreatePaymentConsentV4NotAcceptable struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 not acceptable response has a 2xx status code
func (o *CreatePaymentConsentV4NotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 not acceptable response has a 3xx status code
func (o *CreatePaymentConsentV4NotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 not acceptable response has a 4xx status code
func (o *CreatePaymentConsentV4NotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this create payment consent v4 not acceptable response has a 5xx status code
func (o *CreatePaymentConsentV4NotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 not acceptable response a status code equal to that given
func (o *CreatePaymentConsentV4NotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the create payment consent v4 not acceptable response
func (o *CreatePaymentConsentV4NotAcceptable) Code() int {
	return 406
}

func (o *CreatePaymentConsentV4NotAcceptable) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4NotAcceptable  %+v", 406, o.Payload)
}

func (o *CreatePaymentConsentV4NotAcceptable) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4NotAcceptable  %+v", 406, o.Payload)
}

func (o *CreatePaymentConsentV4NotAcceptable) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4NotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4UnsupportedMediaType creates a CreatePaymentConsentV4UnsupportedMediaType with default headers values
func NewCreatePaymentConsentV4UnsupportedMediaType() *CreatePaymentConsentV4UnsupportedMediaType {
	return &CreatePaymentConsentV4UnsupportedMediaType{}
}

/*
CreatePaymentConsentV4UnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type CreatePaymentConsentV4UnsupportedMediaType struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 unsupported media type response has a 2xx status code
func (o *CreatePaymentConsentV4UnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 unsupported media type response has a 3xx status code
func (o *CreatePaymentConsentV4UnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 unsupported media type response has a 4xx status code
func (o *CreatePaymentConsentV4UnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create payment consent v4 unsupported media type response has a 5xx status code
func (o *CreatePaymentConsentV4UnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 unsupported media type response a status code equal to that given
func (o *CreatePaymentConsentV4UnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the create payment consent v4 unsupported media type response
func (o *CreatePaymentConsentV4UnsupportedMediaType) Code() int {
	return 415
}

func (o *CreatePaymentConsentV4UnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4UnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreatePaymentConsentV4UnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4UnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreatePaymentConsentV4UnsupportedMediaType) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4UnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4UnprocessableEntity creates a CreatePaymentConsentV4UnprocessableEntity with default headers values
func NewCreatePaymentConsentV4UnprocessableEntity() *CreatePaymentConsentV4UnprocessableEntity {
	return &CreatePaymentConsentV4UnprocessableEntity{}
}

/*
CreatePaymentConsentV4UnprocessableEntity describes a response with status code 422, with default header values.

Error
*/
type CreatePaymentConsentV4UnprocessableEntity struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 unprocessable entity response has a 2xx status code
func (o *CreatePaymentConsentV4UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 unprocessable entity response has a 3xx status code
func (o *CreatePaymentConsentV4UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 unprocessable entity response has a 4xx status code
func (o *CreatePaymentConsentV4UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create payment consent v4 unprocessable entity response has a 5xx status code
func (o *CreatePaymentConsentV4UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 unprocessable entity response a status code equal to that given
func (o *CreatePaymentConsentV4UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create payment consent v4 unprocessable entity response
func (o *CreatePaymentConsentV4UnprocessableEntity) Code() int {
	return 422
}

func (o *CreatePaymentConsentV4UnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreatePaymentConsentV4UnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4UnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreatePaymentConsentV4UnprocessableEntity) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4TooManyRequests creates a CreatePaymentConsentV4TooManyRequests with default headers values
func NewCreatePaymentConsentV4TooManyRequests() *CreatePaymentConsentV4TooManyRequests {
	return &CreatePaymentConsentV4TooManyRequests{}
}

/*
CreatePaymentConsentV4TooManyRequests describes a response with status code 429, with default header values.

Error
*/
type CreatePaymentConsentV4TooManyRequests struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 too many requests response has a 2xx status code
func (o *CreatePaymentConsentV4TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 too many requests response has a 3xx status code
func (o *CreatePaymentConsentV4TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 too many requests response has a 4xx status code
func (o *CreatePaymentConsentV4TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create payment consent v4 too many requests response has a 5xx status code
func (o *CreatePaymentConsentV4TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create payment consent v4 too many requests response a status code equal to that given
func (o *CreatePaymentConsentV4TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create payment consent v4 too many requests response
func (o *CreatePaymentConsentV4TooManyRequests) Code() int {
	return 429
}

func (o *CreatePaymentConsentV4TooManyRequests) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4TooManyRequests  %+v", 429, o.Payload)
}

func (o *CreatePaymentConsentV4TooManyRequests) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4TooManyRequests  %+v", 429, o.Payload)
}

func (o *CreatePaymentConsentV4TooManyRequests) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreatePaymentConsentV4InternalServerError creates a CreatePaymentConsentV4InternalServerError with default headers values
func NewCreatePaymentConsentV4InternalServerError() *CreatePaymentConsentV4InternalServerError {
	return &CreatePaymentConsentV4InternalServerError{}
}

/*
CreatePaymentConsentV4InternalServerError describes a response with status code 500, with default header values.

Error
*/
type CreatePaymentConsentV4InternalServerError struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create payment consent v4 internal server error response has a 2xx status code
func (o *CreatePaymentConsentV4InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create payment consent v4 internal server error response has a 3xx status code
func (o *CreatePaymentConsentV4InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create payment consent v4 internal server error response has a 4xx status code
func (o *CreatePaymentConsentV4InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create payment consent v4 internal server error response has a 5xx status code
func (o *CreatePaymentConsentV4InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create payment consent v4 internal server error response a status code equal to that given
func (o *CreatePaymentConsentV4InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create payment consent v4 internal server error response
func (o *CreatePaymentConsentV4InternalServerError) Code() int {
	return 500
}

func (o *CreatePaymentConsentV4InternalServerError) Error() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4InternalServerError  %+v", 500, o.Payload)
}

func (o *CreatePaymentConsentV4InternalServerError) String() string {
	return fmt.Sprintf("[POST /open-banking/payments/v4/consents][%d] createPaymentConsentV4InternalServerError  %+v", 500, o.Payload)
}

func (o *CreatePaymentConsentV4InternalServerError) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreatePaymentConsentV4InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
