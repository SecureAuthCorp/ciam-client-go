// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obbr/models"
)

// CreateRecurringPaymentConsentV1Reader is a Reader for the CreateRecurringPaymentConsentV1 structure.
type CreateRecurringPaymentConsentV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRecurringPaymentConsentV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateRecurringPaymentConsentV1Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRecurringPaymentConsentV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateRecurringPaymentConsentV1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateRecurringPaymentConsentV1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewCreateRecurringPaymentConsentV1MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewCreateRecurringPaymentConsentV1NotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateRecurringPaymentConsentV1UnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateRecurringPaymentConsentV1UnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateRecurringPaymentConsentV1TooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateRecurringPaymentConsentV1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /open-banking/automatic-payments/v1/recurring-consents] CreateRecurringPaymentConsentV1", response, response.Code())
	}
}

// NewCreateRecurringPaymentConsentV1Created creates a CreateRecurringPaymentConsentV1Created with default headers values
func NewCreateRecurringPaymentConsentV1Created() *CreateRecurringPaymentConsentV1Created {
	return &CreateRecurringPaymentConsentV1Created{}
}

/*
CreateRecurringPaymentConsentV1Created describes a response with status code 201, with default header values.

Customer recurring payment consent
*/
type CreateRecurringPaymentConsentV1Created struct {
	Payload *models.BrazilCustomerRecurringPaymentConsentResponseV1
}

// IsSuccess returns true when this create recurring payment consent v1 created response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1Created) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create recurring payment consent v1 created response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1Created) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 created response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1Created) IsClientError() bool {
	return false
}

// IsServerError returns true when this create recurring payment consent v1 created response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1Created) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 created response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1Created) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create recurring payment consent v1 created response
func (o *CreateRecurringPaymentConsentV1Created) Code() int {
	return 201
}

func (o *CreateRecurringPaymentConsentV1Created) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1Created %s", 201, payload)
}

func (o *CreateRecurringPaymentConsentV1Created) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1Created %s", 201, payload)
}

func (o *CreateRecurringPaymentConsentV1Created) GetPayload() *models.BrazilCustomerRecurringPaymentConsentResponseV1 {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BrazilCustomerRecurringPaymentConsentResponseV1)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1BadRequest creates a CreateRecurringPaymentConsentV1BadRequest with default headers values
func NewCreateRecurringPaymentConsentV1BadRequest() *CreateRecurringPaymentConsentV1BadRequest {
	return &CreateRecurringPaymentConsentV1BadRequest{}
}

/*
CreateRecurringPaymentConsentV1BadRequest describes a response with status code 400, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1BadRequest struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 bad request response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 bad request response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 bad request response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create recurring payment consent v1 bad request response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 bad request response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create recurring payment consent v1 bad request response
func (o *CreateRecurringPaymentConsentV1BadRequest) Code() int {
	return 400
}

func (o *CreateRecurringPaymentConsentV1BadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1BadRequest %s", 400, payload)
}

func (o *CreateRecurringPaymentConsentV1BadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1BadRequest %s", 400, payload)
}

func (o *CreateRecurringPaymentConsentV1BadRequest) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1Unauthorized creates a CreateRecurringPaymentConsentV1Unauthorized with default headers values
func NewCreateRecurringPaymentConsentV1Unauthorized() *CreateRecurringPaymentConsentV1Unauthorized {
	return &CreateRecurringPaymentConsentV1Unauthorized{}
}

/*
CreateRecurringPaymentConsentV1Unauthorized describes a response with status code 401, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1Unauthorized struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 unauthorized response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 unauthorized response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 unauthorized response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create recurring payment consent v1 unauthorized response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 unauthorized response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the create recurring payment consent v1 unauthorized response
func (o *CreateRecurringPaymentConsentV1Unauthorized) Code() int {
	return 401
}

func (o *CreateRecurringPaymentConsentV1Unauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1Unauthorized %s", 401, payload)
}

func (o *CreateRecurringPaymentConsentV1Unauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1Unauthorized %s", 401, payload)
}

func (o *CreateRecurringPaymentConsentV1Unauthorized) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1Forbidden creates a CreateRecurringPaymentConsentV1Forbidden with default headers values
func NewCreateRecurringPaymentConsentV1Forbidden() *CreateRecurringPaymentConsentV1Forbidden {
	return &CreateRecurringPaymentConsentV1Forbidden{}
}

/*
CreateRecurringPaymentConsentV1Forbidden describes a response with status code 403, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1Forbidden struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 forbidden response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 forbidden response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 forbidden response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create recurring payment consent v1 forbidden response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 forbidden response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create recurring payment consent v1 forbidden response
func (o *CreateRecurringPaymentConsentV1Forbidden) Code() int {
	return 403
}

func (o *CreateRecurringPaymentConsentV1Forbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1Forbidden %s", 403, payload)
}

func (o *CreateRecurringPaymentConsentV1Forbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1Forbidden %s", 403, payload)
}

func (o *CreateRecurringPaymentConsentV1Forbidden) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1MethodNotAllowed creates a CreateRecurringPaymentConsentV1MethodNotAllowed with default headers values
func NewCreateRecurringPaymentConsentV1MethodNotAllowed() *CreateRecurringPaymentConsentV1MethodNotAllowed {
	return &CreateRecurringPaymentConsentV1MethodNotAllowed{}
}

/*
CreateRecurringPaymentConsentV1MethodNotAllowed describes a response with status code 405, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1MethodNotAllowed struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 method not allowed response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 method not allowed response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 method not allowed response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create recurring payment consent v1 method not allowed response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 method not allowed response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) IsCode(code int) bool {
	return code == 405
}

// Code gets the status code for the create recurring payment consent v1 method not allowed response
func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) Code() int {
	return 405
}

func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1MethodNotAllowed %s", 405, payload)
}

func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1MethodNotAllowed %s", 405, payload)
}

func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1NotAcceptable creates a CreateRecurringPaymentConsentV1NotAcceptable with default headers values
func NewCreateRecurringPaymentConsentV1NotAcceptable() *CreateRecurringPaymentConsentV1NotAcceptable {
	return &CreateRecurringPaymentConsentV1NotAcceptable{}
}

/*
CreateRecurringPaymentConsentV1NotAcceptable describes a response with status code 406, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1NotAcceptable struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 not acceptable response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1NotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 not acceptable response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1NotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 not acceptable response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1NotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this create recurring payment consent v1 not acceptable response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1NotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 not acceptable response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1NotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the create recurring payment consent v1 not acceptable response
func (o *CreateRecurringPaymentConsentV1NotAcceptable) Code() int {
	return 406
}

func (o *CreateRecurringPaymentConsentV1NotAcceptable) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1NotAcceptable %s", 406, payload)
}

func (o *CreateRecurringPaymentConsentV1NotAcceptable) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1NotAcceptable %s", 406, payload)
}

func (o *CreateRecurringPaymentConsentV1NotAcceptable) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1NotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1UnsupportedMediaType creates a CreateRecurringPaymentConsentV1UnsupportedMediaType with default headers values
func NewCreateRecurringPaymentConsentV1UnsupportedMediaType() *CreateRecurringPaymentConsentV1UnsupportedMediaType {
	return &CreateRecurringPaymentConsentV1UnsupportedMediaType{}
}

/*
CreateRecurringPaymentConsentV1UnsupportedMediaType describes a response with status code 415, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1UnsupportedMediaType struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 unsupported media type response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 unsupported media type response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 unsupported media type response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create recurring payment consent v1 unsupported media type response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 unsupported media type response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the create recurring payment consent v1 unsupported media type response
func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) Code() int {
	return 415
}

func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1UnsupportedMediaType %s", 415, payload)
}

func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1UnsupportedMediaType %s", 415, payload)
}

func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1UnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1UnprocessableEntity creates a CreateRecurringPaymentConsentV1UnprocessableEntity with default headers values
func NewCreateRecurringPaymentConsentV1UnprocessableEntity() *CreateRecurringPaymentConsentV1UnprocessableEntity {
	return &CreateRecurringPaymentConsentV1UnprocessableEntity{}
}

/*
CreateRecurringPaymentConsentV1UnprocessableEntity describes a response with status code 422, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1UnprocessableEntity struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 unprocessable entity response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 unprocessable entity response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 unprocessable entity response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create recurring payment consent v1 unprocessable entity response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 unprocessable entity response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create recurring payment consent v1 unprocessable entity response
func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) Code() int {
	return 422
}

func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1UnprocessableEntity %s", 422, payload)
}

func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1UnprocessableEntity %s", 422, payload)
}

func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1UnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1TooManyRequests creates a CreateRecurringPaymentConsentV1TooManyRequests with default headers values
func NewCreateRecurringPaymentConsentV1TooManyRequests() *CreateRecurringPaymentConsentV1TooManyRequests {
	return &CreateRecurringPaymentConsentV1TooManyRequests{}
}

/*
CreateRecurringPaymentConsentV1TooManyRequests describes a response with status code 429, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1TooManyRequests struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 too many requests response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1TooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 too many requests response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1TooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 too many requests response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1TooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create recurring payment consent v1 too many requests response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1TooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create recurring payment consent v1 too many requests response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1TooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the create recurring payment consent v1 too many requests response
func (o *CreateRecurringPaymentConsentV1TooManyRequests) Code() int {
	return 429
}

func (o *CreateRecurringPaymentConsentV1TooManyRequests) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1TooManyRequests %s", 429, payload)
}

func (o *CreateRecurringPaymentConsentV1TooManyRequests) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1TooManyRequests %s", 429, payload)
}

func (o *CreateRecurringPaymentConsentV1TooManyRequests) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1TooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRecurringPaymentConsentV1InternalServerError creates a CreateRecurringPaymentConsentV1InternalServerError with default headers values
func NewCreateRecurringPaymentConsentV1InternalServerError() *CreateRecurringPaymentConsentV1InternalServerError {
	return &CreateRecurringPaymentConsentV1InternalServerError{}
}

/*
CreateRecurringPaymentConsentV1InternalServerError describes a response with status code 500, with default header values.

Error
*/
type CreateRecurringPaymentConsentV1InternalServerError struct {
	Payload *models.OBBRErrorResponse
}

// IsSuccess returns true when this create recurring payment consent v1 internal server error response has a 2xx status code
func (o *CreateRecurringPaymentConsentV1InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create recurring payment consent v1 internal server error response has a 3xx status code
func (o *CreateRecurringPaymentConsentV1InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create recurring payment consent v1 internal server error response has a 4xx status code
func (o *CreateRecurringPaymentConsentV1InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create recurring payment consent v1 internal server error response has a 5xx status code
func (o *CreateRecurringPaymentConsentV1InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create recurring payment consent v1 internal server error response a status code equal to that given
func (o *CreateRecurringPaymentConsentV1InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create recurring payment consent v1 internal server error response
func (o *CreateRecurringPaymentConsentV1InternalServerError) Code() int {
	return 500
}

func (o *CreateRecurringPaymentConsentV1InternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1InternalServerError %s", 500, payload)
}

func (o *CreateRecurringPaymentConsentV1InternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /open-banking/automatic-payments/v1/recurring-consents][%d] createRecurringPaymentConsentV1InternalServerError %s", 500, payload)
}

func (o *CreateRecurringPaymentConsentV1InternalServerError) GetPayload() *models.OBBRErrorResponse {
	return o.Payload
}

func (o *CreateRecurringPaymentConsentV1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OBBRErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
