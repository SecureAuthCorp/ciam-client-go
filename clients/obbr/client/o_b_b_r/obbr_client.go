// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new o b b r API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for o b b r API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDataAccessConsent(params *CreateDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentCreated, error)

	CreateDataAccessConsentDeprecated(params *CreateDataAccessConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentDeprecatedCreated, error)

	CreateDataAccessConsentExtension(params *CreateDataAccessConsentExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentExtensionOK, error)

	CreateDataAccessConsentV2(params *CreateDataAccessConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentV2Created, error)

	CreatePaymentConsent(params *CreatePaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentCreated, error)

	CreatePaymentConsentDeprecated(params *CreatePaymentConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentDeprecatedCreated, error)

	CreatePaymentConsentV2(params *CreatePaymentConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentV2Created, error)

	CreatePaymentConsentV3(params *CreatePaymentConsentV3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentV3Created, error)

	CreatePaymentConsentV4(params *CreatePaymentConsentV4Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentV4Created, error)

	CreateRecurringPaymentConsentV1(params *CreateRecurringPaymentConsentV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRecurringPaymentConsentV1Created, error)

	DeleteDataAccessConsent(params *DeleteDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataAccessConsentNoContent, error)

	DeleteDataAccessConsentDeprecated(params *DeleteDataAccessConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataAccessConsentDeprecatedNoContent, error)

	DeleteDataAccessConsentV2(params *DeleteDataAccessConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataAccessConsentV2NoContent, error)

	GetDataAccessConsent(params *GetDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentOK, error)

	GetDataAccessConsentDeprecated(params *GetDataAccessConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentDeprecatedOK, error)

	GetDataAccessConsentExtensions(params *GetDataAccessConsentExtensionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentExtensionsOK, error)

	GetDataAccessConsentV2(params *GetDataAccessConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentV2OK, error)

	GetPaymentConsent(params *GetPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentOK, error)

	GetPaymentConsentDeprecated(params *GetPaymentConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentDeprecatedOK, error)

	GetPaymentConsentV2(params *GetPaymentConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentV2OK, error)

	GetPaymentConsentV3(params *GetPaymentConsentV3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentV3OK, error)

	GetPaymentConsentV4(params *GetPaymentConsentV4Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentV4OK, error)

	GetRecurringPaymentConsentV1(params *GetRecurringPaymentConsentV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecurringPaymentConsentV1OK, error)

	PatchPaymentConsent(params *PatchPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchPaymentConsentOK, error)

	PatchRecurringPaymentConsentV1(params *PatchRecurringPaymentConsentV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchRecurringPaymentConsentV1Created, error)

	ObbrDataAccessConsentIntrospect(params *ObbrDataAccessConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrDataAccessConsentIntrospectOK, error)

	ObbrDataAccessConsentV2Introspect(params *ObbrDataAccessConsentV2IntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrDataAccessConsentV2IntrospectOK, error)

	ObbrPaymentConsentIntrospect(params *ObbrPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectOK, error)

	ObbrPaymentConsentIntrospectV2(params *ObbrPaymentConsentIntrospectV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectV2OK, error)

	ObbrPaymentConsentIntrospectV3(params *ObbrPaymentConsentIntrospectV3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectV3OK, error)

	ObbrPaymentConsentIntrospectV4(params *ObbrPaymentConsentIntrospectV4Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectV4OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateDataAccessConsent creates data access consent v1

	This API allows an Account Information Service Provider (AISP) to create a consent to access the registration data

of a Payment Service User (PSU), along with information about transactions in PSU's accounts, credit cards, and
contracted credit products.

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreateDataAccessConsent(params *CreateDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataAccessConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataAccessConsent",
		Method:             "POST",
		PathPattern:        "/open-banking/consents/v1/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataAccessConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataAccessConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDataAccessConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateDataAccessConsentDeprecated creates data access consent v1

	This API allows an Account Information Service Provider (AISP) to create a consent to access the registration data

of a Payment Service User (PSU), along with information about transactions in PSU's accounts, credit cards, and
contracted credit products.

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreateDataAccessConsentDeprecated(params *CreateDataAccessConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentDeprecatedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataAccessConsentDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataAccessConsentDeprecated",
		Method:             "POST",
		PathPattern:        "/open-banking-brasil/open-banking/consents/v1/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataAccessConsentDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataAccessConsentDeprecatedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDataAccessConsentDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateDataAccessConsentExtension extends a data access v2 consent

	Extend the expiration time on an already authorised data access v2 consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) CreateDataAccessConsentExtension(params *CreateDataAccessConsentExtensionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentExtensionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataAccessConsentExtensionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataAccessConsentExtension",
		Method:             "POST",
		PathPattern:        "/open-banking/consents/v2/consents/{consentID}/extends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataAccessConsentExtensionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataAccessConsentExtensionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDataAccessConsentExtension: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateDataAccessConsentV2 creates data access consent v2

	This API allows an Account Information Service Provider (AISP) to create a consent to access the registration data

of a Payment Service User (PSU), along with information about transactions in PSU's accounts, credit cards, and
contracted credit products.

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreateDataAccessConsentV2(params *CreateDataAccessConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentV2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataAccessConsentV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataAccessConsentV2",
		Method:             "POST",
		PathPattern:        "/open-banking/consents/v2/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataAccessConsentV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataAccessConsentV2Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDataAccessConsentV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreatePaymentConsent creates payment consent v1

	This API allows an Account Information Service Provider (AISP) to create a consent to initiate payments between

banks and financial institutions on behalf of a Payment Service User (PSU).

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreatePaymentConsent(params *CreatePaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePaymentConsent",
		Method:             "POST",
		PathPattern:        "/open-banking/payments/v1/consents",
		ProducesMediaTypes: []string{"application/jwt"},
		ConsumesMediaTypes: []string{"application/jwt"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePaymentConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePaymentConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreatePaymentConsentDeprecated creates payment consent v1

	This API allows an Account Information Service Provider (AISP) to create a consent to initiate payments between

banks and financial institutions on behalf of a Payment Service User (PSU).

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreatePaymentConsentDeprecated(params *CreatePaymentConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentDeprecatedCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentConsentDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePaymentConsentDeprecated",
		Method:             "POST",
		PathPattern:        "/open-banking-brasil/open-banking/payments/v1/consents",
		ProducesMediaTypes: []string{"application/jwt"},
		ConsumesMediaTypes: []string{"application/jwt"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePaymentConsentDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentConsentDeprecatedCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePaymentConsentDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreatePaymentConsentV2 creates payment consent v2

	This API allows an Account Information Service Provider (AISP) to create a consent to initiate payments between

banks and financial institutions on behalf of a Payment Service User (PSU).

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreatePaymentConsentV2(params *CreatePaymentConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentV2Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentConsentV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePaymentConsentV2",
		Method:             "POST",
		PathPattern:        "/open-banking/payments/v2/consents",
		ProducesMediaTypes: []string{"application/jwt"},
		ConsumesMediaTypes: []string{"application/jwt"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePaymentConsentV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentConsentV2Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePaymentConsentV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreatePaymentConsentV3 creates payment consent v3

	This API allows an Account Information Service Provider (AISP) to create a consent to initiate payments between

banks and financial institutions on behalf of a Payment Service User (PSU).

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreatePaymentConsentV3(params *CreatePaymentConsentV3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentV3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentConsentV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePaymentConsentV3",
		Method:             "POST",
		PathPattern:        "/open-banking/payments/v3/consents",
		ProducesMediaTypes: []string{"application/jwt"},
		ConsumesMediaTypes: []string{"application/jwt"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePaymentConsentV3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentConsentV3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePaymentConsentV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreatePaymentConsentV4 creates payment consent v4

	This API allows an Account Information Service Provider (AISP) to create a consent to initiate payments between

banks and financial institutions on behalf of a Payment Service User (PSU).

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreatePaymentConsentV4(params *CreatePaymentConsentV4Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentV4Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentConsentV4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePaymentConsentV4",
		Method:             "POST",
		PathPattern:        "/open-banking/payments/v4/consents",
		ProducesMediaTypes: []string{"application/jwt"},
		ConsumesMediaTypes: []string{"application/jwt"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePaymentConsentV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentConsentV4Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePaymentConsentV4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateRecurringPaymentConsentV1 creates recurring payment consent v1

	This API allows an Account Information Service Provider (AISP) to create a long-term consent to initiate payments between

banks and financial institutions on behalf of a Payment Service User (PSU).

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) CreateRecurringPaymentConsentV1(params *CreateRecurringPaymentConsentV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRecurringPaymentConsentV1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecurringPaymentConsentV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRecurringPaymentConsentV1",
		Method:             "POST",
		PathPattern:        "/open-banking/automatic-payments/v1/recurring-consents",
		ProducesMediaTypes: []string{"application/jwt"},
		ConsumesMediaTypes: []string{"application/jwt"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRecurringPaymentConsentV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRecurringPaymentConsentV1Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRecurringPaymentConsentV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteDataAccessConsent deletes data access consent v1

	Delete a previously created data access consent. Pass the required consent identifier in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) DeleteDataAccessConsent(params *DeleteDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataAccessConsentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataAccessConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataAccessConsent",
		Method:             "DELETE",
		PathPattern:        "/open-banking/consents/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataAccessConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataAccessConsentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDataAccessConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteDataAccessConsentDeprecated deletes data access consent v1

	Delete a previously created data access consent. Pass the required consent identifier in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) DeleteDataAccessConsentDeprecated(params *DeleteDataAccessConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataAccessConsentDeprecatedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataAccessConsentDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataAccessConsentDeprecated",
		Method:             "DELETE",
		PathPattern:        "/open-banking-brasil/open-banking/consents/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataAccessConsentDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataAccessConsentDeprecatedNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDataAccessConsentDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteDataAccessConsentV2 deletes data access consent v2

	Delete a previously created data access consent. Pass the required consent identifier in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) DeleteDataAccessConsentV2(params *DeleteDataAccessConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataAccessConsentV2NoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataAccessConsentV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataAccessConsentV2",
		Method:             "DELETE",
		PathPattern:        "/open-banking/consents/v2/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataAccessConsentV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataAccessConsentV2NoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDataAccessConsentV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataAccessConsent gets data access consent v1

	Retrieve the information about a previously created data access consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetDataAccessConsent(params *GetDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataAccessConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataAccessConsent",
		Method:             "GET",
		PathPattern:        "/open-banking/consents/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataAccessConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataAccessConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDataAccessConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataAccessConsentDeprecated gets data access consent v1

	Retrieve the information about a previously created data access consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetDataAccessConsentDeprecated(params *GetDataAccessConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataAccessConsentDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataAccessConsentDeprecated",
		Method:             "GET",
		PathPattern:        "/open-banking-brasil/open-banking/consents/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataAccessConsentDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataAccessConsentDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDataAccessConsentDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataAccessConsentExtensions gets data access consent extensions

	Retrieve the details of consent extension. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetDataAccessConsentExtensions(params *GetDataAccessConsentExtensionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataAccessConsentExtensionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataAccessConsentExtensions",
		Method:             "GET",
		PathPattern:        "/open-banking/consents/v2/consents/{consentID}/extends",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataAccessConsentExtensionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataAccessConsentExtensionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDataAccessConsentExtensions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDataAccessConsentV2 gets data access consent v2

	Retrieve the information about a previously created data access consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetDataAccessConsentV2(params *GetDataAccessConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataAccessConsentV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataAccessConsentV2",
		Method:             "GET",
		PathPattern:        "/open-banking/consents/v2/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataAccessConsentV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataAccessConsentV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDataAccessConsentV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPaymentConsent gets payment consent v1

	Retrieve the information about a previously created payment consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetPaymentConsent(params *GetPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPaymentConsent",
		Method:             "GET",
		PathPattern:        "/open-banking/payments/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPaymentConsentDeprecated gets payment consent v1

	Retrieve the information about a previously created payment consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetPaymentConsentDeprecated(params *GetPaymentConsentDeprecatedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentDeprecatedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentConsentDeprecatedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPaymentConsentDeprecated",
		Method:             "GET",
		PathPattern:        "/open-banking-brasil/open-banking/payments/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentConsentDeprecatedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentConsentDeprecatedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentConsentDeprecated: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPaymentConsentV2 gets payment consent v2

	Retrieve the information about a previously created payment consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetPaymentConsentV2(params *GetPaymentConsentV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentConsentV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPaymentConsentV2",
		Method:             "GET",
		PathPattern:        "/open-banking/payments/v2/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentConsentV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentConsentV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentConsentV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPaymentConsentV3 gets payment consent v3

	Retrieve the information about a previously created payment consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetPaymentConsentV3(params *GetPaymentConsentV3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentConsentV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPaymentConsentV3",
		Method:             "GET",
		PathPattern:        "/open-banking/payments/v3/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentConsentV3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentConsentV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentConsentV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPaymentConsentV4 gets payment consent v4

	Retrieve the information about a previously created payment consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetPaymentConsentV4(params *GetPaymentConsentV4Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentConsentV4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPaymentConsentV4",
		Method:             "GET",
		PathPattern:        "/open-banking/payments/v4/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentConsentV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentConsentV4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentConsentV4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetRecurringPaymentConsentV1 gets recurring payment consent v1

	Retrieve the information about a previously created long-term payment consent. Pass the required consent identifier

in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) GetRecurringPaymentConsentV1(params *GetRecurringPaymentConsentV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecurringPaymentConsentV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecurringPaymentConsentV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRecurringPaymentConsentV1",
		Method:             "GET",
		PathPattern:        "/open-banking/automatic-payments/v1/recurring-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecurringPaymentConsentV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecurringPaymentConsentV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRecurringPaymentConsentV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PatchPaymentConsent revokes payment consent

	Revoke a previously granted payment consent. Pass the required consent identifier in the path.

This endpoint is used by a Payment Initiation Service Provider (PISP).

For authorization, pass the `Authorization: Bearer` with a token as a bearer value. To obtain the token and include
the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scope list in the AUTHORIZATIONS block.
*/
func (a *Client) PatchPaymentConsent(params *PatchPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchPaymentConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPaymentConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchPaymentConsent",
		Method:             "PATCH",
		PathPattern:        "/open-banking/payments/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchPaymentConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchPaymentConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchPaymentConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PatchRecurringPaymentConsentV1 patches recurring payment consent v1

	This API allows an Account Information Service Provider (AISP) to reject, revoke, or edit a long-term consent. Pass the required consent identifier

in the path.

For authorization, pass the `Authorization: Bearer` header with an access token as the bearer value. To obtain the
access token with all the required scopes, apply the
[Client Credentials](https://cloudentity.com/developers/basics/oauth-grant-types/client-credentials-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) PatchRecurringPaymentConsentV1(params *PatchRecurringPaymentConsentV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchRecurringPaymentConsentV1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRecurringPaymentConsentV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchRecurringPaymentConsentV1",
		Method:             "PATCH",
		PathPattern:        "/open-banking/automatic-payments/v1/recurring-consents/{consentID}",
		ProducesMediaTypes: []string{"application/jwt"},
		ConsumesMediaTypes: []string{"application/jwt"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRecurringPaymentConsentV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchRecurringPaymentConsentV1Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchRecurringPaymentConsentV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ObbrDataAccessConsentIntrospect introspects open banking brazil data access consent v1

	This endpoint accepts an OAuth 2.0 token and returns meta information surrounding the token along with the

data access consent and the associated account identifiers.

Pass the token as the bearer value with the `Authorization: Bearer` header. To obtain the token with all the required
scopes, apply the
[Authorization Code](https://cloudentity.com/developers/basics/oauth-grant-types/authorization-code-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) ObbrDataAccessConsentIntrospect(params *ObbrDataAccessConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrDataAccessConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrDataAccessConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrDataAccessConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/open-banking-brasil/open-banking/consents/v1/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrDataAccessConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrDataAccessConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrDataAccessConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ObbrDataAccessConsentV2Introspect introspects open banking brazil data access consent v2

	This endpoint accepts an OAuth 2.0 token bound to v2 data access consents and returns meta information surrounding the token

along with the data access consent and the associated account identifiers. It's also backwards compatible with v1
data access consent tokens.

Pass the token as the bearer value with the `Authorization: Bearer` header. To obtain the token with all the required
scopes, apply the
[Authorization Code](https://cloudentity.com/developers/basics/oauth-grant-types/authorization-code-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) ObbrDataAccessConsentV2Introspect(params *ObbrDataAccessConsentV2IntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrDataAccessConsentV2IntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrDataAccessConsentV2IntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrDataAccessConsentV2Introspect",
		Method:             "POST",
		PathPattern:        "/open-banking-brasil/open-banking/consents/v2/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrDataAccessConsentV2IntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrDataAccessConsentV2IntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrDataAccessConsentV2Introspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ObbrPaymentConsentIntrospect introspects open banking brazil payment consent v1

	This endpoint accepts an Oauth 2.0 token and returns meta information surrounding the token along with the

payment consent and the associated account identifiers.

Pass the token as the bearer value with the `Authorization: Bearer` header. To obtain the token with all the required
scopes, apply the
[Authorization Code](https://cloudentity.com/developers/basics/oauth-grant-types/authorization-code-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) ObbrPaymentConsentIntrospect(params *ObbrPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrPaymentConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrPaymentConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/open-banking-brasil/open-banking/payments/v1/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrPaymentConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrPaymentConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrPaymentConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ObbrPaymentConsentIntrospectV2 introspects open banking brazil payment consent v2

	This endpoint accepts an OAuth 2.0 token bound to v2 payment consents and returns meta information surrounding the

token along with the payment consent and the associated account identifiers. It's also backwards compatible with v1
payment consent tokens.

Pass the token as the bearer value with the `Authorization: Bearer` header. To obtain the token with all the required
scopes, apply the
[Authorization Code](https://cloudentity.com/developers/basics/oauth-grant-types/authorization-code-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) ObbrPaymentConsentIntrospectV2(params *ObbrPaymentConsentIntrospectV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrPaymentConsentIntrospectV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrPaymentConsentIntrospectV2",
		Method:             "POST",
		PathPattern:        "/open-banking-brasil/open-banking/payments/v2/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrPaymentConsentIntrospectV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrPaymentConsentIntrospectV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrPaymentConsentIntrospectV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ObbrPaymentConsentIntrospectV3 introspects open banking brazil payment consent v3

	This endpoint accepts an OAuth 2.0 token bound to v3 payment consents and returns meta information surrounding the

token along with the payment consent and the associated account identifiers. It's also backwards compatible with v1 and v2
payment consent tokens.

Pass the token as the bearer value with the `Authorization: Bearer` header. To obtain the token with all the required
scopes, apply the
[Authorization Code](https://cloudentity.com/developers/basics/oauth-grant-types/authorization-code-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) ObbrPaymentConsentIntrospectV3(params *ObbrPaymentConsentIntrospectV3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrPaymentConsentIntrospectV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrPaymentConsentIntrospectV3",
		Method:             "POST",
		PathPattern:        "/open-banking-brasil/open-banking/payments/v3/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrPaymentConsentIntrospectV3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrPaymentConsentIntrospectV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrPaymentConsentIntrospectV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ObbrPaymentConsentIntrospectV4 introspects open banking brazil payment consent v4

	This endpoint accepts an OAuth 2.0 token bound to v4 payment consents and returns meta information surrounding the

token along with the payment consent and the associated account identifiers. It's also backwards compatible with v1, v2 and v3
payment consent tokens.

Pass the token as the bearer value with the `Authorization: Bearer` header. To obtain the token with all the required
scopes, apply the
[Authorization Code](https://cloudentity.com/developers/basics/oauth-grant-types/authorization-code-flow/) grant type.

Find the scopes list in the AUTHORIZATIONS block.
*/
func (a *Client) ObbrPaymentConsentIntrospectV4(params *ObbrPaymentConsentIntrospectV4Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrPaymentConsentIntrospectV4Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrPaymentConsentIntrospectV4",
		Method:             "POST",
		PathPattern:        "/open-banking-brasil/open-banking/payments/v4/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrPaymentConsentIntrospectV4Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrPaymentConsentIntrospectV4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrPaymentConsentIntrospectV4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
