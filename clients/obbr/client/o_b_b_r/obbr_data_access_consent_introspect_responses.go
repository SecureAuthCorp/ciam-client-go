// Code generated by go-swagger; DO NOT EDIT.

package o_b_b_r

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/clients/obbr/models"
)

// ObbrDataAccessConsentIntrospectReader is a Reader for the ObbrDataAccessConsentIntrospect structure.
type ObbrDataAccessConsentIntrospectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ObbrDataAccessConsentIntrospectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewObbrDataAccessConsentIntrospectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewObbrDataAccessConsentIntrospectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewObbrDataAccessConsentIntrospectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewObbrDataAccessConsentIntrospectTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewObbrDataAccessConsentIntrospectOK creates a ObbrDataAccessConsentIntrospectOK with default headers values
func NewObbrDataAccessConsentIntrospectOK() *ObbrDataAccessConsentIntrospectOK {
	return &ObbrDataAccessConsentIntrospectOK{}
}

/*
ObbrDataAccessConsentIntrospectOK describes a response with status code 200, with default header values.

Introspect Openbanking Brazil Data Access Consent Response
*/
type ObbrDataAccessConsentIntrospectOK struct {
	Payload *models.IntrospectOBBRDataAccessConsentResponse
}

// IsSuccess returns true when this obbr data access consent introspect o k response has a 2xx status code
func (o *ObbrDataAccessConsentIntrospectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this obbr data access consent introspect o k response has a 3xx status code
func (o *ObbrDataAccessConsentIntrospectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this obbr data access consent introspect o k response has a 4xx status code
func (o *ObbrDataAccessConsentIntrospectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this obbr data access consent introspect o k response has a 5xx status code
func (o *ObbrDataAccessConsentIntrospectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this obbr data access consent introspect o k response a status code equal to that given
func (o *ObbrDataAccessConsentIntrospectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the obbr data access consent introspect o k response
func (o *ObbrDataAccessConsentIntrospectOK) Code() int {
	return 200
}

func (o *ObbrDataAccessConsentIntrospectOK) Error() string {
	return fmt.Sprintf("[POST /open-banking-brasil/open-banking/consents/v1/consents/introspect][%d] obbrDataAccessConsentIntrospectOK  %+v", 200, o.Payload)
}

func (o *ObbrDataAccessConsentIntrospectOK) String() string {
	return fmt.Sprintf("[POST /open-banking-brasil/open-banking/consents/v1/consents/introspect][%d] obbrDataAccessConsentIntrospectOK  %+v", 200, o.Payload)
}

func (o *ObbrDataAccessConsentIntrospectOK) GetPayload() *models.IntrospectOBBRDataAccessConsentResponse {
	return o.Payload
}

func (o *ObbrDataAccessConsentIntrospectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IntrospectOBBRDataAccessConsentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewObbrDataAccessConsentIntrospectUnauthorized creates a ObbrDataAccessConsentIntrospectUnauthorized with default headers values
func NewObbrDataAccessConsentIntrospectUnauthorized() *ObbrDataAccessConsentIntrospectUnauthorized {
	return &ObbrDataAccessConsentIntrospectUnauthorized{}
}

/*
ObbrDataAccessConsentIntrospectUnauthorized describes a response with status code 401, with default header values.

ErrorResponse
*/
type ObbrDataAccessConsentIntrospectUnauthorized struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this obbr data access consent introspect unauthorized response has a 2xx status code
func (o *ObbrDataAccessConsentIntrospectUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this obbr data access consent introspect unauthorized response has a 3xx status code
func (o *ObbrDataAccessConsentIntrospectUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this obbr data access consent introspect unauthorized response has a 4xx status code
func (o *ObbrDataAccessConsentIntrospectUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this obbr data access consent introspect unauthorized response has a 5xx status code
func (o *ObbrDataAccessConsentIntrospectUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this obbr data access consent introspect unauthorized response a status code equal to that given
func (o *ObbrDataAccessConsentIntrospectUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the obbr data access consent introspect unauthorized response
func (o *ObbrDataAccessConsentIntrospectUnauthorized) Code() int {
	return 401
}

func (o *ObbrDataAccessConsentIntrospectUnauthorized) Error() string {
	return fmt.Sprintf("[POST /open-banking-brasil/open-banking/consents/v1/consents/introspect][%d] obbrDataAccessConsentIntrospectUnauthorized  %+v", 401, o.Payload)
}

func (o *ObbrDataAccessConsentIntrospectUnauthorized) String() string {
	return fmt.Sprintf("[POST /open-banking-brasil/open-banking/consents/v1/consents/introspect][%d] obbrDataAccessConsentIntrospectUnauthorized  %+v", 401, o.Payload)
}

func (o *ObbrDataAccessConsentIntrospectUnauthorized) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *ObbrDataAccessConsentIntrospectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewObbrDataAccessConsentIntrospectNotFound creates a ObbrDataAccessConsentIntrospectNotFound with default headers values
func NewObbrDataAccessConsentIntrospectNotFound() *ObbrDataAccessConsentIntrospectNotFound {
	return &ObbrDataAccessConsentIntrospectNotFound{}
}

/*
ObbrDataAccessConsentIntrospectNotFound describes a response with status code 404, with default header values.

ErrorResponse
*/
type ObbrDataAccessConsentIntrospectNotFound struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this obbr data access consent introspect not found response has a 2xx status code
func (o *ObbrDataAccessConsentIntrospectNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this obbr data access consent introspect not found response has a 3xx status code
func (o *ObbrDataAccessConsentIntrospectNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this obbr data access consent introspect not found response has a 4xx status code
func (o *ObbrDataAccessConsentIntrospectNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this obbr data access consent introspect not found response has a 5xx status code
func (o *ObbrDataAccessConsentIntrospectNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this obbr data access consent introspect not found response a status code equal to that given
func (o *ObbrDataAccessConsentIntrospectNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the obbr data access consent introspect not found response
func (o *ObbrDataAccessConsentIntrospectNotFound) Code() int {
	return 404
}

func (o *ObbrDataAccessConsentIntrospectNotFound) Error() string {
	return fmt.Sprintf("[POST /open-banking-brasil/open-banking/consents/v1/consents/introspect][%d] obbrDataAccessConsentIntrospectNotFound  %+v", 404, o.Payload)
}

func (o *ObbrDataAccessConsentIntrospectNotFound) String() string {
	return fmt.Sprintf("[POST /open-banking-brasil/open-banking/consents/v1/consents/introspect][%d] obbrDataAccessConsentIntrospectNotFound  %+v", 404, o.Payload)
}

func (o *ObbrDataAccessConsentIntrospectNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *ObbrDataAccessConsentIntrospectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewObbrDataAccessConsentIntrospectTooManyRequests creates a ObbrDataAccessConsentIntrospectTooManyRequests with default headers values
func NewObbrDataAccessConsentIntrospectTooManyRequests() *ObbrDataAccessConsentIntrospectTooManyRequests {
	return &ObbrDataAccessConsentIntrospectTooManyRequests{}
}

/*
ObbrDataAccessConsentIntrospectTooManyRequests describes a response with status code 429, with default header values.

ErrorResponse
*/
type ObbrDataAccessConsentIntrospectTooManyRequests struct {
	Payload *models.GenericError
}

// IsSuccess returns true when this obbr data access consent introspect too many requests response has a 2xx status code
func (o *ObbrDataAccessConsentIntrospectTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this obbr data access consent introspect too many requests response has a 3xx status code
func (o *ObbrDataAccessConsentIntrospectTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this obbr data access consent introspect too many requests response has a 4xx status code
func (o *ObbrDataAccessConsentIntrospectTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this obbr data access consent introspect too many requests response has a 5xx status code
func (o *ObbrDataAccessConsentIntrospectTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this obbr data access consent introspect too many requests response a status code equal to that given
func (o *ObbrDataAccessConsentIntrospectTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the obbr data access consent introspect too many requests response
func (o *ObbrDataAccessConsentIntrospectTooManyRequests) Code() int {
	return 429
}

func (o *ObbrDataAccessConsentIntrospectTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /open-banking-brasil/open-banking/consents/v1/consents/introspect][%d] obbrDataAccessConsentIntrospectTooManyRequests  %+v", 429, o.Payload)
}

func (o *ObbrDataAccessConsentIntrospectTooManyRequests) String() string {
	return fmt.Sprintf("[POST /open-banking-brasil/open-banking/consents/v1/consents/introspect][%d] obbrDataAccessConsentIntrospectTooManyRequests  %+v", 429, o.Payload)
}

func (o *ObbrDataAccessConsentIntrospectTooManyRequests) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *ObbrDataAccessConsentIntrospectTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
