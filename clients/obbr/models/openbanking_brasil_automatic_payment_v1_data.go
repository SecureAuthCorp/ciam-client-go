// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenbankingBrasilAutomaticPaymentV1Data OpenbankingBrasilAutomaticPaymentV1Data Data
//
// Objeto contendo as informaes de consentimento para a iniciao de pagamento individual.
//
// swagger:model OpenbankingBrasilAutomaticPaymentV1Data
type OpenbankingBrasilAutomaticPaymentV1Data struct {

	// Deve ser preenchido sempre que o usurio pagador inserir alguma informao adicional no consentimento
	// Example: Minha recorrncia
	// Max Length: 140
	// Pattern: [\w\W\s]*
	AdditionalInformation string `json:"additionalInformation,omitempty" yaml:"additionalInformation,omitempty"`

	// business entity
	BusinessEntity *OpenbankingBrasilAutomaticPaymentV1BusinessEntity `json:"businessEntity,omitempty" yaml:"businessEntity,omitempty"`

	// creditors
	// Required: true
	// Min Items: 1
	Creditors []*OpenbankingBrasilAutomaticPaymentV1Creditor `json:"creditors" yaml:"creditors"`

	// debtor account
	DebtorAccount *OpenbankingBrasilAutomaticPaymentV1DebtorAccount2 `json:"debtorAccount,omitempty" yaml:"debtorAccount,omitempty"`

	// Data e hora em que o consentimento deve deixar de ser vlido. Uma string com data e hora conforme especificao [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilizao de timezone UTC(UTC time format).
	// Example: 2021-05-21T08:30:00Z
	// Format: date-time
	ExpirationDateTime strfmt.DateTime `json:"expirationDateTime,omitempty" yaml:"expirationDateTime,omitempty"`

	// logged user
	// Required: true
	LoggedUser *OpenbankingBrasilAutomaticPaymentV1LoggedUser `json:"loggedUser" yaml:"loggedUser"`

	// Campo destinado a configurao dos diferentes produtos de pagamentos recorrentes.
	// Required: true
	RecurringConfiguration interface{} `json:"recurringConfiguration" yaml:"recurringConfiguration"`

	// Data e hora em que o consentimento deve passar a ser vlido. Uma string com data e hora conforme especificao [RFC-3339](https://datatracker.ietf.org/doc/html/rfc3339), sempre com a utilizao de timezone UTC(UTC time format).
	// Example: 2021-05-21T08:30:00Z
	// Required: true
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"startDateTime" yaml:"startDateTime"`
}

// Validate validates this openbanking brasil automatic payment v1 data
func (m *OpenbankingBrasilAutomaticPaymentV1Data) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBusinessEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoggedUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurringConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) validateAdditionalInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalInformation) { // not required
		return nil
	}

	if err := validate.MaxLength("additionalInformation", "body", m.AdditionalInformation, 140); err != nil {
		return err
	}

	if err := validate.Pattern("additionalInformation", "body", m.AdditionalInformation, `[\w\W\s]*`); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) validateBusinessEntity(formats strfmt.Registry) error {
	if swag.IsZero(m.BusinessEntity) { // not required
		return nil
	}

	if m.BusinessEntity != nil {
		if err := m.BusinessEntity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessEntity")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) validateCreditors(formats strfmt.Registry) error {

	if err := validate.Required("creditors", "body", m.Creditors); err != nil {
		return err
	}

	iCreditorsSize := int64(len(m.Creditors))

	if err := validate.MinItems("creditors", "body", iCreditorsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Creditors); i++ {
		if swag.IsZero(m.Creditors[i]) { // not required
			continue
		}

		if m.Creditors[i] != nil {
			if err := m.Creditors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("creditors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("creditors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) validateDebtorAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.DebtorAccount) { // not required
		return nil
	}

	if m.DebtorAccount != nil {
		if err := m.DebtorAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtorAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("debtorAccount")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) validateExpirationDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDateTime", "body", "date-time", m.ExpirationDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) validateLoggedUser(formats strfmt.Registry) error {

	if err := validate.Required("loggedUser", "body", m.LoggedUser); err != nil {
		return err
	}

	if m.LoggedUser != nil {
		if err := m.LoggedUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loggedUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loggedUser")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) validateRecurringConfiguration(formats strfmt.Registry) error {

	if m.RecurringConfiguration == nil {
		return errors.Required("recurringConfiguration", "body", nil)
	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) validateStartDateTime(formats strfmt.Registry) error {

	if err := validate.Required("startDateTime", "body", strfmt.DateTime(m.StartDateTime)); err != nil {
		return err
	}

	if err := validate.FormatOf("startDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openbanking brasil automatic payment v1 data based on the context it is used
func (m *OpenbankingBrasilAutomaticPaymentV1Data) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBusinessEntity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreditors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDebtorAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoggedUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) contextValidateBusinessEntity(ctx context.Context, formats strfmt.Registry) error {

	if m.BusinessEntity != nil {

		if swag.IsZero(m.BusinessEntity) { // not required
			return nil
		}

		if err := m.BusinessEntity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("businessEntity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("businessEntity")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) contextValidateCreditors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Creditors); i++ {

		if m.Creditors[i] != nil {

			if swag.IsZero(m.Creditors[i]) { // not required
				return nil
			}

			if err := m.Creditors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("creditors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("creditors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) contextValidateDebtorAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.DebtorAccount != nil {

		if swag.IsZero(m.DebtorAccount) { // not required
			return nil
		}

		if err := m.DebtorAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtorAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("debtorAccount")
			}
			return err
		}
	}

	return nil
}

func (m *OpenbankingBrasilAutomaticPaymentV1Data) contextValidateLoggedUser(ctx context.Context, formats strfmt.Registry) error {

	if m.LoggedUser != nil {

		if err := m.LoggedUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loggedUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loggedUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenbankingBrasilAutomaticPaymentV1Data) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenbankingBrasilAutomaticPaymentV1Data) UnmarshalBinary(b []byte) error {
	var res OpenbankingBrasilAutomaticPaymentV1Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
