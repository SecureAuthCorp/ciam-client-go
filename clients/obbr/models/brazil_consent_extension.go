// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BrazilConsentExtension brazil consent extension
//
// swagger:model BrazilConsentExtension
type BrazilConsentExtension struct {

	// expiration time
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expiration_time,omitempty" yaml:"expiration_time,omitempty"`

	// logged user
	LoggedUser string `json:"logged_user,omitempty" yaml:"logged_user,omitempty"`

	// request time
	// Format: date-time
	RequestTime strfmt.DateTime `json:"request_time,omitempty" yaml:"request_time,omitempty"`
}

// Validate validates this brazil consent extension
func (m *BrazilConsentExtension) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrazilConsentExtension) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration_time", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BrazilConsentExtension) validateRequestTime(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestTime) { // not required
		return nil
	}

	if err := validate.FormatOf("request_time", "body", "date-time", m.RequestTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this brazil consent extension based on context it is used
func (m *BrazilConsentExtension) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrazilConsentExtension) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrazilConsentExtension) UnmarshalBinary(b []byte) error {
	var res BrazilConsentExtension
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
