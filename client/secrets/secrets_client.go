// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new secrets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for secrets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSecret(params *CreateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSecretCreated, error)

	DeleteSecret(params *DeleteSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSecretNoContent, error)

	ListSecrets(params *ListSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSecretsOK, error)

	UpdateSecret(params *UpdateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSecretCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSecret creates secret

  Creates a secret for a given tenant id and authorization server (workspace).
Secrets API is storage for keeping encrypted sensitive variables that may be used within rego policies or scripts.
*/
func (a *Client) CreateSecret(params *CreateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSecretCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSecret",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSecretCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSecret deletes secret

  Delete previously created secrets for a given tenant id and autorization server (workspace).
*/
func (a *Client) DeleteSecret(params *DeleteSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSecret",
		Method:             "DELETE",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/secrets/{sid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSecretNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListSecrets lists secrets

  List previously created secrets for a given tenant id and autorization server (workspace). The secret value is ciphered when it's created, it's not possible to retrieve it in any way.
*/
func (a *Client) ListSecrets(params *ListSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSecretsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listSecrets",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSecret updates secret

  Updates a secret for a given tenant id and authorization server (workspace).
*/
func (a *Client) UpdateSecret(params *UpdateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSecretCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSecretParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSecret",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/servers/{aid}/secrets/{sid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSecretCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
