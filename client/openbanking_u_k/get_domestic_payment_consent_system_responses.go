// Code generated by go-swagger; DO NOT EDIT.

package openbanking_u_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// GetDomesticPaymentConsentSystemReader is a Reader for the GetDomesticPaymentConsentSystem structure.
type GetDomesticPaymentConsentSystemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomesticPaymentConsentSystemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomesticPaymentConsentSystemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetDomesticPaymentConsentSystemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDomesticPaymentConsentSystemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDomesticPaymentConsentSystemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDomesticPaymentConsentSystemOK creates a GetDomesticPaymentConsentSystemOK with default headers values
func NewGetDomesticPaymentConsentSystemOK() *GetDomesticPaymentConsentSystemOK {
	return &GetDomesticPaymentConsentSystemOK{}
}

/* GetDomesticPaymentConsentSystemOK describes a response with status code 200, with default header values.

GetDomesticPaymentConsentResponse
*/
type GetDomesticPaymentConsentSystemOK struct {
	Payload *models.GetDomesticPaymentConsentResponse
}

func (o *GetDomesticPaymentConsentSystemOK) Error() string {
	return fmt.Sprintf("[GET /api/system/{tid}/open-banking/domestic-payment-consent/{login}][%d] getDomesticPaymentConsentSystemOK  %+v", 200, o.Payload)
}
func (o *GetDomesticPaymentConsentSystemOK) GetPayload() *models.GetDomesticPaymentConsentResponse {
	return o.Payload
}

func (o *GetDomesticPaymentConsentSystemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetDomesticPaymentConsentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticPaymentConsentSystemUnauthorized creates a GetDomesticPaymentConsentSystemUnauthorized with default headers values
func NewGetDomesticPaymentConsentSystemUnauthorized() *GetDomesticPaymentConsentSystemUnauthorized {
	return &GetDomesticPaymentConsentSystemUnauthorized{}
}

/* GetDomesticPaymentConsentSystemUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type GetDomesticPaymentConsentSystemUnauthorized struct {
	Payload *models.Error
}

func (o *GetDomesticPaymentConsentSystemUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/system/{tid}/open-banking/domestic-payment-consent/{login}][%d] getDomesticPaymentConsentSystemUnauthorized  %+v", 401, o.Payload)
}
func (o *GetDomesticPaymentConsentSystemUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDomesticPaymentConsentSystemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticPaymentConsentSystemForbidden creates a GetDomesticPaymentConsentSystemForbidden with default headers values
func NewGetDomesticPaymentConsentSystemForbidden() *GetDomesticPaymentConsentSystemForbidden {
	return &GetDomesticPaymentConsentSystemForbidden{}
}

/* GetDomesticPaymentConsentSystemForbidden describes a response with status code 403, with default header values.

HttpError
*/
type GetDomesticPaymentConsentSystemForbidden struct {
	Payload *models.Error
}

func (o *GetDomesticPaymentConsentSystemForbidden) Error() string {
	return fmt.Sprintf("[GET /api/system/{tid}/open-banking/domestic-payment-consent/{login}][%d] getDomesticPaymentConsentSystemForbidden  %+v", 403, o.Payload)
}
func (o *GetDomesticPaymentConsentSystemForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDomesticPaymentConsentSystemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomesticPaymentConsentSystemNotFound creates a GetDomesticPaymentConsentSystemNotFound with default headers values
func NewGetDomesticPaymentConsentSystemNotFound() *GetDomesticPaymentConsentSystemNotFound {
	return &GetDomesticPaymentConsentSystemNotFound{}
}

/* GetDomesticPaymentConsentSystemNotFound describes a response with status code 404, with default header values.

HttpError
*/
type GetDomesticPaymentConsentSystemNotFound struct {
	Payload *models.Error
}

func (o *GetDomesticPaymentConsentSystemNotFound) Error() string {
	return fmt.Sprintf("[GET /api/system/{tid}/open-banking/domestic-payment-consent/{login}][%d] getDomesticPaymentConsentSystemNotFound  %+v", 404, o.Payload)
}
func (o *GetDomesticPaymentConsentSystemNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDomesticPaymentConsentSystemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
