// Code generated by go-swagger; DO NOT EDIT.

package openbanking_u_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// AcceptFilePaymentConsentSystemReader is a Reader for the AcceptFilePaymentConsentSystem structure.
type AcceptFilePaymentConsentSystemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptFilePaymentConsentSystemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptFilePaymentConsentSystemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAcceptFilePaymentConsentSystemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAcceptFilePaymentConsentSystemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptFilePaymentConsentSystemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAcceptFilePaymentConsentSystemOK creates a AcceptFilePaymentConsentSystemOK with default headers values
func NewAcceptFilePaymentConsentSystemOK() *AcceptFilePaymentConsentSystemOK {
	return &AcceptFilePaymentConsentSystemOK{}
}

/* AcceptFilePaymentConsentSystemOK describes a response with status code 200, with default header values.

ConsentAccepted
*/
type AcceptFilePaymentConsentSystemOK struct {
	Payload *models.ConsentAccepted
}

func (o *AcceptFilePaymentConsentSystemOK) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/file-payment-consent/{login}/accept][%d] acceptFilePaymentConsentSystemOK  %+v", 200, o.Payload)
}
func (o *AcceptFilePaymentConsentSystemOK) GetPayload() *models.ConsentAccepted {
	return o.Payload
}

func (o *AcceptFilePaymentConsentSystemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentAccepted)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptFilePaymentConsentSystemUnauthorized creates a AcceptFilePaymentConsentSystemUnauthorized with default headers values
func NewAcceptFilePaymentConsentSystemUnauthorized() *AcceptFilePaymentConsentSystemUnauthorized {
	return &AcceptFilePaymentConsentSystemUnauthorized{}
}

/* AcceptFilePaymentConsentSystemUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type AcceptFilePaymentConsentSystemUnauthorized struct {
	Payload *models.Error
}

func (o *AcceptFilePaymentConsentSystemUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/file-payment-consent/{login}/accept][%d] acceptFilePaymentConsentSystemUnauthorized  %+v", 401, o.Payload)
}
func (o *AcceptFilePaymentConsentSystemUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptFilePaymentConsentSystemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptFilePaymentConsentSystemForbidden creates a AcceptFilePaymentConsentSystemForbidden with default headers values
func NewAcceptFilePaymentConsentSystemForbidden() *AcceptFilePaymentConsentSystemForbidden {
	return &AcceptFilePaymentConsentSystemForbidden{}
}

/* AcceptFilePaymentConsentSystemForbidden describes a response with status code 403, with default header values.

HttpError
*/
type AcceptFilePaymentConsentSystemForbidden struct {
	Payload *models.Error
}

func (o *AcceptFilePaymentConsentSystemForbidden) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/file-payment-consent/{login}/accept][%d] acceptFilePaymentConsentSystemForbidden  %+v", 403, o.Payload)
}
func (o *AcceptFilePaymentConsentSystemForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptFilePaymentConsentSystemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptFilePaymentConsentSystemNotFound creates a AcceptFilePaymentConsentSystemNotFound with default headers values
func NewAcceptFilePaymentConsentSystemNotFound() *AcceptFilePaymentConsentSystemNotFound {
	return &AcceptFilePaymentConsentSystemNotFound{}
}

/* AcceptFilePaymentConsentSystemNotFound describes a response with status code 404, with default header values.

HttpError
*/
type AcceptFilePaymentConsentSystemNotFound struct {
	Payload *models.Error
}

func (o *AcceptFilePaymentConsentSystemNotFound) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/open-banking/file-payment-consent/{login}/accept][%d] acceptFilePaymentConsentSystemNotFound  %+v", 404, o.Payload)
}
func (o *AcceptFilePaymentConsentSystemNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptFilePaymentConsentSystemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
