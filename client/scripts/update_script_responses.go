// Code generated by go-swagger; DO NOT EDIT.

package scripts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// UpdateScriptReader is a Reader for the UpdateScript structure.
type UpdateScriptReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScriptReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateScriptOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateScriptBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateScriptUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateScriptForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateScriptNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateScriptOK creates a UpdateScriptOK with default headers values
func NewUpdateScriptOK() *UpdateScriptOK {
	return &UpdateScriptOK{}
}

/* UpdateScriptOK describes a response with status code 200, with default header values.

Script
*/
type UpdateScriptOK struct {
	Payload *models.Script
}

func (o *UpdateScriptOK) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/scripts/{script}][%d] updateScriptOK  %+v", 200, o.Payload)
}
func (o *UpdateScriptOK) GetPayload() *models.Script {
	return o.Payload
}

func (o *UpdateScriptOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Script)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptBadRequest creates a UpdateScriptBadRequest with default headers values
func NewUpdateScriptBadRequest() *UpdateScriptBadRequest {
	return &UpdateScriptBadRequest{}
}

/* UpdateScriptBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type UpdateScriptBadRequest struct {
	Payload *models.Error
}

func (o *UpdateScriptBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/scripts/{script}][%d] updateScriptBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateScriptBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptUnauthorized creates a UpdateScriptUnauthorized with default headers values
func NewUpdateScriptUnauthorized() *UpdateScriptUnauthorized {
	return &UpdateScriptUnauthorized{}
}

/* UpdateScriptUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type UpdateScriptUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateScriptUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/scripts/{script}][%d] updateScriptUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateScriptUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptForbidden creates a UpdateScriptForbidden with default headers values
func NewUpdateScriptForbidden() *UpdateScriptForbidden {
	return &UpdateScriptForbidden{}
}

/* UpdateScriptForbidden describes a response with status code 403, with default header values.

HttpError
*/
type UpdateScriptForbidden struct {
	Payload *models.Error
}

func (o *UpdateScriptForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/scripts/{script}][%d] updateScriptForbidden  %+v", 403, o.Payload)
}
func (o *UpdateScriptForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScriptNotFound creates a UpdateScriptNotFound with default headers values
func NewUpdateScriptNotFound() *UpdateScriptNotFound {
	return &UpdateScriptNotFound{}
}

/* UpdateScriptNotFound describes a response with status code 404, with default header values.

HttpError
*/
type UpdateScriptNotFound struct {
	Payload *models.Error
}

func (o *UpdateScriptNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/scripts/{script}][%d] updateScriptNotFound  %+v", 404, o.Payload)
}
func (o *UpdateScriptNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateScriptNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
