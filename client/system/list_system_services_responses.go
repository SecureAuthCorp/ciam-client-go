// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// ListSystemServicesReader is a Reader for the ListSystemServices structure.
type ListSystemServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSystemServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListSystemServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListSystemServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListSystemServicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListSystemServicesOK creates a ListSystemServicesOK with default headers values
func NewListSystemServicesOK() *ListSystemServicesOK {
	return &ListSystemServicesOK{}
}

/* ListSystemServicesOK describes a response with status code 200, with default header values.

SystemServicesResponse
*/
type ListSystemServicesOK struct {
	Payload *models.SystemServicesResponse
}

func (o *ListSystemServicesOK) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/system/services][%d] listSystemServicesOK  %+v", 200, o.Payload)
}
func (o *ListSystemServicesOK) GetPayload() *models.SystemServicesResponse {
	return o.Payload
}

func (o *ListSystemServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SystemServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSystemServicesUnauthorized creates a ListSystemServicesUnauthorized with default headers values
func NewListSystemServicesUnauthorized() *ListSystemServicesUnauthorized {
	return &ListSystemServicesUnauthorized{}
}

/* ListSystemServicesUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type ListSystemServicesUnauthorized struct {
	Payload *models.Error
}

func (o *ListSystemServicesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/system/services][%d] listSystemServicesUnauthorized  %+v", 401, o.Payload)
}
func (o *ListSystemServicesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListSystemServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSystemServicesForbidden creates a ListSystemServicesForbidden with default headers values
func NewListSystemServicesForbidden() *ListSystemServicesForbidden {
	return &ListSystemServicesForbidden{}
}

/* ListSystemServicesForbidden describes a response with status code 403, with default header values.

HttpError
*/
type ListSystemServicesForbidden struct {
	Payload *models.Error
}

func (o *ListSystemServicesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/admin/{tid}/system/services][%d] listSystemServicesForbidden  %+v", 403, o.Payload)
}
func (o *ListSystemServicesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListSystemServicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
