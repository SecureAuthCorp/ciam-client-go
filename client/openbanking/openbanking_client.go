// Code generated by go-swagger; DO NOT EDIT.

package openbanking

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new openbanking API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for openbanking API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateDataAccessConsent(params *CreateDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentCreated, error)

	CreatePaymentConsent(params *CreatePaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentCreated, error)

	DeleteDataAccessConsent(params *DeleteDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataAccessConsentNoContent, error)

	GetDataAccessConsent(params *GetDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentOK, error)

	GetPaymentConsent(params *GetPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentOK, error)

	AcceptAccountAccessConsentSystem(params *AcceptAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptAccountAccessConsentSystemOK, error)

	AcceptDomesticPaymentConsentSystem(params *AcceptDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticPaymentConsentSystemOK, error)

	AcceptDomesticScheduledPaymentConsentSystem(params *AcceptDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticScheduledPaymentConsentSystemOK, error)

	AcceptDomesticStandingOrderConsentSystem(params *AcceptDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticStandingOrderConsentSystemOK, error)

	AcceptFilePaymentConsentSystem(params *AcceptFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptFilePaymentConsentSystemOK, error)

	AcceptInternationalPaymentConsentSystem(params *AcceptInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalPaymentConsentSystemOK, error)

	AcceptInternationalScheduledPaymentConsentSystem(params *AcceptInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalScheduledPaymentConsentSystemOK, error)

	AcceptInternationalStandingOrderConsentSystem(params *AcceptInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalStandingOrderConsentSystemOK, error)

	AcceptOBBRCustomerDataAccessConsentSystem(params *AcceptOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptOBBRCustomerDataAccessConsentSystemOK, error)

	ConsumeOpenbankingConsent(params *ConsumeOpenbankingConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConsumeOpenbankingConsentOK, error)

	CreateAccountAccessConsentRequest(params *CreateAccountAccessConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAccountAccessConsentRequestCreated, error)

	CreateDomesticPaymentConsent(params *CreateDomesticPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDomesticPaymentConsentCreated, error)

	CreateDomesticScheduledPaymentConsentRequest(params *CreateDomesticScheduledPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDomesticScheduledPaymentConsentRequestCreated, error)

	CreateDomesticStandingOrderConsent(params *CreateDomesticStandingOrderConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDomesticStandingOrderConsentCreated, error)

	CreateFilePaymentConsent(params *CreateFilePaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilePaymentConsentCreated, error)

	CreateFilePaymentConsentFile(params *CreateFilePaymentConsentFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilePaymentConsentFileOK, error)

	CreateInternationalPaymentConsent(params *CreateInternationalPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInternationalPaymentConsentCreated, error)

	CreateInternationalScheduledPaymentConsentRequest(params *CreateInternationalScheduledPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInternationalScheduledPaymentConsentRequestCreated, error)

	CreateInternationalStandingOrderConsent(params *CreateInternationalStandingOrderConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInternationalStandingOrderConsentCreated, error)

	DeleteAccountAccessConsentRequest(params *DeleteAccountAccessConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountAccessConsentRequestNoContent, error)

	GetAccountAccessConsentRequest(params *GetAccountAccessConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountAccessConsentRequestOK, error)

	GetAccountAccessConsentSystem(params *GetAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountAccessConsentSystemOK, error)

	GetDomesticPaymentConsentRequest(params *GetDomesticPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticPaymentConsentRequestOK, error)

	GetDomesticPaymentConsentSystem(params *GetDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticPaymentConsentSystemOK, error)

	GetDomesticScheduledPaymentConsentRequest(params *GetDomesticScheduledPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticScheduledPaymentConsentRequestOK, error)

	GetDomesticScheduledPaymentConsentSystem(params *GetDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticScheduledPaymentConsentSystemOK, error)

	GetDomesticStandingOrderConsentRequest(params *GetDomesticStandingOrderConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticStandingOrderConsentRequestOK, error)

	GetDomesticStandingOrderConsentSystem(params *GetDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticStandingOrderConsentSystemOK, error)

	GetFilePaymentConsentFileRequest(params *GetFilePaymentConsentFileRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentConsentFileRequestOK, error)

	GetFilePaymentConsentRequest(params *GetFilePaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentConsentRequestOK, error)

	GetFilePaymentConsentSystem(params *GetFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentConsentSystemOK, error)

	GetInternationalPaymentConsentRequest(params *GetInternationalPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalPaymentConsentRequestOK, error)

	GetInternationalPaymentConsentSystem(params *GetInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalPaymentConsentSystemOK, error)

	GetInternationalScheduledPaymentConsentRequest(params *GetInternationalScheduledPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalScheduledPaymentConsentRequestOK, error)

	GetInternationalScheduledPaymentConsentSystem(params *GetInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalScheduledPaymentConsentSystemOK, error)

	GetInternationalStandingOrderConsentRequest(params *GetInternationalStandingOrderConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalStandingOrderConsentRequestOK, error)

	GetInternationalStandingOrderConsentSystem(params *GetInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalStandingOrderConsentSystemOK, error)

	GetOBBRConsents(params *GetOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRConsentsOK, error)

	GetOBBRCustomerDataAccessConsentSystem(params *GetOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRCustomerDataAccessConsentSystemOK, error)

	GetOBConsents(params *GetOBConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBConsentsOK, error)

	ListOBBRConsents(params *ListOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBBRConsentsOK, error)

	ListOBConsents(params *ListOBConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBConsentsOK, error)

	ObbrDataAccessConsentIntrospect(params *ObbrDataAccessConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrDataAccessConsentIntrospectOK, error)

	ObbrPaymentConsentIntrospect(params *ObbrPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectOK, error)

	OpenbankingAccountAccessConsentIntrospect(params *OpenbankingAccountAccessConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingAccountAccessConsentIntrospectOK, error)

	OpenbankingDomesticPaymentConsentIntrospect(params *OpenbankingDomesticPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingDomesticPaymentConsentIntrospectOK, error)

	OpenbankingDomesticScheduledPaymentConsentIntrospect(params *OpenbankingDomesticScheduledPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingDomesticScheduledPaymentConsentIntrospectOK, error)

	OpenbankingDomesticStandingOrderConsentIntrospect(params *OpenbankingDomesticStandingOrderConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingDomesticStandingOrderConsentIntrospectOK, error)

	OpenbankingFilePaymentConsentIntrospect(params *OpenbankingFilePaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingFilePaymentConsentIntrospectOK, error)

	OpenbankingInternationalPaymentConsentIntrospect(params *OpenbankingInternationalPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingInternationalPaymentConsentIntrospectOK, error)

	OpenbankingInternationalScheduledPaymentConsentIntrospect(params *OpenbankingInternationalScheduledPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingInternationalScheduledPaymentConsentIntrospectOK, error)

	OpenbankingInternationalStandingOrderConsentIntrospect(params *OpenbankingInternationalStandingOrderConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingInternationalStandingOrderConsentIntrospectOK, error)

	RejectAccountAccessConsentSystem(params *RejectAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectAccountAccessConsentSystemOK, error)

	RejectDomesticPaymentConsentSystem(params *RejectDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticPaymentConsentSystemOK, error)

	RejectDomesticScheduledPaymentConsentSystem(params *RejectDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticScheduledPaymentConsentSystemOK, error)

	RejectDomesticStandingOrderConsentSystem(params *RejectDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticStandingOrderConsentSystemOK, error)

	RejectFilePaymentConsentSystem(params *RejectFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectFilePaymentConsentSystemOK, error)

	RejectInternationalPaymentConsentSystem(params *RejectInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalPaymentConsentSystemOK, error)

	RejectInternationalScheduledPaymentConsentSystem(params *RejectInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalScheduledPaymentConsentSystemOK, error)

	RejectInternationalStandingOrderConsentSystem(params *RejectInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalStandingOrderConsentSystemOK, error)

	RejectOBBRCustomerDataAccessConsentSystem(params *RejectOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectOBBRCustomerDataAccessConsentSystemOK, error)

	RevokeOBBRConsents(params *RevokeOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBBRConsentsOK, error)

	RevokeOpenbankingConsent(params *RevokeOpenbankingConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOpenbankingConsentNoContent, error)

	RevokeOpenbankingConsents(params *RevokeOpenbankingConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOpenbankingConsentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateDataAccessConsent creates data access consent

  This API allows AISP to create consent to access PSU registration data, information about transactions in their accounts, credit card and contracted credit products
*/
func (a *Client) CreateDataAccessConsent(params *CreateDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDataAccessConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDataAccessConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateDataAccessConsent",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/consents/v1/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDataAccessConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDataAccessConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateDataAccessConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreatePaymentConsent creates payment consent

  This API allows AISP to create consent to initiate payments between banks and financial institutions
*/
func (a *Client) CreatePaymentConsent(params *CreatePaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePaymentConsent",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/payments/v1/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePaymentConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePaymentConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDataAccessConsent deletes data access consent

  This API allows PISP to remove previously created consent
*/
func (a *Client) DeleteDataAccessConsent(params *DeleteDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDataAccessConsentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDataAccessConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDataAccessConsent",
		Method:             "DELETE",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/consents/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDataAccessConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDataAccessConsentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDataAccessConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDataAccessConsent gets data access consent

  This API allows PISP to retrieve previously created consent
*/
func (a *Client) GetDataAccessConsent(params *GetDataAccessConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDataAccessConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataAccessConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDataAccessConsent",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/consents/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataAccessConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataAccessConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDataAccessConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPaymentConsent gets payment consent

  This API allows PISP to retrieve previously created payment consent
*/
func (a *Client) GetPaymentConsent(params *GetPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPaymentConsent",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/payments/v1/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPaymentConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPaymentConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptAccountAccessConsentSystem accepts account access consent

  This API can be used to notify ACP that user granted consent to a account-access.
*/
func (a *Client) AcceptAccountAccessConsentSystem(params *AcceptAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptAccountAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptAccountAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptAccountAccessConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/account-access-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptAccountAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptAccountAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptAccountAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptDomesticPaymentConsentSystem accepts domestic payment consent

  This API can be used to notify ACP that user granted consent to a domestic-payment.
*/
func (a *Client) AcceptDomesticPaymentConsentSystem(params *AcceptDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptDomesticPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptDomesticPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptDomesticPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptDomesticPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptDomesticPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptDomesticScheduledPaymentConsentSystem accepts domestic scheduled payment consent

  This API can be used to notify ACP that user granted consent to a domestic-scheduled-payment.
*/
func (a *Client) AcceptDomesticScheduledPaymentConsentSystem(params *AcceptDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptDomesticScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptDomesticScheduledPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-scheduled-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptDomesticScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptDomesticScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptDomesticScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptDomesticStandingOrderConsentSystem accepts domestic standing order consent

  This API can be used to notify ACP that user granted consent to a domestic-standing-order.
*/
func (a *Client) AcceptDomesticStandingOrderConsentSystem(params *AcceptDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptDomesticStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptDomesticStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptDomesticStandingOrderConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-standing-order-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptDomesticStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptDomesticStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptDomesticStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptFilePaymentConsentSystem accepts file payment consent

  This API can be used to notify ACP that user granted consent to a file-payment.
*/
func (a *Client) AcceptFilePaymentConsentSystem(params *AcceptFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptFilePaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptFilePaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptFilePaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/file-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptFilePaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptFilePaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptFilePaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptInternationalPaymentConsentSystem accepts international payment consent

  This API can be used to notify ACP that user granted consent to a international-payment.
*/
func (a *Client) AcceptInternationalPaymentConsentSystem(params *AcceptInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptInternationalPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptInternationalPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/international-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptInternationalPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptInternationalPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptInternationalPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptInternationalScheduledPaymentConsentSystem accepts international scheduled payment consent

  This API can be used to notify ACP that user granted consent to a international-scheduled-payment.
*/
func (a *Client) AcceptInternationalScheduledPaymentConsentSystem(params *AcceptInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptInternationalScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptInternationalScheduledPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/international-scheduled-payment-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptInternationalScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptInternationalScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptInternationalScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptInternationalStandingOrderConsentSystem accepts international standing order consent

  This API can be used to notify ACP that user granted consent to a international-standing-order.
*/
func (a *Client) AcceptInternationalStandingOrderConsentSystem(params *AcceptInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptInternationalStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptInternationalStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptInternationalStandingOrderConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/international-standing-order-consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptInternationalStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptInternationalStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptInternationalStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AcceptOBBRCustomerDataAccessConsentSystem accepts customer data access consent

  This API can be used by a custom openbanking consent page to notify ACP that user granted consent to a customer data access.
*/
func (a *Client) AcceptOBBRCustomerDataAccessConsentSystem(params *AcceptOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptOBBRCustomerDataAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptOBBRCustomerDataAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptOBBRCustomerDataAccessConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/consent/{login}/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptOBBRCustomerDataAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptOBBRCustomerDataAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptOBBRCustomerDataAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ConsumeOpenbankingConsent consumes openbanking consent by ID

  This API consumes openbanking consent by consent id.
*/
func (a *Client) ConsumeOpenbankingConsent(params *ConsumeOpenbankingConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ConsumeOpenbankingConsentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsumeOpenbankingConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "consumeOpenbankingConsent",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking/consents/{consentID}/consume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConsumeOpenbankingConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConsumeOpenbankingConsentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for consumeOpenbankingConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAccountAccessConsentRequest creates account access consent

  The API allows the AISP to ask an ASPSP to create a new account-access-consent resource.

This API effectively allows the AISP to send a copy of the consent to the ASPSP to authorize
access to account and transaction information.
An AISP is not able to pre-select a set of accounts for account-access-consent authorisation.
This is because the behavior of the pre-selected accounts, after authorisation, is not clear from a Legal perspective.
An ASPSP creates the account-access-consent resource and responds with a unique ConsentId to
refer to the resource.
Prior to calling the API, the AISP must have an access token issued by the ASPSP using a client
credentials grant.
*/
func (a *Client) CreateAccountAccessConsentRequest(params *CreateAccountAccessConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAccountAccessConsentRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccountAccessConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAccountAccessConsentRequest",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAccountAccessConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAccountAccessConsentRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAccountAccessConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDomesticPaymentConsent creates domestic payment consent

  The API endpoint allows the PISP to ask an ASPSP to create a new domestic-payment-consent resource.
The POST action indicates to the ASPSP that a domestic payment consent has been staged. At this point, the PSU may not have been identified by the ASPSP, and the request payload may not contain any information of the account that should be debited.
The endpoint allows the PISP to send a copy of the consent (between PSU and PISP) to the ASPSP for the PSU to authorize.
The ASPSP creates the domestic-payment-consent resource and responds with a unique ConsentId to refer to the resource.

The default Status is "AwaitingAuthorisation" immediately after the domestic-payment-consent has been created.
*/
func (a *Client) CreateDomesticPaymentConsent(params *CreateDomesticPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDomesticPaymentConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDomesticPaymentConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDomesticPaymentConsent",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-payment-consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDomesticPaymentConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDomesticPaymentConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDomesticPaymentConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDomesticScheduledPaymentConsentRequest creates domestic scheduled payment consent

  The API endpoint allows the PISP to ask an ASPSP to create a new domestic-scheduled-payment-consent resource.
The POST action indicates to the ASPSP that a domestic scheduled payment consent has been staged. At this point, the PSU may not have been identified by the ASPSP, and the request payload may not contain any information of the account that should be debited.
The endpoint allows the PISP to send a copy of the consent (between PSU and PISP) to the ASPSP for the PSU to authorize.
The ASPSP creates the domestic-scheduled-payment-consent resource and responds with a unique ConsentId to refer to the resource.
ALPHA_FEATURE
The default Status is "AwaitingAuthorisation" immediately after the domestic-scheduled-payment-consent has been created.
*/
func (a *Client) CreateDomesticScheduledPaymentConsentRequest(params *CreateDomesticScheduledPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDomesticScheduledPaymentConsentRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDomesticScheduledPaymentConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDomesticScheduledPaymentConsentRequest",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-scheduled-payment-consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDomesticScheduledPaymentConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDomesticScheduledPaymentConsentRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDomesticScheduledPaymentConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDomesticStandingOrderConsent creates standing order consent

  The API endpoint allows the PISP to ask an ASPSP to create a new domestic-standing-order-consent resource.
The POST action indicates to the ASPSP that a domestic standing order consent has been staged. At this point, the PSU may not have been identified by the ASPSP, and the request payload may not contain any information of the account that should be debited.
The endpoint allows the PISP to send a copy of the consent (between PSU and PISP) to the ASPSP for the PSU to authorize.
The ASPSP creates the domestic-standing-order-consent resource and responds with a unique ConsentId to refer to the resource.

The default Status is "AwaitingAuthorisation" immediately after the domestic-standing-order-consent has been created.
*/
func (a *Client) CreateDomesticStandingOrderConsent(params *CreateDomesticStandingOrderConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDomesticStandingOrderConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDomesticStandingOrderConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDomesticStandingOrderConsent",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-standing-order-consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDomesticStandingOrderConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDomesticStandingOrderConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDomesticStandingOrderConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFilePaymentConsent creates standing order consent

  The API endpoint allows the PISP to ask an ASPSP to create a new file-payment-consent resource.
The POST action indicates to the ASPSP that a domestic standing order consent has been staged. At this point, the PSU may not have been identified by the ASPSP, and the request payload may not contain any information of the account that should be debited.
The endpoint allows the PISP to send a copy of the consent (between PSU and PISP) to the ASPSP for the PSU to authorize.
The ASPSP creates the file-payment-consent resource and responds with a unique ConsentId to refer to the resource.

The default Status is "AwaitingUpload" immediately after the file-payment-consent has been created.
*/
func (a *Client) CreateFilePaymentConsent(params *CreateFilePaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilePaymentConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilePaymentConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFilePaymentConsent",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/file-payment-consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFilePaymentConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFilePaymentConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFilePaymentConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateFilePaymentConsentFile uploads file for file payment consent

  The endpoint allows the PISP to send a copy of the consent (between PSU and PISP) to the ASPSP for the PSU to authorize. The PISP must upload the file against the ConsentId before redirecting the PSU to authorize the consent.
The file structure must match the FileType in the file-payment-consent request.
An ASPSP must confirm the hash of the file matches with the FileHash provided in the file-payment-consent Metadata.
The metadata for the file-payment-consent must match the contents of the uploaded file:
If the content of the metadata does not match the content of the file, the ASPSP must reject the file-payment-consent.
The file is sent in the HTTP request body.
HTTP headers (e.g. Content-Type) are used to describe the file.

The default Status is "AwaitingAuthorisation" immediately after the file has been created.
*/
func (a *Client) CreateFilePaymentConsentFile(params *CreateFilePaymentConsentFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilePaymentConsentFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilePaymentConsentFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFilePaymentConsentFile",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/file-payment-consents/{consentID}/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFilePaymentConsentFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFilePaymentConsentFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFilePaymentConsentFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateInternationalPaymentConsent creates international payment consent

  The API endpoint allows the PISP to ask an ASPSP to create a new international-payment-consent resource.
The POST action indicates to the ASPSP that a international payment consent has been staged. At this point, the PSU may not have been identified by the ASPSP, and the request payload may not contain any information of the account that should be debited.
The endpoint allows the PISP to send a copy of the consent (between PSU and PISP) to the ASPSP for the PSU to authorize.
The ASPSP creates the international-payment-consent resource and responds with a unique ConsentId to refer to the resource.

The default Status is "AwaitingAuthorisation" immediately after the international-payment-consent has been created.
*/
func (a *Client) CreateInternationalPaymentConsent(params *CreateInternationalPaymentConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInternationalPaymentConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInternationalPaymentConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInternationalPaymentConsent",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-payment-consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInternationalPaymentConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInternationalPaymentConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInternationalPaymentConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateInternationalScheduledPaymentConsentRequest creates international scheduled payment consent

  The API endpoint allows the PISP to ask an ASPSP to create a new international-scheduled-payment-consent resource.
The POST action indicates to the ASPSP that a international scheduled payment consent has been staged. At this point, the PSU may not have been identified by the ASPSP, and the request payload may not contain any information of the account that should be debited.
The endpoint allows the PISP to send a copy of the consent (between PSU and PISP) to the ASPSP for the PSU to authorize.
The ASPSP creates the international-scheduled-payment-consent resource and responds with a unique ConsentId to refer to the resource.
ALPHA_FEATURE
The default Status is "AwaitingAuthorisation" immediately after the international-scheduled-payment-consent has been created.
*/
func (a *Client) CreateInternationalScheduledPaymentConsentRequest(params *CreateInternationalScheduledPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInternationalScheduledPaymentConsentRequestCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInternationalScheduledPaymentConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInternationalScheduledPaymentConsentRequest",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-scheduled-payment-consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInternationalScheduledPaymentConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInternationalScheduledPaymentConsentRequestCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInternationalScheduledPaymentConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateInternationalStandingOrderConsent creates standing order consent

  The API endpoint allows the PISP to ask an ASPSP to create a new international-standing-order-consent resource.
The POST action indicates to the ASPSP that a international standing order consent has been staged. At this point, the PSU may not have been identified by the ASPSP, and the request payload may not contain any information of the account that should be debited.
The endpoint allows the PISP to send a copy of the consent (between PSU and PISP) to the ASPSP for the PSU to authorize.
The ASPSP creates the international-standing-order-consent resource and responds with a unique ConsentId to refer to the resource.

The default Status is "AwaitingAuthorisation" immediately after the international-standing-order-consent has been created.
*/
func (a *Client) CreateInternationalStandingOrderConsent(params *CreateInternationalStandingOrderConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInternationalStandingOrderConsentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInternationalStandingOrderConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInternationalStandingOrderConsent",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-standing-order-consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInternationalStandingOrderConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInternationalStandingOrderConsentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInternationalStandingOrderConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAccountAccessConsentRequest deletes account access consent

  Delete account access consent.
*/
func (a *Client) DeleteAccountAccessConsentRequest(params *DeleteAccountAccessConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountAccessConsentRequestNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountAccessConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccountAccessConsentRequest",
		Method:             "DELETE",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccountAccessConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountAccessConsentRequestNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccountAccessConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccountAccessConsentRequest gets account access consent

  An AISP may optionally retrieve an account-access-consent resource that they have created to check its status.

Prior to calling the API, the AISP must have an access token issued by the ASPSP using a client credentials grant.

The usage of this API endpoint will be subject to an ASPSP's fair usage policies.
*/
func (a *Client) GetAccountAccessConsentRequest(params *GetAccountAccessConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountAccessConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountAccessConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountAccessConsentRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountAccessConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountAccessConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountAccessConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccountAccessConsentSystem gets account access consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetAccountAccessConsentSystem(params *GetAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountAccessConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking/account-access-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccountAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomesticPaymentConsentRequest gets domestic payment consent

  A PISP can optionally retrieve a payment consent resource that they have created to check its status.
*/
func (a *Client) GetDomesticPaymentConsentRequest(params *GetDomesticPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticPaymentConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticPaymentConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticPaymentConsentRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-payment-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticPaymentConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticPaymentConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticPaymentConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomesticPaymentConsentSystem gets domestic payment consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetDomesticPaymentConsentSystem(params *GetDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomesticScheduledPaymentConsentRequest gets domestic scheduled payment consent

  A PISP can optionally retrieve a payment consent resource that they have created to check its status.
Once the PSU authorizes the payment-consent resource, the Status of the payment-consent resource will be updated with "Authorised".
If the PSU rejects the consent or the domestic-scheduled-payment-consent has failed some other ASPSP validation, the Status will be set to "Rejected".
Once a domestic-scheduled-payment has been successfully created using the domestic-scheduled-payment-consent, the Status of the domestic-scheduled-payment-consent will be set to "Consumed".
ALPHA_FEATURE
*/
func (a *Client) GetDomesticScheduledPaymentConsentRequest(params *GetDomesticScheduledPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticScheduledPaymentConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticScheduledPaymentConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticScheduledPaymentConsentRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-scheduled-payment-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticScheduledPaymentConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticScheduledPaymentConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticScheduledPaymentConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomesticScheduledPaymentConsentSystem gets domestic scheduled payment consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetDomesticScheduledPaymentConsentSystem(params *GetDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticScheduledPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-scheduled-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomesticStandingOrderConsentRequest gets domestic payment consent

  A PISP can optionally retrieve a payment consent resource that they have created to check its status.
*/
func (a *Client) GetDomesticStandingOrderConsentRequest(params *GetDomesticStandingOrderConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticStandingOrderConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticStandingOrderConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticStandingOrderConsentRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-standing-order-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticStandingOrderConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticStandingOrderConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticStandingOrderConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDomesticStandingOrderConsentSystem gets domestic standing order consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetDomesticStandingOrderConsentSystem(params *GetDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomesticStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomesticStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomesticStandingOrderConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-standing-order-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomesticStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomesticStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomesticStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePaymentConsentFileRequest gets uploaded file for file payment consent

  The API endpoint allows the PISP to download a file (that had been uploaded against a file-payment-consent resource) from an ASPSP.
*/
func (a *Client) GetFilePaymentConsentFileRequest(params *GetFilePaymentConsentFileRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentConsentFileRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentConsentFileRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilePaymentConsentFileRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/file-payment-consents/{consentID}/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentConsentFileRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentConsentFileRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilePaymentConsentFileRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePaymentConsentRequest gets file payment consent

  A PISP can optionally retrieve a payment consent resource that they have created to check its status.
*/
func (a *Client) GetFilePaymentConsentRequest(params *GetFilePaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilePaymentConsentRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/file-payment-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilePaymentConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilePaymentConsentSystem gets file payment consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetFilePaymentConsentSystem(params *GetFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilePaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilePaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilePaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking/file-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilePaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilePaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilePaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalPaymentConsentRequest gets international payment consent

  A PISP can optionally retrieve a payment consent resource that they have created to check its status.
*/
func (a *Client) GetInternationalPaymentConsentRequest(params *GetInternationalPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalPaymentConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalPaymentConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalPaymentConsentRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-payment-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalPaymentConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalPaymentConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalPaymentConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalPaymentConsentSystem gets international payment consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetInternationalPaymentConsentSystem(params *GetInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking/international-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalScheduledPaymentConsentRequest gets international scheduled payment consent

  A PISP can optionally retrieve a payment consent resource that they have created to check its status.
Once the PSU authorizes the payment-consent resource, the Status of the payment-consent resource will be updated with "Authorised".
If the PSU rejects the consent or the international-scheduled-payment-consent has failed some other ASPSP validation, the Status will be set to "Rejected".
Once a international-scheduled-payment has been successfully created using the international-scheduled-payment-consent, the Status of the international-scheduled-payment-consent will be set to "Consumed".
ALPHA_FEATURE
*/
func (a *Client) GetInternationalScheduledPaymentConsentRequest(params *GetInternationalScheduledPaymentConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalScheduledPaymentConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalScheduledPaymentConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalScheduledPaymentConsentRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-scheduled-payment-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalScheduledPaymentConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalScheduledPaymentConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalScheduledPaymentConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalScheduledPaymentConsentSystem gets international scheduled payment consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetInternationalScheduledPaymentConsentSystem(params *GetInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalScheduledPaymentConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking/international-scheduled-payment-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalStandingOrderConsentRequest gets international payment consent

  A PISP can optionally retrieve a payment consent resource that they have created to check its status.
*/
func (a *Client) GetInternationalStandingOrderConsentRequest(params *GetInternationalStandingOrderConsentRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalStandingOrderConsentRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalStandingOrderConsentRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalStandingOrderConsentRequest",
		Method:             "GET",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-standing-order-consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalStandingOrderConsentRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalStandingOrderConsentRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalStandingOrderConsentRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetInternationalStandingOrderConsentSystem gets international standing order consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetInternationalStandingOrderConsentSystem(params *GetInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInternationalStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInternationalStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInternationalStandingOrderConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking/international-standing-order-consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInternationalStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInternationalStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInternationalStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOBBRConsents gets openbanking brasil consents

  This API returns the list of openbanking brasil consents.
You can narrow the list of returned consents using filters defined in query parameters.
See GetConsentsParams for details.
*/
func (a *Client) GetOBBRConsents(params *GetOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBBRConsents",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOBBRCustomerDataAccessConsentSystem gets customer data access consent

  This API can be used by a custom openbanking consent page.
The consent page must first use client credentials flow to create consent.
*/
func (a *Client) GetOBBRCustomerDataAccessConsentSystem(params *GetOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBBRCustomerDataAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBBRCustomerDataAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBBRCustomerDataAccessConsentSystem",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/consent/{login}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBBRCustomerDataAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBBRCustomerDataAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBBRCustomerDataAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOBConsents gets openbanking consents

  This API returns the list of openbanking consents.
You can narrow the list of returned consents using filters defined in query parameters.
See GetConsentsParams for details.
*/
func (a *Client) GetOBConsents(params *GetOBConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOBConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOBConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOBConsents",
		Method:             "GET",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOBConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOBConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOBConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListOBBRConsents lists openbanking brasil consents

  This API returns the list of openbanking brasil consents.
You can narrow the list of returned consents using filters defined in request body.
See ListConsentsParams for details.
*/
func (a *Client) ListOBBRConsents(params *ListOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOBBRConsents",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListOBConsents lists openbanking consents

  This API returns the list of openbanking consents.
You can narrow the list of returned consents using filters defined in request body.
See ListConsentsParams for details.
*/
func (a *Client) ListOBConsents(params *ListOBConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListOBConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOBConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOBConsents",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListOBConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOBConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOBConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ObbrDataAccessConsentIntrospect introspects openbanking brasil data access consent

  Introspect openbanking brasil data access consent
*/
func (a *Client) ObbrDataAccessConsentIntrospect(params *ObbrDataAccessConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrDataAccessConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrDataAccessConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrDataAccessConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/consents/v1/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrDataAccessConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrDataAccessConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrDataAccessConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ObbrPaymentConsentIntrospect introspects openbanking brasil payment consent

  This endpoint takes an OAuth 2.0 token and, in addition to returning
meta information surrounding the token, returns the payment consent and
associated account ids.
*/
func (a *Client) ObbrPaymentConsentIntrospect(params *ObbrPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ObbrPaymentConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObbrPaymentConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "obbrPaymentConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking-brasil/open-banking/payments/v1/consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ObbrPaymentConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObbrPaymentConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obbrPaymentConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenbankingAccountAccessConsentIntrospect introspects openbanking account access consent

  Introspect openbanking account access consent.
*/
func (a *Client) OpenbankingAccountAccessConsentIntrospect(params *OpenbankingAccountAccessConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingAccountAccessConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenbankingAccountAccessConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openbankingAccountAccessConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/aisp/account-access-consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenbankingAccountAccessConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenbankingAccountAccessConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openbankingAccountAccessConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenbankingDomesticPaymentConsentIntrospect introspects openbanking domestic payment consent

  Introspect openbanking domestic payment consent.
*/
func (a *Client) OpenbankingDomesticPaymentConsentIntrospect(params *OpenbankingDomesticPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingDomesticPaymentConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenbankingDomesticPaymentConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openbankingDomesticPaymentConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-payment-consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenbankingDomesticPaymentConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenbankingDomesticPaymentConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openbankingDomesticPaymentConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenbankingDomesticScheduledPaymentConsentIntrospect introspects openbanking domestic scheduled payment consent

  Introspect openbanking domestic scheduled payment consent.
*/
func (a *Client) OpenbankingDomesticScheduledPaymentConsentIntrospect(params *OpenbankingDomesticScheduledPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingDomesticScheduledPaymentConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenbankingDomesticScheduledPaymentConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openbankingDomesticScheduledPaymentConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-scheduled-payment-consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenbankingDomesticScheduledPaymentConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenbankingDomesticScheduledPaymentConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openbankingDomesticScheduledPaymentConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenbankingDomesticStandingOrderConsentIntrospect Introspect openbanking domestic standing order consent
*/
func (a *Client) OpenbankingDomesticStandingOrderConsentIntrospect(params *OpenbankingDomesticStandingOrderConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingDomesticStandingOrderConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenbankingDomesticStandingOrderConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openbankingDomesticStandingOrderConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/domestic-standing-order-consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenbankingDomesticStandingOrderConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenbankingDomesticStandingOrderConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openbankingDomesticStandingOrderConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenbankingFilePaymentConsentIntrospect Introspect openbanking file payment consent
*/
func (a *Client) OpenbankingFilePaymentConsentIntrospect(params *OpenbankingFilePaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingFilePaymentConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenbankingFilePaymentConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openbankingFilePaymentConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/file-payment-consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenbankingFilePaymentConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenbankingFilePaymentConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openbankingFilePaymentConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenbankingInternationalPaymentConsentIntrospect introspects openbanking international payment consent

  Introspect openbanking international payment consent.
*/
func (a *Client) OpenbankingInternationalPaymentConsentIntrospect(params *OpenbankingInternationalPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingInternationalPaymentConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenbankingInternationalPaymentConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openbankingInternationalPaymentConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-payment-consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenbankingInternationalPaymentConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenbankingInternationalPaymentConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openbankingInternationalPaymentConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenbankingInternationalScheduledPaymentConsentIntrospect Introspect openbanking international scheduled payment consent
*/
func (a *Client) OpenbankingInternationalScheduledPaymentConsentIntrospect(params *OpenbankingInternationalScheduledPaymentConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingInternationalScheduledPaymentConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenbankingInternationalScheduledPaymentConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openbankingInternationalScheduledPaymentConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-scheduled-payment-consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenbankingInternationalScheduledPaymentConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenbankingInternationalScheduledPaymentConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openbankingInternationalScheduledPaymentConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OpenbankingInternationalStandingOrderConsentIntrospect Introspect openbanking international standing order consent
*/
func (a *Client) OpenbankingInternationalStandingOrderConsentIntrospect(params *OpenbankingInternationalStandingOrderConsentIntrospectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OpenbankingInternationalStandingOrderConsentIntrospectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenbankingInternationalStandingOrderConsentIntrospectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "openbankingInternationalStandingOrderConsentIntrospect",
		Method:             "POST",
		PathPattern:        "/{tid}/{aid}/open-banking/v3.1/pisp/international-standing-order-consents/introspect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OpenbankingInternationalStandingOrderConsentIntrospectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenbankingInternationalStandingOrderConsentIntrospectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for openbankingInternationalStandingOrderConsentIntrospect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectAccountAccessConsentSystem rejects consent

  This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectAccountAccessConsentSystem(params *RejectAccountAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectAccountAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectAccountAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectAccountAccessConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/account-access-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectAccountAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectAccountAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectAccountAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectDomesticPaymentConsentSystem rejects consent

  This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectDomesticPaymentConsentSystem(params *RejectDomesticPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectDomesticPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectDomesticPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectDomesticPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectDomesticPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectDomesticPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectDomesticScheduledPaymentConsentSystem rejects consent

  This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectDomesticScheduledPaymentConsentSystem(params *RejectDomesticScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectDomesticScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectDomesticScheduledPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-scheduled-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectDomesticScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectDomesticScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectDomesticScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectDomesticStandingOrderConsentSystem rejects consent

  This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectDomesticStandingOrderConsentSystem(params *RejectDomesticStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectDomesticStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectDomesticStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectDomesticStandingOrderConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/domestic-standing-order-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectDomesticStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectDomesticStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectDomesticStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectFilePaymentConsentSystem rejects consent

  This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectFilePaymentConsentSystem(params *RejectFilePaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectFilePaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectFilePaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectFilePaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/file-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectFilePaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectFilePaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectFilePaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectInternationalPaymentConsentSystem rejects consent

  This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectInternationalPaymentConsentSystem(params *RejectInternationalPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectInternationalPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectInternationalPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/international-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectInternationalPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectInternationalPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectInternationalPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectInternationalScheduledPaymentConsentSystem rejects consent

  This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectInternationalScheduledPaymentConsentSystem(params *RejectInternationalScheduledPaymentConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalScheduledPaymentConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectInternationalScheduledPaymentConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectInternationalScheduledPaymentConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/international-scheduled-payment-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectInternationalScheduledPaymentConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectInternationalScheduledPaymentConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectInternationalScheduledPaymentConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectInternationalStandingOrderConsentSystem rejects consent

  This API can be used to notify ACP that user rejected access.
*/
func (a *Client) RejectInternationalStandingOrderConsentSystem(params *RejectInternationalStandingOrderConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectInternationalStandingOrderConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectInternationalStandingOrderConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectInternationalStandingOrderConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking/international-standing-order-consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectInternationalStandingOrderConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectInternationalStandingOrderConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectInternationalStandingOrderConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectOBBRCustomerDataAccessConsentSystem rejects consent

  This API can be used by a custom openbanking consent page to notify ACP that user rejected access.
*/
func (a *Client) RejectOBBRCustomerDataAccessConsentSystem(params *RejectOBBRCustomerDataAccessConsentSystemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectOBBRCustomerDataAccessConsentSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectOBBRCustomerDataAccessConsentSystemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectOBBRCustomerDataAccessConsentSystem",
		Method:             "POST",
		PathPattern:        "/api/system/{tid}/open-banking-brasil/consent/{login}/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectOBBRCustomerDataAccessConsentSystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectOBBRCustomerDataAccessConsentSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectOBBRCustomerDataAccessConsentSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeOBBRConsents revokes openbanking brasil consents

  This API revokes openbanking consents matching provided parameters.

Currently supporting removal by client id.
Use ?client_id={clientID} to remove all consents by a given client.

You can also optionally specify which consent should be removed by specifying consent type
example: ?client_id={clientID}&consent_type=account_access
*/
func (a *Client) RevokeOBBRConsents(params *RevokeOBBRConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOBBRConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOBBRConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOBBRConsents",
		Method:             "DELETE",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking-brasil/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeOBBRConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOBBRConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOBBRConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeOpenbankingConsent revokes openbanking consent by ID

  This API revokes openbanking consent by consent id.
*/
func (a *Client) RevokeOpenbankingConsent(params *RevokeOpenbankingConsentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOpenbankingConsentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOpenbankingConsentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOpenbankingConsent",
		Method:             "DELETE",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking/consents/{consentID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeOpenbankingConsentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOpenbankingConsentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOpenbankingConsent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokeOpenbankingConsents revokes openbanking consents

  This API revokes openbanking consents matching provided parameters.

Currently supporting removal by client id.
Use ?client_id={clientID} to remove all consents by a given client.

You can also optionally specify which consent should be removed by specifying consent type
example: ?client_id={clientID}&consent_type=account_access
*/
func (a *Client) RevokeOpenbankingConsents(params *RevokeOpenbankingConsentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeOpenbankingConsentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeOpenbankingConsentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeOpenbankingConsents",
		Method:             "DELETE",
		PathPattern:        "/api/system/{tid}/servers/{aid}/open-banking/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokeOpenbankingConsentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeOpenbankingConsentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeOpenbankingConsents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
