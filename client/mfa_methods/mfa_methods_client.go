// Code generated by go-swagger; DO NOT EDIT.

package mfa_methods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new mfa methods API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for mfa methods API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMFAMethod(params *CreateMFAMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMFAMethodCreated, error)

	DeleteMFAMethod(params *DeleteMFAMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMFAMethodNoContent, error)

	GetMFAMethod(params *GetMFAMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMFAMethodOK, error)

	ListMFAMethods(params *ListMFAMethodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMFAMethodsOK, error)

	UpdateMFAMethod(params *UpdateMFAMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMFAMethodOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMFAMethod creates m f a method

  Create MFA method.
*/
func (a *Client) CreateMFAMethod(params *CreateMFAMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMFAMethodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMFAMethodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMFAMethod",
		Method:             "POST",
		PathPattern:        "/api/admin/{tid}/mfa-methods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMFAMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMFAMethodCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMFAMethod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMFAMethod deletes m f a method

  Delete MFA method.
*/
func (a *Client) DeleteMFAMethod(params *DeleteMFAMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMFAMethodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMFAMethodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMFAMethod",
		Method:             "DELETE",
		PathPattern:        "/api/admin/{tid}/mfa-methods/{mfaID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMFAMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMFAMethodNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMFAMethod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMFAMethod gets m f a method

  Get MFA method.
*/
func (a *Client) GetMFAMethod(params *GetMFAMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMFAMethodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMFAMethodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMFAMethod",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/mfa-methods/{mfaID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMFAMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMFAMethodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMFAMethod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMFAMethods lists m f a methods

  List MFA methods.
*/
func (a *Client) ListMFAMethods(params *ListMFAMethodsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListMFAMethodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMFAMethodsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listMFAMethods",
		Method:             "GET",
		PathPattern:        "/api/admin/{tid}/mfa-methods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMFAMethodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMFAMethodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listMFAMethods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMFAMethod updates mfa method

  Update mfaMethod.
*/
func (a *Client) UpdateMFAMethod(params *UpdateMFAMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMFAMethodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMFAMethodParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMFAMethod",
		Method:             "PUT",
		PathPattern:        "/api/admin/{tid}/mfa-methods/{mfaID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMFAMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMFAMethodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMFAMethod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
