// Code generated by go-swagger; DO NOT EDIT.

package idps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// UpdateGithubEmbeddedIDPReader is a Reader for the UpdateGithubEmbeddedIDP structure.
type UpdateGithubEmbeddedIDPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGithubEmbeddedIDPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGithubEmbeddedIDPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateGithubEmbeddedIDPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateGithubEmbeddedIDPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGithubEmbeddedIDPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGithubEmbeddedIDPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateGithubEmbeddedIDPUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateGithubEmbeddedIDPOK creates a UpdateGithubEmbeddedIDPOK with default headers values
func NewUpdateGithubEmbeddedIDPOK() *UpdateGithubEmbeddedIDPOK {
	return &UpdateGithubEmbeddedIDPOK{}
}

/* UpdateGithubEmbeddedIDPOK describes a response with status code 200, with default header values.

GithubEmbeddedIDP
*/
type UpdateGithubEmbeddedIDPOK struct {
	Payload *models.GithubEmbeddedIDP
}

func (o *UpdateGithubEmbeddedIDPOK) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/idps/github_embedded/{iid}][%d] updateGithubEmbeddedIdPOK  %+v", 200, o.Payload)
}
func (o *UpdateGithubEmbeddedIDPOK) GetPayload() *models.GithubEmbeddedIDP {
	return o.Payload
}

func (o *UpdateGithubEmbeddedIDPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GithubEmbeddedIDP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGithubEmbeddedIDPBadRequest creates a UpdateGithubEmbeddedIDPBadRequest with default headers values
func NewUpdateGithubEmbeddedIDPBadRequest() *UpdateGithubEmbeddedIDPBadRequest {
	return &UpdateGithubEmbeddedIDPBadRequest{}
}

/* UpdateGithubEmbeddedIDPBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type UpdateGithubEmbeddedIDPBadRequest struct {
	Payload *models.Error
}

func (o *UpdateGithubEmbeddedIDPBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/idps/github_embedded/{iid}][%d] updateGithubEmbeddedIdPBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateGithubEmbeddedIDPBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGithubEmbeddedIDPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGithubEmbeddedIDPUnauthorized creates a UpdateGithubEmbeddedIDPUnauthorized with default headers values
func NewUpdateGithubEmbeddedIDPUnauthorized() *UpdateGithubEmbeddedIDPUnauthorized {
	return &UpdateGithubEmbeddedIDPUnauthorized{}
}

/* UpdateGithubEmbeddedIDPUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type UpdateGithubEmbeddedIDPUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateGithubEmbeddedIDPUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/idps/github_embedded/{iid}][%d] updateGithubEmbeddedIdPUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateGithubEmbeddedIDPUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGithubEmbeddedIDPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGithubEmbeddedIDPForbidden creates a UpdateGithubEmbeddedIDPForbidden with default headers values
func NewUpdateGithubEmbeddedIDPForbidden() *UpdateGithubEmbeddedIDPForbidden {
	return &UpdateGithubEmbeddedIDPForbidden{}
}

/* UpdateGithubEmbeddedIDPForbidden describes a response with status code 403, with default header values.

HttpError
*/
type UpdateGithubEmbeddedIDPForbidden struct {
	Payload *models.Error
}

func (o *UpdateGithubEmbeddedIDPForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/idps/github_embedded/{iid}][%d] updateGithubEmbeddedIdPForbidden  %+v", 403, o.Payload)
}
func (o *UpdateGithubEmbeddedIDPForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGithubEmbeddedIDPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGithubEmbeddedIDPNotFound creates a UpdateGithubEmbeddedIDPNotFound with default headers values
func NewUpdateGithubEmbeddedIDPNotFound() *UpdateGithubEmbeddedIDPNotFound {
	return &UpdateGithubEmbeddedIDPNotFound{}
}

/* UpdateGithubEmbeddedIDPNotFound describes a response with status code 404, with default header values.

HttpError
*/
type UpdateGithubEmbeddedIDPNotFound struct {
	Payload *models.Error
}

func (o *UpdateGithubEmbeddedIDPNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/idps/github_embedded/{iid}][%d] updateGithubEmbeddedIdPNotFound  %+v", 404, o.Payload)
}
func (o *UpdateGithubEmbeddedIDPNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGithubEmbeddedIDPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGithubEmbeddedIDPUnprocessableEntity creates a UpdateGithubEmbeddedIDPUnprocessableEntity with default headers values
func NewUpdateGithubEmbeddedIDPUnprocessableEntity() *UpdateGithubEmbeddedIDPUnprocessableEntity {
	return &UpdateGithubEmbeddedIDPUnprocessableEntity{}
}

/* UpdateGithubEmbeddedIDPUnprocessableEntity describes a response with status code 422, with default header values.

HttpError
*/
type UpdateGithubEmbeddedIDPUnprocessableEntity struct {
	Payload *models.Error
}

func (o *UpdateGithubEmbeddedIDPUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/admin/{tid}/servers/{aid}/idps/github_embedded/{iid}][%d] updateGithubEmbeddedIdPUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *UpdateGithubEmbeddedIDPUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateGithubEmbeddedIDPUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
