// Code generated by go-swagger; DO NOT EDIT.

package backchannel_authentications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// AcceptBackchannelAuthenticationRequestReader is a Reader for the AcceptBackchannelAuthenticationRequest structure.
type AcceptBackchannelAuthenticationRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptBackchannelAuthenticationRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptBackchannelAuthenticationRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAcceptBackchannelAuthenticationRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAcceptBackchannelAuthenticationRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAcceptBackchannelAuthenticationRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAcceptBackchannelAuthenticationRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAcceptBackchannelAuthenticationRequestOK creates a AcceptBackchannelAuthenticationRequestOK with default headers values
func NewAcceptBackchannelAuthenticationRequestOK() *AcceptBackchannelAuthenticationRequestOK {
	return &AcceptBackchannelAuthenticationRequestOK{}
}

/* AcceptBackchannelAuthenticationRequestOK describes a response with status code 200, with default header values.

authentication accepted
*/
type AcceptBackchannelAuthenticationRequestOK struct {
}

func (o *AcceptBackchannelAuthenticationRequestOK) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/accept][%d] acceptBackchannelAuthenticationRequestOK ", 200)
}

func (o *AcceptBackchannelAuthenticationRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAcceptBackchannelAuthenticationRequestBadRequest creates a AcceptBackchannelAuthenticationRequestBadRequest with default headers values
func NewAcceptBackchannelAuthenticationRequestBadRequest() *AcceptBackchannelAuthenticationRequestBadRequest {
	return &AcceptBackchannelAuthenticationRequestBadRequest{}
}

/* AcceptBackchannelAuthenticationRequestBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type AcceptBackchannelAuthenticationRequestBadRequest struct {
	Payload *models.Error
}

func (o *AcceptBackchannelAuthenticationRequestBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/accept][%d] acceptBackchannelAuthenticationRequestBadRequest  %+v", 400, o.Payload)
}
func (o *AcceptBackchannelAuthenticationRequestBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptBackchannelAuthenticationRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptBackchannelAuthenticationRequestUnauthorized creates a AcceptBackchannelAuthenticationRequestUnauthorized with default headers values
func NewAcceptBackchannelAuthenticationRequestUnauthorized() *AcceptBackchannelAuthenticationRequestUnauthorized {
	return &AcceptBackchannelAuthenticationRequestUnauthorized{}
}

/* AcceptBackchannelAuthenticationRequestUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type AcceptBackchannelAuthenticationRequestUnauthorized struct {
	Payload *models.Error
}

func (o *AcceptBackchannelAuthenticationRequestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/accept][%d] acceptBackchannelAuthenticationRequestUnauthorized  %+v", 401, o.Payload)
}
func (o *AcceptBackchannelAuthenticationRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptBackchannelAuthenticationRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptBackchannelAuthenticationRequestForbidden creates a AcceptBackchannelAuthenticationRequestForbidden with default headers values
func NewAcceptBackchannelAuthenticationRequestForbidden() *AcceptBackchannelAuthenticationRequestForbidden {
	return &AcceptBackchannelAuthenticationRequestForbidden{}
}

/* AcceptBackchannelAuthenticationRequestForbidden describes a response with status code 403, with default header values.

HttpError
*/
type AcceptBackchannelAuthenticationRequestForbidden struct {
	Payload *models.Error
}

func (o *AcceptBackchannelAuthenticationRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/accept][%d] acceptBackchannelAuthenticationRequestForbidden  %+v", 403, o.Payload)
}
func (o *AcceptBackchannelAuthenticationRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptBackchannelAuthenticationRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptBackchannelAuthenticationRequestNotFound creates a AcceptBackchannelAuthenticationRequestNotFound with default headers values
func NewAcceptBackchannelAuthenticationRequestNotFound() *AcceptBackchannelAuthenticationRequestNotFound {
	return &AcceptBackchannelAuthenticationRequestNotFound{}
}

/* AcceptBackchannelAuthenticationRequestNotFound describes a response with status code 404, with default header values.

HttpError
*/
type AcceptBackchannelAuthenticationRequestNotFound struct {
	Payload *models.Error
}

func (o *AcceptBackchannelAuthenticationRequestNotFound) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/accept][%d] acceptBackchannelAuthenticationRequestNotFound  %+v", 404, o.Payload)
}
func (o *AcceptBackchannelAuthenticationRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *AcceptBackchannelAuthenticationRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
