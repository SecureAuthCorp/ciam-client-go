// Code generated by go-swagger; DO NOT EDIT.

package backchannel_authentications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// RejectBackchannelAuthenticationRequestReader is a Reader for the RejectBackchannelAuthenticationRequest structure.
type RejectBackchannelAuthenticationRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RejectBackchannelAuthenticationRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRejectBackchannelAuthenticationRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRejectBackchannelAuthenticationRequestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRejectBackchannelAuthenticationRequestUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRejectBackchannelAuthenticationRequestForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRejectBackchannelAuthenticationRequestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRejectBackchannelAuthenticationRequestOK creates a RejectBackchannelAuthenticationRequestOK with default headers values
func NewRejectBackchannelAuthenticationRequestOK() *RejectBackchannelAuthenticationRequestOK {
	return &RejectBackchannelAuthenticationRequestOK{}
}

/* RejectBackchannelAuthenticationRequestOK describes a response with status code 200, with default header values.

authentication rejected
*/
type RejectBackchannelAuthenticationRequestOK struct {
}

func (o *RejectBackchannelAuthenticationRequestOK) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/reject][%d] rejectBackchannelAuthenticationRequestOK ", 200)
}

func (o *RejectBackchannelAuthenticationRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRejectBackchannelAuthenticationRequestBadRequest creates a RejectBackchannelAuthenticationRequestBadRequest with default headers values
func NewRejectBackchannelAuthenticationRequestBadRequest() *RejectBackchannelAuthenticationRequestBadRequest {
	return &RejectBackchannelAuthenticationRequestBadRequest{}
}

/* RejectBackchannelAuthenticationRequestBadRequest describes a response with status code 400, with default header values.

HttpError
*/
type RejectBackchannelAuthenticationRequestBadRequest struct {
	Payload *models.Error
}

func (o *RejectBackchannelAuthenticationRequestBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/reject][%d] rejectBackchannelAuthenticationRequestBadRequest  %+v", 400, o.Payload)
}
func (o *RejectBackchannelAuthenticationRequestBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectBackchannelAuthenticationRequestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectBackchannelAuthenticationRequestUnauthorized creates a RejectBackchannelAuthenticationRequestUnauthorized with default headers values
func NewRejectBackchannelAuthenticationRequestUnauthorized() *RejectBackchannelAuthenticationRequestUnauthorized {
	return &RejectBackchannelAuthenticationRequestUnauthorized{}
}

/* RejectBackchannelAuthenticationRequestUnauthorized describes a response with status code 401, with default header values.

HttpError
*/
type RejectBackchannelAuthenticationRequestUnauthorized struct {
	Payload *models.Error
}

func (o *RejectBackchannelAuthenticationRequestUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/reject][%d] rejectBackchannelAuthenticationRequestUnauthorized  %+v", 401, o.Payload)
}
func (o *RejectBackchannelAuthenticationRequestUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectBackchannelAuthenticationRequestUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectBackchannelAuthenticationRequestForbidden creates a RejectBackchannelAuthenticationRequestForbidden with default headers values
func NewRejectBackchannelAuthenticationRequestForbidden() *RejectBackchannelAuthenticationRequestForbidden {
	return &RejectBackchannelAuthenticationRequestForbidden{}
}

/* RejectBackchannelAuthenticationRequestForbidden describes a response with status code 403, with default header values.

HttpError
*/
type RejectBackchannelAuthenticationRequestForbidden struct {
	Payload *models.Error
}

func (o *RejectBackchannelAuthenticationRequestForbidden) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/reject][%d] rejectBackchannelAuthenticationRequestForbidden  %+v", 403, o.Payload)
}
func (o *RejectBackchannelAuthenticationRequestForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectBackchannelAuthenticationRequestForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRejectBackchannelAuthenticationRequestNotFound creates a RejectBackchannelAuthenticationRequestNotFound with default headers values
func NewRejectBackchannelAuthenticationRequestNotFound() *RejectBackchannelAuthenticationRequestNotFound {
	return &RejectBackchannelAuthenticationRequestNotFound{}
}

/* RejectBackchannelAuthenticationRequestNotFound describes a response with status code 404, with default header values.

HttpError
*/
type RejectBackchannelAuthenticationRequestNotFound struct {
	Payload *models.Error
}

func (o *RejectBackchannelAuthenticationRequestNotFound) Error() string {
	return fmt.Sprintf("[POST /api/system/{tid}/backchannel/authentications/{authReqID}/reject][%d] rejectBackchannelAuthenticationRequestNotFound  %+v", 404, o.Payload)
}
func (o *RejectBackchannelAuthenticationRequestNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RejectBackchannelAuthenticationRequestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
