// Code generated by go-swagger; DO NOT EDIT.

package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cloudentity/acp-client-go/models"
)

// NewPatchConsentGrantsSystemParams creates a new PatchConsentGrantsSystemParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchConsentGrantsSystemParams() *PatchConsentGrantsSystemParams {
	return &PatchConsentGrantsSystemParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchConsentGrantsSystemParamsWithTimeout creates a new PatchConsentGrantsSystemParams object
// with the ability to set a timeout on a request.
func NewPatchConsentGrantsSystemParamsWithTimeout(timeout time.Duration) *PatchConsentGrantsSystemParams {
	return &PatchConsentGrantsSystemParams{
		timeout: timeout,
	}
}

// NewPatchConsentGrantsSystemParamsWithContext creates a new PatchConsentGrantsSystemParams object
// with the ability to set a context for a request.
func NewPatchConsentGrantsSystemParamsWithContext(ctx context.Context) *PatchConsentGrantsSystemParams {
	return &PatchConsentGrantsSystemParams{
		Context: ctx,
	}
}

// NewPatchConsentGrantsSystemParamsWithHTTPClient creates a new PatchConsentGrantsSystemParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchConsentGrantsSystemParamsWithHTTPClient(client *http.Client) *PatchConsentGrantsSystemParams {
	return &PatchConsentGrantsSystemParams{
		HTTPClient: client,
	}
}

/* PatchConsentGrantsSystemParams contains all the parameters to send to the API endpoint
   for the patch consent grants system operation.

   Typically these are written to a http.Request.
*/
type PatchConsentGrantsSystemParams struct {

	// ConsentGrantPatchRequest.
	ConsentGrantPatchRequest *models.ConsentGrantPatchRequest

	/* Tid.

	   Tenant id

	   Default: "default"
	*/
	Tid string

	/* XSubject.

	   user identifier
	*/
	XSubject *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch consent grants system params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchConsentGrantsSystemParams) WithDefaults() *PatchConsentGrantsSystemParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch consent grants system params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchConsentGrantsSystemParams) SetDefaults() {
	var (
		tidDefault = string("default")
	)

	val := PatchConsentGrantsSystemParams{
		Tid: tidDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) WithTimeout(timeout time.Duration) *PatchConsentGrantsSystemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) WithContext(ctx context.Context) *PatchConsentGrantsSystemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) WithHTTPClient(client *http.Client) *PatchConsentGrantsSystemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConsentGrantPatchRequest adds the consentGrantPatchRequest to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) WithConsentGrantPatchRequest(consentGrantPatchRequest *models.ConsentGrantPatchRequest) *PatchConsentGrantsSystemParams {
	o.SetConsentGrantPatchRequest(consentGrantPatchRequest)
	return o
}

// SetConsentGrantPatchRequest adds the consentGrantPatchRequest to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) SetConsentGrantPatchRequest(consentGrantPatchRequest *models.ConsentGrantPatchRequest) {
	o.ConsentGrantPatchRequest = consentGrantPatchRequest
}

// WithTid adds the tid to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) WithTid(tid string) *PatchConsentGrantsSystemParams {
	o.SetTid(tid)
	return o
}

// SetTid adds the tid to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) SetTid(tid string) {
	o.Tid = tid
}

// WithXSubject adds the xSubject to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) WithXSubject(xSubject *string) *PatchConsentGrantsSystemParams {
	o.SetXSubject(xSubject)
	return o
}

// SetXSubject adds the xSubject to the patch consent grants system params
func (o *PatchConsentGrantsSystemParams) SetXSubject(xSubject *string) {
	o.XSubject = xSubject
}

// WriteToRequest writes these params to a swagger request
func (o *PatchConsentGrantsSystemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.ConsentGrantPatchRequest != nil {
		if err := r.SetBodyParam(o.ConsentGrantPatchRequest); err != nil {
			return err
		}
	}

	// path param tid
	if err := r.SetPathParam("tid", o.Tid); err != nil {
		return err
	}

	if o.XSubject != nil {

		// header param x-subject
		if err := r.SetHeaderParam("x-subject", *o.XSubject); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
